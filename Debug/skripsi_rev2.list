
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b600  0800b600  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b600  0800b600  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b600  0800b600  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200001e8  0800b7f0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  0800b7f0  00021540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ca  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c006  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a16e  00000000  00000000  0005985e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f52  00000000  00000000  000739cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010691e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006964  00000000  00000000  00106970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b268 	.word	0x0800b268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b268 	.word	0x0800b268

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	69b9      	ldr	r1, [r7, #24]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	1a8a      	subs	r2, r1, r2
 800018a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1acb      	subs	r3, r1, r3
 8000194:	fbb2 f2f3 	udiv	r2, r2, r3
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4413      	add	r3, r2
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <delay_us>:

void delay_us(uint32_t us) {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <delay_us+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8f9      	bhi.n	80001ba <delay_us+0x12>
		;
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200002b0 	.word	0x200002b0

080001d8 <modeSoftStart>:

void modeSoftStart() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	if (sign == -1) {
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <modeSoftStart+0x7c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001e4:	d10e      	bne.n	8000204 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <modeSoftStart+0x80>)
 80001e8:	f003 fe68 	bl	8003ebc <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 ffab 	bl	8001148 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f2:	2006      	movs	r0, #6
 80001f4:	f001 f8e3 	bl	80013be <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f001 f8e0 	bl	80013be <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80001fe:	2008      	movs	r0, #8
 8000200:	f001 f8dd 	bl	80013be <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <modeSoftStart+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d120      	bne.n	800024e <modeSoftStart+0x76>
		sign = 0;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <modeSoftStart+0x7c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000212:	2006      	movs	r0, #6
 8000214:	f001 f8e1 	bl	80013da <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000218:	2007      	movs	r0, #7
 800021a:	f001 f8de 	bl	80013da <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800021e:	2008      	movs	r0, #8
 8000220:	f001 f8db 	bl	80013da <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <modeSoftStart+0x80>)
 8000226:	f003 fe9b 	bl	8003f60 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <modeSoftStart+0x88>)
 8000232:	f001 fa88 	bl	8001746 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <modeSoftStart+0x88>)
 800023e:	f001 fa82 	bl	8001746 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <modeSoftStart+0x88>)
 800024a:	f001 fa7c 	bl	8001746 <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	200002f8 	.word	0x200002f8
 800025c:	20000210 	.word	0x20000210
 8000260:	40010c00 	.word	0x40010c00

08000264 <modeDOL>:

void modeDOL(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <modeDOL+0x34>)
 8000270:	f001 fa69 	bl	8001746 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <modeDOL+0x34>)
 800027c:	f001 fa63 	bl	8001746 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <modeDOL+0x34>)
 8000288:	f001 fa5d 	bl	8001746 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f000 ff5b 	bl	8001148 <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <EXTI_Stop>:

void EXTI_Stop(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002a0:	2006      	movs	r0, #6
 80002a2:	f001 f89a 	bl	80013da <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f001 f897 	bl	80013da <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f001 f894 	bl	80013da <HAL_NVIC_DisableIRQ>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002bc:	f000 fee2 	bl	8001084 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c0:	f000 f866 	bl	8000390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c4:	f000 f9b4 	bl	8000630 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_I2C1_Init>
	MX_TIM1_Init();
 80002cc:	f000 f8e8 	bl	80004a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80002d0:	f000 f984 	bl	80005dc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002d4:	f000 f934 	bl	8000540 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002d8:	f008 fbe0 	bl	8008a9c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 80002dc:	f7ff ffde 	bl	800029c <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 80002e0:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0xbc>)
 80002e2:	f003 fda1 	bl	8003e28 <HAL_TIM_Base_Start>
	counter = time * 100;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2264      	movs	r2, #100	; 0x64
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0xc4>)
 80002f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <main+0x5a>
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0xcc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d105      	bne.n	8000312 <main+0x5a>
			modeDOL();
 8000306:	f7ff ffad 	bl	8000264 <modeDOL>
			HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 ff1c 	bl	8001148 <HAL_Delay>
 8000310:	e02e      	b.n	8000370 <main+0xb8>
		}

		else if (mode == 2 && flag == 1) {
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d109      	bne.n	800032e <main+0x76>
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x76>
			modeSoftStart();
 8000322:	f7ff ff59 	bl	80001d8 <modeSoftStart>
			HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 ff0e 	bl	8001148 <HAL_Delay>
 800032c:	e020      	b.n	8000370 <main+0xb8>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xd0>)
 8000336:	f001 fa06 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xd0>)
 8000342:	f001 fa00 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xd0>)
 800034e:	f001 f9fa 	bl	8001746 <HAL_GPIO_WritePin>
			sign = -1;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0xd4>)
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0xc0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0xc4>)
 8000368:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 feec 	bl	8001148 <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000370:	e7c1      	b.n	80002f6 <main+0x3e>
 8000372:	bf00      	nop
 8000374:	200002b0 	.word	0x200002b0
 8000378:	20000004 	.word	0x20000004
 800037c:	20000210 	.word	0x20000210
 8000380:	20000254 	.word	0x20000254
 8000384:	20000258 	.word	0x20000258
 8000388:	40010c00 	.word	0x40010c00
 800038c:	20000000 	.word	0x20000000

08000390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 f862 	bl	8009468 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fffe 	bl	80033e8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
		Error_Handler();
 80003f2:	f000 faeb 	bl	80009cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fa6a 	bl	80038ec <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
		Error_Handler();
 800041e:	f000 fad5 	bl	80009cc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fbf5 	bl	8003c1c <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
		Error_Handler();
 8000438:	f000 fac8 	bl	80009cc <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 f9a9 	bl	80017d8 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800048c:	f000 fa9e 	bl	80009cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000025c 	.word	0x2000025c
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_TIM1_Init+0x98>)
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x98>)
 80004c4:	2247      	movs	r2, #71	; 0x47
 80004c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_TIM1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ea:	f003 fc4d 	bl	8003d88 <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80004f4:	f000 fa6a 	bl	80009cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM1_Init+0x98>)
 8000506:	f003 fe61 	bl	80041cc <HAL_TIM_ConfigClockSource>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000510:	f000 fa5c 	bl	80009cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x98>)
 8000522:	f004 f833 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800052c:	f000 fa4e 	bl	80009cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002b0 	.word	0x200002b0
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000566:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800056a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f003 fbfe 	bl	8003d88 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000592:	f000 fa1b 	bl	80009cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f003 fe12 	bl	80041cc <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80005ae:	f000 fa0d 	bl	80009cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f003 ffe4 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005ca:	f000 f9ff 	bl	80009cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002f8 	.word	0x200002f8

080005dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f004 f82a 	bl	800466c <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 f9d5 	bl	80009cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000340 	.word	0x20000340
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x118>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MX_GPIO_Init+0x118>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x118>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x118>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x118>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x118>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_GPIO_Init+0x118>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_GPIO_Init+0x118>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0x118>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0x118>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0x118>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0x118>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_GPIO_Init+0x11c>)
 80006ac:	f001 f84b 	bl	8001746 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x120>)
 80006b8:	f001 f845 	bl	8001746 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0x11c>)
 80006d6:	f000 fe9b 	bl	8001410 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80006da:	2307      	movs	r3, #7
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ee:	f000 fe8f 	bl	8001410 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0x120>)
 800070c:	f000 fe80 	bl	8001410 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2006      	movs	r0, #6
 8000716:	f000 fe36 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 fe4f 	bl	80013be <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2007      	movs	r0, #7
 8000726:	f000 fe2e 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800072a:	2007      	movs	r0, #7
 800072c:	f000 fe47 	bl	80013be <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fe26 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800073a:	2008      	movs	r0, #8
 800073c:	f000 fe3f 	bl	80013be <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10110000 	.word	0x10110000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]
	counter = counter - 10;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b0a      	subs	r3, #10
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076c:	6013      	str	r3, [r2, #0]
	delay1 = delay2 = delay3 = MAP(counter, 0, time * 100, 200, 2800);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	23c8      	movs	r3, #200	; 0xc8
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fcf2 	bl	8000170 <MAP>
 800078c:	4603      	mov	r3, r0
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007a0:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007a8:	f000 ffe5 	bl	8001776 <HAL_GPIO_TogglePin>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000210 	.word	0x20000210
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000020c 	.word	0x2000020c
 80007c0:	20000208 	.word	0x20000208
 80007c4:	20000204 	.word	0x20000204
 80007c8:	40011000 	.word	0x40011000

080007cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d14a      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0xa6>

		delay_us(delay1);
 80007dc:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fce1 	bl	80001a8 <delay_us>
		if (delay1 < 2800) {
 80007e6:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80007ee:	d205      	bcs.n	80007fc <HAL_GPIO_EXTI_Callback+0x30>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4870      	ldr	r0, [pc, #448]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80007f8:	f000 ffa5 	bl	8001746 <HAL_GPIO_WritePin>

		}
		if (delay2 + delay1 < 5600) {
 80007fc:	4b6f      	ldr	r3, [pc, #444]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b6c      	ldr	r3, [pc, #432]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800080a:	d205      	bcs.n	8000818 <HAL_GPIO_EXTI_Callback+0x4c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000812:	4869      	ldr	r0, [pc, #420]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000814:	f000 ff97 	bl	8001746 <HAL_GPIO_WritePin>

		}
		if (delay3 + delay1 + delay2 <= 8400) {
 8000818:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b65      	ldr	r3, [pc, #404]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	441a      	add	r2, r3
 8000822:	4b66      	ldr	r3, [pc, #408]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800082c:	4293      	cmp	r3, r2
 800082e:	d805      	bhi.n	800083c <HAL_GPIO_EXTI_Callback+0x70>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000836:	4860      	ldr	r0, [pc, #384]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000838:	f000 ff85 	bl	8001746 <HAL_GPIO_WritePin>

		}
		if (counter > 0) {
 800083c:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	f000 80b3 	beq.w	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
			delay_us(50);
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f7ff fcae 	bl	80001a8 <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4859      	ldr	r0, [pc, #356]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000854:	f000 ff77 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	4856      	ldr	r0, [pc, #344]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000860:	f000 ff71 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086a:	4853      	ldr	r0, [pc, #332]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800086c:	f000 ff6b 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}
 8000870:	e09c      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d149      	bne.n	800090c <HAL_GPIO_EXTI_Callback+0x140>
		delay_us(delay2);
 8000878:	4b50      	ldr	r3, [pc, #320]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fc93 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 <= 8400) {
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	441a      	add	r2, r3
 800088c:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4413      	add	r3, r2
 8000892:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000896:	4293      	cmp	r3, r2
 8000898:	d805      	bhi.n	80008a6 <HAL_GPIO_EXTI_Callback+0xda>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4845      	ldr	r0, [pc, #276]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008a2:	f000 ff50 	bl	8001746 <HAL_GPIO_WritePin>
		if (delay2 < 2800) {
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80008ae:	d205      	bcs.n	80008bc <HAL_GPIO_EXTI_Callback+0xf0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b6:	4840      	ldr	r0, [pc, #256]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008b8:	f000 ff45 	bl	8001746 <HAL_GPIO_WritePin>
		if (delay3 + delay2 < 5600) {
 80008bc:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 80008ca:	d205      	bcs.n	80008d8 <HAL_GPIO_EXTI_Callback+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d2:	4839      	ldr	r0, [pc, #228]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008d4:	f000 ff37 	bl	8001746 <HAL_GPIO_WritePin>
		if (counter > 0) {
 80008d8:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d065      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
			delay_us(50);
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fc61 	bl	80001a8 <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ec:	4832      	ldr	r0, [pc, #200]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008ee:	f000 ff2a 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f8:	482f      	ldr	r0, [pc, #188]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008fa:	f000 ff24 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000904:	482c      	ldr	r0, [pc, #176]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000906:	f000 ff1e 	bl	8001746 <HAL_GPIO_WritePin>
}
 800090a:	e04f      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 800090c:	2104      	movs	r1, #4
 800090e:	482e      	ldr	r0, [pc, #184]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000910:	f000 ff02 	bl	8001718 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d048      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
		delay_us(delay3);
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc42 	bl	80001a8 <delay_us>
		if (delay1 + delay3 < 5600) {
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4413      	add	r3, r2
 800092e:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 8000932:	d205      	bcs.n	8000940 <HAL_GPIO_EXTI_Callback+0x174>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800093c:	f000 ff03 	bl	8001746 <HAL_GPIO_WritePin>
		if (delay2 + delay3 + delay2 <= 8400) {
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	441a      	add	r2, r3
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000954:	4293      	cmp	r3, r2
 8000956:	d805      	bhi.n	8000964 <HAL_GPIO_EXTI_Callback+0x198>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000960:	f000 fef1 	bl	8001746 <HAL_GPIO_WritePin>
		if (delay3 < 2800) {
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800096c:	d205      	bcs.n	800097a <HAL_GPIO_EXTI_Callback+0x1ae>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000976:	f000 fee6 	bl	8001746 <HAL_GPIO_WritePin>
		if (counter > 0) {
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d014      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x1e0>
			delay_us(50);
 8000982:	2032      	movs	r0, #50	; 0x32
 8000984:	f7ff fc10 	bl	80001a8 <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000990:	f000 fed9 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800099c:	f000 fed3 	bl	8001746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80009a8:	f000 fecd 	bl	8001746 <HAL_GPIO_WritePin>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000204 	.word	0x20000204
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	20000208 	.word	0x20000208
 80009c0:	2000020c 	.word	0x2000020c
 80009c4:	20000210 	.word	0x20000210
 80009c8:	40011000 	.word	0x40011000

080009cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_MspInit+0x5c>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_MspInit+0x5c>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6193      	str	r3, [r2, #24]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_MspInit+0x5c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x5c>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_MspInit+0x5c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x5c>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_MspInit+0x60>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_MspInit+0x60>)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010000 	.word	0x40010000

08000a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_I2C_MspInit+0x70>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d123      	bne.n	8000aa4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a74:	23c0      	movs	r3, #192	; 0xc0
 8000a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a88:	f000 fcc2 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a96:	61d3      	str	r3, [r2, #28]
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010c00 	.word	0x40010c00

08000ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <HAL_TIM_Base_MspInit+0x68>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10c      	bne.n	8000ae4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ae2:	e018      	b.n	8000b16 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aec:	d113      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x6c>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	201c      	movs	r0, #28
 8000b0c:	f000 fc3b 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b10:	201c      	movs	r0, #28
 8000b12:	f000 fc54 	bl	80013be <HAL_NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d131      	bne.n	8000bac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <HAL_UART_MspInit+0x94>)
 8000b8e:	f000 fc3f 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_MspInit+0x94>)
 8000ba8:	f000 fc32 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c06:	f000 fa83 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fdc8 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f000 fdc1 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c2e:	2004      	movs	r0, #4
 8000c30:	f000 fdba 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c3e:	f001 f840 	bl	8001cc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20001024 	.word	0x20001024

08000c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM2_IRQHandler+0x10>)
 8000c52:	f003 f9b3 	bl	8003fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200002f8 	.word	0x200002f8

08000c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	return 1;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <_kill>:

int _kill(int pid, int sig)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c78:	f008 fbbe 	bl	80093f8 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2216      	movs	r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
	return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_exit>:

void _exit (int status)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c96:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffe7 	bl	8000c6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ca0:	e7fe      	b.n	8000ca0 <_exit+0x12>

08000ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e00a      	b.n	8000cca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf0      	blt.n	8000cb4 <_read+0x12>
	}

return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e009      	b.n	8000d02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf1      	blt.n	8000cee <_write+0x12>
	}
	return len;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_close>:

int _close(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <_isatty>:

int _isatty(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f008 fb28 	bl	80093f8 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20005000 	.word	0x20005000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000384 	.word	0x20000384
 8000ddc:	20001540 	.word	0x20001540

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000dec:	b40f      	push	{r0, r1, r2, r3}
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b0c2      	sub	sp, #264	; 0x108
 8000df2:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000df4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000df8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e02:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e06:	21fe      	movs	r1, #254	; 0xfe
 8000e08:	f008 fc2e 	bl	8009668 <vsniprintf>
 8000e0c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	dd0c      	ble.n	8000e32 <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e1c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e1e:	bfa8      	it	ge
 8000e20:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 ff05 	bl	8008c3c <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000e32:	bf00      	nop
 8000e34:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e3e:	b004      	add	sp, #16
 8000e40:	4770      	bx	lr
	...

08000e44 <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0c4      	sub	sp, #272	; 0x110
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e52:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e62:	4962      	ldr	r1, [pc, #392]	; (8000fec <terminal_proses+0x1a8>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	f008 fb77 	bl	8009558 <strtok>
 8000e6a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000e6e:	e012      	b.n	8000e96 <terminal_proses+0x52>
		argv[argc++] = p2;
 8000e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000e7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e7e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000e82:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000e8a:	4958      	ldr	r1, [pc, #352]	; (8000fec <terminal_proses+0x1a8>)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f008 fb63 	bl	8009558 <strtok>
 8000e92:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <terminal_proses+0x62>
 8000e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea4:	dde4      	ble.n	8000e70 <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000eae:	4850      	ldr	r0, [pc, #320]	; (8000ff0 <terminal_proses+0x1ac>)
 8000eb0:	f7ff ff9c 	bl	8000dec <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000eb4:	e094      	b.n	8000fe0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	494c      	ldr	r1, [pc, #304]	; (8000ff4 <terminal_proses+0x1b0>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f942 	bl	800014c <strcmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <terminal_proses+0x1b4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4849      	ldr	r0, [pc, #292]	; (8000ffc <terminal_proses+0x1b8>)
 8000ed6:	f7ff ff89 	bl	8000dec <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <terminal_proses+0x1bc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4848      	ldr	r0, [pc, #288]	; (8001004 <terminal_proses+0x1c0>)
 8000ee2:	f7ff ff83 	bl	8000dec <command_printf>
}
 8000ee6:	e07b      	b.n	8000fe0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000ee8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4945      	ldr	r1, [pc, #276]	; (8001008 <terminal_proses+0x1c4>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f929 	bl	800014c <strcmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10c      	bne.n	8000f1a <terminal_proses+0xd6>
		flag = 0;
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <terminal_proses+0x1c8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4840      	ldr	r0, [pc, #256]	; (8001010 <terminal_proses+0x1cc>)
 8000f0e:	f000 fc1a 	bl	8001746 <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000f12:	4840      	ldr	r0, [pc, #256]	; (8001014 <terminal_proses+0x1d0>)
 8000f14:	f7ff ff6a 	bl	8000dec <command_printf>
}
 8000f18:	e062      	b.n	8000fe0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000f1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	493c      	ldr	r1, [pc, #240]	; (8001018 <terminal_proses+0x1d4>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f910 	bl	800014c <strcmp>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10c      	bne.n	8000f4c <terminal_proses+0x108>
		flag = 1;
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <terminal_proses+0x1c8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4834      	ldr	r0, [pc, #208]	; (8001010 <terminal_proses+0x1cc>)
 8000f40:	f000 fc01 	bl	8001746 <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8000f44:	4835      	ldr	r0, [pc, #212]	; (800101c <terminal_proses+0x1d8>)
 8000f46:	f7ff ff51 	bl	8000dec <command_printf>
}
 8000f4a:	e049      	b.n	8000fe0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8000f4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4932      	ldr	r1, [pc, #200]	; (8001020 <terminal_proses+0x1dc>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f8f7 	bl	800014c <strcmp>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11d      	bne.n	8000fa0 <terminal_proses+0x15c>
		if (argc == 2) {
 8000f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d109      	bne.n	8000f80 <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8000f6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <terminal_proses+0x1b4>)
 8000f78:	492a      	ldr	r1, [pc, #168]	; (8001024 <terminal_proses+0x1e0>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 fa7c 	bl	8009478 <siscanf>
		if (mode == 1) {
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <terminal_proses+0x1b4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d103      	bne.n	8000f90 <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8000f88:	4827      	ldr	r0, [pc, #156]	; (8001028 <terminal_proses+0x1e4>)
 8000f8a:	f7ff ff2f 	bl	8000dec <command_printf>
}
 8000f8e:	e027      	b.n	8000fe0 <terminal_proses+0x19c>
		} else if (mode == 2) {
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <terminal_proses+0x1b4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <terminal_proses+0x1e8>)
 8000f9a:	f7ff ff27 	bl	8000dec <command_printf>
}
 8000f9e:	e01f      	b.n	8000fe0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 8000fa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4921      	ldr	r1, [pc, #132]	; (8001030 <terminal_proses+0x1ec>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f8cd 	bl	800014c <strcmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d113      	bne.n	8000fe0 <terminal_proses+0x19c>
		if (argc == 2) {
 8000fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d10f      	bne.n	8000fe0 <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 8000fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <terminal_proses+0x1bc>)
 8000fcc:	4915      	ldr	r1, [pc, #84]	; (8001024 <terminal_proses+0x1e0>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f008 fa52 	bl	8009478 <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <terminal_proses+0x1bc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4816      	ldr	r0, [pc, #88]	; (8001034 <terminal_proses+0x1f0>)
 8000fdc:	f7ff ff06 	bl	8000dec <command_printf>
}
 8000fe0:	bf00      	nop
 8000fe2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	0800b280 	.word	0x0800b280
 8000ff0:	0800b284 	.word	0x0800b284
 8000ff4:	0800b298 	.word	0x0800b298
 8000ff8:	20000254 	.word	0x20000254
 8000ffc:	0800b2a0 	.word	0x0800b2a0
 8001000:	20000004 	.word	0x20000004
 8001004:	0800b2ac 	.word	0x0800b2ac
 8001008:	0800b2b8 	.word	0x0800b2b8
 800100c:	20000258 	.word	0x20000258
 8001010:	40011000 	.word	0x40011000
 8001014:	0800b2bc 	.word	0x0800b2bc
 8001018:	0800b2c4 	.word	0x0800b2c4
 800101c:	0800b2c8 	.word	0x0800b2c8
 8001020:	0800b2cc 	.word	0x0800b2cc
 8001024:	0800b2d4 	.word	0x0800b2d4
 8001028:	0800b2d8 	.word	0x0800b2d8
 800102c:	0800b2e4 	.word	0x0800b2e4
 8001030:	0800b2f8 	.word	0x0800b2f8
 8001034:	0800b304 	.word	0x0800b304

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800105e:	f7ff febf 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f008 f9cf 	bl	8009404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff f927 	bl	80002b8 <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001074:	0800b608 	.word	0x0800b608
  ldr r2, =_sbss
 8001078:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800107c:	20001540 	.word	0x20001540

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x28>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f96b 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fc9a 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f991 	bl	80013f6 <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f94b 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000008 	.word	0x20000008
 8001108:	20000010 	.word	0x20000010
 800110c:	2000000c 	.word	0x2000000c

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000010 	.word	0x20000010
 8001130:	20000388 	.word	0x20000388

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000388 	.word	0x20000388

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000010 	.word	0x20000010

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4906      	ldr	r1, [pc, #24]	; (8001228 <__NVIC_EnableIRQ+0x34>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db12      	blt.n	8001264 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	490a      	ldr	r1, [pc, #40]	; (8001270 <__NVIC_DisableIRQ+0x44>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	3320      	adds	r3, #32
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001258:	f3bf 8f4f 	dsb	sy
}
 800125c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125e:	f3bf 8f6f 	isb	sy
}
 8001262:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff90 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff09 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff1e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff11 	bl	80011f4 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff1f 	bl	800122c <__NVIC_DisableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff94 	bl	800132c <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e169      	b.n	80016f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001424:	2201      	movs	r2, #1
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8158 	bne.w	80016f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a9a      	ldr	r2, [pc, #616]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d05e      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d875      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001452:	4a98      	ldr	r2, [pc, #608]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d058      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001458:	4a96      	ldr	r2, [pc, #600]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d86f      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800145e:	4a96      	ldr	r2, [pc, #600]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d052      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001464:	4a94      	ldr	r2, [pc, #592]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d869      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800146a:	4a94      	ldr	r2, [pc, #592]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04c      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d863      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001476:	4a92      	ldr	r2, [pc, #584]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d046      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800147c:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d85d      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d82a      	bhi.n	80014dc <HAL_GPIO_Init+0xcc>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d859      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_GPIO_Init+0x80>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800150b 	.word	0x0800150b
 8001494:	080014e5 	.word	0x080014e5
 8001498:	080014f7 	.word	0x080014f7
 800149c:	08001539 	.word	0x08001539
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	0800153f 	.word	0x0800153f
 80014a8:	0800153f 	.word	0x0800153f
 80014ac:	0800153f 	.word	0x0800153f
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	0800153f 	.word	0x0800153f
 80014b8:	0800153f 	.word	0x0800153f
 80014bc:	0800153f 	.word	0x0800153f
 80014c0:	0800153f 	.word	0x0800153f
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800153f 	.word	0x0800153f
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	08001501 	.word	0x08001501
 80014dc:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <HAL_GPIO_Init+0x2b4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e029      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e024      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01f      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e01a      	b.n	8001540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e013      	b.n	8001540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e009      	b.n	8001540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e003      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x130>
          break;
 800153e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d801      	bhi.n	800154a <HAL_GPIO_Init+0x13a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e001      	b.n	800154e <HAL_GPIO_Init+0x13e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d802      	bhi.n	800155c <HAL_GPIO_Init+0x14c>
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x152>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3b08      	subs	r3, #8
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	210f      	movs	r1, #15
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80b1 	beq.w	80016f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001590:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_GPIO_Init+0x1ec>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <HAL_GPIO_Init+0x2c4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00d      	beq.n	80015f8 <HAL_GPIO_Init+0x1e8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <HAL_GPIO_Init+0x2c8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_GPIO_Init+0x1e4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <HAL_GPIO_Init+0x2cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_GPIO_Init+0x1e0>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e006      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015fc:	2300      	movs	r3, #0
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160e:	492f      	ldr	r1, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	492c      	ldr	r1, [pc, #176]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4928      	ldr	r1, [pc, #160]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	491e      	ldr	r1, [pc, #120]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4914      	ldr	r1, [pc, #80]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001690:	4013      	ands	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d021      	beq.n	80016e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
 80016ac:	e021      	b.n	80016f2 <HAL_GPIO_Init+0x2e2>
 80016ae:	bf00      	nop
 80016b0:	10320000 	.word	0x10320000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4909      	ldr	r1, [pc, #36]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3301      	adds	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f ae8e 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	372c      	adds	r7, #44	; 0x2c
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e001      	b.n	800173a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001756:	787b      	ldrb	r3, [r7, #1]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001762:	e003      	b.n	800176c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43d9      	mvns	r1, r3
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	400b      	ands	r3, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f800 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e12b      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff f91c 	bl	8000a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	; 0x24
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800183a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800183c:	f002 f9a8 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8001840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a81      	ldr	r2, [pc, #516]	; (8001a4c <HAL_I2C_Init+0x274>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d807      	bhi.n	800185c <HAL_I2C_Init+0x84>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <HAL_I2C_Init+0x278>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e006      	b.n	800186a <HAL_I2C_Init+0x92>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_I2C_Init+0x27c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0e7      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a78      	ldr	r2, [pc, #480]	; (8001a58 <HAL_I2C_Init+0x280>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d802      	bhi.n	80018ac <HAL_I2C_Init+0xd4>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	e009      	b.n	80018c0 <HAL_I2C_Init+0xe8>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_I2C_Init+0x284>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	3301      	adds	r3, #1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	495c      	ldr	r1, [pc, #368]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018dc:	428b      	cmp	r3, r1
 80018de:	d819      	bhi.n	8001914 <HAL_I2C_Init+0x13c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e59      	subs	r1, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018f4:	400b      	ands	r3, r1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <HAL_I2C_Init+0x138>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1e59      	subs	r1, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fbb1 f3f3 	udiv	r3, r1, r3
 8001908:	3301      	adds	r3, #1
 800190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190e:	e051      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001910:	2304      	movs	r3, #4
 8001912:	e04f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <HAL_I2C_Init+0x168>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e012      	b.n	8001966 <HAL_I2C_Init+0x18e>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	0099      	lsls	r1, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x196>
 800196a:	2301      	movs	r3, #1
 800196c:	e022      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_I2C_Init+0x1bc>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e58      	subs	r0, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	440b      	add	r3, r1
 8001984:	fbb0 f3f3 	udiv	r3, r0, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	0099      	lsls	r1, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6911      	ldr	r1, [r2, #16]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	000186a0 	.word	0x000186a0
 8001a50:	001e847f 	.word	0x001e847f
 8001a54:	003d08ff 	.word	0x003d08ff
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b08b      	sub	sp, #44	; 0x2c
 8001a64:	af06      	add	r7, sp, #24
 8001a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0fd      	b.n	8001c6e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f007 fa0c 	bl	8008ea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fee9 	bl	8004870 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	687e      	ldr	r6, [r7, #4]
 8001aa6:	466d      	mov	r5, sp
 8001aa8:	f106 0410 	add.w	r4, r6, #16
 8001aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	602b      	str	r3, [r5, #0]
 8001ab4:	1d33      	adds	r3, r6, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f002 feb3 	bl	8004824 <USB_CoreInit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0ce      	b.n	8001c6e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fee4 	bl	80048a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e04c      	b.n	8001b7c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	3301      	adds	r3, #1
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	b298      	uxth	r0, r3
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3336      	adds	r3, #54	; 0x36
 8001b20:	4602      	mov	r2, r0
 8001b22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3303      	adds	r3, #3
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3338      	adds	r3, #56	; 0x38
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	333c      	adds	r3, #60	; 0x3c
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3340      	adds	r3, #64	; 0x40
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3ad      	bcc.n	8001ae2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e044      	b.n	8001c16 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3b5      	bcc.n	8001b8c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	687e      	ldr	r6, [r7, #4]
 8001c28:	466d      	mov	r5, sp
 8001c2a:	f106 0410 	add.w	r4, r6, #16
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	1d33      	adds	r3, r6, #4
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	6838      	ldr	r0, [r7, #0]
 8001c3c:	f002 fe3e 	bl	80048bc <USB_DevInit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00d      	b.n	8001c6e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 faf0 	bl	800724c <USB_DevDisconnect>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_PCD_Start+0x16>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e016      	b.n	8001cba <HAL_PCD_Start+0x44>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fdd3 	bl	8004844 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f007 fb72 	bl	800938a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 fac4 	bl	8007238 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 fac6 	bl	8007260 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fb5f 	bl	80023a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fab8 	bl	8007260 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d112      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f007 f940 	bl	8008f9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f923 	bl	8001f68 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fa9a 	bl	8007260 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d36:	d10b      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 fa83 	bl	8007260 <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d64:	d10b      	bne.n	8001d7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 fa6c 	bl	8007260 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d92:	d126      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	b292      	uxth	r2, r2
 8001da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0208 	bic.w	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f007 f921 	bl	800900c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 fa3a 	bl	8007260 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df6:	f040 8082 	bne.w	8001efe <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	e010      	b.n	8001e22 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	b292      	uxth	r2, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	3320      	adds	r3, #32
 8001e16:	443b      	add	r3, r7
 8001e18:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	77fb      	strb	r3, [r7, #31]
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	d9eb      	bls.n	8001e00 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e58:	bf00      	nop
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f6      	beq.n	8001e5a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	e00f      	b.n	8001eaa <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4611      	mov	r1, r2
 8001e92:	7ffa      	ldrb	r2, [r7, #31]
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	440a      	add	r2, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	3320      	adds	r3, #32
 8001e9c:	443b      	add	r3, r7
 8001e9e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ea2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	d9ec      	bls.n	8001e8a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0208 	orr.w	r2, r2, #8
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eda:	b292      	uxth	r2, r2
 8001edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0204 	orr.w	r2, r2, #4
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 f86d 	bl	8008fd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 f9ac 	bl	8007260 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f12:	d10e      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f26:	b292      	uxth	r2, r2
 8001f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f007 f826 	bl	8008f7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 f992 	bl	8007260 <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f46:	d10b      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_PCD_SetAddress+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e013      	b.n	8001faa <HAL_PCD_SetAddress+0x42>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f005 f939 	bl	8007212 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	4608      	mov	r0, r1
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	70fb      	strb	r3, [r7, #3]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	803b      	strh	r3, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da0e      	bge.n	8001ff6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
 8001ff4:	e00e      	b.n	8002014 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0207 	and.w	r2, r3, #7
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002020:	883a      	ldrh	r2, [r7, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	78ba      	ldrb	r2, [r7, #2]
 800202a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d102      	bne.n	800204a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_PCD_EP_Open+0xa6>
 8002054:	2302      	movs	r3, #2
 8002056:	e00e      	b.n	8002076 <HAL_PCD_EP_Open+0xc4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fc48 	bl	80048fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002074:	7afb      	ldrb	r3, [r7, #11]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0e      	bge.n	80020b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	705a      	strb	r2, [r3, #1]
 80020ae:	e00e      	b.n	80020ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0207 	and.w	r2, r3, #7
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_EP_Close+0x6a>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_Close+0x88>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 ff6a 	bl	8004fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	460b      	mov	r3, r1
 800211c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 0207 	and.w	r2, r3, #7
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2da      	uxtb	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6979      	ldr	r1, [r7, #20]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 f91c 	bl	80053a8 <USB_EPStartXfer>
 8002170:	e005      	b.n	800217e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6979      	ldr	r1, [r7, #20]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 f915 	bl	80053a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	460b      	mov	r3, r1
 80021c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2201      	movs	r2, #1
 8002200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	b2da      	uxtb	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6979      	ldr	r1, [r7, #20]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 f8c2 	bl	80053a8 <USB_EPStartXfer>
 8002224:	e005      	b.n	8002232 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f8bb 	bl	80053a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d901      	bls.n	800225a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e04c      	b.n	80022f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800225a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da0e      	bge.n	8002280 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	705a      	strb	r2, [r3, #1]
 800227e:	e00c      	b.n	800229a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_PCD_EP_SetStall+0x7e>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e01c      	b.n	80022f4 <HAL_PCD_EP_SetStall+0xb8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fea5 	bl	8007018 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f004 ffca 	bl	800727e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d901      	bls.n	800231a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e040      	b.n	800239c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800231a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da0e      	bge.n	8002340 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
 800233e:	e00e      	b.n	800235e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0207 	and.w	r2, r3, #7
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PCD_EP_ClrStall+0x82>
 800237a:	2302      	movs	r3, #2
 800237c:	e00e      	b.n	800239c <HAL_PCD_EP_ClrStall+0xa0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fe93 	bl	80070b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023ac:	e2ec      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8161 	bne.w	8002690 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d152      	bne.n	800247e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	81fb      	strh	r3, [r7, #14]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3328      	adds	r3, #40	; 0x28
 8002400:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	3302      	adds	r3, #2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	441a      	add	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800243c:	2100      	movs	r1, #0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f006 fd83 	bl	8008f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 829b 	beq.w	8002988 <PCD_EP_ISR_Handler+0x5e4>
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 8296 	bne.w	8002988 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002468:	b2da      	uxtb	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b292      	uxth	r2, r2
 8002470:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800247c:	e284      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800248e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d034      	beq.n	8002502 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	3306      	adds	r3, #6
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f004 ff21 	bl	800731e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024e8:	4013      	ands	r3, r2
 80024ea:	823b      	strh	r3, [r7, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	8a3a      	ldrh	r2, [r7, #16]
 80024f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f6:	b292      	uxth	r2, r2
 80024f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f006 fcf8 	bl	8008ef0 <HAL_PCD_SetupStageCallback>
 8002500:	e242      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002502:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002506:	2b00      	cmp	r3, #0
 8002508:	f280 823e 	bge.w	8002988 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002518:	4013      	ands	r3, r2
 800251a:	83bb      	strh	r3, [r7, #28]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	8bba      	ldrh	r2, [r7, #28]
 8002522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002526:	b292      	uxth	r2, r2
 8002528:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	3306      	adds	r3, #6
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <PCD_EP_ISR_Handler+0x1ee>
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d015      	beq.n	8002592 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	6959      	ldr	r1, [r3, #20]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002576:	b29b      	uxth	r3, r3
 8002578:	f004 fed1 	bl	800731e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	441a      	add	r2, r3
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800258a:	2100      	movs	r1, #0
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f006 fcc1 	bl	8008f14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 81f2 	bne.w	8002988 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d112      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x24e>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e02f      	b.n	8002652 <PCD_EP_ISR_Handler+0x2ae>
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b3e      	cmp	r3, #62	; 0x3e
 80025f8:	d813      	bhi.n	8002622 <PCD_EP_ISR_Handler+0x27e>
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <PCD_EP_ISR_Handler+0x270>
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	3301      	adds	r3, #1
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	b29b      	uxth	r3, r3
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	b29a      	uxth	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	e017      	b.n	8002652 <PCD_EP_ISR_Handler+0x2ae>
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <PCD_EP_ISR_Handler+0x298>
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	3b01      	subs	r3, #1
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	b29b      	uxth	r3, r3
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	b29b      	uxth	r3, r3
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	827b      	strh	r3, [r7, #18]
 8002664:	8a7b      	ldrh	r3, [r7, #18]
 8002666:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800266a:	827b      	strh	r3, [r7, #18]
 800266c:	8a7b      	ldrh	r3, [r7, #18]
 800266e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002672:	827b      	strh	r3, [r7, #18]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	8a7b      	ldrh	r3, [r7, #18]
 800267a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268a:	b29b      	uxth	r3, r3
 800268c:	8013      	strh	r3, [r2, #0]
 800268e:	e17b      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f280 80ea 	bge.w	8002880 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026c2:	4013      	ands	r3, r2
 80026c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026da:	b292      	uxth	r2, r2
 80026dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d122      	bne.n	8002742 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	3306      	adds	r3, #6
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8087 	beq.w	800283c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	6959      	ldr	r1, [r3, #20]
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	88da      	ldrh	r2, [r3, #6]
 800273a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273c:	f004 fdef 	bl	800731e <USB_ReadPMA>
 8002740:	e07c      	b.n	800283c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	78db      	ldrb	r3, [r3, #3]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d108      	bne.n	800275c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800274a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800274c:	461a      	mov	r2, r3
 800274e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f927 	bl	80029a4 <HAL_PCD_EP_DB_Receive>
 8002756:	4603      	mov	r3, r0
 8002758:	86fb      	strh	r3, [r7, #54]	; 0x36
 800275a:	e06f      	b.n	800283c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	847b      	strh	r3, [r7, #34]	; 0x22
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d021      	beq.n	80027fa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	3302      	adds	r3, #2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027de:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02a      	beq.n	800283c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	6959      	ldr	r1, [r3, #20]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	891a      	ldrh	r2, [r3, #8]
 80027f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027f4:	f004 fd93 	bl	800731e <USB_ReadPMA>
 80027f8:	e020      	b.n	800283c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	3306      	adds	r3, #6
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002824:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6959      	ldr	r1, [r3, #20]
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	895a      	ldrh	r2, [r3, #10]
 8002836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002838:	f004 fd71 	bl	800731e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002842:	441a      	add	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284e:	441a      	add	r2, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <PCD_EP_ISR_Handler+0x4c2>
 800285c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d206      	bcs.n	8002874 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fb51 	bl	8008f14 <HAL_PCD_DataOutStageCallback>
 8002872:	e005      	b.n	8002880 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fd94 	bl	80053a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002880:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	2b00      	cmp	r3, #0
 8002888:	d07e      	beq.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800288a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	843b      	strh	r3, [r7, #32]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	8c3b      	ldrh	r3, [r7, #32]
 80028ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	78db      	ldrb	r3, [r3, #3]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d00c      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x554>
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d146      	bne.n	800297c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d141      	bne.n	800297c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	3302      	adds	r3, #2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	8bfb      	ldrh	r3, [r7, #30]
 8002928:	429a      	cmp	r2, r3
 800292a:	d906      	bls.n	800293a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	8bfb      	ldrh	r3, [r7, #30]
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	e002      	b.n	8002940 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f006 fafb 	bl	8008f4a <HAL_PCD_DataInStageCallback>
 8002954:	e018      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	8bfb      	ldrh	r3, [r7, #30]
 800295c:	441a      	add	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	8bfb      	ldrh	r3, [r7, #30]
 8002968:	441a      	add	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fd17 	bl	80053a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800297a:	e005      	b.n	8002988 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800297c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800297e:	461a      	mov	r2, r3
 8002980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f91b 	bl	8002bbe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002990:	b29b      	uxth	r3, r3
 8002992:	b21b      	sxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	f6ff ad0a 	blt.w	80023ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3738      	adds	r7, #56	; 0x38
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d07e      	beq.n	8002aba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	3302      	adds	r3, #2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	8b7b      	ldrh	r3, [r7, #26]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d306      	bcc.n	80029fe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	8b7b      	ldrh	r3, [r7, #26]
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	619a      	str	r2, [r3, #24]
 80029fc:	e002      	b.n	8002a04 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d123      	bne.n	8002a54 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	833b      	strh	r3, [r7, #24]
 8002a28:	8b3b      	ldrh	r3, [r7, #24]
 8002a2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a2e:	833b      	strh	r3, [r7, #24]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	8b3b      	ldrh	r3, [r7, #24]
 8002a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01f      	beq.n	8002a9e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	82fb      	strh	r3, [r7, #22]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8087 	beq.w	8002bb4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6959      	ldr	r1, [r3, #20]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	891a      	ldrh	r2, [r3, #8]
 8002ab2:	8b7b      	ldrh	r3, [r7, #26]
 8002ab4:	f004 fc33 	bl	800731e <USB_ReadPMA>
 8002ab8:	e07c      	b.n	8002bb4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	3306      	adds	r3, #6
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	8b7b      	ldrh	r3, [r7, #26]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d306      	bcc.n	8002afc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	8b7b      	ldrh	r3, [r7, #26]
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	619a      	str	r2, [r3, #24]
 8002afa:	e002      	b.n	8002b02 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d123      	bne.n	8002b52 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	83fb      	strh	r3, [r7, #30]
 8002b26:	8bfb      	ldrh	r3, [r7, #30]
 8002b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b2c:	83fb      	strh	r3, [r7, #30]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	8bfb      	ldrh	r3, [r7, #30]
 8002b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11f      	bne.n	8002b9c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	83bb      	strh	r3, [r7, #28]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	8bbb      	ldrh	r3, [r7, #28]
 8002b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6959      	ldr	r1, [r3, #20]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	895a      	ldrh	r2, [r3, #10]
 8002bae:	8b7b      	ldrh	r3, [r7, #26]
 8002bb0:	f004 fbb5 	bl	800731e <USB_ReadPMA>
    }
  }

  return count;
 8002bb4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b0a2      	sub	sp, #136	; 0x88
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 81c7 	beq.w	8002f66 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	3302      	adds	r3, #2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d907      	bls.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e002      	b.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80b9 	bne.w	8002da2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d126      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	4413      	add	r3, r2
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	011a      	lsls	r2, r3, #4
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	4413      	add	r3, r2
 8002c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	e01a      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d116      	bne.n	8002cbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	4413      	add	r3, r2
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	011a      	lsls	r2, r3, #4
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	4413      	add	r3, r2
 8002cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	2200      	movs	r2, #0
 8002cba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d126      	bne.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	011a      	lsls	r2, r3, #4
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e017      	b.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d113      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	4413      	add	r3, r2
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	011a      	lsls	r2, r3, #4
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2200      	movs	r2, #0
 8002d46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f006 f8fb 	bl	8008f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 82d4 	beq.w	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	827b      	strh	r3, [r7, #18]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	8013      	strh	r3, [r2, #0]
 8002da0:	e2b2      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d021      	beq.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	f040 8286 	bne.w	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e04:	441a      	add	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e12:	441a      	add	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d309      	bcc.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	1ad2      	subs	r2, r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	621a      	str	r2, [r3, #32]
 8002e36:	e015      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e4e:	e009      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d155      	bne.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	4413      	add	r3, r2
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
 8002e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d112      	bne.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x302>
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	e047      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ec4:	d811      	bhi.n	8002eea <HAL_PCD_EP_DB_Transmit+0x32c>
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_PCD_EP_DB_Transmit+0x31e>
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed8:	3301      	adds	r3, #1
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	e032      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x392>
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x342>
 8002efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efc:	3b01      	subs	r3, #1
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e01b      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d117      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	643b      	str	r3, [r7, #64]	; 0x40
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f34:	4413      	add	r3, r2
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	011a      	lsls	r2, r3, #4
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6959      	ldr	r1, [r3, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	891a      	ldrh	r2, [r3, #8]
 8002f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f004 f998 	bl	8007294 <USB_WritePMA>
 8002f64:	e1d0      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3306      	adds	r3, #6
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d307      	bcc.n	8002fae <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	e002      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 80c4 	bne.w	8003146 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d126      	bne.n	8003014 <HAL_PCD_EP_DB_Transmit+0x456>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fda:	4413      	add	r3, r2
 8002fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	011a      	lsls	r2, r3, #4
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300c:	b29a      	uxth	r2, r3
 800300e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e01a      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d116      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x48c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	677b      	str	r3, [r7, #116]	; 0x74
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003030:	4413      	add	r3, r2
 8003032:	677b      	str	r3, [r7, #116]	; 0x74
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	011a      	lsls	r2, r3, #4
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	4413      	add	r3, r2
 800303e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003042:	673b      	str	r3, [r7, #112]	; 0x70
 8003044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12f      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003070:	4413      	add	r3, r2
 8003072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	011a      	lsls	r2, r3, #4
 800307c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003080:	4413      	add	r3, r2
 8003082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800308a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003096:	b29a      	uxth	r2, r3
 8003098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	e017      	b.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d113      	bne.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ce:	4413      	add	r3, r2
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	011a      	lsls	r2, r3, #4
 80030d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030da:	4413      	add	r3, r2
 80030dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e4:	2200      	movs	r2, #0
 80030e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f005 ff2b 	bl	8008f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8104 	bne.w	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003140:	b29b      	uxth	r3, r3
 8003142:	8013      	strh	r3, [r2, #0]
 8003144:	e0e0      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d121      	bne.n	8003194 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	b29b      	uxth	r3, r3
 8003192:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319a:	2b01      	cmp	r3, #1
 800319c:	f040 80b4 	bne.w	8003308 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a8:	441a      	add	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b6:	441a      	add	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d309      	bcc.n	80031dc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	621a      	str	r2, [r3, #32]
 80031da:	e015      	b.n	8003208 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80031e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031f2:	e009      	b.n	8003208 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	667b      	str	r3, [r7, #100]	; 0x64
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d155      	bne.n	80032c2 <HAL_PCD_EP_DB_Transmit+0x704>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322a:	4413      	add	r3, r2
 800322c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	011a      	lsls	r2, r3, #4
 8003234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003236:	4413      	add	r3, r2
 8003238:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800323c:	65bb      	str	r3, [r7, #88]	; 0x58
 800323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003240:	2b00      	cmp	r3, #0
 8003242:	d112      	bne.n	800326a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800324e:	b29a      	uxth	r2, r3
 8003250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003252:	801a      	strh	r2, [r3, #0]
 8003254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003262:	b29a      	uxth	r2, r3
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003266:	801a      	strh	r2, [r3, #0]
 8003268:	e044      	b.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x736>
 800326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326c:	2b3e      	cmp	r3, #62	; 0x3e
 800326e:	d811      	bhi.n	8003294 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	657b      	str	r3, [r7, #84]	; 0x54
 8003276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	3301      	adds	r3, #1
 8003284:	657b      	str	r3, [r7, #84]	; 0x54
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003288:	b29b      	uxth	r3, r3
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	b29a      	uxth	r2, r3
 800328e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	e02f      	b.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_PCD_EP_DB_Transmit+0x6ec>
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	3b01      	subs	r3, #1
 80032a8:	657b      	str	r3, [r7, #84]	; 0x54
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e018      	b.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x736>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d114      	bne.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x736>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d8:	4413      	add	r3, r2
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	011a      	lsls	r2, r3, #4
 80032e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e4:	4413      	add	r3, r2
 80032e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ea:	663b      	str	r3, [r7, #96]	; 0x60
 80032ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6959      	ldr	r1, [r3, #20]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	895a      	ldrh	r2, [r3, #10]
 8003300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	f003 ffc6 	bl	8007294 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003322:	823b      	strh	r3, [r7, #16]
 8003324:	8a3b      	ldrh	r3, [r7, #16]
 8003326:	f083 0310 	eor.w	r3, r3, #16
 800332a:	823b      	strh	r3, [r7, #16]
 800332c:	8a3b      	ldrh	r3, [r7, #16]
 800332e:	f083 0320 	eor.w	r3, r3, #32
 8003332:	823b      	strh	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	8a3b      	ldrh	r3, [r7, #16]
 8003344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	b29b      	uxth	r3, r3
 8003356:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3788      	adds	r7, #136	; 0x88
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	4613      	mov	r3, r2
 8003372:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003374:	897b      	ldrh	r3, [r7, #10]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	897b      	ldrh	r3, [r7, #10]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e009      	b.n	80033ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003398:	897a      	ldrh	r2, [r7, #10]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	80da      	strh	r2, [r3, #6]
 80033c0:	e00b      	b.n	80033da <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2201      	movs	r2, #1
 80033c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e272      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8087 	beq.w	8003516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003408:	4b92      	ldr	r3, [pc, #584]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00c      	beq.n	800342e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003414:	4b8f      	ldr	r3, [pc, #572]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d112      	bne.n	8003446 <HAL_RCC_OscConfig+0x5e>
 8003420:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d10b      	bne.n	8003446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342e:	4b89      	ldr	r3, [pc, #548]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d06c      	beq.n	8003514 <HAL_RCC_OscConfig+0x12c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d168      	bne.n	8003514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e24c      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x76>
 8003450:	4b80      	ldr	r3, [pc, #512]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a7f      	ldr	r2, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	e02e      	b.n	80034bc <HAL_RCC_OscConfig+0xd4>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7a      	ldr	r2, [pc, #488]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800346c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b78      	ldr	r3, [pc, #480]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a77      	ldr	r2, [pc, #476]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e01d      	b.n	80034bc <HAL_RCC_OscConfig+0xd4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0xbc>
 800348a:	4b72      	ldr	r3, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a71      	ldr	r2, [pc, #452]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0xd4>
 80034a4:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6a      	ldr	r2, [pc, #424]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a67      	ldr	r2, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fe36 	bl	8001134 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fe32 	bl	8001134 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e200      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0xe4>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fe22 	bl	8001134 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fd fe1e 	bl	8001134 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1ec      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x10c>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d063      	beq.n	80035ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b08      	cmp	r3, #8
 8003538:	d11c      	bne.n	8003574 <HAL_RCC_OscConfig+0x18c>
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_RCC_OscConfig+0x176>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e1c0      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4939      	ldr	r1, [pc, #228]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	e03a      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_RCC_OscConfig+0x270>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fd fdd7 	bl	8001134 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358a:	f7fd fdd3 	bl	8001134 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e1a1      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4927      	ldr	r1, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	e015      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <HAL_RCC_OscConfig+0x270>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fdb6 	bl	8001134 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035cc:	f7fd fdb2 	bl	8001134 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e180      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03a      	beq.n	800366c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d019      	beq.n	8003632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_RCC_OscConfig+0x274>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fd fd96 	bl	8001134 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360c:	f7fd fd92 	bl	8001134 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e160      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCC_OscConfig+0x26c>)
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800362a:	2001      	movs	r0, #1
 800362c:	f000 fad8 	bl	8003be0 <RCC_Delay>
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_OscConfig+0x274>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7fd fd7c 	bl	8001134 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363e:	e00f      	b.n	8003660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003640:	f7fd fd78 	bl	8001134 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d908      	bls.n	8003660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e146      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	42420000 	.word	0x42420000
 800365c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b92      	ldr	r3, [pc, #584]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e9      	bne.n	8003640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a6 	beq.w	80037c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b8b      	ldr	r3, [pc, #556]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b88      	ldr	r3, [pc, #544]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4a87      	ldr	r2, [pc, #540]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	61d3      	str	r3, [r2, #28]
 8003696:	4b85      	ldr	r3, [pc, #532]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b82      	ldr	r3, [pc, #520]	; (80038b0 <HAL_RCC_OscConfig+0x4c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b7f      	ldr	r3, [pc, #508]	; (80038b0 <HAL_RCC_OscConfig+0x4c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7e      	ldr	r2, [pc, #504]	; (80038b0 <HAL_RCC_OscConfig+0x4c8>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7fd fd39 	bl	8001134 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7fd fd35 	bl	8001134 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	; 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e103      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b75      	ldr	r3, [pc, #468]	; (80038b0 <HAL_RCC_OscConfig+0x4c8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x312>
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	e02d      	b.n	8003756 <HAL_RCC_OscConfig+0x36e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x334>
 8003702:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a69      	ldr	r2, [pc, #420]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6213      	str	r3, [r2, #32]
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6213      	str	r3, [r2, #32]
 800371a:	e01c      	b.n	8003756 <HAL_RCC_OscConfig+0x36e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d10c      	bne.n	800373e <HAL_RCC_OscConfig+0x356>
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4a60      	ldr	r2, [pc, #384]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6213      	str	r3, [r2, #32]
 8003730:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	e00b      	b.n	8003756 <HAL_RCC_OscConfig+0x36e>
 800373e:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a5a      	ldr	r2, [pc, #360]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	4b58      	ldr	r3, [pc, #352]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a57      	ldr	r2, [pc, #348]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fd fce9 	bl	8001134 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fd fce5 	bl	8001134 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0b1      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ee      	beq.n	8003766 <HAL_RCC_OscConfig+0x37e>
 8003788:	e014      	b.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378a:	f7fd fcd3 	bl	8001134 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fd fccf 	bl	8001134 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e09b      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	4b40      	ldr	r3, [pc, #256]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ee      	bne.n	8003792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ba:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8087 	beq.w	80038de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d061      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d146      	bne.n	8003872 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fd fca3 	bl	8001134 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fd fc9f 	bl	8001134 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e06d      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d108      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4921      	ldr	r1, [pc, #132]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a19      	ldr	r1, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	430b      	orrs	r3, r1
 800383e:	491b      	ldr	r1, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fd fc73 	bl	8001134 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd fc6f 	bl	8001134 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e03d      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x46a>
 8003870:	e035      	b.n	80038de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fc5c 	bl	8001134 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fc58 	bl	8001134 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e026      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCC_OscConfig+0x4c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x498>
 800389e:	e01e      	b.n	80038de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e019      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_OscConfig+0x500>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0d0      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d910      	bls.n	8003930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0207 	bic.w	r2, r3, #7
 8003916:	4965      	ldr	r1, [pc, #404]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800396a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d040      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d115      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e073      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e06b      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4936      	ldr	r1, [pc, #216]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fd fbaa 	bl	8001134 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fd fba6 	bl	8001134 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e053      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d210      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 0207 	bic.w	r2, r3, #7
 8003a22:	4922      	ldr	r1, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f821 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1d0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fb08 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	0800b384 	.word	0x0800b384
 8003ab8:	20000008 	.word	0x20000008
 8003abc:	2000000c 	.word	0x2000000c

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	b490      	push	{r4, r7}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xac>)
 8003ac8:	1d3c      	adds	r4, r7, #4
 8003aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ad0:	f240 2301 	movw	r3, #513	; 0x201
 8003ad4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x40>
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x46>
 8003afe:	e02b      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b02:	623b      	str	r3, [r7, #32]
      break;
 8003b04:	e02b      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	0c9b      	lsrs	r3, r3, #18
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3328      	adds	r3, #40	; 0x28
 8003b10:	443b      	add	r3, r7
 8003b12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0c5b      	lsrs	r3, r3, #17
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	3328      	adds	r3, #40	; 0x28
 8003b2e:	443b      	add	r3, r7
 8003b30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b3a:	fb03 f202 	mul.w	r2, r3, r2
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	e004      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	623b      	str	r3, [r7, #32]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b5a:	623b      	str	r3, [r7, #32]
      break;
 8003b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc90      	pop	{r4, r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	0800b320 	.word	0x0800b320
 8003b70:	40021000 	.word	0x40021000
 8003b74:	007a1200 	.word	0x007a1200
 8003b78:	003d0900 	.word	0x003d0900

08003b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000008 	.word	0x20000008

08003b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b94:	f7ff fff2 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	0800b394 	.word	0x0800b394

08003bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bbc:	f7ff ffde 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	0adb      	lsrs	r3, r3, #11
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	0800b394 	.word	0x0800b394

08003be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <RCC_Delay+0x34>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <RCC_Delay+0x38>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0a5b      	lsrs	r3, r3, #9
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bfc:	bf00      	nop
  }
  while (Delay --);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	60fa      	str	r2, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f9      	bne.n	8003bfc <RCC_Delay+0x1c>
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	20000008 	.word	0x20000008
 8003c18:	10624dd3 	.word	0x10624dd3

08003c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c48:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
 8003c54:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d118      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a42      	ldr	r2, [pc, #264]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fa5a 	bl	8001134 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	e008      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fd fa56 	bl	8001134 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e06d      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d02e      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d027      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cca:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd6:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d014      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fa25 	bl	8001134 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fd fa21 	bl	8001134 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e036      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	490b      	ldr	r1, [pc, #44]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4904      	ldr	r1, [pc, #16]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42420440 	.word	0x42420440

08003d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e041      	b.n	8003e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fc fe82 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fae8 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d001      	beq.n	8003e40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e032      	b.n	8003ea6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIM_Base_Start+0x88>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00e      	beq.n	8003e70 <HAL_TIM_Base_Start+0x48>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d009      	beq.n	8003e70 <HAL_TIM_Base_Start+0x48>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIM_Base_Start+0x8c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_TIM_Base_Start+0x48>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <HAL_TIM_Base_Start+0x90>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d010      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	e007      	b.n	8003ea4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800

08003ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e03a      	b.n	8003f4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_TIM_Base_Start_IT+0x98>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x58>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d009      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x58>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x58>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <HAL_TIM_Base_Start_IT+0xa0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d111      	bne.n	8003f38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d010      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	e007      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800

08003f60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10f      	bne.n	8003fa8 <HAL_TIM_Base_Stop_IT+0x48>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d107      	bne.n	8003fa8 <HAL_TIM_Base_Stop_IT+0x48>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d122      	bne.n	8004018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0202 	mvn.w	r2, #2
 8003fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9b1 	bl	8004366 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9a4 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f9b3 	bl	8004378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0204 	mvn.w	r2, #4
 800403c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f987 	bl	8004366 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f97a 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f989 	bl	8004378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0208 	mvn.w	r2, #8
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f95d 	bl	8004366 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f950 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f95f 	bl	8004378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0210 	mvn.w	r2, #16
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2208      	movs	r2, #8
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f933 	bl	8004366 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f926 	bl	8004354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f935 	bl	8004378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0201 	mvn.w	r2, #1
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fb0e 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa77 	bl	800465a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8f9 	bl	800438a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0220 	mvn.w	r2, #32
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa42 	bl	8004648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0b3      	b.n	800434c <HAL_TIM_ConfigClockSource+0x180>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d03e      	beq.n	800429c <HAL_TIM_ConfigClockSource+0xd0>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	f200 8087 	bhi.w	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	f000 8085 	beq.w	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d87f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d01a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xa2>
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d87b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d050      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x116>
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d877      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d03c      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0xf6>
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d873      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d058      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x136>
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d86f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d064      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004258:	2b30      	cmp	r3, #48	; 0x30
 800425a:	d86b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d060      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004260:	2b20      	cmp	r3, #32
 8004262:	d867      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004268:	2b10      	cmp	r3, #16
 800426a:	d05a      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800426c:	e062      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f000 f966 	bl	800454e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	609a      	str	r2, [r3, #8]
      break;
 800429a:	e04e      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f000 f94f 	bl	800454e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042be:	609a      	str	r2, [r3, #8]
      break;
 80042c0:	e03b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 f8c6 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2150      	movs	r1, #80	; 0x50
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f91d 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 80042e0:	e02b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f000 f8e4 	bl	80044bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2160      	movs	r1, #96	; 0x60
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f90d 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8004300:	e01b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	f000 f8a6 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f8fd 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8004320:	e00b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f000 f8f4 	bl	800451a <TIM_ITRx_SetConfig>
        break;
 8004332:	e002      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004334:	bf00      	nop
 8004336:	e000      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a29      	ldr	r2, [pc, #164]	; (8004454 <TIM_Base_SetConfig+0xb8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x30>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a26      	ldr	r2, [pc, #152]	; (8004458 <TIM_Base_SetConfig+0xbc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x30>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a25      	ldr	r2, [pc, #148]	; (800445c <TIM_Base_SetConfig+0xc0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <TIM_Base_SetConfig+0xb8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0x62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <TIM_Base_SetConfig+0xbc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0x62>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <TIM_Base_SetConfig+0xc0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a07      	ldr	r2, [pc, #28]	; (8004454 <TIM_Base_SetConfig+0xb8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 0210 	bic.w	r2, r3, #16
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	031b      	lsls	r3, r3, #12
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	021a      	lsls	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	431a      	orrs	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e046      	b.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d009      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800

08004648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e03f      	b.n	80046fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fa48 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f829 	bl	8004708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004742:	f023 030c 	bic.w	r3, r3, #12
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	430b      	orrs	r3, r1
 800474e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <UART_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7ff fa22 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	e002      	b.n	800477e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7ff fa0a 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 800477c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <UART_SetConfig+0x118>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	0119      	lsls	r1, r3, #4
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009a      	lsls	r2, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <UART_SetConfig+0x118>)
 80047b6:	fba3 0302 	umull	r0, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	2064      	movs	r0, #100	; 0x64
 80047be:	fb00 f303 	mul.w	r3, r0, r3
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	3332      	adds	r3, #50	; 0x32
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <UART_SetConfig+0x118>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d4:	4419      	add	r1, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009a      	lsls	r2, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <UART_SetConfig+0x118>)
 80047ee:	fba3 0302 	umull	r0, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	fb00 f303 	mul.w	r3, r0, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	3332      	adds	r3, #50	; 0x32
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <UART_SetConfig+0x118>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	440a      	add	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40013800 	.word	0x40013800
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004824:	b084      	sub	sp, #16
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	f107 0014 	add.w	r0, r7, #20
 8004832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	b004      	add	sp, #16
 8004842:	4770      	bx	lr

08004844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004854:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004858:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004878:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800487c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	b29b      	uxth	r3, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	4013      	ands	r3, r2
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048bc:	b084      	sub	sp, #16
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	f107 0014 	add.w	r0, r7, #20
 80048ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	b004      	add	sp, #16
 80048fa:	4770      	bx	lr

080048fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b09b      	sub	sp, #108	; 0x6c
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d81f      	bhi.n	800496e <USB_ActivateEndpoint+0x72>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <USB_ActivateEndpoint+0x38>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004945 	.word	0x08004945
 8004938:	08004961 	.word	0x08004961
 800493c:	08004977 	.word	0x08004977
 8004940:	08004953 	.word	0x08004953
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004944:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800494c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004950:	e012      	b.n	8004978 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004952:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004956:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800495a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800495e:	e00b      	b.n	8004978 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004960:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004968:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800496c:	e004      	b.n	8004978 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004974:	e000      	b.n	8004978 <USB_ActivateEndpoint+0x7c>
      break;
 8004976:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049dc:	b29b      	uxth	r3, r3
 80049de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7b1b      	ldrb	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 8149 	bne.w	8004c7c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8084 	beq.w	8004afc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4413      	add	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	011a      	lsls	r2, r3, #4
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	88db      	ldrh	r3, [r3, #6]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	81fb      	strh	r3, [r7, #14]
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <USB_ActivateEndpoint+0x17c>
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	81bb      	strh	r3, [r7, #12]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	89bb      	ldrh	r3, [r7, #12]
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	78db      	ldrb	r3, [r3, #3]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d020      	beq.n	8004ac2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	813b      	strh	r3, [r7, #8]
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	f083 0320 	eor.w	r3, r3, #32
 8004a9e:	813b      	strh	r3, [r7, #8]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	893b      	ldrh	r3, [r7, #8]
 8004aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	8013      	strh	r3, [r2, #0]
 8004ac0:	e27f      	b.n	8004fc2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
 8004afa:	e262      	b.n	8004fc2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	4413      	add	r3, r2
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	88db      	ldrh	r3, [r3, #6]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	4413      	add	r3, r2
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	011a      	lsls	r2, r3, #4
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d112      	bne.n	8004b82 <USB_ActivateEndpoint+0x286>
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e02f      	b.n	8004be2 <USB_ActivateEndpoint+0x2e6>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b3e      	cmp	r3, #62	; 0x3e
 8004b88:	d813      	bhi.n	8004bb2 <USB_ActivateEndpoint+0x2b6>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	663b      	str	r3, [r7, #96]	; 0x60
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <USB_ActivateEndpoint+0x2a8>
 8004b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e017      	b.n	8004be2 <USB_ActivateEndpoint+0x2e6>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <USB_ActivateEndpoint+0x2d0>
 8004bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	663b      	str	r3, [r7, #96]	; 0x60
 8004bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	83fb      	strh	r3, [r7, #30]
 8004bf0:	8bfb      	ldrh	r3, [r7, #30]
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01b      	beq.n	8004c32 <USB_ActivateEndpoint+0x336>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	83bb      	strh	r3, [r7, #28]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8bbb      	ldrh	r3, [r7, #28]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	837b      	strh	r3, [r7, #26]
 8004c4a:	8b7b      	ldrh	r3, [r7, #26]
 8004c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c50:	837b      	strh	r3, [r7, #26]
 8004c52:	8b7b      	ldrh	r3, [r7, #26]
 8004c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c58:	837b      	strh	r3, [r7, #26]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8b7b      	ldrh	r3, [r7, #26]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
 8004c7a:	e1a2      	b.n	8004fc2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc8:	4413      	add	r3, r2
 8004cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	011a      	lsls	r2, r3, #4
 8004cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cda:	657b      	str	r3, [r7, #84]	; 0x54
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	891b      	ldrh	r3, [r3, #8]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	4413      	add	r3, r2
 8004cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	895b      	ldrh	r3, [r3, #10]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 8091 	bne.w	8004e4c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01b      	beq.n	8004d7a <USB_ActivateEndpoint+0x47e>
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01b      	beq.n	8004dca <USB_ActivateEndpoint+0x4ce>
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004de4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004de8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004df0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]
 8004e4a:	e0ba      	b.n	8004fc2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01d      	beq.n	8004ea4 <USB_ActivateEndpoint+0x5a8>
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004eb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01d      	beq.n	8004efc <USB_ActivateEndpoint+0x600>
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d024      	beq.n	8004f4e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f22:	f083 0320 	eor.w	r3, r3, #32
 8004f26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]
 8004f4c:	e01d      	b.n	8004f8a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004fc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	376c      	adds	r7, #108	; 0x6c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b08d      	sub	sp, #52	; 0x34
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	7b1b      	ldrb	r3, [r3, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 808e 	bne.w	8005100 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d044      	beq.n	8005076 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	81bb      	strh	r3, [r7, #12]
 8004ffa:	89bb      	ldrh	r3, [r7, #12]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_DeactivateEndpoint+0x6c>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	817b      	strh	r3, [r7, #10]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	813b      	strh	r3, [r7, #8]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	893b      	ldrh	r3, [r7, #8]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
 8005074:	e192      	b.n	800539c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	827b      	strh	r3, [r7, #18]
 8005084:	8a7b      	ldrh	r3, [r7, #18]
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01b      	beq.n	80050c6 <USB_DeactivateEndpoint+0xf6>
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	823b      	strh	r3, [r7, #16]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	441a      	add	r2, r3
 80050b0:	8a3b      	ldrh	r3, [r7, #16]
 80050b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	81fb      	strh	r3, [r7, #14]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	441a      	add	r2, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]
 80050fe:	e14d      	b.n	800539c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 80a5 	bne.w	8005254 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	843b      	strh	r3, [r7, #32]
 8005118:	8c3b      	ldrh	r3, [r7, #32]
 800511a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <USB_DeactivateEndpoint+0x18a>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	83fb      	strh	r3, [r7, #30]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	8bfb      	ldrh	r3, [r7, #30]
 8005146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	83bb      	strh	r3, [r7, #28]
 8005168:	8bbb      	ldrh	r3, [r7, #28]
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <USB_DeactivateEndpoint+0x1da>
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	837b      	strh	r3, [r7, #26]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8b7b      	ldrh	r3, [r7, #26]
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c0:	833b      	strh	r3, [r7, #24]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	8b3b      	ldrh	r3, [r7, #24]
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	82fb      	strh	r3, [r7, #22]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	8afb      	ldrh	r3, [r7, #22]
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005230:	82bb      	strh	r3, [r7, #20]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	8abb      	ldrh	r3, [r7, #20]
 800523e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]
 8005252:	e0a3      	b.n	800539c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <USB_DeactivateEndpoint+0x2d4>
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80052b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <USB_DeactivateEndpoint+0x324>
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005342:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b29b      	uxth	r3, r3
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	847b      	strh	r3, [r7, #34]	; 0x22
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005398:	b29b      	uxth	r3, r3
 800539a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3734      	adds	r7, #52	; 0x34
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b0cc      	sub	sp, #304	; 0x130
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b6:	6018      	str	r0, [r3, #0]
 80053b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f041 817d 	bne.w	80066ce <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005400:	e007      	b.n	8005412 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	7b1b      	ldrb	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d152      	bne.n	80054c8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6959      	ldr	r1, [r3, #20]
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	88da      	ldrh	r2, [r3, #6]
 800543a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543e:	b29b      	uxth	r3, r3
 8005440:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005444:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005448:	6800      	ldr	r0, [r0, #0]
 800544a:	f001 ff23 	bl	8007294 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005456:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800545a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005470:	b29b      	uxth	r3, r3
 8005472:	4619      	mov	r1, r3
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800547c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005480:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	440a      	add	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	f001 b8b5 	b.w	8006632 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	78db      	ldrb	r3, [r3, #3]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f040 84c6 	bne.w	8005e66 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f240 8443 	bls.w	8005d7e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 823e 	beq.w	8005a16 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 809a 	bne.w	80056f4 <USB_EPStartXfer+0x34c>
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055f2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	440a      	add	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d122      	bne.n	8005672 <USB_EPStartXfer+0x2ca>
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800563e:	b29a      	uxth	r2, r3
 8005640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005644:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005662:	b29a      	uxth	r2, r3
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e079      	b.n	8005766 <USB_EPStartXfer+0x3be>
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	2b3e      	cmp	r3, #62	; 0x3e
 8005678:	d81b      	bhi.n	80056b2 <USB_EPStartXfer+0x30a>
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USB_EPStartXfer+0x2f2>
 8005690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005694:	3301      	adds	r3, #1
 8005696:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800569a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e059      	b.n	8005766 <USB_EPStartXfer+0x3be>
 80056b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <USB_EPStartXfer+0x32a>
 80056c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	b29b      	uxth	r3, r3
 80056dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e038      	b.n	8005766 <USB_EPStartXfer+0x3be>
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d130      	bne.n	8005766 <USB_EPStartXfer+0x3be>
 8005704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005712:	b29b      	uxth	r3, r3
 8005714:	4619      	mov	r1, r3
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800571e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005722:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	440a      	add	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4413      	add	r3, r2
 8005746:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005758:	b29a      	uxth	r2, r3
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	895b      	ldrh	r3, [r3, #10]
 8005772:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005786:	b29b      	uxth	r3, r3
 8005788:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800578c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005790:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005794:	6800      	ldr	r0, [r0, #0]
 8005796:	f001 fd7d 	bl	8007294 <USB_WritePMA>
            ep->xfer_buff += len;
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	441a      	add	r2, r3
 80057ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d90f      	bls.n	80057f4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80057d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	621a      	str	r2, [r3, #32]
 80057f2:	e00e      	b.n	8005812 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f040 809a 	bne.w	8005958 <USB_EPStartXfer+0x5b0>
 8005824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005828:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800582c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005830:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005846:	b29b      	uxth	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005852:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005856:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	440a      	add	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	011a      	lsls	r2, r3, #4
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4413      	add	r3, r2
 800587a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d122      	bne.n	80058d6 <USB_EPStartXfer+0x52e>
 8005890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005894:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e083      	b.n	80059de <USB_EPStartXfer+0x636>
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	2b3e      	cmp	r3, #62	; 0x3e
 80058dc:	d81b      	bhi.n	8005916 <USB_EPStartXfer+0x56e>
 80058de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0x556>
 80058f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005902:	b29b      	uxth	r3, r3
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	b29a      	uxth	r2, r3
 8005908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e063      	b.n	80059de <USB_EPStartXfer+0x636>
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <USB_EPStartXfer+0x58e>
 800592c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005930:	3b01      	subs	r3, #1
 8005932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005936:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29b      	uxth	r3, r3
 8005940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005948:	b29a      	uxth	r2, r3
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	e042      	b.n	80059de <USB_EPStartXfer+0x636>
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d13a      	bne.n	80059de <USB_EPStartXfer+0x636>
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005970:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005974:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005996:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800599a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	440a      	add	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4413      	add	r3, r2
 80059be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	891b      	ldrh	r3, [r3, #8]
 80059ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6959      	ldr	r1, [r3, #20]
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f001 fc41 	bl	8007294 <USB_WritePMA>
 8005a12:	f000 be0e 	b.w	8006632 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d16d      	bne.n	8005b02 <USB_EPStartXfer+0x75a>
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a46:	4413      	add	r3, r2
 8005a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	011a      	lsls	r2, r3, #4
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d112      	bne.n	8005a90 <USB_EPStartXfer+0x6e8>
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e063      	b.n	8005b58 <USB_EPStartXfer+0x7b0>
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	2b3e      	cmp	r3, #62	; 0x3e
 8005a96:	d817      	bhi.n	8005ac8 <USB_EPStartXfer+0x720>
 8005a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <USB_EPStartXfer+0x710>
 8005aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e047      	b.n	8005b58 <USB_EPStartXfer+0x7b0>
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <USB_EPStartXfer+0x740>
 8005ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ae8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e02a      	b.n	8005b58 <USB_EPStartXfer+0x7b0>
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d122      	bne.n	8005b58 <USB_EPStartXfer+0x7b0>
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b32:	4413      	add	r3, r2
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	011a      	lsls	r2, r3, #4
 8005b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b46:	4413      	add	r3, r2
 8005b48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	891b      	ldrh	r3, [r3, #8]
 8005b64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6959      	ldr	r1, [r3, #20]
 8005b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b7e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b82:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b86:	6800      	ldr	r0, [r0, #0]
 8005b88:	f001 fb84 	bl	8007294 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	441a      	add	r2, r3
 8005b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d90f      	bls.n	8005be6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	1ad2      	subs	r2, r2, r3
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e00e      	b.n	8005c04 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d16d      	bne.n	8005cfc <USB_EPStartXfer+0x954>
 8005c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	4413      	add	r3, r2
 8005c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d112      	bne.n	8005c8a <USB_EPStartXfer+0x8e2>
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	e05d      	b.n	8005d46 <USB_EPStartXfer+0x99e>
 8005c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c90:	d817      	bhi.n	8005cc2 <USB_EPStartXfer+0x91a>
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <USB_EPStartXfer+0x90a>
 8005ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	029b      	lsls	r3, r3, #10
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e041      	b.n	8005d46 <USB_EPStartXfer+0x99e>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <USB_EPStartXfer+0x93a>
 8005cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e024      	b.n	8005d46 <USB_EPStartXfer+0x99e>
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d11c      	bne.n	8005d46 <USB_EPStartXfer+0x99e>
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d20:	4413      	add	r3, r2
 8005d22:	643b      	str	r3, [r7, #64]	; 0x40
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	895b      	ldrh	r3, [r3, #10]
 8005d52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6959      	ldr	r1, [r3, #20]
 8005d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d74:	6800      	ldr	r0, [r0, #0]
 8005d76:	f001 fa8d 	bl	8007294 <USB_WritePMA>
 8005d7a:	f000 bc5a 	b.w	8006632 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0a:	4413      	add	r3, r2
 8005e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	011a      	lsls	r2, r3, #4
 8005e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	891b      	ldrh	r3, [r3, #8]
 8005e3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6959      	ldr	r1, [r3, #20]
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e56:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	f001 fa18 	bl	8007294 <USB_WritePMA>
 8005e64:	e3e5      	b.n	8006632 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 81bc 	beq.w	8006280 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d16d      	bne.n	8006002 <USB_EPStartXfer+0xc5a>
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f46:	4413      	add	r3, r2
 8005f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	011a      	lsls	r2, r3, #4
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d112      	bne.n	8005f90 <USB_EPStartXfer+0xbe8>
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	e060      	b.n	8006052 <USB_EPStartXfer+0xcaa>
 8005f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f94:	2b3e      	cmp	r3, #62	; 0x3e
 8005f96:	d817      	bhi.n	8005fc8 <USB_EPStartXfer+0xc20>
 8005f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <USB_EPStartXfer+0xc10>
 8005fae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	029b      	lsls	r3, r3, #10
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	e044      	b.n	8006052 <USB_EPStartXfer+0xcaa>
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <USB_EPStartXfer+0xc40>
 8005fde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fe8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e027      	b.n	8006052 <USB_EPStartXfer+0xcaa>
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d11f      	bne.n	8006052 <USB_EPStartXfer+0xcaa>
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006028:	4413      	add	r3, r2
 800602a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006040:	4413      	add	r3, r2
 8006042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	b29a      	uxth	r2, r3
 800604e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006050:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	895b      	ldrh	r3, [r3, #10]
 800605e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6959      	ldr	r1, [r3, #20]
 800606e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006072:	b29b      	uxth	r3, r3
 8006074:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006078:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800607c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006080:	6800      	ldr	r0, [r0, #0]
 8006082:	f001 f907 	bl	8007294 <USB_WritePMA>
          ep->xfer_buff += len;
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	441a      	add	r2, r3
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d90f      	bls.n	80060e0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	621a      	str	r2, [r3, #32]
 80060de:	e00e      	b.n	80060fe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8295 	beq.w	8006632 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d16d      	bne.n	80061f4 <USB_EPStartXfer+0xe4c>
 8006118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006138:	4413      	add	r3, r2
 800613a:	66bb      	str	r3, [r7, #104]	; 0x68
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	011a      	lsls	r2, r3, #4
 800614a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800614c:	4413      	add	r3, r2
 800614e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006152:	667b      	str	r3, [r7, #100]	; 0x64
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d112      	bne.n	8006182 <USB_EPStartXfer+0xdda>
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006166:	b29a      	uxth	r2, r3
 8006168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e063      	b.n	800624a <USB_EPStartXfer+0xea2>
 8006182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006186:	2b3e      	cmp	r3, #62	; 0x3e
 8006188:	d817      	bhi.n	80061ba <USB_EPStartXfer+0xe12>
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <USB_EPStartXfer+0xe02>
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a4:	3301      	adds	r3, #1
 80061a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e047      	b.n	800624a <USB_EPStartXfer+0xea2>
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <USB_EPStartXfer+0xe32>
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d4:	3b01      	subs	r3, #1
 80061d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e02a      	b.n	800624a <USB_EPStartXfer+0xea2>
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d122      	bne.n	800624a <USB_EPStartXfer+0xea2>
 8006204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006224:	4413      	add	r3, r2
 8006226:	673b      	str	r3, [r7, #112]	; 0x70
 8006228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	011a      	lsls	r2, r3, #4
 8006236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006238:	4413      	add	r3, r2
 800623a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800623e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006244:	b29a      	uxth	r2, r3
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	891b      	ldrh	r3, [r3, #8]
 8006256:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6959      	ldr	r1, [r3, #20]
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29b      	uxth	r3, r3
 800626c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006270:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006274:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f001 f80b 	bl	8007294 <USB_WritePMA>
 800627e:	e1d8      	b.n	8006632 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d178      	bne.n	8006382 <USB_EPStartXfer+0xfda>
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062b4:	4413      	add	r3, r2
 80062b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	011a      	lsls	r2, r3, #4
 80062c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <USB_EPStartXfer+0xf64>
 80062de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e06b      	b.n	80063e4 <USB_EPStartXfer+0x103c>
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	2b3e      	cmp	r3, #62	; 0x3e
 8006312:	d818      	bhi.n	8006346 <USB_EPStartXfer+0xf9e>
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <USB_EPStartXfer+0xf8c>
 800632a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800632e:	3301      	adds	r3, #1
 8006330:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e04e      	b.n	80063e4 <USB_EPStartXfer+0x103c>
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0xfbe>
 800635c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e030      	b.n	80063e4 <USB_EPStartXfer+0x103c>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d128      	bne.n	80063e4 <USB_EPStartXfer+0x103c>
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063b6:	4413      	add	r3, r2
 80063b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	011a      	lsls	r2, r3, #4
 80063ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	891b      	ldrh	r3, [r3, #8]
 80063f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6959      	ldr	r1, [r3, #20]
 8006400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006404:	b29b      	uxth	r3, r3
 8006406:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800640a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800640e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006412:	6800      	ldr	r0, [r0, #0]
 8006414:	f000 ff3e 	bl	8007294 <USB_WritePMA>
          ep->xfer_buff += len;
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	441a      	add	r2, r3
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a1a      	ldr	r2, [r3, #32]
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d90f      	bls.n	8006472 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	621a      	str	r2, [r3, #32]
 8006470:	e00e      	b.n	8006490 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80cc 	beq.w	8006632 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d178      	bne.n	80065aa <USB_EPStartXfer+0x1202>
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064dc:	4413      	add	r3, r2
 80064de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	011a      	lsls	r2, r3, #4
 80064f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064f4:	4413      	add	r3, r2
 80064f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d116      	bne.n	8006534 <USB_EPStartXfer+0x118c>
 8006506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e064      	b.n	80065fe <USB_EPStartXfer+0x1256>
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	2b3e      	cmp	r3, #62	; 0x3e
 800653a:	d818      	bhi.n	800656e <USB_EPStartXfer+0x11c6>
 800653c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <USB_EPStartXfer+0x11b4>
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006556:	3301      	adds	r3, #1
 8006558:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800655c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006560:	b29b      	uxth	r3, r3
 8006562:	029b      	lsls	r3, r3, #10
 8006564:	b29a      	uxth	r2, r3
 8006566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e047      	b.n	80065fe <USB_EPStartXfer+0x1256>
 800656e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <USB_EPStartXfer+0x11e6>
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006588:	3b01      	subs	r3, #1
 800658a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800658e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006592:	b29b      	uxth	r3, r3
 8006594:	029b      	lsls	r3, r3, #10
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e029      	b.n	80065fe <USB_EPStartXfer+0x1256>
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d121      	bne.n	80065fe <USB_EPStartXfer+0x1256>
 80065ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065d0:	4413      	add	r3, r2
 80065d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	011a      	lsls	r2, r3, #4
 80065e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065e8:	4413      	add	r3, r2
 80065ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	895b      	ldrh	r3, [r3, #10]
 800660a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6959      	ldr	r1, [r3, #20]
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	b29b      	uxth	r3, r3
 8006620:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006624:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006628:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f000 fe31 	bl	8007294 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006654:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006660:	8013      	strh	r3, [r2, #0]
 8006662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006666:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800666a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800666e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006672:	8812      	ldrh	r2, [r2, #0]
 8006674:	f082 0210 	eor.w	r2, r2, #16
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006682:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006686:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800668a:	8812      	ldrh	r2, [r2, #0]
 800668c:	f082 0220 	eor.w	r2, r2, #32
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
 80066ca:	f000 bc9f 	b.w	800700c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	7b1b      	ldrb	r3, [r3, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 80ae 	bne.w	800683c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d917      	bls.n	800672c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	619a      	str	r2, [r3, #24]
 800672a:	e00e      	b.n	800674a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800676e:	4413      	add	r3, r2
 8006770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006786:	4413      	add	r3, r2
 8006788:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800678c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <USB_EPStartXfer+0x141e>
 8006798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e3e8      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	2b3e      	cmp	r3, #62	; 0x3e
 80067cc:	d818      	bhi.n	8006800 <USB_EPStartXfer+0x1458>
 80067ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <USB_EPStartXfer+0x1446>
 80067e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e8:	3301      	adds	r3, #1
 80067ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	e3cb      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
 8006800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800680a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <USB_EPStartXfer+0x1478>
 8006816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800681a:	3b01      	subs	r3, #1
 800681c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006820:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006824:	b29b      	uxth	r3, r3
 8006826:	029b      	lsls	r3, r3, #10
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e3ad      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	78db      	ldrb	r3, [r3, #3]
 8006848:	2b02      	cmp	r3, #2
 800684a:	f040 8200 	bne.w	8006c4e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 8091 	bne.w	8006982 <USB_EPStartXfer+0x15da>
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687c:	b29b      	uxth	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006884:	4413      	add	r3, r2
 8006886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	011a      	lsls	r2, r3, #4
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689c:	4413      	add	r3, r2
 800689e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d116      	bne.n	80068e4 <USB_EPStartXfer+0x153c>
 80068b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	e083      	b.n	80069ec <USB_EPStartXfer+0x1644>
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b3e      	cmp	r3, #62	; 0x3e
 80068f2:	d820      	bhi.n	8006936 <USB_EPStartXfer+0x158e>
 80068f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <USB_EPStartXfer+0x157c>
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006928:	b29b      	uxth	r3, r3
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	b29a      	uxth	r2, r3
 800692e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	e05a      	b.n	80069ec <USB_EPStartXfer+0x1644>
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USB_EPStartXfer+0x15be>
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	3b01      	subs	r3, #1
 8006962:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e034      	b.n	80069ec <USB_EPStartXfer+0x1644>
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d12c      	bne.n	80069ec <USB_EPStartXfer+0x1644>
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b6:	4413      	add	r3, r2
 80069b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	011a      	lsls	r2, r3, #4
 80069ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 8091 	bne.w	8006b2e <USB_EPStartXfer+0x1786>
 8006a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a30:	4413      	add	r3, r2
 8006a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	011a      	lsls	r2, r3, #4
 8006a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d116      	bne.n	8006a90 <USB_EPStartXfer+0x16e8>
 8006a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	e07c      	b.n	8006b8a <USB_EPStartXfer+0x17e2>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9e:	d820      	bhi.n	8006ae2 <USB_EPStartXfer+0x173a>
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <USB_EPStartXfer+0x1728>
 8006ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aca:	3301      	adds	r3, #1
 8006acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ad0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	029b      	lsls	r3, r3, #10
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	e053      	b.n	8006b8a <USB_EPStartXfer+0x17e2>
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <USB_EPStartXfer+0x176a>
 8006b08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	029b      	lsls	r3, r3, #10
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e02d      	b.n	8006b8a <USB_EPStartXfer+0x17e2>
 8006b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d125      	bne.n	8006b8a <USB_EPStartXfer+0x17e2>
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b54:	4413      	add	r3, r2
 8006b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 81fe 	beq.w	8006f98 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <USB_EPStartXfer+0x182c>
 8006bc8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10d      	bne.n	8006bf0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bd4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 81db 	bne.w	8006f98 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006be2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 81d4 	bne.w	8006f98 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
 8006c4c:	e1a4      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	f040 819a 	bne.w	8006f94 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d917      	bls.n	8006cac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9c:	1ad2      	subs	r2, r2, r3
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	619a      	str	r2, [r3, #24]
 8006caa:	e00e      	b.n	8006cca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d178      	bne.n	8006dcc <USB_EPStartXfer+0x1a24>
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cfe:	4413      	add	r3, r2
 8006d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d16:	4413      	add	r3, r2
 8006d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d116      	bne.n	8006d56 <USB_EPStartXfer+0x19ae>
 8006d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e06b      	b.n	8006e2e <USB_EPStartXfer+0x1a86>
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d5c:	d818      	bhi.n	8006d90 <USB_EPStartXfer+0x19e8>
 8006d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <USB_EPStartXfer+0x19d6>
 8006d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d78:	3301      	adds	r3, #1
 8006d7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e04e      	b.n	8006e2e <USB_EPStartXfer+0x1a86>
 8006d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <USB_EPStartXfer+0x1a08>
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006daa:	3b01      	subs	r3, #1
 8006dac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e030      	b.n	8006e2e <USB_EPStartXfer+0x1a86>
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d128      	bne.n	8006e2e <USB_EPStartXfer+0x1a86>
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e00:	4413      	add	r3, r2
 8006e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	011a      	lsls	r2, r3, #4
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d178      	bne.n	8006f3e <USB_EPStartXfer+0x1b96>
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e70:	4413      	add	r3, r2
 8006e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	011a      	lsls	r2, r3, #4
 8006e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e88:	4413      	add	r3, r2
 8006e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <USB_EPStartXfer+0x1b20>
 8006e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e067      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ece:	d818      	bhi.n	8006f02 <USB_EPStartXfer+0x1b5a>
 8006ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <USB_EPStartXfer+0x1b48>
 8006ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eea:	3301      	adds	r3, #1
 8006eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ef0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	e04a      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
 8006f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <USB_EPStartXfer+0x1b7a>
 8006f18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	029b      	lsls	r3, r3, #10
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e02c      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d124      	bne.n	8006f98 <USB_EPStartXfer+0x1bf0>
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f64:	4413      	add	r3, r2
 8006f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	011a      	lsls	r2, r3, #4
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e001      	b.n	8006f98 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e03a      	b.n	800700e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fc2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d020      	beq.n	800706c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007040:	81bb      	strh	r3, [r7, #12]
 8007042:	89bb      	ldrh	r3, [r7, #12]
 8007044:	f083 0310 	eor.w	r3, r3, #16
 8007048:	81bb      	strh	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	441a      	add	r2, r3
 8007054:	89bb      	ldrh	r3, [r7, #12]
 8007056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800705a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	b29b      	uxth	r3, r3
 8007068:	8013      	strh	r3, [r2, #0]
 800706a:	e01f      	b.n	80070ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	81fb      	strh	r3, [r7, #14]
 8007084:	89fb      	ldrh	r3, [r7, #14]
 8007086:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800708a:	81fb      	strh	r3, [r7, #14]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	7b1b      	ldrb	r3, [r3, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 809d 	bne.w	8007206 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d04c      	beq.n	800716e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	823b      	strh	r3, [r7, #16]
 80070e2:	8a3b      	ldrh	r3, [r7, #16]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01b      	beq.n	8007124 <USB_EPClearStall+0x6c>
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	81fb      	strh	r3, [r7, #14]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	89fb      	ldrh	r3, [r7, #14]
 8007110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007120:	b29b      	uxth	r3, r3
 8007122:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	78db      	ldrb	r3, [r3, #3]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d06c      	beq.n	8007206 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007142:	81bb      	strh	r3, [r7, #12]
 8007144:	89bb      	ldrh	r3, [r7, #12]
 8007146:	f083 0320 	eor.w	r3, r3, #32
 800714a:	81bb      	strh	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	89bb      	ldrh	r3, [r7, #12]
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]
 800716c:	e04b      	b.n	8007206 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	82fb      	strh	r3, [r7, #22]
 800717c:	8afb      	ldrh	r3, [r7, #22]
 800717e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01b      	beq.n	80071be <USB_EPClearStall+0x106>
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719c:	82bb      	strh	r3, [r7, #20]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	441a      	add	r2, r3
 80071a8:	8abb      	ldrh	r3, [r7, #20]
 80071aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	827b      	strh	r3, [r7, #18]
 80071d6:	8a7b      	ldrh	r3, [r7, #18]
 80071d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071dc:	827b      	strh	r3, [r7, #18]
 80071de:	8a7b      	ldrh	r3, [r7, #18]
 80071e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071e4:	827b      	strh	r3, [r7, #18]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	441a      	add	r2, r3
 80071f0:	8a7b      	ldrh	r3, [r7, #18]
 80071f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007202:	b29b      	uxth	r3, r3
 8007204:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2280      	movs	r2, #128	; 0x80
 8007228:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800726e:	b29b      	uxth	r3, r3
 8007270:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007294:	b480      	push	{r7}
 8007296:	b08d      	sub	sp, #52	; 0x34
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4611      	mov	r1, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	460b      	mov	r3, r1
 80072a4:	80fb      	strh	r3, [r7, #6]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072aa:	88bb      	ldrh	r3, [r7, #4]
 80072ac:	3301      	adds	r3, #1
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	005a      	lsls	r2, r3, #1
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072cc:	e01e      	b.n	800730c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	3301      	adds	r3, #1
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	3302      	adds	r3, #2
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	3302      	adds	r3, #2
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	3301      	adds	r3, #1
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	3b01      	subs	r3, #1
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1dd      	bne.n	80072ce <USB_WritePMA+0x3a>
  }
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	3734      	adds	r7, #52	; 0x34
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800731e:	b480      	push	{r7}
 8007320:	b08b      	sub	sp, #44	; 0x2c
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4611      	mov	r1, r2
 800732a:	461a      	mov	r2, r3
 800732c:	460b      	mov	r3, r1
 800732e:	80fb      	strh	r3, [r7, #6]
 8007330:	4613      	mov	r3, r2
 8007332:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007334:	88bb      	ldrh	r3, [r7, #4]
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	b29b      	uxth	r3, r3
 800733a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	005a      	lsls	r2, r3, #1
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007350:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	e01b      	b.n	8007390 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	3302      	adds	r3, #2
 8007364:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	b2da      	uxtb	r2, r3
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3301      	adds	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	3302      	adds	r3, #2
 8007388:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	3b01      	subs	r3, #1
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e0      	bne.n	8007358 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	701a      	strb	r2, [r3, #0]
  }
}
 80073b2:	bf00      	nop
 80073b4:	372c      	adds	r7, #44	; 0x2c
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr

080073bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7c1b      	ldrb	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d115      	bne.n	8007400 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d8:	2202      	movs	r2, #2
 80073da:	2181      	movs	r1, #129	; 0x81
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fe98 	bl	8009112 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ec:	2202      	movs	r2, #2
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fe8e 	bl	8009112 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80073fe:	e012      	b.n	8007426 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007400:	2340      	movs	r3, #64	; 0x40
 8007402:	2202      	movs	r2, #2
 8007404:	2181      	movs	r1, #129	; 0x81
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fe83 	bl	8009112 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	2202      	movs	r2, #2
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fe7a 	bl	8009112 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007426:	2308      	movs	r3, #8
 8007428:	2203      	movs	r2, #3
 800742a:	2182      	movs	r1, #130	; 0x82
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fe70 	bl	8009112 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007438:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800743c:	f001 ff90 	bl	8009360 <USBD_static_malloc>
 8007440:	4602      	mov	r2, r0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d102      	bne.n	8007458 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e026      	b.n	80074a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7c1b      	ldrb	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 ff30 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007494:	e007      	b.n	80074a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	2101      	movs	r1, #1
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 ff27 	bl	80092f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074c0:	2181      	movs	r1, #129	; 0x81
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fe4b 	bl	800915e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074ce:	2101      	movs	r1, #1
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fe44 	bl	800915e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074de:	2182      	movs	r1, #130	; 0x82
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fe3c 	bl	800915e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007506:	4618      	mov	r0, r3
 8007508:	f001 ff36 	bl	8009378 <USBD_static_free>
    pdev->pClassData = NULL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007544:	2b00      	cmp	r3, #0
 8007546:	d039      	beq.n	80075bc <USBD_CDC_Setup+0x9e>
 8007548:	2b20      	cmp	r3, #32
 800754a:	d17f      	bne.n	800764c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	88db      	ldrh	r3, [r3, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d029      	beq.n	80075a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b25b      	sxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	da11      	bge.n	8007582 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800756a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	88d2      	ldrh	r2, [r2, #6]
 8007570:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007572:	6939      	ldr	r1, [r7, #16]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	461a      	mov	r2, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fa09 	bl	8008992 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007580:	e06b      	b.n	800765a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785a      	ldrb	r2, [r3, #1]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007598:	6939      	ldr	r1, [r7, #16]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	461a      	mov	r2, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fa24 	bl	80089ee <USBD_CtlPrepareRx>
      break;
 80075a6:	e058      	b.n	800765a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	7850      	ldrb	r0, [r2, #1]
 80075b4:	2200      	movs	r2, #0
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	4798      	blx	r3
      break;
 80075ba:	e04e      	b.n	800765a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b0b      	cmp	r3, #11
 80075c2:	d02e      	beq.n	8007622 <USBD_CDC_Setup+0x104>
 80075c4:	2b0b      	cmp	r3, #11
 80075c6:	dc38      	bgt.n	800763a <USBD_CDC_Setup+0x11c>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <USBD_CDC_Setup+0xb4>
 80075cc:	2b0a      	cmp	r3, #10
 80075ce:	d014      	beq.n	80075fa <USBD_CDC_Setup+0xdc>
 80075d0:	e033      	b.n	800763a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d107      	bne.n	80075ec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075dc:	f107 030c 	add.w	r3, r7, #12
 80075e0:	2202      	movs	r2, #2
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f9d4 	bl	8008992 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ea:	e02e      	b.n	800764a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 f965 	bl	80088be <USBD_CtlError>
            ret = USBD_FAIL;
 80075f4:	2302      	movs	r3, #2
 80075f6:	75fb      	strb	r3, [r7, #23]
          break;
 80075f8:	e027      	b.n	800764a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007600:	2b03      	cmp	r3, #3
 8007602:	d107      	bne.n	8007614 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007604:	f107 030f 	add.w	r3, r7, #15
 8007608:	2201      	movs	r2, #1
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f9c0 	bl	8008992 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007612:	e01a      	b.n	800764a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 f951 	bl	80088be <USBD_CtlError>
            ret = USBD_FAIL;
 800761c:	2302      	movs	r3, #2
 800761e:	75fb      	strb	r3, [r7, #23]
          break;
 8007620:	e013      	b.n	800764a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007628:	2b03      	cmp	r3, #3
 800762a:	d00d      	beq.n	8007648 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f945 	bl	80088be <USBD_CtlError>
            ret = USBD_FAIL;
 8007634:	2302      	movs	r3, #2
 8007636:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007638:	e006      	b.n	8007648 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f93e 	bl	80088be <USBD_CtlError>
          ret = USBD_FAIL;
 8007642:	2302      	movs	r3, #2
 8007644:	75fb      	strb	r3, [r7, #23]
          break;
 8007646:	e000      	b.n	800764a <USBD_CDC_Setup+0x12c>
          break;
 8007648:	bf00      	nop
      }
      break;
 800764a:	e006      	b.n	800765a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f935 	bl	80088be <USBD_CtlError>
      ret = USBD_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	bf00      	nop
  }

  return ret;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800767e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d03a      	beq.n	8007700 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	331c      	adds	r3, #28
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d029      	beq.n	80076f4 <USBD_CDC_DataIn+0x90>
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	331c      	adds	r3, #28
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	78f9      	ldrb	r1, [r7, #3]
 80076b4:	68b8      	ldr	r0, [r7, #8]
 80076b6:	460b      	mov	r3, r1
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	4403      	add	r3, r0
 80076c0:	3338      	adds	r3, #56	; 0x38
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d110      	bne.n	80076f4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	331c      	adds	r3, #28
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076e6:	78f9      	ldrb	r1, [r7, #3]
 80076e8:	2300      	movs	r3, #0
 80076ea:	2200      	movs	r2, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 fdde 	bl	80092ae <USBD_LL_Transmit>
 80076f2:	e003      	b.n	80076fc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fe09 	bl	800933a <USBD_LL_GetRxDataSize>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800774e:	4611      	mov	r1, r2
 8007750:	4798      	blx	r3

    return USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007776:	2b00      	cmp	r3, #0
 8007778:	d015      	beq.n	80077a6 <USBD_CDC_EP0_RxReady+0x46>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007780:	2bff      	cmp	r3, #255	; 0xff
 8007782:	d010      	beq.n	80077a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007792:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800779a:	b292      	uxth	r2, r2
 800779c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	22ff      	movs	r2, #255	; 0xff
 80077a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2243      	movs	r2, #67	; 0x43
 80077bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	2000009c 	.word	0x2000009c

080077d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2243      	movs	r2, #67	; 0x43
 80077dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077de:	4b03      	ldr	r3, [pc, #12]	; (80077ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20000058 	.word	0x20000058

080077f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2243      	movs	r2, #67	; 0x43
 80077fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077fe:	4b03      	ldr	r3, [pc, #12]	; (800780c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	200000e0 	.word	0x200000e0

08007810 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	220a      	movs	r2, #10
 800781c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800781e:	4b03      	ldr	r3, [pc, #12]	; (800782c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000014 	.word	0x20000014

08007830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	bc80      	pop	{r7}
 800785a:	4770      	bx	lr

0800785c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007870:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01c      	beq.n	8007908 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d115      	bne.n	8007904 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2181      	movs	r1, #129	; 0x81
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fcd7 	bl	80092ae <USBD_LL_Transmit>

      return USBD_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e002      	b.n	800790a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007908:	2302      	movs	r3, #2
  }
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007920:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d017      	beq.n	800795c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7c1b      	ldrb	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793e:	2101      	movs	r1, #1
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fcd7 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007946:	e007      	b.n	8007958 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	2101      	movs	r1, #1
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fcce 	bl	80092f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800795c:	2302      	movs	r3, #2
  }
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4613      	mov	r3, r2
 8007972:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	e01a      	b.n	80079b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	79fa      	ldrb	r2, [r7, #7]
 80079aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 fb3b 	bl	8009028 <USBD_LL_Init>

  return USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d006      	beq.n	80079de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
 80079dc:	e001      	b.n	80079e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079de:	2302      	movs	r3, #2
 80079e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr

080079ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fb70 	bl	80090dc <USBD_LL_Start>

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr

08007a1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fed8 	bl	8008846 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d016      	beq.n	8007ae8 <USBD_LL_SetupStage+0x6a>
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d81c      	bhi.n	8007af8 <USBD_LL_SetupStage+0x7a>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <USBD_LL_SetupStage+0x4a>
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d008      	beq.n	8007ad8 <USBD_LL_SetupStage+0x5a>
 8007ac6:	e017      	b.n	8007af8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9cb 	bl	8007e6c <USBD_StdDevReq>
      break;
 8007ad6:	e01a      	b.n	8007b0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa2d 	bl	8007f40 <USBD_StdItfReq>
      break;
 8007ae6:	e012      	b.n	8007b0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa6d 	bl	8007fd0 <USBD_StdEPReq>
      break;
 8007af6:	e00a      	b.n	8007b0e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007afe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fb48 	bl	800919c <USBD_LL_StallEP>
      break;
 8007b0c:	bf00      	nop
  }

  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	460b      	mov	r3, r1
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d14b      	bne.n	8007bc4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d134      	bne.n	8007ba8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d919      	bls.n	8007b7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d203      	bcs.n	8007b6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	e002      	b.n	8007b72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 ff57 	bl	8008a2a <USBD_CtlContinueRx>
 8007b7c:	e038      	b.n	8007bf0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d105      	bne.n	8007ba0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 ff54 	bl	8008a4e <USBD_CtlSendStatus>
 8007ba6:	e023      	b.n	8007bf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d11e      	bne.n	8007bf0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 faed 	bl	800919c <USBD_LL_StallEP>
 8007bc2:	e015      	b.n	8007bf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00d      	beq.n	8007bec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d108      	bne.n	8007bec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	7afa      	ldrb	r2, [r7, #11]
 8007be4:	4611      	mov	r1, r2
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	4798      	blx	r3
 8007bea:	e001      	b.n	8007bf0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bec:	2302      	movs	r3, #2
 8007bee:	e000      	b.n	8007bf2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b086      	sub	sp, #24
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	460b      	mov	r3, r1
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d17f      	bne.n	8007d0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3314      	adds	r3, #20
 8007c12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d15c      	bne.n	8007cd8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d915      	bls.n	8007c56 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	1ad2      	subs	r2, r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fec1 	bl	80089ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f001 fb50 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007c54:	e04e      	b.n	8007cf4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	6912      	ldr	r2, [r2, #16]
 8007c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c62:	fb01 f202 	mul.w	r2, r1, r2
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11c      	bne.n	8007ca6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d316      	bcc.n	8007ca6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d20f      	bcs.n	8007ca6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fe9d 	bl	80089ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fb28 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007ca4:	e026      	b.n	8007cf4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d105      	bne.n	8007cc8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cc8:	2180      	movs	r1, #128	; 0x80
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 fa66 	bl	800919c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fecf 	bl	8008a74 <USBD_CtlReceiveStatus>
 8007cd6:	e00d      	b.n	8007cf4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d004      	beq.n	8007cec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 fa54 	bl	800919c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d11d      	bne.n	8007d3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fe81 	bl	8007a06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d0c:	e015      	b.n	8007d3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d108      	bne.n	8007d36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	7afa      	ldrb	r2, [r7, #11]
 8007d2e:	4611      	mov	r1, r2
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	4798      	blx	r3
 8007d34:	e001      	b.n	8007d3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d36:	2302      	movs	r3, #2
 8007d38:	e000      	b.n	8007d3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f9dd 	bl	8009112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2180      	movs	r1, #128	; 0x80
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 f9cf 	bl	8009112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2240      	movs	r2, #64	; 0x40
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6852      	ldr	r2, [r2, #4]
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	4611      	mov	r1, r2
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
  }

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr

08007de4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d105      	bne.n	8007e2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr

08007e36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d10b      	bne.n	8007e60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d005      	beq.n	8007e92 <USBD_StdDevReq+0x26>
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d84f      	bhi.n	8007f2a <USBD_StdDevReq+0xbe>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <USBD_StdDevReq+0x36>
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d14b      	bne.n	8007f2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
      break;
 8007ea0:	e048      	b.n	8007f34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b09      	cmp	r3, #9
 8007ea8:	d839      	bhi.n	8007f1e <USBD_StdDevReq+0xb2>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBD_StdDevReq+0x44>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08007f15 	.word	0x08007f15
 8007eb8:	08007f1f 	.word	0x08007f1f
 8007ebc:	08007f0b 	.word	0x08007f0b
 8007ec0:	08007f1f 	.word	0x08007f1f
 8007ec4:	08007ee3 	.word	0x08007ee3
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007f1f 	.word	0x08007f1f
 8007ed0:	08007ef7 	.word	0x08007ef7
 8007ed4:	08007eed 	.word	0x08007eed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9dc 	bl	8008298 <USBD_GetDescriptor>
          break;
 8007ee0:	e022      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb3f 	bl	8008568 <USBD_SetAddress>
          break;
 8007eea:	e01d      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fb7e 	bl	80085f0 <USBD_SetConfig>
          break;
 8007ef4:	e018      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc07 	bl	800870c <USBD_GetConfig>
          break;
 8007efe:	e013      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fc37 	bl	8008776 <USBD_GetStatus>
          break;
 8007f08:	e00e      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc65 	bl	80087dc <USBD_SetFeature>
          break;
 8007f12:	e009      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fc74 	bl	8008804 <USBD_ClrFeature>
          break;
 8007f1c:	e004      	b.n	8007f28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fccc 	bl	80088be <USBD_CtlError>
          break;
 8007f26:	bf00      	nop
      }
      break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fcc6 	bl	80088be <USBD_CtlError>
      break;
 8007f32:	bf00      	nop
  }

  return ret;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop

08007f40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	d005      	beq.n	8007f66 <USBD_StdItfReq+0x26>
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d82e      	bhi.n	8007fbc <USBD_StdItfReq+0x7c>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <USBD_StdItfReq+0x26>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d12a      	bne.n	8007fbc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d81d      	bhi.n	8007fae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	889b      	ldrh	r3, [r3, #4]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d813      	bhi.n	8007fa4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d110      	bne.n	8007fb8 <USBD_StdItfReq+0x78>
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10d      	bne.n	8007fb8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fd56 	bl	8008a4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fa2:	e009      	b.n	8007fb8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc89 	bl	80088be <USBD_CtlError>
          break;
 8007fac:	e004      	b.n	8007fb8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc84 	bl	80088be <USBD_CtlError>
          break;
 8007fb6:	e000      	b.n	8007fba <USBD_StdItfReq+0x7a>
          break;
 8007fb8:	bf00      	nop
      }
      break;
 8007fba:	e004      	b.n	8007fc6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc7d 	bl	80088be <USBD_CtlError>
      break;
 8007fc4:	bf00      	nop
  }

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fec:	2b40      	cmp	r3, #64	; 0x40
 8007fee:	d007      	beq.n	8008000 <USBD_StdEPReq+0x30>
 8007ff0:	2b40      	cmp	r3, #64	; 0x40
 8007ff2:	f200 8146 	bhi.w	8008282 <USBD_StdEPReq+0x2b2>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <USBD_StdEPReq+0x40>
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	f040 8141 	bne.w	8008282 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
      break;
 800800e:	e13d      	b.n	800828c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008018:	2b20      	cmp	r3, #32
 800801a:	d10a      	bne.n	8008032 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	e12d      	b.n	800828e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b03      	cmp	r3, #3
 8008038:	d007      	beq.n	800804a <USBD_StdEPReq+0x7a>
 800803a:	2b03      	cmp	r3, #3
 800803c:	f300 811b 	bgt.w	8008276 <USBD_StdEPReq+0x2a6>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d072      	beq.n	800812a <USBD_StdEPReq+0x15a>
 8008044:	2b01      	cmp	r3, #1
 8008046:	d03a      	beq.n	80080be <USBD_StdEPReq+0xee>
 8008048:	e115      	b.n	8008276 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	2b02      	cmp	r3, #2
 8008052:	d002      	beq.n	800805a <USBD_StdEPReq+0x8a>
 8008054:	2b03      	cmp	r3, #3
 8008056:	d015      	beq.n	8008084 <USBD_StdEPReq+0xb4>
 8008058:	e02b      	b.n	80080b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <USBD_StdEPReq+0xaa>
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d009      	beq.n	800807a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 f896 	bl	800919c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 f892 	bl	800919c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008078:	e020      	b.n	80080bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc1e 	bl	80088be <USBD_CtlError>
              break;
 8008082:	e01b      	b.n	80080bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10e      	bne.n	80080aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <USBD_StdEPReq+0xda>
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d008      	beq.n	80080aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	88db      	ldrh	r3, [r3, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d104      	bne.n	80080aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f879 	bl	800919c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fccf 	bl	8008a4e <USBD_CtlSendStatus>

              break;
 80080b0:	e004      	b.n	80080bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc02 	bl	80088be <USBD_CtlError>
              break;
 80080ba:	bf00      	nop
          }
          break;
 80080bc:	e0e0      	b.n	8008280 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d002      	beq.n	80080ce <USBD_StdEPReq+0xfe>
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d015      	beq.n	80080f8 <USBD_StdEPReq+0x128>
 80080cc:	e026      	b.n	800811c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00c      	beq.n	80080ee <USBD_StdEPReq+0x11e>
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d009      	beq.n	80080ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 f85c 	bl	800919c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 f858 	bl	800919c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080ec:	e01c      	b.n	8008128 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fbe4 	bl	80088be <USBD_CtlError>
              break;
 80080f6:	e017      	b.n	8008128 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d112      	bne.n	8008126 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f863 	bl	80091da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fc9a 	bl	8008a4e <USBD_CtlSendStatus>
              }
              break;
 800811a:	e004      	b.n	8008126 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fbcd 	bl	80088be <USBD_CtlError>
              break;
 8008124:	e000      	b.n	8008128 <USBD_StdEPReq+0x158>
              break;
 8008126:	bf00      	nop
          }
          break;
 8008128:	e0aa      	b.n	8008280 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008130:	2b02      	cmp	r3, #2
 8008132:	d002      	beq.n	800813a <USBD_StdEPReq+0x16a>
 8008134:	2b03      	cmp	r3, #3
 8008136:	d032      	beq.n	800819e <USBD_StdEPReq+0x1ce>
 8008138:	e097      	b.n	800826a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <USBD_StdEPReq+0x180>
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b80      	cmp	r3, #128	; 0x80
 8008144:	d004      	beq.n	8008150 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fbb8 	bl	80088be <USBD_CtlError>
                break;
 800814e:	e091      	b.n	8008274 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	da0b      	bge.n	8008170 <USBD_StdEPReq+0x1a0>
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	3310      	adds	r3, #16
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	3304      	adds	r3, #4
 800816e:	e00b      	b.n	8008188 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	3304      	adds	r3, #4
 8008188:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2202      	movs	r2, #2
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fbfb 	bl	8008992 <USBD_CtlSendData>
              break;
 800819c:	e06a      	b.n	8008274 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800819e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da11      	bge.n	80081ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	f003 020f 	and.w	r2, r3, #15
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	3318      	adds	r3, #24
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d117      	bne.n	80081f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb7b 	bl	80088be <USBD_CtlError>
                  break;
 80081c8:	e054      	b.n	8008274 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb68 	bl	80088be <USBD_CtlError>
                  break;
 80081ee:	e041      	b.n	8008274 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da0b      	bge.n	8008210 <USBD_StdEPReq+0x240>
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	3310      	adds	r3, #16
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	3304      	adds	r3, #4
 800820e:	e00b      	b.n	8008228 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	3304      	adds	r3, #4
 8008228:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <USBD_StdEPReq+0x266>
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d103      	bne.n	800823e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	e00e      	b.n	800825c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 ffe8 	bl	8009218 <USBD_LL_IsStallEP>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e002      	b.n	800825c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2202      	movs	r2, #2
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fb95 	bl	8008992 <USBD_CtlSendData>
              break;
 8008268:	e004      	b.n	8008274 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fb26 	bl	80088be <USBD_CtlError>
              break;
 8008272:	bf00      	nop
          }
          break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fb20 	bl	80088be <USBD_CtlError>
          break;
 800827e:	bf00      	nop
      }
      break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fb1a 	bl	80088be <USBD_CtlError>
      break;
 800828a:	bf00      	nop
  }

  return ret;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	f200 8128 	bhi.w	800850e <USBD_GetDescriptor+0x276>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_GetDescriptor+0x2c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	08008339 	.word	0x08008339
 80082d0:	0800850f 	.word	0x0800850f
 80082d4:	0800850f 	.word	0x0800850f
 80082d8:	080084af 	.word	0x080084af
 80082dc:	080084db 	.word	0x080084db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	f107 0108 	add.w	r1, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
      break;
 80082f6:	e112      	b.n	800851e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7c1b      	ldrb	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10d      	bne.n	800831c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f107 0208 	add.w	r2, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800831a:	e100      	b.n	800851e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	f107 0208 	add.w	r2, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	2202      	movs	r2, #2
 8008334:	701a      	strb	r2, [r3, #0]
      break;
 8008336:	e0f2      	b.n	800851e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b05      	cmp	r3, #5
 8008340:	f200 80ac 	bhi.w	800849c <USBD_GetDescriptor+0x204>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <USBD_GetDescriptor+0xb4>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008365 	.word	0x08008365
 8008350:	08008399 	.word	0x08008399
 8008354:	080083cd 	.word	0x080083cd
 8008358:	08008401 	.word	0x08008401
 800835c:	08008435 	.word	0x08008435
 8008360:	08008469 	.word	0x08008469
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7c12      	ldrb	r2, [r2, #16]
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008386:	e091      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa97 	bl	80088be <USBD_CtlError>
            err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
          break;
 8008396:	e089      	b.n	80084ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ba:	e077      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa7d 	bl	80088be <USBD_CtlError>
            err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ca:	e06f      	b.n	80084ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e05d      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa63 	bl	80088be <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e055      	b.n	80084ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e043      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa49 	bl	80088be <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e03b      	b.n	80084ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e029      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa2f 	bl	80088be <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e021      	b.n	80084ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848a:	e00f      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa15 	bl	80088be <USBD_CtlError>
            err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
          break;
 800849a:	e007      	b.n	80084ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa0d 	bl	80088be <USBD_CtlError>
          err++;
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	3301      	adds	r3, #1
 80084a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084aa:	e038      	b.n	800851e <USBD_GetDescriptor+0x286>
 80084ac:	e037      	b.n	800851e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7c1b      	ldrb	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084be:	f107 0208 	add.w	r2, r7, #8
 80084c2:	4610      	mov	r0, r2
 80084c4:	4798      	blx	r3
 80084c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084c8:	e029      	b.n	800851e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9f6 	bl	80088be <USBD_CtlError>
        err++;
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	3301      	adds	r3, #1
 80084d6:	72fb      	strb	r3, [r7, #11]
      break;
 80084d8:	e021      	b.n	800851e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7c1b      	ldrb	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10d      	bne.n	80084fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f107 0208 	add.w	r2, r7, #8
 80084ee:	4610      	mov	r0, r2
 80084f0:	4798      	blx	r3
 80084f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	2207      	movs	r2, #7
 80084fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084fc:	e00f      	b.n	800851e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f9dc 	bl	80088be <USBD_CtlError>
        err++;
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	3301      	adds	r3, #1
 800850a:	72fb      	strb	r3, [r7, #11]
      break;
 800850c:	e007      	b.n	800851e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9d4 	bl	80088be <USBD_CtlError>
      err++;
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	3301      	adds	r3, #1
 800851a:	72fb      	strb	r3, [r7, #11]
      break;
 800851c:	bf00      	nop
  }

  if (err != 0U)
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11c      	bne.n	800855e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008524:	893b      	ldrh	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d011      	beq.n	800854e <USBD_GetDescriptor+0x2b6>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00d      	beq.n	800854e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88da      	ldrh	r2, [r3, #6]
 8008536:	893b      	ldrh	r3, [r7, #8]
 8008538:	4293      	cmp	r3, r2
 800853a:	bf28      	it	cs
 800853c:	4613      	movcs	r3, r2
 800853e:	b29b      	uxth	r3, r3
 8008540:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008542:	893b      	ldrh	r3, [r7, #8]
 8008544:	461a      	mov	r2, r3
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa22 	bl	8008992 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa79 	bl	8008a4e <USBD_CtlSendStatus>
 800855c:	e000      	b.n	8008560 <USBD_GetDescriptor+0x2c8>
    return;
 800855e:	bf00      	nop
    }
  }
}
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop

08008568 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	889b      	ldrh	r3, [r3, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d130      	bne.n	80085dc <USBD_SetAddress+0x74>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d12c      	bne.n	80085dc <USBD_SetAddress+0x74>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	2b7f      	cmp	r3, #127	; 0x7f
 8008588:	d828      	bhi.n	80085dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	885b      	ldrh	r3, [r3, #2]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859c:	2b03      	cmp	r3, #3
 800859e:	d104      	bne.n	80085aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f98b 	bl	80088be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a8:	e01d      	b.n	80085e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7bfa      	ldrb	r2, [r7, #15]
 80085ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fe5a 	bl	8009270 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fa46 	bl	8008a4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d0:	e009      	b.n	80085e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085da:	e004      	b.n	80085e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f96d 	bl	80088be <USBD_CtlError>
  }
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	885b      	ldrh	r3, [r3, #2]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	4b41      	ldr	r3, [pc, #260]	; (8008708 <USBD_SetConfig+0x118>)
 8008602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008604:	4b40      	ldr	r3, [pc, #256]	; (8008708 <USBD_SetConfig+0x118>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d904      	bls.n	8008616 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f955 	bl	80088be <USBD_CtlError>
 8008614:	e075      	b.n	8008702 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861c:	2b02      	cmp	r3, #2
 800861e:	d002      	beq.n	8008626 <USBD_SetConfig+0x36>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d023      	beq.n	800866c <USBD_SetConfig+0x7c>
 8008624:	e062      	b.n	80086ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008626:	4b38      	ldr	r3, [pc, #224]	; (8008708 <USBD_SetConfig+0x118>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01a      	beq.n	8008664 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800862e:	4b36      	ldr	r3, [pc, #216]	; (8008708 <USBD_SetConfig+0x118>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2203      	movs	r2, #3
 800863c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008640:	4b31      	ldr	r3, [pc, #196]	; (8008708 <USBD_SetConfig+0x118>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff f9e7 	bl	8007a1a <USBD_SetClassConfig>
 800864c:	4603      	mov	r3, r0
 800864e:	2b02      	cmp	r3, #2
 8008650:	d104      	bne.n	800865c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f932 	bl	80088be <USBD_CtlError>
            return;
 800865a:	e052      	b.n	8008702 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9f6 	bl	8008a4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008662:	e04e      	b.n	8008702 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f9f2 	bl	8008a4e <USBD_CtlSendStatus>
        break;
 800866a:	e04a      	b.n	8008702 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800866c:	4b26      	ldr	r3, [pc, #152]	; (8008708 <USBD_SetConfig+0x118>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d112      	bne.n	800869a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800867c:	4b22      	ldr	r3, [pc, #136]	; (8008708 <USBD_SetConfig+0x118>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008686:	4b20      	ldr	r3, [pc, #128]	; (8008708 <USBD_SetConfig+0x118>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff f9e3 	bl	8007a58 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9db 	bl	8008a4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008698:	e033      	b.n	8008702 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <USBD_SetConfig+0x118>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d01d      	beq.n	80086e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff f9d1 	bl	8007a58 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <USBD_SetConfig+0x118>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086c0:	4b11      	ldr	r3, [pc, #68]	; (8008708 <USBD_SetConfig+0x118>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff f9a7 	bl	8007a1a <USBD_SetClassConfig>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d104      	bne.n	80086dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8f2 	bl	80088be <USBD_CtlError>
            return;
 80086da:	e012      	b.n	8008702 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f9b6 	bl	8008a4e <USBD_CtlSendStatus>
        break;
 80086e2:	e00e      	b.n	8008702 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f9b2 	bl	8008a4e <USBD_CtlSendStatus>
        break;
 80086ea:	e00a      	b.n	8008702 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f8e5 	bl	80088be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <USBD_SetConfig+0x118>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff f9ac 	bl	8007a58 <USBD_ClrClassConfig>
        break;
 8008700:	bf00      	nop
    }
  }
}
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	2000038c 	.word	0x2000038c

0800870c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	88db      	ldrh	r3, [r3, #6]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d004      	beq.n	8008728 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f8cc 	bl	80088be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008726:	e022      	b.n	800876e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	2b02      	cmp	r3, #2
 8008730:	dc02      	bgt.n	8008738 <USBD_GetConfig+0x2c>
 8008732:	2b00      	cmp	r3, #0
 8008734:	dc03      	bgt.n	800873e <USBD_GetConfig+0x32>
 8008736:	e015      	b.n	8008764 <USBD_GetConfig+0x58>
 8008738:	2b03      	cmp	r3, #3
 800873a:	d00b      	beq.n	8008754 <USBD_GetConfig+0x48>
 800873c:	e012      	b.n	8008764 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3308      	adds	r3, #8
 8008748:	2201      	movs	r2, #1
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f920 	bl	8008992 <USBD_CtlSendData>
        break;
 8008752:	e00c      	b.n	800876e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3304      	adds	r3, #4
 8008758:	2201      	movs	r2, #1
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f918 	bl	8008992 <USBD_CtlSendData>
        break;
 8008762:	e004      	b.n	800876e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8a9 	bl	80088be <USBD_CtlError>
        break;
 800876c:	bf00      	nop
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008786:	3b01      	subs	r3, #1
 8008788:	2b02      	cmp	r3, #2
 800878a:	d81e      	bhi.n	80087ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	88db      	ldrh	r3, [r3, #6]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d004      	beq.n	800879e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f891 	bl	80088be <USBD_CtlError>
        break;
 800879c:	e01a      	b.n	80087d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f043 0202 	orr.w	r2, r3, #2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	330c      	adds	r3, #12
 80087be:	2202      	movs	r2, #2
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8e5 	bl	8008992 <USBD_CtlSendData>
      break;
 80087c8:	e004      	b.n	80087d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f876 	bl	80088be <USBD_CtlError>
      break;
 80087d2:	bf00      	nop
  }
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d106      	bne.n	80087fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f929 	bl	8008a4e <USBD_CtlSendStatus>
  }
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	3b01      	subs	r3, #1
 8008816:	2b02      	cmp	r3, #2
 8008818:	d80b      	bhi.n	8008832 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d10c      	bne.n	800883c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f90f 	bl	8008a4e <USBD_CtlSendStatus>
      }
      break;
 8008830:	e004      	b.n	800883c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f842 	bl	80088be <USBD_CtlError>
      break;
 800883a:	e000      	b.n	800883e <USBD_ClrFeature+0x3a>
      break;
 800883c:	bf00      	nop
  }
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785a      	ldrb	r2, [r3, #1]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	3302      	adds	r3, #2
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b29a      	uxth	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	3303      	adds	r3, #3
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	b29b      	uxth	r3, r3
 8008874:	4413      	add	r3, r2
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3304      	adds	r3, #4
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b29a      	uxth	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	3305      	adds	r3, #5
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	b29b      	uxth	r3, r3
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	b29b      	uxth	r3, r3
 8008890:	4413      	add	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	3306      	adds	r3, #6
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	3307      	adds	r3, #7
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	80da      	strh	r2, [r3, #6]

}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr

080088be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088c8:	2180      	movs	r1, #128	; 0x80
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fc66 	bl	800919c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fc62 	bl	800919c <USBD_LL_StallEP>
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d032      	beq.n	800895c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f834 	bl	8008964 <USBD_GetLen>
 80088fc:	4603      	mov	r3, r0
 80088fe:	3301      	adds	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	75fa      	strb	r2, [r7, #23]
 8008910:	461a      	mov	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4413      	add	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	7812      	ldrb	r2, [r2, #0]
 800891a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	75fa      	strb	r2, [r7, #23]
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4413      	add	r3, r2
 8008928:	2203      	movs	r2, #3
 800892a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800892c:	e012      	b.n	8008954 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	60fa      	str	r2, [r7, #12]
 8008934:	7dfa      	ldrb	r2, [r7, #23]
 8008936:	1c51      	adds	r1, r2, #1
 8008938:	75f9      	strb	r1, [r7, #23]
 800893a:	4611      	mov	r1, r2
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	440a      	add	r2, r1
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	75fa      	strb	r2, [r7, #23]
 800894a:	461a      	mov	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4413      	add	r3, r2
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e8      	bne.n	800892e <USBD_GetString+0x4e>
    }
  }
}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008970:	e005      	b.n	800897e <USBD_GetLen+0x1a>
  {
    len++;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	3301      	adds	r3, #1
 8008976:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3301      	adds	r3, #1
 800897c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1f5      	bne.n	8008972 <USBD_GetLen+0xe>
  }

  return len;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	4613      	mov	r3, r2
 800899e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089a8:	88fa      	ldrh	r2, [r7, #6]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	2100      	movs	r1, #0
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fc77 	bl	80092ae <USBD_LL_Transmit>

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	2100      	movs	r1, #0
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fc65 	bl	80092ae <USBD_LL_Transmit>

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	4613      	mov	r3, r2
 80089fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2203      	movs	r2, #3
 8008a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a04:	88fa      	ldrh	r2, [r7, #6]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fc6a 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	4613      	mov	r3, r2
 8008a36:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fc58 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fc22 	bl	80092ae <USBD_LL_Transmit>

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a84:	2300      	movs	r3, #0
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fc32 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4912      	ldr	r1, [pc, #72]	; (8008aec <MX_USB_DEVICE_Init+0x50>)
 8008aa4:	4812      	ldr	r0, [pc, #72]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aa6:	f7fe ff5e 	bl	8007966 <USBD_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ab0:	f7f7 ff8c 	bl	80009cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ab4:	490f      	ldr	r1, [pc, #60]	; (8008af4 <MX_USB_DEVICE_Init+0x58>)
 8008ab6:	480e      	ldr	r0, [pc, #56]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ab8:	f7fe ff80 	bl	80079bc <USBD_RegisterClass>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ac2:	f7f7 ff83 	bl	80009cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ac6:	490c      	ldr	r1, [pc, #48]	; (8008af8 <MX_USB_DEVICE_Init+0x5c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aca:	f7fe feb1 	bl	8007830 <USBD_CDC_RegisterInterface>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ad4:	f7f7 ff7a 	bl	80009cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe ff88 	bl	80079ee <USBD_Start>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ae4:	f7f7 ff72 	bl	80009cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ae8:	bf00      	nop
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000134 	.word	0x20000134
 8008af0:	20000390 	.word	0x20000390
 8008af4:	20000020 	.word	0x20000020
 8008af8:	20000124 	.word	0x20000124

08008afc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b00:	2200      	movs	r2, #0
 8008b02:	4905      	ldr	r1, [pc, #20]	; (8008b18 <CDC_Init_FS+0x1c>)
 8008b04:	4805      	ldr	r0, [pc, #20]	; (8008b1c <CDC_Init_FS+0x20>)
 8008b06:	f7fe fea9 	bl	800785c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b0a:	4905      	ldr	r1, [pc, #20]	; (8008b20 <CDC_Init_FS+0x24>)
 8008b0c:	4803      	ldr	r0, [pc, #12]	; (8008b1c <CDC_Init_FS+0x20>)
 8008b0e:	f7fe febe 	bl	800788e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000a3c 	.word	0x20000a3c
 8008b1c:	20000390 	.word	0x20000390
 8008b20:	20000654 	.word	0x20000654

08008b24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr
	...

08008b34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
 8008b40:	4613      	mov	r3, r2
 8008b42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b23      	cmp	r3, #35	; 0x23
 8008b48:	d84a      	bhi.n	8008be0 <CDC_Control_FS+0xac>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <CDC_Control_FS+0x1c>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008be1 	.word	0x08008be1
 8008b5c:	08008be1 	.word	0x08008be1
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008be1 	.word	0x08008be1
 8008b70:	08008be1 	.word	0x08008be1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008be1 	.word	0x08008be1
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008be1 	.word	0x08008be1
 8008bd8:	08008be1 	.word	0x08008be1
 8008bdc:	08008be1 	.word	0x08008be1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008be0:	bf00      	nop
  }

  return (USBD_OK);
 8008be2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop

08008bf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	480d      	ldr	r0, [pc, #52]	; (8008c34 <CDC_Receive_FS+0x44>)
 8008bfe:	f7fe fe46 	bl	800788e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c02:	480c      	ldr	r0, [pc, #48]	; (8008c34 <CDC_Receive_FS+0x44>)
 8008c04:	f7fe fe85 	bl	8007912 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	2100      	movs	r1, #0
 8008c12:	4809      	ldr	r0, [pc, #36]	; (8008c38 <CDC_Receive_FS+0x48>)
 8008c14:	f000 fc28 	bl	8009468 <memset>
  memcpy(buffer, Buf, len);
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4806      	ldr	r0, [pc, #24]	; (8008c38 <CDC_Receive_FS+0x48>)
 8008c20:	f000 fc14 	bl	800944c <memcpy>
  terminal_proses(buffer);
 8008c24:	4804      	ldr	r0, [pc, #16]	; (8008c38 <CDC_Receive_FS+0x48>)
 8008c26:	f7f8 f90d 	bl	8000e44 <terminal_proses>
  return (USBD_OK);
 8008c2a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000390 	.word	0x20000390
 8008c38:	20000214 	.word	0x20000214

08008c3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00b      	b.n	8008c7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	461a      	mov	r2, r3
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4806      	ldr	r0, [pc, #24]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c6a:	f7fe fdf7 	bl	800785c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c6e:	4805      	ldr	r0, [pc, #20]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c70:	f7fe fe20 	bl	80078b4 <USBD_CDC_TransmitPacket>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000390 	.word	0x20000390

08008c88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	6039      	str	r1, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2212      	movs	r2, #18
 8008c98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bc80      	pop	{r7}
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000150 	.word	0x20000150

08008cac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2204      	movs	r2, #4
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000164 	.word	0x20000164

08008cd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	4907      	ldr	r1, [pc, #28]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ce6:	4808      	ldr	r0, [pc, #32]	; (8008d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ce8:	f7ff fdfa 	bl	80088e0 <USBD_GetString>
 8008cec:	e004      	b.n	8008cf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4904      	ldr	r1, [pc, #16]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cf2:	4805      	ldr	r0, [pc, #20]	; (8008d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf4:	f7ff fdf4 	bl	80088e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000e24 	.word	0x20000e24
 8008d08:	0800b330 	.word	0x0800b330

08008d0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	4904      	ldr	r1, [pc, #16]	; (8008d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d1c:	4804      	ldr	r0, [pc, #16]	; (8008d30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d1e:	f7ff fddf 	bl	80088e0 <USBD_GetString>
  return USBD_StrDesc;
 8008d22:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000e24 	.word	0x20000e24
 8008d30:	0800b348 	.word	0x0800b348

08008d34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	221a      	movs	r2, #26
 8008d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d46:	f000 f843 	bl	8008dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d4a:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000168 	.word	0x20000168

08008d58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4907      	ldr	r1, [pc, #28]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d6e:	4808      	ldr	r0, [pc, #32]	; (8008d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d70:	f7ff fdb6 	bl	80088e0 <USBD_GetString>
 8008d74:	e004      	b.n	8008d80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	4904      	ldr	r1, [pc, #16]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d7c:	f7ff fdb0 	bl	80088e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d80:	4b02      	ldr	r3, [pc, #8]	; (8008d8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000e24 	.word	0x20000e24
 8008d90:	0800b35c 	.word	0x0800b35c

08008d94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4907      	ldr	r1, [pc, #28]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008daa:	4808      	ldr	r0, [pc, #32]	; (8008dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dac:	f7ff fd98 	bl	80088e0 <USBD_GetString>
 8008db0:	e004      	b.n	8008dbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4904      	ldr	r1, [pc, #16]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db6:	4805      	ldr	r0, [pc, #20]	; (8008dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db8:	f7ff fd92 	bl	80088e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000e24 	.word	0x20000e24
 8008dcc:	0800b368 	.word	0x0800b368

08008dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <Get_SerialNum+0x44>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <Get_SerialNum+0x48>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <Get_SerialNum+0x4c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008df6:	2208      	movs	r2, #8
 8008df8:	4909      	ldr	r1, [pc, #36]	; (8008e20 <Get_SerialNum+0x50>)
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f814 	bl	8008e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e00:	2204      	movs	r2, #4
 8008e02:	4908      	ldr	r1, [pc, #32]	; (8008e24 <Get_SerialNum+0x54>)
 8008e04:	68b8      	ldr	r0, [r7, #8]
 8008e06:	f000 f80f 	bl	8008e28 <IntToUnicode>
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	1ffff7e8 	.word	0x1ffff7e8
 8008e18:	1ffff7ec 	.word	0x1ffff7ec
 8008e1c:	1ffff7f0 	.word	0x1ffff7f0
 8008e20:	2000016a 	.word	0x2000016a
 8008e24:	2000017a 	.word	0x2000017a

08008e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
 8008e3e:	e027      	b.n	8008e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0f1b      	lsrs	r3, r3, #28
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d80b      	bhi.n	8008e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	4619      	mov	r1, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	440b      	add	r3, r1
 8008e58:	3230      	adds	r2, #48	; 0x30
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	e00a      	b.n	8008e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	0f1b      	lsrs	r3, r3, #28
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	440b      	add	r3, r1
 8008e70:	3237      	adds	r2, #55	; 0x37
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	3301      	adds	r3, #1
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
 8008e90:	7dfa      	ldrb	r2, [r7, #23]
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d3d3      	bcc.n	8008e40 <IntToUnicode+0x18>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <HAL_PCD_MspInit+0x44>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d113      	bne.n	8008ede <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <HAL_PCD_MspInit+0x48>)
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <HAL_PCD_MspInit+0x48>)
 8008ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ec0:	61d3      	str	r3, [r2, #28]
 8008ec2:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <HAL_PCD_MspInit+0x48>)
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	2014      	movs	r0, #20
 8008ed4:	f7f8 fa57 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ed8:	2014      	movs	r0, #20
 8008eda:	f7f8 fa70 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40005c00 	.word	0x40005c00
 8008eec:	40021000 	.word	0x40021000

08008ef0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f04:	4619      	mov	r1, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	f7fe fdb9 	bl	8007a7e <USBD_LL_SetupStage>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	440b      	add	r3, r1
 8008f34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f7fe fdeb 	bl	8007b18 <USBD_LL_DataOutStage>
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	440b      	add	r3, r1
 8008f6a:	333c      	adds	r3, #60	; 0x3c
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7fe fe42 	bl	8007bfa <USBD_LL_DataInStage>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe ff52 	bl	8007e36 <USBD_LL_SOF>
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d001      	beq.n	8008fb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fae:	f7f7 fd0d 	bl	80009cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fb8:	7bfa      	ldrb	r2, [r7, #15]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe ff02 	bl	8007dc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe febb 	bl	8007d44 <USBD_LL_Reset>
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fefc 	bl	8007de4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ff4:	4b04      	ldr	r3, [pc, #16]	; (8009008 <HAL_PCD_SuspendCallback+0x30>)
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	4a03      	ldr	r2, [pc, #12]	; (8009008 <HAL_PCD_SuspendCallback+0x30>)
 8008ffa:	f043 0306 	orr.w	r3, r3, #6
 8008ffe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	e000ed00 	.word	0xe000ed00

0800900c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fef6 	bl	8007e0c <USBD_LL_Resume>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009030:	4a28      	ldr	r2, [pc, #160]	; (80090d4 <USBD_LL_Init+0xac>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a26      	ldr	r2, [pc, #152]	; (80090d4 <USBD_LL_Init+0xac>)
 800903c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009040:	4b24      	ldr	r3, [pc, #144]	; (80090d4 <USBD_LL_Init+0xac>)
 8009042:	4a25      	ldr	r2, [pc, #148]	; (80090d8 <USBD_LL_Init+0xb0>)
 8009044:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009046:	4b23      	ldr	r3, [pc, #140]	; (80090d4 <USBD_LL_Init+0xac>)
 8009048:	2208      	movs	r2, #8
 800904a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <USBD_LL_Init+0xac>)
 800904e:	2202      	movs	r2, #2
 8009050:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009052:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <USBD_LL_Init+0xac>)
 8009054:	2200      	movs	r2, #0
 8009056:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <USBD_LL_Init+0xac>)
 800905a:	2200      	movs	r2, #0
 800905c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800905e:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <USBD_LL_Init+0xac>)
 8009060:	2200      	movs	r2, #0
 8009062:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009064:	481b      	ldr	r0, [pc, #108]	; (80090d4 <USBD_LL_Init+0xac>)
 8009066:	f7f8 fcfb 	bl	8001a60 <HAL_PCD_Init>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009070:	f7f7 fcac 	bl	80009cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800907a:	2318      	movs	r3, #24
 800907c:	2200      	movs	r2, #0
 800907e:	2100      	movs	r1, #0
 8009080:	f7fa f96f 	bl	8003362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800908a:	2358      	movs	r3, #88	; 0x58
 800908c:	2200      	movs	r2, #0
 800908e:	2180      	movs	r1, #128	; 0x80
 8009090:	f7fa f967 	bl	8003362 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800909a:	23c0      	movs	r3, #192	; 0xc0
 800909c:	2200      	movs	r2, #0
 800909e:	2181      	movs	r1, #129	; 0x81
 80090a0:	f7fa f95f 	bl	8003362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ae:	2200      	movs	r2, #0
 80090b0:	2101      	movs	r1, #1
 80090b2:	f7fa f956 	bl	8003362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c0:	2200      	movs	r2, #0
 80090c2:	2182      	movs	r1, #130	; 0x82
 80090c4:	f7fa f94d 	bl	8003362 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20001024 	.word	0x20001024
 80090d8:	40005c00 	.word	0x40005c00

080090dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f8 fdbf 	bl	8001c76 <HAL_PCD_Start>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f94e 	bl	80093a0 <USBD_Get_USB_Status>
 8009104:	4603      	mov	r3, r0
 8009106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009108:	7bbb      	ldrb	r3, [r7, #14]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	4608      	mov	r0, r1
 800911c:	4611      	mov	r1, r2
 800911e:	461a      	mov	r2, r3
 8009120:	4603      	mov	r3, r0
 8009122:	70fb      	strb	r3, [r7, #3]
 8009124:	460b      	mov	r3, r1
 8009126:	70bb      	strb	r3, [r7, #2]
 8009128:	4613      	mov	r3, r2
 800912a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800913a:	78bb      	ldrb	r3, [r7, #2]
 800913c:	883a      	ldrh	r2, [r7, #0]
 800913e:	78f9      	ldrb	r1, [r7, #3]
 8009140:	f7f8 ff37 	bl	8001fb2 <HAL_PCD_EP_Open>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f928 	bl	80093a0 <USBD_Get_USB_Status>
 8009150:	4603      	mov	r3, r0
 8009152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009154:	7bbb      	ldrb	r3, [r7, #14]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f7f8 ff7e 	bl	800207e <HAL_PCD_EP_Close>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f909 	bl	80093a0 <USBD_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009192:	7bbb      	ldrb	r3, [r7, #14]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f9 f83e 	bl	800223c <HAL_PCD_EP_SetStall>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f8ea 	bl	80093a0 <USBD_Get_USB_Status>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7f9 f87f 	bl	80022fc <HAL_PCD_EP_ClrStall>
 80091fe:	4603      	mov	r3, r0
 8009200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f8cb 	bl	80093a0 <USBD_Get_USB_Status>
 800920a:	4603      	mov	r3, r0
 800920c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800922a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800922c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009230:	2b00      	cmp	r3, #0
 8009232:	da0c      	bge.n	800924e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	440b      	add	r3, r1
 8009248:	3302      	adds	r3, #2
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	e00b      	b.n	8009266 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009254:	68f9      	ldr	r1, [r7, #12]
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	440b      	add	r3, r1
 8009260:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009264:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7f8 fe6a 	bl	8001f68 <HAL_PCD_SetAddress>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f880 	bl	80093a0 <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b086      	sub	sp, #24
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	461a      	mov	r2, r3
 80092ba:	460b      	mov	r3, r1
 80092bc:	72fb      	strb	r3, [r7, #11]
 80092be:	4613      	mov	r3, r2
 80092c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d0:	893b      	ldrh	r3, [r7, #8]
 80092d2:	7af9      	ldrb	r1, [r7, #11]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f7f8 ff6e 	bl	80021b6 <HAL_PCD_EP_Transmit>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f85d 	bl	80093a0 <USBD_Get_USB_Status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	461a      	mov	r2, r3
 8009300:	460b      	mov	r3, r1
 8009302:	72fb      	strb	r3, [r7, #11]
 8009304:	4613      	mov	r3, r2
 8009306:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009316:	893b      	ldrh	r3, [r7, #8]
 8009318:	7af9      	ldrb	r1, [r7, #11]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f7f8 fef7 	bl	800210e <HAL_PCD_EP_Receive>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f83a 	bl	80093a0 <USBD_Get_USB_Status>
 800932c:	4603      	mov	r3, r0
 800932e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009330:	7dbb      	ldrb	r3, [r7, #22]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800934c:	78fa      	ldrb	r2, [r7, #3]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7f8 ff19 	bl	8002188 <HAL_PCD_EP_GetRxCount>
 8009356:	4603      	mov	r3, r0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <USBD_static_malloc+0x14>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr
 8009374:	20001310 	.word	0x20001310

08009378 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]

}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr

0800938a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d817      	bhi.n	80093e4 <USBD_Get_USB_Status+0x44>
 80093b4:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <USBD_Get_USB_Status+0x1c>)
 80093b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093d3 	.word	0x080093d3
 80093c4:	080093d9 	.word	0x080093d9
 80093c8:	080093df 	.word	0x080093df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	e00b      	b.n	80093ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
    break;
 80093d6:	e008      	b.n	80093ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	e005      	b.n	80093ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	73fb      	strb	r3, [r7, #15]
    break;
 80093e2:	e002      	b.n	80093ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093e4:	2302      	movs	r3, #2
 80093e6:	73fb      	strb	r3, [r7, #15]
    break;
 80093e8:	bf00      	nop
  }
  return usb_status;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop

080093f8 <__errno>:
 80093f8:	4b01      	ldr	r3, [pc, #4]	; (8009400 <__errno+0x8>)
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20000184 	.word	0x20000184

08009404 <__libc_init_array>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	2600      	movs	r6, #0
 8009408:	4d0c      	ldr	r5, [pc, #48]	; (800943c <__libc_init_array+0x38>)
 800940a:	4c0d      	ldr	r4, [pc, #52]	; (8009440 <__libc_init_array+0x3c>)
 800940c:	1b64      	subs	r4, r4, r5
 800940e:	10a4      	asrs	r4, r4, #2
 8009410:	42a6      	cmp	r6, r4
 8009412:	d109      	bne.n	8009428 <__libc_init_array+0x24>
 8009414:	f001 ff28 	bl	800b268 <_init>
 8009418:	2600      	movs	r6, #0
 800941a:	4d0a      	ldr	r5, [pc, #40]	; (8009444 <__libc_init_array+0x40>)
 800941c:	4c0a      	ldr	r4, [pc, #40]	; (8009448 <__libc_init_array+0x44>)
 800941e:	1b64      	subs	r4, r4, r5
 8009420:	10a4      	asrs	r4, r4, #2
 8009422:	42a6      	cmp	r6, r4
 8009424:	d105      	bne.n	8009432 <__libc_init_array+0x2e>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	f855 3b04 	ldr.w	r3, [r5], #4
 800942c:	4798      	blx	r3
 800942e:	3601      	adds	r6, #1
 8009430:	e7ee      	b.n	8009410 <__libc_init_array+0xc>
 8009432:	f855 3b04 	ldr.w	r3, [r5], #4
 8009436:	4798      	blx	r3
 8009438:	3601      	adds	r6, #1
 800943a:	e7f2      	b.n	8009422 <__libc_init_array+0x1e>
 800943c:	0800b600 	.word	0x0800b600
 8009440:	0800b600 	.word	0x0800b600
 8009444:	0800b600 	.word	0x0800b600
 8009448:	0800b604 	.word	0x0800b604

0800944c <memcpy>:
 800944c:	440a      	add	r2, r1
 800944e:	4291      	cmp	r1, r2
 8009450:	f100 33ff 	add.w	r3, r0, #4294967295
 8009454:	d100      	bne.n	8009458 <memcpy+0xc>
 8009456:	4770      	bx	lr
 8009458:	b510      	push	{r4, lr}
 800945a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945e:	4291      	cmp	r1, r2
 8009460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009464:	d1f9      	bne.n	800945a <memcpy+0xe>
 8009466:	bd10      	pop	{r4, pc}

08009468 <memset>:
 8009468:	4603      	mov	r3, r0
 800946a:	4402      	add	r2, r0
 800946c:	4293      	cmp	r3, r2
 800946e:	d100      	bne.n	8009472 <memset+0xa>
 8009470:	4770      	bx	lr
 8009472:	f803 1b01 	strb.w	r1, [r3], #1
 8009476:	e7f9      	b.n	800946c <memset+0x4>

08009478 <siscanf>:
 8009478:	b40e      	push	{r1, r2, r3}
 800947a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800947e:	b530      	push	{r4, r5, lr}
 8009480:	b09c      	sub	sp, #112	; 0x70
 8009482:	ac1f      	add	r4, sp, #124	; 0x7c
 8009484:	f854 5b04 	ldr.w	r5, [r4], #4
 8009488:	f8ad 2014 	strh.w	r2, [sp, #20]
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	9006      	str	r0, [sp, #24]
 8009490:	f7f6 fe66 	bl	8000160 <strlen>
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <siscanf+0x4c>)
 8009496:	9003      	str	r0, [sp, #12]
 8009498:	930b      	str	r3, [sp, #44]	; 0x2c
 800949a:	2300      	movs	r3, #0
 800949c:	930f      	str	r3, [sp, #60]	; 0x3c
 800949e:	9314      	str	r3, [sp, #80]	; 0x50
 80094a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094a4:	9007      	str	r0, [sp, #28]
 80094a6:	4808      	ldr	r0, [pc, #32]	; (80094c8 <siscanf+0x50>)
 80094a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4623      	mov	r3, r4
 80094b0:	a902      	add	r1, sp, #8
 80094b2:	6800      	ldr	r0, [r0, #0]
 80094b4:	9401      	str	r4, [sp, #4]
 80094b6:	f000 fbe3 	bl	8009c80 <__ssvfiscanf_r>
 80094ba:	b01c      	add	sp, #112	; 0x70
 80094bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c0:	b003      	add	sp, #12
 80094c2:	4770      	bx	lr
 80094c4:	080094ef 	.word	0x080094ef
 80094c8:	20000184 	.word	0x20000184

080094cc <__sread>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d4:	f001 f98e 	bl	800a7f4 <_read_r>
 80094d8:	2800      	cmp	r0, #0
 80094da:	bfab      	itete	ge
 80094dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094de:	89a3      	ldrhlt	r3, [r4, #12]
 80094e0:	181b      	addge	r3, r3, r0
 80094e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094e6:	bfac      	ite	ge
 80094e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ea:	81a3      	strhlt	r3, [r4, #12]
 80094ec:	bd10      	pop	{r4, pc}

080094ee <__seofread>:
 80094ee:	2000      	movs	r0, #0
 80094f0:	4770      	bx	lr

080094f2 <__swrite>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	4605      	mov	r5, r0
 80094fc:	05db      	lsls	r3, r3, #23
 80094fe:	460c      	mov	r4, r1
 8009500:	4616      	mov	r6, r2
 8009502:	d505      	bpl.n	8009510 <__swrite+0x1e>
 8009504:	2302      	movs	r3, #2
 8009506:	2200      	movs	r2, #0
 8009508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950c:	f000 f90c 	bl	8009728 <_lseek_r>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	4632      	mov	r2, r6
 8009514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	4628      	mov	r0, r5
 800951c:	463b      	mov	r3, r7
 800951e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	f000 b8ad 	b.w	8009684 <_write_r>

0800952a <__sseek>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 f8f9 	bl	8009728 <_lseek_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	bf15      	itete	ne
 800953c:	6560      	strne	r0, [r4, #84]	; 0x54
 800953e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009546:	81a3      	strheq	r3, [r4, #12]
 8009548:	bf18      	it	ne
 800954a:	81a3      	strhne	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__sclose>:
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 b8c7 	b.w	80096e4 <_close_r>
	...

08009558 <strtok>:
 8009558:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <strtok+0x5c>)
 800955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	681f      	ldr	r7, [r3, #0]
 8009560:	4605      	mov	r5, r0
 8009562:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009564:	460e      	mov	r6, r1
 8009566:	b9ec      	cbnz	r4, 80095a4 <strtok+0x4c>
 8009568:	2050      	movs	r0, #80	; 0x50
 800956a:	f000 f8ef 	bl	800974c <malloc>
 800956e:	4602      	mov	r2, r0
 8009570:	65b8      	str	r0, [r7, #88]	; 0x58
 8009572:	b920      	cbnz	r0, 800957e <strtok+0x26>
 8009574:	2157      	movs	r1, #87	; 0x57
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <strtok+0x60>)
 8009578:	4810      	ldr	r0, [pc, #64]	; (80095bc <strtok+0x64>)
 800957a:	f000 f895 	bl	80096a8 <__assert_func>
 800957e:	e9c0 4400 	strd	r4, r4, [r0]
 8009582:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009586:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800958a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800958e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009592:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009596:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800959a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800959e:	6184      	str	r4, [r0, #24]
 80095a0:	7704      	strb	r4, [r0, #28]
 80095a2:	6244      	str	r4, [r0, #36]	; 0x24
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095aa:	2301      	movs	r3, #1
 80095ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095b0:	f000 b806 	b.w	80095c0 <__strtok_r>
 80095b4:	20000184 	.word	0x20000184
 80095b8:	0800b3a0 	.word	0x0800b3a0
 80095bc:	0800b3b7 	.word	0x0800b3b7

080095c0 <__strtok_r>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	b908      	cbnz	r0, 80095c8 <__strtok_r+0x8>
 80095c4:	6810      	ldr	r0, [r2, #0]
 80095c6:	b188      	cbz	r0, 80095ec <__strtok_r+0x2c>
 80095c8:	4604      	mov	r4, r0
 80095ca:	460f      	mov	r7, r1
 80095cc:	4620      	mov	r0, r4
 80095ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095d6:	b91e      	cbnz	r6, 80095e0 <__strtok_r+0x20>
 80095d8:	b965      	cbnz	r5, 80095f4 <__strtok_r+0x34>
 80095da:	4628      	mov	r0, r5
 80095dc:	6015      	str	r5, [r2, #0]
 80095de:	e005      	b.n	80095ec <__strtok_r+0x2c>
 80095e0:	42b5      	cmp	r5, r6
 80095e2:	d1f6      	bne.n	80095d2 <__strtok_r+0x12>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f0      	bne.n	80095ca <__strtok_r+0xa>
 80095e8:	6014      	str	r4, [r2, #0]
 80095ea:	7003      	strb	r3, [r0, #0]
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	461c      	mov	r4, r3
 80095f0:	e00c      	b.n	800960c <__strtok_r+0x4c>
 80095f2:	b915      	cbnz	r5, 80095fa <__strtok_r+0x3a>
 80095f4:	460e      	mov	r6, r1
 80095f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095fe:	42ab      	cmp	r3, r5
 8009600:	d1f7      	bne.n	80095f2 <__strtok_r+0x32>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0f3      	beq.n	80095ee <__strtok_r+0x2e>
 8009606:	2300      	movs	r3, #0
 8009608:	f804 3c01 	strb.w	r3, [r4, #-1]
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	e7ed      	b.n	80095ec <__strtok_r+0x2c>

08009610 <_vsniprintf_r>:
 8009610:	b530      	push	{r4, r5, lr}
 8009612:	4614      	mov	r4, r2
 8009614:	2c00      	cmp	r4, #0
 8009616:	4605      	mov	r5, r0
 8009618:	461a      	mov	r2, r3
 800961a:	b09b      	sub	sp, #108	; 0x6c
 800961c:	da05      	bge.n	800962a <_vsniprintf_r+0x1a>
 800961e:	238b      	movs	r3, #139	; 0x8b
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	b01b      	add	sp, #108	; 0x6c
 8009628:	bd30      	pop	{r4, r5, pc}
 800962a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800962e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009632:	bf0c      	ite	eq
 8009634:	4623      	moveq	r3, r4
 8009636:	f104 33ff 	addne.w	r3, r4, #4294967295
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009642:	9100      	str	r1, [sp, #0]
 8009644:	9104      	str	r1, [sp, #16]
 8009646:	f8ad 300e 	strh.w	r3, [sp, #14]
 800964a:	4669      	mov	r1, sp
 800964c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800964e:	f000 f9bd 	bl	80099cc <_svfiprintf_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	bfbc      	itt	lt
 8009656:	238b      	movlt	r3, #139	; 0x8b
 8009658:	602b      	strlt	r3, [r5, #0]
 800965a:	2c00      	cmp	r4, #0
 800965c:	d0e3      	beq.n	8009626 <_vsniprintf_r+0x16>
 800965e:	2200      	movs	r2, #0
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e7df      	b.n	8009626 <_vsniprintf_r+0x16>
	...

08009668 <vsniprintf>:
 8009668:	b507      	push	{r0, r1, r2, lr}
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	460a      	mov	r2, r1
 8009670:	4601      	mov	r1, r0
 8009672:	4803      	ldr	r0, [pc, #12]	; (8009680 <vsniprintf+0x18>)
 8009674:	6800      	ldr	r0, [r0, #0]
 8009676:	f7ff ffcb 	bl	8009610 <_vsniprintf_r>
 800967a:	b003      	add	sp, #12
 800967c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009680:	20000184 	.word	0x20000184

08009684 <_write_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	2200      	movs	r2, #0
 800968e:	4d05      	ldr	r5, [pc, #20]	; (80096a4 <_write_r+0x20>)
 8009690:	602a      	str	r2, [r5, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f7f7 fb22 	bl	8000cdc <_write>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_write_r+0x1e>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_write_r+0x1e>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	20001538 	.word	0x20001538

080096a8 <__assert_func>:
 80096a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096aa:	4614      	mov	r4, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <__assert_func+0x2c>)
 80096b0:	4605      	mov	r5, r0
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68d8      	ldr	r0, [r3, #12]
 80096b6:	b14c      	cbz	r4, 80096cc <__assert_func+0x24>
 80096b8:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <__assert_func+0x30>)
 80096ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096be:	9100      	str	r1, [sp, #0]
 80096c0:	462b      	mov	r3, r5
 80096c2:	4906      	ldr	r1, [pc, #24]	; (80096dc <__assert_func+0x34>)
 80096c4:	f000 f81e 	bl	8009704 <fiprintf>
 80096c8:	f001 fad8 	bl	800ac7c <abort>
 80096cc:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <__assert_func+0x38>)
 80096ce:	461c      	mov	r4, r3
 80096d0:	e7f3      	b.n	80096ba <__assert_func+0x12>
 80096d2:	bf00      	nop
 80096d4:	20000184 	.word	0x20000184
 80096d8:	0800b414 	.word	0x0800b414
 80096dc:	0800b421 	.word	0x0800b421
 80096e0:	0800b44f 	.word	0x0800b44f

080096e4 <_close_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	2300      	movs	r3, #0
 80096e8:	4d05      	ldr	r5, [pc, #20]	; (8009700 <_close_r+0x1c>)
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f7 fb10 	bl	8000d14 <_close>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_close_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_close_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20001538 	.word	0x20001538

08009704 <fiprintf>:
 8009704:	b40e      	push	{r1, r2, r3}
 8009706:	b503      	push	{r0, r1, lr}
 8009708:	4601      	mov	r1, r0
 800970a:	ab03      	add	r3, sp, #12
 800970c:	4805      	ldr	r0, [pc, #20]	; (8009724 <fiprintf+0x20>)
 800970e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	f000 fc55 	bl	8009fc4 <_vfiprintf_r>
 800971a:	b002      	add	sp, #8
 800971c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	20000184 	.word	0x20000184

08009728 <_lseek_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	2200      	movs	r2, #0
 8009732:	4d05      	ldr	r5, [pc, #20]	; (8009748 <_lseek_r+0x20>)
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f7 fb10 	bl	8000d5c <_lseek>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_lseek_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_lseek_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20001538 	.word	0x20001538

0800974c <malloc>:
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <malloc+0xc>)
 800974e:	4601      	mov	r1, r0
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f000 b86b 	b.w	800982c <_malloc_r>
 8009756:	bf00      	nop
 8009758:	20000184 	.word	0x20000184

0800975c <_free_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4605      	mov	r5, r0
 8009760:	2900      	cmp	r1, #0
 8009762:	d040      	beq.n	80097e6 <_free_r+0x8a>
 8009764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009768:	1f0c      	subs	r4, r1, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	bfb8      	it	lt
 800976e:	18e4      	addlt	r4, r4, r3
 8009770:	f001 fcd0 	bl	800b114 <__malloc_lock>
 8009774:	4a1c      	ldr	r2, [pc, #112]	; (80097e8 <_free_r+0x8c>)
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	b933      	cbnz	r3, 8009788 <_free_r+0x2c>
 800977a:	6063      	str	r3, [r4, #4]
 800977c:	6014      	str	r4, [r2, #0]
 800977e:	4628      	mov	r0, r5
 8009780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009784:	f001 bccc 	b.w	800b120 <__malloc_unlock>
 8009788:	42a3      	cmp	r3, r4
 800978a:	d908      	bls.n	800979e <_free_r+0x42>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	1821      	adds	r1, r4, r0
 8009790:	428b      	cmp	r3, r1
 8009792:	bf01      	itttt	eq
 8009794:	6819      	ldreq	r1, [r3, #0]
 8009796:	685b      	ldreq	r3, [r3, #4]
 8009798:	1809      	addeq	r1, r1, r0
 800979a:	6021      	streq	r1, [r4, #0]
 800979c:	e7ed      	b.n	800977a <_free_r+0x1e>
 800979e:	461a      	mov	r2, r3
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	b10b      	cbz	r3, 80097a8 <_free_r+0x4c>
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d9fa      	bls.n	800979e <_free_r+0x42>
 80097a8:	6811      	ldr	r1, [r2, #0]
 80097aa:	1850      	adds	r0, r2, r1
 80097ac:	42a0      	cmp	r0, r4
 80097ae:	d10b      	bne.n	80097c8 <_free_r+0x6c>
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	4401      	add	r1, r0
 80097b4:	1850      	adds	r0, r2, r1
 80097b6:	4283      	cmp	r3, r0
 80097b8:	6011      	str	r1, [r2, #0]
 80097ba:	d1e0      	bne.n	800977e <_free_r+0x22>
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	4401      	add	r1, r0
 80097c2:	6011      	str	r1, [r2, #0]
 80097c4:	6053      	str	r3, [r2, #4]
 80097c6:	e7da      	b.n	800977e <_free_r+0x22>
 80097c8:	d902      	bls.n	80097d0 <_free_r+0x74>
 80097ca:	230c      	movs	r3, #12
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	e7d6      	b.n	800977e <_free_r+0x22>
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	1821      	adds	r1, r4, r0
 80097d4:	428b      	cmp	r3, r1
 80097d6:	bf01      	itttt	eq
 80097d8:	6819      	ldreq	r1, [r3, #0]
 80097da:	685b      	ldreq	r3, [r3, #4]
 80097dc:	1809      	addeq	r1, r1, r0
 80097de:	6021      	streq	r1, [r4, #0]
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	6054      	str	r4, [r2, #4]
 80097e4:	e7cb      	b.n	800977e <_free_r+0x22>
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	20001530 	.word	0x20001530

080097ec <sbrk_aligned>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0e      	ldr	r6, [pc, #56]	; (8009828 <sbrk_aligned+0x3c>)
 80097f0:	460c      	mov	r4, r1
 80097f2:	6831      	ldr	r1, [r6, #0]
 80097f4:	4605      	mov	r5, r0
 80097f6:	b911      	cbnz	r1, 80097fe <sbrk_aligned+0x12>
 80097f8:	f001 f80e 	bl	800a818 <_sbrk_r>
 80097fc:	6030      	str	r0, [r6, #0]
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f001 f809 	bl	800a818 <_sbrk_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d00a      	beq.n	8009820 <sbrk_aligned+0x34>
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d007      	beq.n	8009824 <sbrk_aligned+0x38>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4628      	mov	r0, r5
 8009818:	f000 fffe 	bl	800a818 <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d101      	bne.n	8009824 <sbrk_aligned+0x38>
 8009820:	f04f 34ff 	mov.w	r4, #4294967295
 8009824:	4620      	mov	r0, r4
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	20001534 	.word	0x20001534

0800982c <_malloc_r>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	1ccd      	adds	r5, r1, #3
 8009832:	f025 0503 	bic.w	r5, r5, #3
 8009836:	3508      	adds	r5, #8
 8009838:	2d0c      	cmp	r5, #12
 800983a:	bf38      	it	cc
 800983c:	250c      	movcc	r5, #12
 800983e:	2d00      	cmp	r5, #0
 8009840:	4607      	mov	r7, r0
 8009842:	db01      	blt.n	8009848 <_malloc_r+0x1c>
 8009844:	42a9      	cmp	r1, r5
 8009846:	d905      	bls.n	8009854 <_malloc_r+0x28>
 8009848:	230c      	movs	r3, #12
 800984a:	2600      	movs	r6, #0
 800984c:	603b      	str	r3, [r7, #0]
 800984e:	4630      	mov	r0, r6
 8009850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009854:	4e2e      	ldr	r6, [pc, #184]	; (8009910 <_malloc_r+0xe4>)
 8009856:	f001 fc5d 	bl	800b114 <__malloc_lock>
 800985a:	6833      	ldr	r3, [r6, #0]
 800985c:	461c      	mov	r4, r3
 800985e:	bb34      	cbnz	r4, 80098ae <_malloc_r+0x82>
 8009860:	4629      	mov	r1, r5
 8009862:	4638      	mov	r0, r7
 8009864:	f7ff ffc2 	bl	80097ec <sbrk_aligned>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	4604      	mov	r4, r0
 800986c:	d14d      	bne.n	800990a <_malloc_r+0xde>
 800986e:	6834      	ldr	r4, [r6, #0]
 8009870:	4626      	mov	r6, r4
 8009872:	2e00      	cmp	r6, #0
 8009874:	d140      	bne.n	80098f8 <_malloc_r+0xcc>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4631      	mov	r1, r6
 800987a:	4638      	mov	r0, r7
 800987c:	eb04 0803 	add.w	r8, r4, r3
 8009880:	f000 ffca 	bl	800a818 <_sbrk_r>
 8009884:	4580      	cmp	r8, r0
 8009886:	d13a      	bne.n	80098fe <_malloc_r+0xd2>
 8009888:	6821      	ldr	r1, [r4, #0]
 800988a:	3503      	adds	r5, #3
 800988c:	1a6d      	subs	r5, r5, r1
 800988e:	f025 0503 	bic.w	r5, r5, #3
 8009892:	3508      	adds	r5, #8
 8009894:	2d0c      	cmp	r5, #12
 8009896:	bf38      	it	cc
 8009898:	250c      	movcc	r5, #12
 800989a:	4638      	mov	r0, r7
 800989c:	4629      	mov	r1, r5
 800989e:	f7ff ffa5 	bl	80097ec <sbrk_aligned>
 80098a2:	3001      	adds	r0, #1
 80098a4:	d02b      	beq.n	80098fe <_malloc_r+0xd2>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	442b      	add	r3, r5
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	e00e      	b.n	80098cc <_malloc_r+0xa0>
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	1b52      	subs	r2, r2, r5
 80098b2:	d41e      	bmi.n	80098f2 <_malloc_r+0xc6>
 80098b4:	2a0b      	cmp	r2, #11
 80098b6:	d916      	bls.n	80098e6 <_malloc_r+0xba>
 80098b8:	1961      	adds	r1, r4, r5
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	6025      	str	r5, [r4, #0]
 80098be:	bf18      	it	ne
 80098c0:	6059      	strne	r1, [r3, #4]
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	bf08      	it	eq
 80098c6:	6031      	streq	r1, [r6, #0]
 80098c8:	5162      	str	r2, [r4, r5]
 80098ca:	604b      	str	r3, [r1, #4]
 80098cc:	4638      	mov	r0, r7
 80098ce:	f104 060b 	add.w	r6, r4, #11
 80098d2:	f001 fc25 	bl	800b120 <__malloc_unlock>
 80098d6:	f026 0607 	bic.w	r6, r6, #7
 80098da:	1d23      	adds	r3, r4, #4
 80098dc:	1af2      	subs	r2, r6, r3
 80098de:	d0b6      	beq.n	800984e <_malloc_r+0x22>
 80098e0:	1b9b      	subs	r3, r3, r6
 80098e2:	50a3      	str	r3, [r4, r2]
 80098e4:	e7b3      	b.n	800984e <_malloc_r+0x22>
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	bf0c      	ite	eq
 80098ec:	6032      	streq	r2, [r6, #0]
 80098ee:	605a      	strne	r2, [r3, #4]
 80098f0:	e7ec      	b.n	80098cc <_malloc_r+0xa0>
 80098f2:	4623      	mov	r3, r4
 80098f4:	6864      	ldr	r4, [r4, #4]
 80098f6:	e7b2      	b.n	800985e <_malloc_r+0x32>
 80098f8:	4634      	mov	r4, r6
 80098fa:	6876      	ldr	r6, [r6, #4]
 80098fc:	e7b9      	b.n	8009872 <_malloc_r+0x46>
 80098fe:	230c      	movs	r3, #12
 8009900:	4638      	mov	r0, r7
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	f001 fc0c 	bl	800b120 <__malloc_unlock>
 8009908:	e7a1      	b.n	800984e <_malloc_r+0x22>
 800990a:	6025      	str	r5, [r4, #0]
 800990c:	e7de      	b.n	80098cc <_malloc_r+0xa0>
 800990e:	bf00      	nop
 8009910:	20001530 	.word	0x20001530

08009914 <__ssputs_r>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	688e      	ldr	r6, [r1, #8]
 800991a:	4682      	mov	sl, r0
 800991c:	429e      	cmp	r6, r3
 800991e:	460c      	mov	r4, r1
 8009920:	4690      	mov	r8, r2
 8009922:	461f      	mov	r7, r3
 8009924:	d838      	bhi.n	8009998 <__ssputs_r+0x84>
 8009926:	898a      	ldrh	r2, [r1, #12]
 8009928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800992c:	d032      	beq.n	8009994 <__ssputs_r+0x80>
 800992e:	6825      	ldr	r5, [r4, #0]
 8009930:	6909      	ldr	r1, [r1, #16]
 8009932:	3301      	adds	r3, #1
 8009934:	eba5 0901 	sub.w	r9, r5, r1
 8009938:	6965      	ldr	r5, [r4, #20]
 800993a:	444b      	add	r3, r9
 800993c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009944:	106d      	asrs	r5, r5, #1
 8009946:	429d      	cmp	r5, r3
 8009948:	bf38      	it	cc
 800994a:	461d      	movcc	r5, r3
 800994c:	0553      	lsls	r3, r2, #21
 800994e:	d531      	bpl.n	80099b4 <__ssputs_r+0xa0>
 8009950:	4629      	mov	r1, r5
 8009952:	f7ff ff6b 	bl	800982c <_malloc_r>
 8009956:	4606      	mov	r6, r0
 8009958:	b950      	cbnz	r0, 8009970 <__ssputs_r+0x5c>
 800995a:	230c      	movs	r3, #12
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	f8ca 3000 	str.w	r3, [sl]
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009970:	464a      	mov	r2, r9
 8009972:	6921      	ldr	r1, [r4, #16]
 8009974:	f7ff fd6a 	bl	800944c <memcpy>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800997e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	6126      	str	r6, [r4, #16]
 8009986:	444e      	add	r6, r9
 8009988:	6026      	str	r6, [r4, #0]
 800998a:	463e      	mov	r6, r7
 800998c:	6165      	str	r5, [r4, #20]
 800998e:	eba5 0509 	sub.w	r5, r5, r9
 8009992:	60a5      	str	r5, [r4, #8]
 8009994:	42be      	cmp	r6, r7
 8009996:	d900      	bls.n	800999a <__ssputs_r+0x86>
 8009998:	463e      	mov	r6, r7
 800999a:	4632      	mov	r2, r6
 800999c:	4641      	mov	r1, r8
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	f001 fb9e 	bl	800b0e0 <memmove>
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	2000      	movs	r0, #0
 80099a8:	1b9b      	subs	r3, r3, r6
 80099aa:	60a3      	str	r3, [r4, #8]
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	4433      	add	r3, r6
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	e7db      	b.n	800996c <__ssputs_r+0x58>
 80099b4:	462a      	mov	r2, r5
 80099b6:	f001 fbb9 	bl	800b12c <_realloc_r>
 80099ba:	4606      	mov	r6, r0
 80099bc:	2800      	cmp	r0, #0
 80099be:	d1e1      	bne.n	8009984 <__ssputs_r+0x70>
 80099c0:	4650      	mov	r0, sl
 80099c2:	6921      	ldr	r1, [r4, #16]
 80099c4:	f7ff feca 	bl	800975c <_free_r>
 80099c8:	e7c7      	b.n	800995a <__ssputs_r+0x46>
	...

080099cc <_svfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	4698      	mov	r8, r3
 80099d2:	898b      	ldrh	r3, [r1, #12]
 80099d4:	4607      	mov	r7, r0
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	460d      	mov	r5, r1
 80099da:	4614      	mov	r4, r2
 80099dc:	b09d      	sub	sp, #116	; 0x74
 80099de:	d50e      	bpl.n	80099fe <_svfiprintf_r+0x32>
 80099e0:	690b      	ldr	r3, [r1, #16]
 80099e2:	b963      	cbnz	r3, 80099fe <_svfiprintf_r+0x32>
 80099e4:	2140      	movs	r1, #64	; 0x40
 80099e6:	f7ff ff21 	bl	800982c <_malloc_r>
 80099ea:	6028      	str	r0, [r5, #0]
 80099ec:	6128      	str	r0, [r5, #16]
 80099ee:	b920      	cbnz	r0, 80099fa <_svfiprintf_r+0x2e>
 80099f0:	230c      	movs	r3, #12
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e0d1      	b.n	8009b9e <_svfiprintf_r+0x1d2>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	616b      	str	r3, [r5, #20]
 80099fe:	2300      	movs	r3, #0
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
 8009a02:	2320      	movs	r3, #32
 8009a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a08:	2330      	movs	r3, #48	; 0x30
 8009a0a:	f04f 0901 	mov.w	r9, #1
 8009a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bb8 <_svfiprintf_r+0x1ec>
 8009a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	469a      	mov	sl, r3
 8009a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a22:	b10a      	cbz	r2, 8009a28 <_svfiprintf_r+0x5c>
 8009a24:	2a25      	cmp	r2, #37	; 0x25
 8009a26:	d1f9      	bne.n	8009a1c <_svfiprintf_r+0x50>
 8009a28:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2c:	d00b      	beq.n	8009a46 <_svfiprintf_r+0x7a>
 8009a2e:	465b      	mov	r3, fp
 8009a30:	4622      	mov	r2, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7ff ff6d 	bl	8009914 <__ssputs_r>
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f000 80aa 	beq.w	8009b94 <_svfiprintf_r+0x1c8>
 8009a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a42:	445a      	add	r2, fp
 8009a44:	9209      	str	r2, [sp, #36]	; 0x24
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80a2 	beq.w	8009b94 <_svfiprintf_r+0x1c8>
 8009a50:	2300      	movs	r3, #0
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5a:	f10a 0a01 	add.w	sl, sl, #1
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a66:	931a      	str	r3, [sp, #104]	; 0x68
 8009a68:	4654      	mov	r4, sl
 8009a6a:	2205      	movs	r2, #5
 8009a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a70:	4851      	ldr	r0, [pc, #324]	; (8009bb8 <_svfiprintf_r+0x1ec>)
 8009a72:	f001 fb27 	bl	800b0c4 <memchr>
 8009a76:	9a04      	ldr	r2, [sp, #16]
 8009a78:	b9d8      	cbnz	r0, 8009ab2 <_svfiprintf_r+0xe6>
 8009a7a:	06d0      	lsls	r0, r2, #27
 8009a7c:	bf44      	itt	mi
 8009a7e:	2320      	movmi	r3, #32
 8009a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a84:	0711      	lsls	r1, r2, #28
 8009a86:	bf44      	itt	mi
 8009a88:	232b      	movmi	r3, #43	; 0x2b
 8009a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a92:	2b2a      	cmp	r3, #42	; 0x2a
 8009a94:	d015      	beq.n	8009ac2 <_svfiprintf_r+0xf6>
 8009a96:	4654      	mov	r4, sl
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f04f 0c0a 	mov.w	ip, #10
 8009a9e:	9a07      	ldr	r2, [sp, #28]
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa6:	3b30      	subs	r3, #48	; 0x30
 8009aa8:	2b09      	cmp	r3, #9
 8009aaa:	d94e      	bls.n	8009b4a <_svfiprintf_r+0x17e>
 8009aac:	b1b0      	cbz	r0, 8009adc <_svfiprintf_r+0x110>
 8009aae:	9207      	str	r2, [sp, #28]
 8009ab0:	e014      	b.n	8009adc <_svfiprintf_r+0x110>
 8009ab2:	eba0 0308 	sub.w	r3, r0, r8
 8009ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aba:	4313      	orrs	r3, r2
 8009abc:	46a2      	mov	sl, r4
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	e7d2      	b.n	8009a68 <_svfiprintf_r+0x9c>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	1d19      	adds	r1, r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	9103      	str	r1, [sp, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfbb      	ittet	lt
 8009ace:	425b      	neglt	r3, r3
 8009ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad4:	9307      	strge	r3, [sp, #28]
 8009ad6:	9307      	strlt	r3, [sp, #28]
 8009ad8:	bfb8      	it	lt
 8009ada:	9204      	strlt	r2, [sp, #16]
 8009adc:	7823      	ldrb	r3, [r4, #0]
 8009ade:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae0:	d10c      	bne.n	8009afc <_svfiprintf_r+0x130>
 8009ae2:	7863      	ldrb	r3, [r4, #1]
 8009ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae6:	d135      	bne.n	8009b54 <_svfiprintf_r+0x188>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	3402      	adds	r4, #2
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	9203      	str	r2, [sp, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bfb8      	it	lt
 8009af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009bbc <_svfiprintf_r+0x1f0>
 8009b00:	2203      	movs	r2, #3
 8009b02:	4650      	mov	r0, sl
 8009b04:	7821      	ldrb	r1, [r4, #0]
 8009b06:	f001 fadd 	bl	800b0c4 <memchr>
 8009b0a:	b140      	cbz	r0, 8009b1e <_svfiprintf_r+0x152>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	eba0 000a 	sub.w	r0, r0, sl
 8009b12:	fa03 f000 	lsl.w	r0, r3, r0
 8009b16:	9b04      	ldr	r3, [sp, #16]
 8009b18:	3401      	adds	r4, #1
 8009b1a:	4303      	orrs	r3, r0
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b22:	2206      	movs	r2, #6
 8009b24:	4826      	ldr	r0, [pc, #152]	; (8009bc0 <_svfiprintf_r+0x1f4>)
 8009b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b2a:	f001 facb 	bl	800b0c4 <memchr>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d038      	beq.n	8009ba4 <_svfiprintf_r+0x1d8>
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <_svfiprintf_r+0x1f8>)
 8009b34:	bb1b      	cbnz	r3, 8009b7e <_svfiprintf_r+0x1b2>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	3307      	adds	r3, #7
 8009b3a:	f023 0307 	bic.w	r3, r3, #7
 8009b3e:	3308      	adds	r3, #8
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b44:	4433      	add	r3, r6
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	e767      	b.n	8009a1a <_svfiprintf_r+0x4e>
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b52:	e7a5      	b.n	8009aa0 <_svfiprintf_r+0xd4>
 8009b54:	2300      	movs	r3, #0
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	3401      	adds	r4, #1
 8009b5e:	9305      	str	r3, [sp, #20]
 8009b60:	4620      	mov	r0, r4
 8009b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b66:	3a30      	subs	r2, #48	; 0x30
 8009b68:	2a09      	cmp	r2, #9
 8009b6a:	d903      	bls.n	8009b74 <_svfiprintf_r+0x1a8>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0c5      	beq.n	8009afc <_svfiprintf_r+0x130>
 8009b70:	9105      	str	r1, [sp, #20]
 8009b72:	e7c3      	b.n	8009afc <_svfiprintf_r+0x130>
 8009b74:	4604      	mov	r4, r0
 8009b76:	2301      	movs	r3, #1
 8009b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b7c:	e7f0      	b.n	8009b60 <_svfiprintf_r+0x194>
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	462a      	mov	r2, r5
 8009b84:	4638      	mov	r0, r7
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <_svfiprintf_r+0x1fc>)
 8009b88:	a904      	add	r1, sp, #16
 8009b8a:	f3af 8000 	nop.w
 8009b8e:	1c42      	adds	r2, r0, #1
 8009b90:	4606      	mov	r6, r0
 8009b92:	d1d6      	bne.n	8009b42 <_svfiprintf_r+0x176>
 8009b94:	89ab      	ldrh	r3, [r5, #12]
 8009b96:	065b      	lsls	r3, r3, #25
 8009b98:	f53f af2c 	bmi.w	80099f4 <_svfiprintf_r+0x28>
 8009b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b9e:	b01d      	add	sp, #116	; 0x74
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4638      	mov	r0, r7
 8009bac:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <_svfiprintf_r+0x1fc>)
 8009bae:	a904      	add	r1, sp, #16
 8009bb0:	f000 fba8 	bl	800a304 <_printf_i>
 8009bb4:	e7eb      	b.n	8009b8e <_svfiprintf_r+0x1c2>
 8009bb6:	bf00      	nop
 8009bb8:	0800b450 	.word	0x0800b450
 8009bbc:	0800b456 	.word	0x0800b456
 8009bc0:	0800b45a 	.word	0x0800b45a
 8009bc4:	00000000 	.word	0x00000000
 8009bc8:	08009915 	.word	0x08009915

08009bcc <_sungetc_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	1c4b      	adds	r3, r1, #1
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	d103      	bne.n	8009bdc <_sungetc_r+0x10>
 8009bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8009bd8:	4628      	mov	r0, r5
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	8993      	ldrh	r3, [r2, #12]
 8009bde:	b2cd      	uxtb	r5, r1
 8009be0:	f023 0320 	bic.w	r3, r3, #32
 8009be4:	8193      	strh	r3, [r2, #12]
 8009be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009be8:	6852      	ldr	r2, [r2, #4]
 8009bea:	b18b      	cbz	r3, 8009c10 <_sungetc_r+0x44>
 8009bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	dd08      	ble.n	8009c04 <_sungetc_r+0x38>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	1e5a      	subs	r2, r3, #1
 8009bf6:	6022      	str	r2, [r4, #0]
 8009bf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	6063      	str	r3, [r4, #4]
 8009c02:	e7e9      	b.n	8009bd8 <_sungetc_r+0xc>
 8009c04:	4621      	mov	r1, r4
 8009c06:	f000 ff41 	bl	800aa8c <__submore>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0f1      	beq.n	8009bf2 <_sungetc_r+0x26>
 8009c0e:	e7e1      	b.n	8009bd4 <_sungetc_r+0x8>
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	b151      	cbz	r1, 8009c2c <_sungetc_r+0x60>
 8009c16:	4299      	cmp	r1, r3
 8009c18:	d208      	bcs.n	8009c2c <_sungetc_r+0x60>
 8009c1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009c1e:	42a9      	cmp	r1, r5
 8009c20:	d104      	bne.n	8009c2c <_sungetc_r+0x60>
 8009c22:	3b01      	subs	r3, #1
 8009c24:	3201      	adds	r2, #1
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	6062      	str	r2, [r4, #4]
 8009c2a:	e7d5      	b.n	8009bd8 <_sungetc_r+0xc>
 8009c2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c34:	6363      	str	r3, [r4, #52]	; 0x34
 8009c36:	2303      	movs	r3, #3
 8009c38:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7dc      	b.n	8009c00 <_sungetc_r+0x34>

08009c46 <__ssrefill_r>:
 8009c46:	b510      	push	{r4, lr}
 8009c48:	460c      	mov	r4, r1
 8009c4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c4c:	b169      	cbz	r1, 8009c6a <__ssrefill_r+0x24>
 8009c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c52:	4299      	cmp	r1, r3
 8009c54:	d001      	beq.n	8009c5a <__ssrefill_r+0x14>
 8009c56:	f7ff fd81 	bl	800975c <_free_r>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c5e:	6360      	str	r0, [r4, #52]	; 0x34
 8009c60:	6063      	str	r3, [r4, #4]
 8009c62:	b113      	cbz	r3, 8009c6a <__ssrefill_r+0x24>
 8009c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2300      	movs	r3, #0
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f043 0320 	orr.w	r3, r3, #32
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	e7f3      	b.n	8009c68 <__ssrefill_r+0x22>

08009c80 <__ssvfiscanf_r>:
 8009c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	460c      	mov	r4, r1
 8009c86:	2100      	movs	r1, #0
 8009c88:	4606      	mov	r6, r0
 8009c8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c8e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c92:	49a7      	ldr	r1, [pc, #668]	; (8009f30 <__ssvfiscanf_r+0x2b0>)
 8009c94:	f10d 0804 	add.w	r8, sp, #4
 8009c98:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c9a:	49a6      	ldr	r1, [pc, #664]	; (8009f34 <__ssvfiscanf_r+0x2b4>)
 8009c9c:	4fa6      	ldr	r7, [pc, #664]	; (8009f38 <__ssvfiscanf_r+0x2b8>)
 8009c9e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009f3c <__ssvfiscanf_r+0x2bc>
 8009ca2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009ca6:	91a1      	str	r1, [sp, #644]	; 0x284
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	7813      	ldrb	r3, [r2, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 815c 	beq.w	8009f6a <__ssvfiscanf_r+0x2ea>
 8009cb2:	5dd9      	ldrb	r1, [r3, r7]
 8009cb4:	1c55      	adds	r5, r2, #1
 8009cb6:	f011 0108 	ands.w	r1, r1, #8
 8009cba:	d019      	beq.n	8009cf0 <__ssvfiscanf_r+0x70>
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd0f      	ble.n	8009ce2 <__ssvfiscanf_r+0x62>
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	781a      	ldrb	r2, [r3, #0]
 8009cc6:	5cba      	ldrb	r2, [r7, r2]
 8009cc8:	0712      	lsls	r2, r2, #28
 8009cca:	d401      	bmi.n	8009cd0 <__ssvfiscanf_r+0x50>
 8009ccc:	462a      	mov	r2, r5
 8009cce:	e7ec      	b.n	8009caa <__ssvfiscanf_r+0x2a>
 8009cd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	3201      	adds	r2, #1
 8009cd6:	9245      	str	r2, [sp, #276]	; 0x114
 8009cd8:	6862      	ldr	r2, [r4, #4]
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	3a01      	subs	r2, #1
 8009cde:	6062      	str	r2, [r4, #4]
 8009ce0:	e7ec      	b.n	8009cbc <__ssvfiscanf_r+0x3c>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ce8:	4798      	blx	r3
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0e9      	beq.n	8009cc2 <__ssvfiscanf_r+0x42>
 8009cee:	e7ed      	b.n	8009ccc <__ssvfiscanf_r+0x4c>
 8009cf0:	2b25      	cmp	r3, #37	; 0x25
 8009cf2:	d012      	beq.n	8009d1a <__ssvfiscanf_r+0x9a>
 8009cf4:	469a      	mov	sl, r3
 8009cf6:	6863      	ldr	r3, [r4, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f340 8094 	ble.w	8009e26 <__ssvfiscanf_r+0x1a6>
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	7813      	ldrb	r3, [r2, #0]
 8009d02:	4553      	cmp	r3, sl
 8009d04:	f040 8131 	bne.w	8009f6a <__ssvfiscanf_r+0x2ea>
 8009d08:	6863      	ldr	r3, [r4, #4]
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	9345      	str	r3, [sp, #276]	; 0x114
 8009d18:	e7d8      	b.n	8009ccc <__ssvfiscanf_r+0x4c>
 8009d1a:	9141      	str	r1, [sp, #260]	; 0x104
 8009d1c:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d1e:	7853      	ldrb	r3, [r2, #1]
 8009d20:	2b2a      	cmp	r3, #42	; 0x2a
 8009d22:	bf04      	itt	eq
 8009d24:	2310      	moveq	r3, #16
 8009d26:	1c95      	addeq	r5, r2, #2
 8009d28:	f04f 020a 	mov.w	r2, #10
 8009d2c:	bf08      	it	eq
 8009d2e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009d30:	46aa      	mov	sl, r5
 8009d32:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009d36:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d91d      	bls.n	8009d7a <__ssvfiscanf_r+0xfa>
 8009d3e:	2203      	movs	r2, #3
 8009d40:	487e      	ldr	r0, [pc, #504]	; (8009f3c <__ssvfiscanf_r+0x2bc>)
 8009d42:	f001 f9bf 	bl	800b0c4 <memchr>
 8009d46:	b140      	cbz	r0, 8009d5a <__ssvfiscanf_r+0xda>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4655      	mov	r5, sl
 8009d4c:	eba0 0009 	sub.w	r0, r0, r9
 8009d50:	fa03 f000 	lsl.w	r0, r3, r0
 8009d54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d56:	4318      	orrs	r0, r3
 8009d58:	9041      	str	r0, [sp, #260]	; 0x104
 8009d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d5e:	2b78      	cmp	r3, #120	; 0x78
 8009d60:	d806      	bhi.n	8009d70 <__ssvfiscanf_r+0xf0>
 8009d62:	2b57      	cmp	r3, #87	; 0x57
 8009d64:	d810      	bhi.n	8009d88 <__ssvfiscanf_r+0x108>
 8009d66:	2b25      	cmp	r3, #37	; 0x25
 8009d68:	d0c4      	beq.n	8009cf4 <__ssvfiscanf_r+0x74>
 8009d6a:	d857      	bhi.n	8009e1c <__ssvfiscanf_r+0x19c>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d065      	beq.n	8009e3c <__ssvfiscanf_r+0x1bc>
 8009d70:	2303      	movs	r3, #3
 8009d72:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d74:	230a      	movs	r3, #10
 8009d76:	9342      	str	r3, [sp, #264]	; 0x108
 8009d78:	e072      	b.n	8009e60 <__ssvfiscanf_r+0x1e0>
 8009d7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d7c:	4655      	mov	r5, sl
 8009d7e:	fb02 1103 	mla	r1, r2, r3, r1
 8009d82:	3930      	subs	r1, #48	; 0x30
 8009d84:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d86:	e7d3      	b.n	8009d30 <__ssvfiscanf_r+0xb0>
 8009d88:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d8c:	2a20      	cmp	r2, #32
 8009d8e:	d8ef      	bhi.n	8009d70 <__ssvfiscanf_r+0xf0>
 8009d90:	a101      	add	r1, pc, #4	; (adr r1, 8009d98 <__ssvfiscanf_r+0x118>)
 8009d92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009e4b 	.word	0x08009e4b
 8009d9c:	08009d71 	.word	0x08009d71
 8009da0:	08009d71 	.word	0x08009d71
 8009da4:	08009ea9 	.word	0x08009ea9
 8009da8:	08009d71 	.word	0x08009d71
 8009dac:	08009d71 	.word	0x08009d71
 8009db0:	08009d71 	.word	0x08009d71
 8009db4:	08009d71 	.word	0x08009d71
 8009db8:	08009d71 	.word	0x08009d71
 8009dbc:	08009d71 	.word	0x08009d71
 8009dc0:	08009d71 	.word	0x08009d71
 8009dc4:	08009ebf 	.word	0x08009ebf
 8009dc8:	08009e95 	.word	0x08009e95
 8009dcc:	08009e23 	.word	0x08009e23
 8009dd0:	08009e23 	.word	0x08009e23
 8009dd4:	08009e23 	.word	0x08009e23
 8009dd8:	08009d71 	.word	0x08009d71
 8009ddc:	08009e99 	.word	0x08009e99
 8009de0:	08009d71 	.word	0x08009d71
 8009de4:	08009d71 	.word	0x08009d71
 8009de8:	08009d71 	.word	0x08009d71
 8009dec:	08009d71 	.word	0x08009d71
 8009df0:	08009ecf 	.word	0x08009ecf
 8009df4:	08009ea1 	.word	0x08009ea1
 8009df8:	08009e43 	.word	0x08009e43
 8009dfc:	08009d71 	.word	0x08009d71
 8009e00:	08009d71 	.word	0x08009d71
 8009e04:	08009ecb 	.word	0x08009ecb
 8009e08:	08009d71 	.word	0x08009d71
 8009e0c:	08009e95 	.word	0x08009e95
 8009e10:	08009d71 	.word	0x08009d71
 8009e14:	08009d71 	.word	0x08009d71
 8009e18:	08009e4b 	.word	0x08009e4b
 8009e1c:	3b45      	subs	r3, #69	; 0x45
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d8a6      	bhi.n	8009d70 <__ssvfiscanf_r+0xf0>
 8009e22:	2305      	movs	r3, #5
 8009e24:	e01b      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009e26:	4621      	mov	r1, r4
 8009e28:	4630      	mov	r0, r6
 8009e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e2c:	4798      	blx	r3
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f af65 	beq.w	8009cfe <__ssvfiscanf_r+0x7e>
 8009e34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f040 808d 	bne.w	8009f56 <__ssvfiscanf_r+0x2d6>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e08f      	b.n	8009f62 <__ssvfiscanf_r+0x2e2>
 8009e42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e44:	f042 0220 	orr.w	r2, r2, #32
 8009e48:	9241      	str	r2, [sp, #260]	; 0x104
 8009e4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e50:	9241      	str	r2, [sp, #260]	; 0x104
 8009e52:	2210      	movs	r2, #16
 8009e54:	2b6f      	cmp	r3, #111	; 0x6f
 8009e56:	bf34      	ite	cc
 8009e58:	2303      	movcc	r3, #3
 8009e5a:	2304      	movcs	r3, #4
 8009e5c:	9242      	str	r2, [sp, #264]	; 0x108
 8009e5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e60:	6863      	ldr	r3, [r4, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd42      	ble.n	8009eec <__ssvfiscanf_r+0x26c>
 8009e66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e68:	0659      	lsls	r1, r3, #25
 8009e6a:	d404      	bmi.n	8009e76 <__ssvfiscanf_r+0x1f6>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	781a      	ldrb	r2, [r3, #0]
 8009e70:	5cba      	ldrb	r2, [r7, r2]
 8009e72:	0712      	lsls	r2, r2, #28
 8009e74:	d441      	bmi.n	8009efa <__ssvfiscanf_r+0x27a>
 8009e76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	dc50      	bgt.n	8009f1e <__ssvfiscanf_r+0x29e>
 8009e7c:	466b      	mov	r3, sp
 8009e7e:	4622      	mov	r2, r4
 8009e80:	4630      	mov	r0, r6
 8009e82:	a941      	add	r1, sp, #260	; 0x104
 8009e84:	f000 fb64 	bl	800a550 <_scanf_chars>
 8009e88:	2801      	cmp	r0, #1
 8009e8a:	d06e      	beq.n	8009f6a <__ssvfiscanf_r+0x2ea>
 8009e8c:	2802      	cmp	r0, #2
 8009e8e:	f47f af1d 	bne.w	8009ccc <__ssvfiscanf_r+0x4c>
 8009e92:	e7cf      	b.n	8009e34 <__ssvfiscanf_r+0x1b4>
 8009e94:	220a      	movs	r2, #10
 8009e96:	e7dd      	b.n	8009e54 <__ssvfiscanf_r+0x1d4>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9342      	str	r3, [sp, #264]	; 0x108
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e7de      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	9342      	str	r3, [sp, #264]	; 0x108
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	e7da      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f000 fcc4 	bl	800a838 <__sccl>
 8009eb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb8:	9341      	str	r3, [sp, #260]	; 0x104
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e7cf      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009ebe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec4:	9341      	str	r3, [sp, #260]	; 0x104
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e7c9      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e7c7      	b.n	8009e5e <__ssvfiscanf_r+0x1de>
 8009ece:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009ed0:	06c3      	lsls	r3, r0, #27
 8009ed2:	f53f aefb 	bmi.w	8009ccc <__ssvfiscanf_r+0x4c>
 8009ed6:	9b00      	ldr	r3, [sp, #0]
 8009ed8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009eda:	1d19      	adds	r1, r3, #4
 8009edc:	9100      	str	r1, [sp, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f010 0f01 	tst.w	r0, #1
 8009ee4:	bf14      	ite	ne
 8009ee6:	801a      	strhne	r2, [r3, #0]
 8009ee8:	601a      	streq	r2, [r3, #0]
 8009eea:	e6ef      	b.n	8009ccc <__ssvfiscanf_r+0x4c>
 8009eec:	4621      	mov	r1, r4
 8009eee:	4630      	mov	r0, r6
 8009ef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ef2:	4798      	blx	r3
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0b6      	beq.n	8009e66 <__ssvfiscanf_r+0x1e6>
 8009ef8:	e79c      	b.n	8009e34 <__ssvfiscanf_r+0x1b4>
 8009efa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009efc:	3201      	adds	r2, #1
 8009efe:	9245      	str	r2, [sp, #276]	; 0x114
 8009f00:	6862      	ldr	r2, [r4, #4]
 8009f02:	3a01      	subs	r2, #1
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	6062      	str	r2, [r4, #4]
 8009f08:	dd02      	ble.n	8009f10 <__ssvfiscanf_r+0x290>
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	e7ad      	b.n	8009e6c <__ssvfiscanf_r+0x1ec>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f16:	4798      	blx	r3
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d0a7      	beq.n	8009e6c <__ssvfiscanf_r+0x1ec>
 8009f1c:	e78a      	b.n	8009e34 <__ssvfiscanf_r+0x1b4>
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	dc0e      	bgt.n	8009f40 <__ssvfiscanf_r+0x2c0>
 8009f22:	466b      	mov	r3, sp
 8009f24:	4622      	mov	r2, r4
 8009f26:	4630      	mov	r0, r6
 8009f28:	a941      	add	r1, sp, #260	; 0x104
 8009f2a:	f000 fb6b 	bl	800a604 <_scanf_i>
 8009f2e:	e7ab      	b.n	8009e88 <__ssvfiscanf_r+0x208>
 8009f30:	08009bcd 	.word	0x08009bcd
 8009f34:	08009c47 	.word	0x08009c47
 8009f38:	0800b49f 	.word	0x0800b49f
 8009f3c:	0800b456 	.word	0x0800b456
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <__ssvfiscanf_r+0x2f0>)
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f43f aec2 	beq.w	8009ccc <__ssvfiscanf_r+0x4c>
 8009f48:	466b      	mov	r3, sp
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	a941      	add	r1, sp, #260	; 0x104
 8009f50:	f3af 8000 	nop.w
 8009f54:	e798      	b.n	8009e88 <__ssvfiscanf_r+0x208>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f5c:	bf18      	it	ne
 8009f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8009f62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f6c:	e7f9      	b.n	8009f62 <__ssvfiscanf_r+0x2e2>
 8009f6e:	bf00      	nop
 8009f70:	00000000 	.word	0x00000000

08009f74 <__sfputc_r>:
 8009f74:	6893      	ldr	r3, [r2, #8]
 8009f76:	b410      	push	{r4}
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	6093      	str	r3, [r2, #8]
 8009f7e:	da07      	bge.n	8009f90 <__sfputc_r+0x1c>
 8009f80:	6994      	ldr	r4, [r2, #24]
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	db01      	blt.n	8009f8a <__sfputc_r+0x16>
 8009f86:	290a      	cmp	r1, #10
 8009f88:	d102      	bne.n	8009f90 <__sfputc_r+0x1c>
 8009f8a:	bc10      	pop	{r4}
 8009f8c:	f000 bdb6 	b.w	800aafc <__swbuf_r>
 8009f90:	6813      	ldr	r3, [r2, #0]
 8009f92:	1c58      	adds	r0, r3, #1
 8009f94:	6010      	str	r0, [r2, #0]
 8009f96:	7019      	strb	r1, [r3, #0]
 8009f98:	4608      	mov	r0, r1
 8009f9a:	bc10      	pop	{r4}
 8009f9c:	4770      	bx	lr

08009f9e <__sfputs_r>:
 8009f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	460f      	mov	r7, r1
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	18d5      	adds	r5, r2, r3
 8009fa8:	42ac      	cmp	r4, r5
 8009faa:	d101      	bne.n	8009fb0 <__sfputs_r+0x12>
 8009fac:	2000      	movs	r0, #0
 8009fae:	e007      	b.n	8009fc0 <__sfputs_r+0x22>
 8009fb0:	463a      	mov	r2, r7
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	f7ff ffdc 	bl	8009f74 <__sfputc_r>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d1f3      	bne.n	8009fa8 <__sfputs_r+0xa>
 8009fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fc4 <_vfiprintf_r>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	460d      	mov	r5, r1
 8009fca:	4614      	mov	r4, r2
 8009fcc:	4698      	mov	r8, r3
 8009fce:	4606      	mov	r6, r0
 8009fd0:	b09d      	sub	sp, #116	; 0x74
 8009fd2:	b118      	cbz	r0, 8009fdc <_vfiprintf_r+0x18>
 8009fd4:	6983      	ldr	r3, [r0, #24]
 8009fd6:	b90b      	cbnz	r3, 8009fdc <_vfiprintf_r+0x18>
 8009fd8:	f000 ff6e 	bl	800aeb8 <__sinit>
 8009fdc:	4b89      	ldr	r3, [pc, #548]	; (800a204 <_vfiprintf_r+0x240>)
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	d11b      	bne.n	800a01a <_vfiprintf_r+0x56>
 8009fe2:	6875      	ldr	r5, [r6, #4]
 8009fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe6:	07d9      	lsls	r1, r3, #31
 8009fe8:	d405      	bmi.n	8009ff6 <_vfiprintf_r+0x32>
 8009fea:	89ab      	ldrh	r3, [r5, #12]
 8009fec:	059a      	lsls	r2, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_vfiprintf_r+0x32>
 8009ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ff2:	f000 ffff 	bl	800aff4 <__retarget_lock_acquire_recursive>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	071b      	lsls	r3, r3, #28
 8009ffa:	d501      	bpl.n	800a000 <_vfiprintf_r+0x3c>
 8009ffc:	692b      	ldr	r3, [r5, #16]
 8009ffe:	b9eb      	cbnz	r3, 800a03c <_vfiprintf_r+0x78>
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f000 fdcc 	bl	800aba0 <__swsetup_r>
 800a008:	b1c0      	cbz	r0, 800a03c <_vfiprintf_r+0x78>
 800a00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00c:	07dc      	lsls	r4, r3, #31
 800a00e:	d50e      	bpl.n	800a02e <_vfiprintf_r+0x6a>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	b01d      	add	sp, #116	; 0x74
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	4b7b      	ldr	r3, [pc, #492]	; (800a208 <_vfiprintf_r+0x244>)
 800a01c:	429d      	cmp	r5, r3
 800a01e:	d101      	bne.n	800a024 <_vfiprintf_r+0x60>
 800a020:	68b5      	ldr	r5, [r6, #8]
 800a022:	e7df      	b.n	8009fe4 <_vfiprintf_r+0x20>
 800a024:	4b79      	ldr	r3, [pc, #484]	; (800a20c <_vfiprintf_r+0x248>)
 800a026:	429d      	cmp	r5, r3
 800a028:	bf08      	it	eq
 800a02a:	68f5      	ldreq	r5, [r6, #12]
 800a02c:	e7da      	b.n	8009fe4 <_vfiprintf_r+0x20>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	0598      	lsls	r0, r3, #22
 800a032:	d4ed      	bmi.n	800a010 <_vfiprintf_r+0x4c>
 800a034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a036:	f000 ffde 	bl	800aff6 <__retarget_lock_release_recursive>
 800a03a:	e7e9      	b.n	800a010 <_vfiprintf_r+0x4c>
 800a03c:	2300      	movs	r3, #0
 800a03e:	9309      	str	r3, [sp, #36]	; 0x24
 800a040:	2320      	movs	r3, #32
 800a042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a046:	2330      	movs	r3, #48	; 0x30
 800a048:	f04f 0901 	mov.w	r9, #1
 800a04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a050:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a210 <_vfiprintf_r+0x24c>
 800a054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a058:	4623      	mov	r3, r4
 800a05a:	469a      	mov	sl, r3
 800a05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a060:	b10a      	cbz	r2, 800a066 <_vfiprintf_r+0xa2>
 800a062:	2a25      	cmp	r2, #37	; 0x25
 800a064:	d1f9      	bne.n	800a05a <_vfiprintf_r+0x96>
 800a066:	ebba 0b04 	subs.w	fp, sl, r4
 800a06a:	d00b      	beq.n	800a084 <_vfiprintf_r+0xc0>
 800a06c:	465b      	mov	r3, fp
 800a06e:	4622      	mov	r2, r4
 800a070:	4629      	mov	r1, r5
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff ff93 	bl	8009f9e <__sfputs_r>
 800a078:	3001      	adds	r0, #1
 800a07a:	f000 80aa 	beq.w	800a1d2 <_vfiprintf_r+0x20e>
 800a07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a080:	445a      	add	r2, fp
 800a082:	9209      	str	r2, [sp, #36]	; 0x24
 800a084:	f89a 3000 	ldrb.w	r3, [sl]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 80a2 	beq.w	800a1d2 <_vfiprintf_r+0x20e>
 800a08e:	2300      	movs	r3, #0
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a098:	f10a 0a01 	add.w	sl, sl, #1
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	9307      	str	r3, [sp, #28]
 800a0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a6:	4654      	mov	r4, sl
 800a0a8:	2205      	movs	r2, #5
 800a0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ae:	4858      	ldr	r0, [pc, #352]	; (800a210 <_vfiprintf_r+0x24c>)
 800a0b0:	f001 f808 	bl	800b0c4 <memchr>
 800a0b4:	9a04      	ldr	r2, [sp, #16]
 800a0b6:	b9d8      	cbnz	r0, 800a0f0 <_vfiprintf_r+0x12c>
 800a0b8:	06d1      	lsls	r1, r2, #27
 800a0ba:	bf44      	itt	mi
 800a0bc:	2320      	movmi	r3, #32
 800a0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c2:	0713      	lsls	r3, r2, #28
 800a0c4:	bf44      	itt	mi
 800a0c6:	232b      	movmi	r3, #43	; 0x2b
 800a0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d2:	d015      	beq.n	800a100 <_vfiprintf_r+0x13c>
 800a0d4:	4654      	mov	r4, sl
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	f04f 0c0a 	mov.w	ip, #10
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	4621      	mov	r1, r4
 800a0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e4:	3b30      	subs	r3, #48	; 0x30
 800a0e6:	2b09      	cmp	r3, #9
 800a0e8:	d94e      	bls.n	800a188 <_vfiprintf_r+0x1c4>
 800a0ea:	b1b0      	cbz	r0, 800a11a <_vfiprintf_r+0x156>
 800a0ec:	9207      	str	r2, [sp, #28]
 800a0ee:	e014      	b.n	800a11a <_vfiprintf_r+0x156>
 800a0f0:	eba0 0308 	sub.w	r3, r0, r8
 800a0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	46a2      	mov	sl, r4
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	e7d2      	b.n	800a0a6 <_vfiprintf_r+0xe2>
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	1d19      	adds	r1, r3, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	9103      	str	r1, [sp, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bfbb      	ittet	lt
 800a10c:	425b      	neglt	r3, r3
 800a10e:	f042 0202 	orrlt.w	r2, r2, #2
 800a112:	9307      	strge	r3, [sp, #28]
 800a114:	9307      	strlt	r3, [sp, #28]
 800a116:	bfb8      	it	lt
 800a118:	9204      	strlt	r2, [sp, #16]
 800a11a:	7823      	ldrb	r3, [r4, #0]
 800a11c:	2b2e      	cmp	r3, #46	; 0x2e
 800a11e:	d10c      	bne.n	800a13a <_vfiprintf_r+0x176>
 800a120:	7863      	ldrb	r3, [r4, #1]
 800a122:	2b2a      	cmp	r3, #42	; 0x2a
 800a124:	d135      	bne.n	800a192 <_vfiprintf_r+0x1ce>
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	3402      	adds	r4, #2
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	9203      	str	r2, [sp, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfb8      	it	lt
 800a134:	f04f 33ff 	movlt.w	r3, #4294967295
 800a138:	9305      	str	r3, [sp, #20]
 800a13a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a214 <_vfiprintf_r+0x250>
 800a13e:	2203      	movs	r2, #3
 800a140:	4650      	mov	r0, sl
 800a142:	7821      	ldrb	r1, [r4, #0]
 800a144:	f000 ffbe 	bl	800b0c4 <memchr>
 800a148:	b140      	cbz	r0, 800a15c <_vfiprintf_r+0x198>
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	eba0 000a 	sub.w	r0, r0, sl
 800a150:	fa03 f000 	lsl.w	r0, r3, r0
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	3401      	adds	r4, #1
 800a158:	4303      	orrs	r3, r0
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a160:	2206      	movs	r2, #6
 800a162:	482d      	ldr	r0, [pc, #180]	; (800a218 <_vfiprintf_r+0x254>)
 800a164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a168:	f000 ffac 	bl	800b0c4 <memchr>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d03f      	beq.n	800a1f0 <_vfiprintf_r+0x22c>
 800a170:	4b2a      	ldr	r3, [pc, #168]	; (800a21c <_vfiprintf_r+0x258>)
 800a172:	bb1b      	cbnz	r3, 800a1bc <_vfiprintf_r+0x1f8>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	3307      	adds	r3, #7
 800a178:	f023 0307 	bic.w	r3, r3, #7
 800a17c:	3308      	adds	r3, #8
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	443b      	add	r3, r7
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	e767      	b.n	800a058 <_vfiprintf_r+0x94>
 800a188:	460c      	mov	r4, r1
 800a18a:	2001      	movs	r0, #1
 800a18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a190:	e7a5      	b.n	800a0de <_vfiprintf_r+0x11a>
 800a192:	2300      	movs	r3, #0
 800a194:	f04f 0c0a 	mov.w	ip, #10
 800a198:	4619      	mov	r1, r3
 800a19a:	3401      	adds	r4, #1
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a4:	3a30      	subs	r2, #48	; 0x30
 800a1a6:	2a09      	cmp	r2, #9
 800a1a8:	d903      	bls.n	800a1b2 <_vfiprintf_r+0x1ee>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0c5      	beq.n	800a13a <_vfiprintf_r+0x176>
 800a1ae:	9105      	str	r1, [sp, #20]
 800a1b0:	e7c3      	b.n	800a13a <_vfiprintf_r+0x176>
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ba:	e7f0      	b.n	800a19e <_vfiprintf_r+0x1da>
 800a1bc:	ab03      	add	r3, sp, #12
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4b16      	ldr	r3, [pc, #88]	; (800a220 <_vfiprintf_r+0x25c>)
 800a1c6:	a904      	add	r1, sp, #16
 800a1c8:	f3af 8000 	nop.w
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	1c78      	adds	r0, r7, #1
 800a1d0:	d1d6      	bne.n	800a180 <_vfiprintf_r+0x1bc>
 800a1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1d4:	07d9      	lsls	r1, r3, #31
 800a1d6:	d405      	bmi.n	800a1e4 <_vfiprintf_r+0x220>
 800a1d8:	89ab      	ldrh	r3, [r5, #12]
 800a1da:	059a      	lsls	r2, r3, #22
 800a1dc:	d402      	bmi.n	800a1e4 <_vfiprintf_r+0x220>
 800a1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e0:	f000 ff09 	bl	800aff6 <__retarget_lock_release_recursive>
 800a1e4:	89ab      	ldrh	r3, [r5, #12]
 800a1e6:	065b      	lsls	r3, r3, #25
 800a1e8:	f53f af12 	bmi.w	800a010 <_vfiprintf_r+0x4c>
 800a1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ee:	e711      	b.n	800a014 <_vfiprintf_r+0x50>
 800a1f0:	ab03      	add	r3, sp, #12
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <_vfiprintf_r+0x25c>)
 800a1fa:	a904      	add	r1, sp, #16
 800a1fc:	f000 f882 	bl	800a304 <_printf_i>
 800a200:	e7e4      	b.n	800a1cc <_vfiprintf_r+0x208>
 800a202:	bf00      	nop
 800a204:	0800b5c0 	.word	0x0800b5c0
 800a208:	0800b5e0 	.word	0x0800b5e0
 800a20c:	0800b5a0 	.word	0x0800b5a0
 800a210:	0800b450 	.word	0x0800b450
 800a214:	0800b456 	.word	0x0800b456
 800a218:	0800b45a 	.word	0x0800b45a
 800a21c:	00000000 	.word	0x00000000
 800a220:	08009f9f 	.word	0x08009f9f

0800a224 <_printf_common>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	4616      	mov	r6, r2
 800a22a:	4699      	mov	r9, r3
 800a22c:	688a      	ldr	r2, [r1, #8]
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4607      	mov	r7, r0
 800a232:	4293      	cmp	r3, r2
 800a234:	bfb8      	it	lt
 800a236:	4613      	movlt	r3, r2
 800a238:	6033      	str	r3, [r6, #0]
 800a23a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a23e:	460c      	mov	r4, r1
 800a240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a244:	b10a      	cbz	r2, 800a24a <_printf_common+0x26>
 800a246:	3301      	adds	r3, #1
 800a248:	6033      	str	r3, [r6, #0]
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	0699      	lsls	r1, r3, #26
 800a24e:	bf42      	ittt	mi
 800a250:	6833      	ldrmi	r3, [r6, #0]
 800a252:	3302      	addmi	r3, #2
 800a254:	6033      	strmi	r3, [r6, #0]
 800a256:	6825      	ldr	r5, [r4, #0]
 800a258:	f015 0506 	ands.w	r5, r5, #6
 800a25c:	d106      	bne.n	800a26c <_printf_common+0x48>
 800a25e:	f104 0a19 	add.w	sl, r4, #25
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	6832      	ldr	r2, [r6, #0]
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	42ab      	cmp	r3, r5
 800a26a:	dc28      	bgt.n	800a2be <_printf_common+0x9a>
 800a26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a270:	1e13      	subs	r3, r2, #0
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	bf18      	it	ne
 800a276:	2301      	movne	r3, #1
 800a278:	0692      	lsls	r2, r2, #26
 800a27a:	d42d      	bmi.n	800a2d8 <_printf_common+0xb4>
 800a27c:	4649      	mov	r1, r9
 800a27e:	4638      	mov	r0, r7
 800a280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a284:	47c0      	blx	r8
 800a286:	3001      	adds	r0, #1
 800a288:	d020      	beq.n	800a2cc <_printf_common+0xa8>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	68e5      	ldr	r5, [r4, #12]
 800a28e:	f003 0306 	and.w	r3, r3, #6
 800a292:	2b04      	cmp	r3, #4
 800a294:	bf18      	it	ne
 800a296:	2500      	movne	r5, #0
 800a298:	6832      	ldr	r2, [r6, #0]
 800a29a:	f04f 0600 	mov.w	r6, #0
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	bf08      	it	eq
 800a2a2:	1aad      	subeq	r5, r5, r2
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	bf08      	it	eq
 800a2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfc4      	itt	gt
 800a2b0:	1a9b      	subgt	r3, r3, r2
 800a2b2:	18ed      	addgt	r5, r5, r3
 800a2b4:	341a      	adds	r4, #26
 800a2b6:	42b5      	cmp	r5, r6
 800a2b8:	d11a      	bne.n	800a2f0 <_printf_common+0xcc>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e008      	b.n	800a2d0 <_printf_common+0xac>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	47c0      	blx	r8
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d103      	bne.n	800a2d4 <_printf_common+0xb0>
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	e7c4      	b.n	800a262 <_printf_common+0x3e>
 800a2d8:	2030      	movs	r0, #48	; 0x30
 800a2da:	18e1      	adds	r1, r4, r3
 800a2dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2e6:	4422      	add	r2, r4
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2ee:	e7c5      	b.n	800a27c <_printf_common+0x58>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	47c0      	blx	r8
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d0e6      	beq.n	800a2cc <_printf_common+0xa8>
 800a2fe:	3601      	adds	r6, #1
 800a300:	e7d9      	b.n	800a2b6 <_printf_common+0x92>
	...

0800a304 <_printf_i>:
 800a304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	7e0f      	ldrb	r7, [r1, #24]
 800a30a:	4691      	mov	r9, r2
 800a30c:	2f78      	cmp	r7, #120	; 0x78
 800a30e:	4680      	mov	r8, r0
 800a310:	460c      	mov	r4, r1
 800a312:	469a      	mov	sl, r3
 800a314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a31a:	d807      	bhi.n	800a32c <_printf_i+0x28>
 800a31c:	2f62      	cmp	r7, #98	; 0x62
 800a31e:	d80a      	bhi.n	800a336 <_printf_i+0x32>
 800a320:	2f00      	cmp	r7, #0
 800a322:	f000 80d9 	beq.w	800a4d8 <_printf_i+0x1d4>
 800a326:	2f58      	cmp	r7, #88	; 0x58
 800a328:	f000 80a4 	beq.w	800a474 <_printf_i+0x170>
 800a32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a334:	e03a      	b.n	800a3ac <_printf_i+0xa8>
 800a336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a33a:	2b15      	cmp	r3, #21
 800a33c:	d8f6      	bhi.n	800a32c <_printf_i+0x28>
 800a33e:	a101      	add	r1, pc, #4	; (adr r1, 800a344 <_printf_i+0x40>)
 800a340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a344:	0800a39d 	.word	0x0800a39d
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a32d 	.word	0x0800a32d
 800a350:	0800a32d 	.word	0x0800a32d
 800a354:	0800a32d 	.word	0x0800a32d
 800a358:	0800a32d 	.word	0x0800a32d
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a32d 	.word	0x0800a32d
 800a364:	0800a32d 	.word	0x0800a32d
 800a368:	0800a32d 	.word	0x0800a32d
 800a36c:	0800a32d 	.word	0x0800a32d
 800a370:	0800a4bf 	.word	0x0800a4bf
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a4a1 	.word	0x0800a4a1
 800a37c:	0800a32d 	.word	0x0800a32d
 800a380:	0800a32d 	.word	0x0800a32d
 800a384:	0800a4e1 	.word	0x0800a4e1
 800a388:	0800a32d 	.word	0x0800a32d
 800a38c:	0800a3e1 	.word	0x0800a3e1
 800a390:	0800a32d 	.word	0x0800a32d
 800a394:	0800a32d 	.word	0x0800a32d
 800a398:	0800a4a9 	.word	0x0800a4a9
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	1d1a      	adds	r2, r3, #4
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	602a      	str	r2, [r5, #0]
 800a3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e0a4      	b.n	800a4fa <_printf_i+0x1f6>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	6829      	ldr	r1, [r5, #0]
 800a3b4:	0606      	lsls	r6, r0, #24
 800a3b6:	f101 0304 	add.w	r3, r1, #4
 800a3ba:	d50a      	bpl.n	800a3d2 <_printf_i+0xce>
 800a3bc:	680e      	ldr	r6, [r1, #0]
 800a3be:	602b      	str	r3, [r5, #0]
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	da03      	bge.n	800a3cc <_printf_i+0xc8>
 800a3c4:	232d      	movs	r3, #45	; 0x2d
 800a3c6:	4276      	negs	r6, r6
 800a3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	485e      	ldr	r0, [pc, #376]	; (800a548 <_printf_i+0x244>)
 800a3d0:	e019      	b.n	800a406 <_printf_i+0x102>
 800a3d2:	680e      	ldr	r6, [r1, #0]
 800a3d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3d8:	602b      	str	r3, [r5, #0]
 800a3da:	bf18      	it	ne
 800a3dc:	b236      	sxthne	r6, r6
 800a3de:	e7ef      	b.n	800a3c0 <_printf_i+0xbc>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	6820      	ldr	r0, [r4, #0]
 800a3e4:	1d19      	adds	r1, r3, #4
 800a3e6:	6029      	str	r1, [r5, #0]
 800a3e8:	0601      	lsls	r1, r0, #24
 800a3ea:	d501      	bpl.n	800a3f0 <_printf_i+0xec>
 800a3ec:	681e      	ldr	r6, [r3, #0]
 800a3ee:	e002      	b.n	800a3f6 <_printf_i+0xf2>
 800a3f0:	0646      	lsls	r6, r0, #25
 800a3f2:	d5fb      	bpl.n	800a3ec <_printf_i+0xe8>
 800a3f4:	881e      	ldrh	r6, [r3, #0]
 800a3f6:	2f6f      	cmp	r7, #111	; 0x6f
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2308      	moveq	r3, #8
 800a3fc:	230a      	movne	r3, #10
 800a3fe:	4852      	ldr	r0, [pc, #328]	; (800a548 <_printf_i+0x244>)
 800a400:	2100      	movs	r1, #0
 800a402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a406:	6865      	ldr	r5, [r4, #4]
 800a408:	2d00      	cmp	r5, #0
 800a40a:	bfa8      	it	ge
 800a40c:	6821      	ldrge	r1, [r4, #0]
 800a40e:	60a5      	str	r5, [r4, #8]
 800a410:	bfa4      	itt	ge
 800a412:	f021 0104 	bicge.w	r1, r1, #4
 800a416:	6021      	strge	r1, [r4, #0]
 800a418:	b90e      	cbnz	r6, 800a41e <_printf_i+0x11a>
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	d04d      	beq.n	800a4ba <_printf_i+0x1b6>
 800a41e:	4615      	mov	r5, r2
 800a420:	fbb6 f1f3 	udiv	r1, r6, r3
 800a424:	fb03 6711 	mls	r7, r3, r1, r6
 800a428:	5dc7      	ldrb	r7, [r0, r7]
 800a42a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a42e:	4637      	mov	r7, r6
 800a430:	42bb      	cmp	r3, r7
 800a432:	460e      	mov	r6, r1
 800a434:	d9f4      	bls.n	800a420 <_printf_i+0x11c>
 800a436:	2b08      	cmp	r3, #8
 800a438:	d10b      	bne.n	800a452 <_printf_i+0x14e>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	07de      	lsls	r6, r3, #31
 800a43e:	d508      	bpl.n	800a452 <_printf_i+0x14e>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	6861      	ldr	r1, [r4, #4]
 800a444:	4299      	cmp	r1, r3
 800a446:	bfde      	ittt	le
 800a448:	2330      	movle	r3, #48	; 0x30
 800a44a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a44e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a452:	1b52      	subs	r2, r2, r5
 800a454:	6122      	str	r2, [r4, #16]
 800a456:	464b      	mov	r3, r9
 800a458:	4621      	mov	r1, r4
 800a45a:	4640      	mov	r0, r8
 800a45c:	f8cd a000 	str.w	sl, [sp]
 800a460:	aa03      	add	r2, sp, #12
 800a462:	f7ff fedf 	bl	800a224 <_printf_common>
 800a466:	3001      	adds	r0, #1
 800a468:	d14c      	bne.n	800a504 <_printf_i+0x200>
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295
 800a46e:	b004      	add	sp, #16
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	4834      	ldr	r0, [pc, #208]	; (800a548 <_printf_i+0x244>)
 800a476:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a47a:	6829      	ldr	r1, [r5, #0]
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a482:	6029      	str	r1, [r5, #0]
 800a484:	061d      	lsls	r5, r3, #24
 800a486:	d514      	bpl.n	800a4b2 <_printf_i+0x1ae>
 800a488:	07df      	lsls	r7, r3, #31
 800a48a:	bf44      	itt	mi
 800a48c:	f043 0320 	orrmi.w	r3, r3, #32
 800a490:	6023      	strmi	r3, [r4, #0]
 800a492:	b91e      	cbnz	r6, 800a49c <_printf_i+0x198>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	f023 0320 	bic.w	r3, r3, #32
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	2310      	movs	r3, #16
 800a49e:	e7af      	b.n	800a400 <_printf_i+0xfc>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	f043 0320 	orr.w	r3, r3, #32
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	2378      	movs	r3, #120	; 0x78
 800a4aa:	4828      	ldr	r0, [pc, #160]	; (800a54c <_printf_i+0x248>)
 800a4ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4b0:	e7e3      	b.n	800a47a <_printf_i+0x176>
 800a4b2:	0659      	lsls	r1, r3, #25
 800a4b4:	bf48      	it	mi
 800a4b6:	b2b6      	uxthmi	r6, r6
 800a4b8:	e7e6      	b.n	800a488 <_printf_i+0x184>
 800a4ba:	4615      	mov	r5, r2
 800a4bc:	e7bb      	b.n	800a436 <_printf_i+0x132>
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	6826      	ldr	r6, [r4, #0]
 800a4c2:	1d18      	adds	r0, r3, #4
 800a4c4:	6961      	ldr	r1, [r4, #20]
 800a4c6:	6028      	str	r0, [r5, #0]
 800a4c8:	0635      	lsls	r5, r6, #24
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	d501      	bpl.n	800a4d2 <_printf_i+0x1ce>
 800a4ce:	6019      	str	r1, [r3, #0]
 800a4d0:	e002      	b.n	800a4d8 <_printf_i+0x1d4>
 800a4d2:	0670      	lsls	r0, r6, #25
 800a4d4:	d5fb      	bpl.n	800a4ce <_printf_i+0x1ca>
 800a4d6:	8019      	strh	r1, [r3, #0]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4615      	mov	r5, r2
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	e7ba      	b.n	800a456 <_printf_i+0x152>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	1d1a      	adds	r2, r3, #4
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	681d      	ldr	r5, [r3, #0]
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 fde9 	bl	800b0c4 <memchr>
 800a4f2:	b108      	cbz	r0, 800a4f8 <_printf_i+0x1f4>
 800a4f4:	1b40      	subs	r0, r0, r5
 800a4f6:	6060      	str	r0, [r4, #4]
 800a4f8:	6863      	ldr	r3, [r4, #4]
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a502:	e7a8      	b.n	800a456 <_printf_i+0x152>
 800a504:	462a      	mov	r2, r5
 800a506:	4649      	mov	r1, r9
 800a508:	4640      	mov	r0, r8
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	47d0      	blx	sl
 800a50e:	3001      	adds	r0, #1
 800a510:	d0ab      	beq.n	800a46a <_printf_i+0x166>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	079b      	lsls	r3, r3, #30
 800a516:	d413      	bmi.n	800a540 <_printf_i+0x23c>
 800a518:	68e0      	ldr	r0, [r4, #12]
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	4298      	cmp	r0, r3
 800a51e:	bfb8      	it	lt
 800a520:	4618      	movlt	r0, r3
 800a522:	e7a4      	b.n	800a46e <_printf_i+0x16a>
 800a524:	2301      	movs	r3, #1
 800a526:	4632      	mov	r2, r6
 800a528:	4649      	mov	r1, r9
 800a52a:	4640      	mov	r0, r8
 800a52c:	47d0      	blx	sl
 800a52e:	3001      	adds	r0, #1
 800a530:	d09b      	beq.n	800a46a <_printf_i+0x166>
 800a532:	3501      	adds	r5, #1
 800a534:	68e3      	ldr	r3, [r4, #12]
 800a536:	9903      	ldr	r1, [sp, #12]
 800a538:	1a5b      	subs	r3, r3, r1
 800a53a:	42ab      	cmp	r3, r5
 800a53c:	dcf2      	bgt.n	800a524 <_printf_i+0x220>
 800a53e:	e7eb      	b.n	800a518 <_printf_i+0x214>
 800a540:	2500      	movs	r5, #0
 800a542:	f104 0619 	add.w	r6, r4, #25
 800a546:	e7f5      	b.n	800a534 <_printf_i+0x230>
 800a548:	0800b461 	.word	0x0800b461
 800a54c:	0800b472 	.word	0x0800b472

0800a550 <_scanf_chars>:
 800a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4615      	mov	r5, r2
 800a556:	688a      	ldr	r2, [r1, #8]
 800a558:	4680      	mov	r8, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b932      	cbnz	r2, 800a56c <_scanf_chars+0x1c>
 800a55e:	698a      	ldr	r2, [r1, #24]
 800a560:	2a00      	cmp	r2, #0
 800a562:	bf0c      	ite	eq
 800a564:	2201      	moveq	r2, #1
 800a566:	f04f 32ff 	movne.w	r2, #4294967295
 800a56a:	608a      	str	r2, [r1, #8]
 800a56c:	2700      	movs	r7, #0
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a600 <_scanf_chars+0xb0>
 800a574:	06d1      	lsls	r1, r2, #27
 800a576:	bf5f      	itttt	pl
 800a578:	681a      	ldrpl	r2, [r3, #0]
 800a57a:	1d11      	addpl	r1, r2, #4
 800a57c:	6019      	strpl	r1, [r3, #0]
 800a57e:	6816      	ldrpl	r6, [r2, #0]
 800a580:	69a0      	ldr	r0, [r4, #24]
 800a582:	b188      	cbz	r0, 800a5a8 <_scanf_chars+0x58>
 800a584:	2801      	cmp	r0, #1
 800a586:	d107      	bne.n	800a598 <_scanf_chars+0x48>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	6963      	ldr	r3, [r4, #20]
 800a58e:	5c9b      	ldrb	r3, [r3, r2]
 800a590:	b953      	cbnz	r3, 800a5a8 <_scanf_chars+0x58>
 800a592:	2f00      	cmp	r7, #0
 800a594:	d031      	beq.n	800a5fa <_scanf_chars+0xaa>
 800a596:	e022      	b.n	800a5de <_scanf_chars+0x8e>
 800a598:	2802      	cmp	r0, #2
 800a59a:	d120      	bne.n	800a5de <_scanf_chars+0x8e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a5a4:	071b      	lsls	r3, r3, #28
 800a5a6:	d41a      	bmi.n	800a5de <_scanf_chars+0x8e>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	3701      	adds	r7, #1
 800a5ac:	06da      	lsls	r2, r3, #27
 800a5ae:	bf5e      	ittt	pl
 800a5b0:	682b      	ldrpl	r3, [r5, #0]
 800a5b2:	781b      	ldrbpl	r3, [r3, #0]
 800a5b4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5b8:	682a      	ldr	r2, [r5, #0]
 800a5ba:	686b      	ldr	r3, [r5, #4]
 800a5bc:	3201      	adds	r2, #1
 800a5be:	602a      	str	r2, [r5, #0]
 800a5c0:	68a2      	ldr	r2, [r4, #8]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	3a01      	subs	r2, #1
 800a5c6:	606b      	str	r3, [r5, #4]
 800a5c8:	60a2      	str	r2, [r4, #8]
 800a5ca:	b142      	cbz	r2, 800a5de <_scanf_chars+0x8e>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dcd7      	bgt.n	800a580 <_scanf_chars+0x30>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5d8:	4798      	blx	r3
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d0d0      	beq.n	800a580 <_scanf_chars+0x30>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	f013 0310 	ands.w	r3, r3, #16
 800a5e4:	d105      	bne.n	800a5f2 <_scanf_chars+0xa2>
 800a5e6:	68e2      	ldr	r2, [r4, #12]
 800a5e8:	3201      	adds	r2, #1
 800a5ea:	60e2      	str	r2, [r4, #12]
 800a5ec:	69a2      	ldr	r2, [r4, #24]
 800a5ee:	b102      	cbz	r2, 800a5f2 <_scanf_chars+0xa2>
 800a5f0:	7033      	strb	r3, [r6, #0]
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	443b      	add	r3, r7
 800a5f8:	6123      	str	r3, [r4, #16]
 800a5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fe:	bf00      	nop
 800a600:	0800b49f 	.word	0x0800b49f

0800a604 <_scanf_i>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	4698      	mov	r8, r3
 800a60c:	4b75      	ldr	r3, [pc, #468]	; (800a7e4 <_scanf_i+0x1e0>)
 800a60e:	b087      	sub	sp, #28
 800a610:	4682      	mov	sl, r0
 800a612:	4616      	mov	r6, r2
 800a614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a61e:	4b72      	ldr	r3, [pc, #456]	; (800a7e8 <_scanf_i+0x1e4>)
 800a620:	69a1      	ldr	r1, [r4, #24]
 800a622:	4a72      	ldr	r2, [pc, #456]	; (800a7ec <_scanf_i+0x1e8>)
 800a624:	4627      	mov	r7, r4
 800a626:	2903      	cmp	r1, #3
 800a628:	bf18      	it	ne
 800a62a:	461a      	movne	r2, r3
 800a62c:	68a3      	ldr	r3, [r4, #8]
 800a62e:	9201      	str	r2, [sp, #4]
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a636:	bf81      	itttt	hi
 800a638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a63c:	eb03 0905 	addhi.w	r9, r3, r5
 800a640:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a644:	60a3      	strhi	r3, [r4, #8]
 800a646:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a64a:	bf98      	it	ls
 800a64c:	f04f 0900 	movls.w	r9, #0
 800a650:	463d      	mov	r5, r7
 800a652:	f04f 0b00 	mov.w	fp, #0
 800a656:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	6831      	ldr	r1, [r6, #0]
 800a65e:	ab03      	add	r3, sp, #12
 800a660:	2202      	movs	r2, #2
 800a662:	7809      	ldrb	r1, [r1, #0]
 800a664:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a668:	f000 fd2c 	bl	800b0c4 <memchr>
 800a66c:	b328      	cbz	r0, 800a6ba <_scanf_i+0xb6>
 800a66e:	f1bb 0f01 	cmp.w	fp, #1
 800a672:	d159      	bne.n	800a728 <_scanf_i+0x124>
 800a674:	6862      	ldr	r2, [r4, #4]
 800a676:	b92a      	cbnz	r2, 800a684 <_scanf_i+0x80>
 800a678:	2308      	movs	r3, #8
 800a67a:	6822      	ldr	r2, [r4, #0]
 800a67c:	6063      	str	r3, [r4, #4]
 800a67e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a682:	6022      	str	r2, [r4, #0]
 800a684:	6822      	ldr	r2, [r4, #0]
 800a686:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a68a:	6022      	str	r2, [r4, #0]
 800a68c:	68a2      	ldr	r2, [r4, #8]
 800a68e:	1e51      	subs	r1, r2, #1
 800a690:	60a1      	str	r1, [r4, #8]
 800a692:	b192      	cbz	r2, 800a6ba <_scanf_i+0xb6>
 800a694:	6832      	ldr	r2, [r6, #0]
 800a696:	1c51      	adds	r1, r2, #1
 800a698:	6031      	str	r1, [r6, #0]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	f805 2b01 	strb.w	r2, [r5], #1
 800a6a0:	6872      	ldr	r2, [r6, #4]
 800a6a2:	3a01      	subs	r2, #1
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	6072      	str	r2, [r6, #4]
 800a6a8:	dc07      	bgt.n	800a6ba <_scanf_i+0xb6>
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4650      	mov	r0, sl
 800a6ae:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a6b2:	4790      	blx	r2
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f040 8085 	bne.w	800a7c4 <_scanf_i+0x1c0>
 800a6ba:	f10b 0b01 	add.w	fp, fp, #1
 800a6be:	f1bb 0f03 	cmp.w	fp, #3
 800a6c2:	d1cb      	bne.n	800a65c <_scanf_i+0x58>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <_scanf_i+0xc8>
 800a6c8:	230a      	movs	r3, #10
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	4948      	ldr	r1, [pc, #288]	; (800a7f0 <_scanf_i+0x1ec>)
 800a6d0:	6960      	ldr	r0, [r4, #20]
 800a6d2:	1ac9      	subs	r1, r1, r3
 800a6d4:	f000 f8b0 	bl	800a838 <__sccl>
 800a6d8:	f04f 0b00 	mov.w	fp, #0
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03d      	beq.n	800a760 <_scanf_i+0x15c>
 800a6e4:	6831      	ldr	r1, [r6, #0]
 800a6e6:	6960      	ldr	r0, [r4, #20]
 800a6e8:	f891 c000 	ldrb.w	ip, [r1]
 800a6ec:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d035      	beq.n	800a760 <_scanf_i+0x15c>
 800a6f4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a6f8:	d124      	bne.n	800a744 <_scanf_i+0x140>
 800a6fa:	0510      	lsls	r0, r2, #20
 800a6fc:	d522      	bpl.n	800a744 <_scanf_i+0x140>
 800a6fe:	f10b 0b01 	add.w	fp, fp, #1
 800a702:	f1b9 0f00 	cmp.w	r9, #0
 800a706:	d003      	beq.n	800a710 <_scanf_i+0x10c>
 800a708:	3301      	adds	r3, #1
 800a70a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a70e:	60a3      	str	r3, [r4, #8]
 800a710:	6873      	ldr	r3, [r6, #4]
 800a712:	3b01      	subs	r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	6073      	str	r3, [r6, #4]
 800a718:	dd1b      	ble.n	800a752 <_scanf_i+0x14e>
 800a71a:	6833      	ldr	r3, [r6, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	6033      	str	r3, [r6, #0]
 800a720:	68a3      	ldr	r3, [r4, #8]
 800a722:	3b01      	subs	r3, #1
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	e7d9      	b.n	800a6dc <_scanf_i+0xd8>
 800a728:	f1bb 0f02 	cmp.w	fp, #2
 800a72c:	d1ae      	bne.n	800a68c <_scanf_i+0x88>
 800a72e:	6822      	ldr	r2, [r4, #0]
 800a730:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a734:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a738:	d1bf      	bne.n	800a6ba <_scanf_i+0xb6>
 800a73a:	2310      	movs	r3, #16
 800a73c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	e7a2      	b.n	800a68a <_scanf_i+0x86>
 800a744:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a748:	6022      	str	r2, [r4, #0]
 800a74a:	780b      	ldrb	r3, [r1, #0]
 800a74c:	f805 3b01 	strb.w	r3, [r5], #1
 800a750:	e7de      	b.n	800a710 <_scanf_i+0x10c>
 800a752:	4631      	mov	r1, r6
 800a754:	4650      	mov	r0, sl
 800a756:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a75a:	4798      	blx	r3
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d0df      	beq.n	800a720 <_scanf_i+0x11c>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	05db      	lsls	r3, r3, #23
 800a764:	d50d      	bpl.n	800a782 <_scanf_i+0x17e>
 800a766:	42bd      	cmp	r5, r7
 800a768:	d909      	bls.n	800a77e <_scanf_i+0x17a>
 800a76a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a76e:	4632      	mov	r2, r6
 800a770:	4650      	mov	r0, sl
 800a772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a776:	f105 39ff 	add.w	r9, r5, #4294967295
 800a77a:	4798      	blx	r3
 800a77c:	464d      	mov	r5, r9
 800a77e:	42bd      	cmp	r5, r7
 800a780:	d02d      	beq.n	800a7de <_scanf_i+0x1da>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	f012 0210 	ands.w	r2, r2, #16
 800a788:	d113      	bne.n	800a7b2 <_scanf_i+0x1ae>
 800a78a:	702a      	strb	r2, [r5, #0]
 800a78c:	4639      	mov	r1, r7
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	4650      	mov	r0, sl
 800a792:	9e01      	ldr	r6, [sp, #4]
 800a794:	47b0      	blx	r6
 800a796:	6821      	ldr	r1, [r4, #0]
 800a798:	f8d8 3000 	ldr.w	r3, [r8]
 800a79c:	f011 0f20 	tst.w	r1, #32
 800a7a0:	d013      	beq.n	800a7ca <_scanf_i+0x1c6>
 800a7a2:	1d1a      	adds	r2, r3, #4
 800a7a4:	f8c8 2000 	str.w	r2, [r8]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6018      	str	r0, [r3, #0]
 800a7ac:	68e3      	ldr	r3, [r4, #12]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60e3      	str	r3, [r4, #12]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	1bed      	subs	r5, r5, r7
 800a7b6:	44ab      	add	fp, r5
 800a7b8:	6925      	ldr	r5, [r4, #16]
 800a7ba:	445d      	add	r5, fp
 800a7bc:	6125      	str	r5, [r4, #16]
 800a7be:	b007      	add	sp, #28
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	f04f 0b00 	mov.w	fp, #0
 800a7c8:	e7ca      	b.n	800a760 <_scanf_i+0x15c>
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	f8c8 2000 	str.w	r2, [r8]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f011 0f01 	tst.w	r1, #1
 800a7d6:	bf14      	ite	ne
 800a7d8:	8018      	strhne	r0, [r3, #0]
 800a7da:	6018      	streq	r0, [r3, #0]
 800a7dc:	e7e6      	b.n	800a7ac <_scanf_i+0x1a8>
 800a7de:	2001      	movs	r0, #1
 800a7e0:	e7ed      	b.n	800a7be <_scanf_i+0x1ba>
 800a7e2:	bf00      	nop
 800a7e4:	0800b378 	.word	0x0800b378
 800a7e8:	0800aa89 	.word	0x0800aa89
 800a7ec:	0800a9a1 	.word	0x0800a9a1
 800a7f0:	0800b49c 	.word	0x0800b49c

0800a7f4 <_read_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4d05      	ldr	r5, [pc, #20]	; (800a814 <_read_r+0x20>)
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f6 fa4d 	bl	8000ca2 <_read>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_read_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_read_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20001538 	.word	0x20001538

0800a818 <_sbrk_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	2300      	movs	r3, #0
 800a81c:	4d05      	ldr	r5, [pc, #20]	; (800a834 <_sbrk_r+0x1c>)
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	f7f6 faa6 	bl	8000d74 <_sbrk>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_sbrk_r+0x1a>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_sbrk_r+0x1a>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20001538 	.word	0x20001538

0800a838 <__sccl>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	780b      	ldrb	r3, [r1, #0]
 800a83c:	4604      	mov	r4, r0
 800a83e:	2b5e      	cmp	r3, #94	; 0x5e
 800a840:	bf13      	iteet	ne
 800a842:	2200      	movne	r2, #0
 800a844:	2201      	moveq	r2, #1
 800a846:	784b      	ldrbeq	r3, [r1, #1]
 800a848:	1c48      	addne	r0, r1, #1
 800a84a:	bf08      	it	eq
 800a84c:	1c88      	addeq	r0, r1, #2
 800a84e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a852:	1e61      	subs	r1, r4, #1
 800a854:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a858:	42a9      	cmp	r1, r5
 800a85a:	d1fb      	bne.n	800a854 <__sccl+0x1c>
 800a85c:	b90b      	cbnz	r3, 800a862 <__sccl+0x2a>
 800a85e:	3801      	subs	r0, #1
 800a860:	bd70      	pop	{r4, r5, r6, pc}
 800a862:	f082 0201 	eor.w	r2, r2, #1
 800a866:	4605      	mov	r5, r0
 800a868:	54e2      	strb	r2, [r4, r3]
 800a86a:	4628      	mov	r0, r5
 800a86c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a870:	292d      	cmp	r1, #45	; 0x2d
 800a872:	d006      	beq.n	800a882 <__sccl+0x4a>
 800a874:	295d      	cmp	r1, #93	; 0x5d
 800a876:	d0f3      	beq.n	800a860 <__sccl+0x28>
 800a878:	b909      	cbnz	r1, 800a87e <__sccl+0x46>
 800a87a:	4628      	mov	r0, r5
 800a87c:	e7f0      	b.n	800a860 <__sccl+0x28>
 800a87e:	460b      	mov	r3, r1
 800a880:	e7f1      	b.n	800a866 <__sccl+0x2e>
 800a882:	786e      	ldrb	r6, [r5, #1]
 800a884:	2e5d      	cmp	r6, #93	; 0x5d
 800a886:	d0fa      	beq.n	800a87e <__sccl+0x46>
 800a888:	42b3      	cmp	r3, r6
 800a88a:	dcf8      	bgt.n	800a87e <__sccl+0x46>
 800a88c:	4619      	mov	r1, r3
 800a88e:	3502      	adds	r5, #2
 800a890:	3101      	adds	r1, #1
 800a892:	428e      	cmp	r6, r1
 800a894:	5462      	strb	r2, [r4, r1]
 800a896:	dcfb      	bgt.n	800a890 <__sccl+0x58>
 800a898:	1af1      	subs	r1, r6, r3
 800a89a:	3901      	subs	r1, #1
 800a89c:	42b3      	cmp	r3, r6
 800a89e:	bfa8      	it	ge
 800a8a0:	2100      	movge	r1, #0
 800a8a2:	1c58      	adds	r0, r3, #1
 800a8a4:	1843      	adds	r3, r0, r1
 800a8a6:	e7e0      	b.n	800a86a <__sccl+0x32>

0800a8a8 <_strtol_l.constprop.0>:
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	d001      	beq.n	800a8b6 <_strtol_l.constprop.0+0xe>
 800a8b2:	2b24      	cmp	r3, #36	; 0x24
 800a8b4:	d906      	bls.n	800a8c4 <_strtol_l.constprop.0+0x1c>
 800a8b6:	f7fe fd9f 	bl	80093f8 <__errno>
 800a8ba:	2316      	movs	r3, #22
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	4f35      	ldr	r7, [pc, #212]	; (800a99c <_strtol_l.constprop.0+0xf4>)
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8ce:	5de6      	ldrb	r6, [r4, r7]
 800a8d0:	f016 0608 	ands.w	r6, r6, #8
 800a8d4:	d1f8      	bne.n	800a8c8 <_strtol_l.constprop.0+0x20>
 800a8d6:	2c2d      	cmp	r4, #45	; 0x2d
 800a8d8:	d12f      	bne.n	800a93a <_strtol_l.constprop.0+0x92>
 800a8da:	2601      	movs	r6, #1
 800a8dc:	782c      	ldrb	r4, [r5, #0]
 800a8de:	1c85      	adds	r5, r0, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d057      	beq.n	800a994 <_strtol_l.constprop.0+0xec>
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d109      	bne.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a8e8:	2c30      	cmp	r4, #48	; 0x30
 800a8ea:	d107      	bne.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a8ec:	7828      	ldrb	r0, [r5, #0]
 800a8ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a8f2:	2858      	cmp	r0, #88	; 0x58
 800a8f4:	d149      	bne.n	800a98a <_strtol_l.constprop.0+0xe2>
 800a8f6:	2310      	movs	r3, #16
 800a8f8:	786c      	ldrb	r4, [r5, #1]
 800a8fa:	3502      	adds	r5, #2
 800a8fc:	2700      	movs	r7, #0
 800a8fe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a902:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a906:	fbbe f9f3 	udiv	r9, lr, r3
 800a90a:	4638      	mov	r0, r7
 800a90c:	fb03 ea19 	mls	sl, r3, r9, lr
 800a910:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a914:	f1bc 0f09 	cmp.w	ip, #9
 800a918:	d814      	bhi.n	800a944 <_strtol_l.constprop.0+0x9c>
 800a91a:	4664      	mov	r4, ip
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	dd22      	ble.n	800a966 <_strtol_l.constprop.0+0xbe>
 800a920:	2f00      	cmp	r7, #0
 800a922:	db1d      	blt.n	800a960 <_strtol_l.constprop.0+0xb8>
 800a924:	4581      	cmp	r9, r0
 800a926:	d31b      	bcc.n	800a960 <_strtol_l.constprop.0+0xb8>
 800a928:	d101      	bne.n	800a92e <_strtol_l.constprop.0+0x86>
 800a92a:	45a2      	cmp	sl, r4
 800a92c:	db18      	blt.n	800a960 <_strtol_l.constprop.0+0xb8>
 800a92e:	2701      	movs	r7, #1
 800a930:	fb00 4003 	mla	r0, r0, r3, r4
 800a934:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a938:	e7ea      	b.n	800a910 <_strtol_l.constprop.0+0x68>
 800a93a:	2c2b      	cmp	r4, #43	; 0x2b
 800a93c:	bf04      	itt	eq
 800a93e:	782c      	ldrbeq	r4, [r5, #0]
 800a940:	1c85      	addeq	r5, r0, #2
 800a942:	e7cd      	b.n	800a8e0 <_strtol_l.constprop.0+0x38>
 800a944:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a948:	f1bc 0f19 	cmp.w	ip, #25
 800a94c:	d801      	bhi.n	800a952 <_strtol_l.constprop.0+0xaa>
 800a94e:	3c37      	subs	r4, #55	; 0x37
 800a950:	e7e4      	b.n	800a91c <_strtol_l.constprop.0+0x74>
 800a952:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a956:	f1bc 0f19 	cmp.w	ip, #25
 800a95a:	d804      	bhi.n	800a966 <_strtol_l.constprop.0+0xbe>
 800a95c:	3c57      	subs	r4, #87	; 0x57
 800a95e:	e7dd      	b.n	800a91c <_strtol_l.constprop.0+0x74>
 800a960:	f04f 37ff 	mov.w	r7, #4294967295
 800a964:	e7e6      	b.n	800a934 <_strtol_l.constprop.0+0x8c>
 800a966:	2f00      	cmp	r7, #0
 800a968:	da07      	bge.n	800a97a <_strtol_l.constprop.0+0xd2>
 800a96a:	2322      	movs	r3, #34	; 0x22
 800a96c:	4670      	mov	r0, lr
 800a96e:	f8c8 3000 	str.w	r3, [r8]
 800a972:	2a00      	cmp	r2, #0
 800a974:	d0a4      	beq.n	800a8c0 <_strtol_l.constprop.0+0x18>
 800a976:	1e69      	subs	r1, r5, #1
 800a978:	e005      	b.n	800a986 <_strtol_l.constprop.0+0xde>
 800a97a:	b106      	cbz	r6, 800a97e <_strtol_l.constprop.0+0xd6>
 800a97c:	4240      	negs	r0, r0
 800a97e:	2a00      	cmp	r2, #0
 800a980:	d09e      	beq.n	800a8c0 <_strtol_l.constprop.0+0x18>
 800a982:	2f00      	cmp	r7, #0
 800a984:	d1f7      	bne.n	800a976 <_strtol_l.constprop.0+0xce>
 800a986:	6011      	str	r1, [r2, #0]
 800a988:	e79a      	b.n	800a8c0 <_strtol_l.constprop.0+0x18>
 800a98a:	2430      	movs	r4, #48	; 0x30
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1b5      	bne.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a990:	2308      	movs	r3, #8
 800a992:	e7b3      	b.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a994:	2c30      	cmp	r4, #48	; 0x30
 800a996:	d0a9      	beq.n	800a8ec <_strtol_l.constprop.0+0x44>
 800a998:	230a      	movs	r3, #10
 800a99a:	e7af      	b.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a99c:	0800b49f 	.word	0x0800b49f

0800a9a0 <_strtol_r>:
 800a9a0:	f7ff bf82 	b.w	800a8a8 <_strtol_l.constprop.0>

0800a9a4 <_strtoul_l.constprop.0>:
 800a9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9a8:	4686      	mov	lr, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	4f35      	ldr	r7, [pc, #212]	; (800aa84 <_strtoul_l.constprop.0+0xe0>)
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9b4:	5de6      	ldrb	r6, [r4, r7]
 800a9b6:	f016 0608 	ands.w	r6, r6, #8
 800a9ba:	d1f8      	bne.n	800a9ae <_strtoul_l.constprop.0+0xa>
 800a9bc:	2c2d      	cmp	r4, #45	; 0x2d
 800a9be:	d12f      	bne.n	800aa20 <_strtoul_l.constprop.0+0x7c>
 800a9c0:	2601      	movs	r6, #1
 800a9c2:	782c      	ldrb	r4, [r5, #0]
 800a9c4:	1c85      	adds	r5, r0, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d057      	beq.n	800aa7a <_strtoul_l.constprop.0+0xd6>
 800a9ca:	2b10      	cmp	r3, #16
 800a9cc:	d109      	bne.n	800a9e2 <_strtoul_l.constprop.0+0x3e>
 800a9ce:	2c30      	cmp	r4, #48	; 0x30
 800a9d0:	d107      	bne.n	800a9e2 <_strtoul_l.constprop.0+0x3e>
 800a9d2:	7828      	ldrb	r0, [r5, #0]
 800a9d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9d8:	2858      	cmp	r0, #88	; 0x58
 800a9da:	d149      	bne.n	800aa70 <_strtoul_l.constprop.0+0xcc>
 800a9dc:	2310      	movs	r3, #16
 800a9de:	786c      	ldrb	r4, [r5, #1]
 800a9e0:	3502      	adds	r5, #2
 800a9e2:	f04f 38ff 	mov.w	r8, #4294967295
 800a9e6:	fbb8 f8f3 	udiv	r8, r8, r3
 800a9ea:	2700      	movs	r7, #0
 800a9ec:	fb03 f908 	mul.w	r9, r3, r8
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	ea6f 0909 	mvn.w	r9, r9
 800a9f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9fa:	f1bc 0f09 	cmp.w	ip, #9
 800a9fe:	d814      	bhi.n	800aa2a <_strtoul_l.constprop.0+0x86>
 800aa00:	4664      	mov	r4, ip
 800aa02:	42a3      	cmp	r3, r4
 800aa04:	dd22      	ble.n	800aa4c <_strtoul_l.constprop.0+0xa8>
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	db1d      	blt.n	800aa46 <_strtoul_l.constprop.0+0xa2>
 800aa0a:	4580      	cmp	r8, r0
 800aa0c:	d31b      	bcc.n	800aa46 <_strtoul_l.constprop.0+0xa2>
 800aa0e:	d101      	bne.n	800aa14 <_strtoul_l.constprop.0+0x70>
 800aa10:	45a1      	cmp	r9, r4
 800aa12:	db18      	blt.n	800aa46 <_strtoul_l.constprop.0+0xa2>
 800aa14:	2701      	movs	r7, #1
 800aa16:	fb00 4003 	mla	r0, r0, r3, r4
 800aa1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa1e:	e7ea      	b.n	800a9f6 <_strtoul_l.constprop.0+0x52>
 800aa20:	2c2b      	cmp	r4, #43	; 0x2b
 800aa22:	bf04      	itt	eq
 800aa24:	782c      	ldrbeq	r4, [r5, #0]
 800aa26:	1c85      	addeq	r5, r0, #2
 800aa28:	e7cd      	b.n	800a9c6 <_strtoul_l.constprop.0+0x22>
 800aa2a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa2e:	f1bc 0f19 	cmp.w	ip, #25
 800aa32:	d801      	bhi.n	800aa38 <_strtoul_l.constprop.0+0x94>
 800aa34:	3c37      	subs	r4, #55	; 0x37
 800aa36:	e7e4      	b.n	800aa02 <_strtoul_l.constprop.0+0x5e>
 800aa38:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa3c:	f1bc 0f19 	cmp.w	ip, #25
 800aa40:	d804      	bhi.n	800aa4c <_strtoul_l.constprop.0+0xa8>
 800aa42:	3c57      	subs	r4, #87	; 0x57
 800aa44:	e7dd      	b.n	800aa02 <_strtoul_l.constprop.0+0x5e>
 800aa46:	f04f 37ff 	mov.w	r7, #4294967295
 800aa4a:	e7e6      	b.n	800aa1a <_strtoul_l.constprop.0+0x76>
 800aa4c:	2f00      	cmp	r7, #0
 800aa4e:	da07      	bge.n	800aa60 <_strtoul_l.constprop.0+0xbc>
 800aa50:	2322      	movs	r3, #34	; 0x22
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	f8ce 3000 	str.w	r3, [lr]
 800aa5a:	b932      	cbnz	r2, 800aa6a <_strtoul_l.constprop.0+0xc6>
 800aa5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa60:	b106      	cbz	r6, 800aa64 <_strtoul_l.constprop.0+0xc0>
 800aa62:	4240      	negs	r0, r0
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	d0f9      	beq.n	800aa5c <_strtoul_l.constprop.0+0xb8>
 800aa68:	b107      	cbz	r7, 800aa6c <_strtoul_l.constprop.0+0xc8>
 800aa6a:	1e69      	subs	r1, r5, #1
 800aa6c:	6011      	str	r1, [r2, #0]
 800aa6e:	e7f5      	b.n	800aa5c <_strtoul_l.constprop.0+0xb8>
 800aa70:	2430      	movs	r4, #48	; 0x30
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1b5      	bne.n	800a9e2 <_strtoul_l.constprop.0+0x3e>
 800aa76:	2308      	movs	r3, #8
 800aa78:	e7b3      	b.n	800a9e2 <_strtoul_l.constprop.0+0x3e>
 800aa7a:	2c30      	cmp	r4, #48	; 0x30
 800aa7c:	d0a9      	beq.n	800a9d2 <_strtoul_l.constprop.0+0x2e>
 800aa7e:	230a      	movs	r3, #10
 800aa80:	e7af      	b.n	800a9e2 <_strtoul_l.constprop.0+0x3e>
 800aa82:	bf00      	nop
 800aa84:	0800b49f 	.word	0x0800b49f

0800aa88 <_strtoul_r>:
 800aa88:	f7ff bf8c 	b.w	800a9a4 <_strtoul_l.constprop.0>

0800aa8c <__submore>:
 800aa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa90:	460c      	mov	r4, r1
 800aa92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d11b      	bne.n	800aad4 <__submore+0x48>
 800aa9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aaa0:	f7fe fec4 	bl	800982c <_malloc_r>
 800aaa4:	b918      	cbnz	r0, 800aaae <__submore+0x22>
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab2:	63a3      	str	r3, [r4, #56]	; 0x38
 800aab4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aab8:	6360      	str	r0, [r4, #52]	; 0x34
 800aaba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aabe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aac2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aac6:	7043      	strb	r3, [r0, #1]
 800aac8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aacc:	7003      	strb	r3, [r0, #0]
 800aace:	6020      	str	r0, [r4, #0]
 800aad0:	2000      	movs	r0, #0
 800aad2:	e7ea      	b.n	800aaaa <__submore+0x1e>
 800aad4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aad6:	0077      	lsls	r7, r6, #1
 800aad8:	463a      	mov	r2, r7
 800aada:	f000 fb27 	bl	800b12c <_realloc_r>
 800aade:	4605      	mov	r5, r0
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0e0      	beq.n	800aaa6 <__submore+0x1a>
 800aae4:	eb00 0806 	add.w	r8, r0, r6
 800aae8:	4601      	mov	r1, r0
 800aaea:	4632      	mov	r2, r6
 800aaec:	4640      	mov	r0, r8
 800aaee:	f7fe fcad 	bl	800944c <memcpy>
 800aaf2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aaf6:	f8c4 8000 	str.w	r8, [r4]
 800aafa:	e7e9      	b.n	800aad0 <__submore+0x44>

0800aafc <__swbuf_r>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	460e      	mov	r6, r1
 800ab00:	4614      	mov	r4, r2
 800ab02:	4605      	mov	r5, r0
 800ab04:	b118      	cbz	r0, 800ab0e <__swbuf_r+0x12>
 800ab06:	6983      	ldr	r3, [r0, #24]
 800ab08:	b90b      	cbnz	r3, 800ab0e <__swbuf_r+0x12>
 800ab0a:	f000 f9d5 	bl	800aeb8 <__sinit>
 800ab0e:	4b21      	ldr	r3, [pc, #132]	; (800ab94 <__swbuf_r+0x98>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d12b      	bne.n	800ab6c <__swbuf_r+0x70>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	69a3      	ldr	r3, [r4, #24]
 800ab18:	60a3      	str	r3, [r4, #8]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	071a      	lsls	r2, r3, #28
 800ab1e:	d52f      	bpl.n	800ab80 <__swbuf_r+0x84>
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	b36b      	cbz	r3, 800ab80 <__swbuf_r+0x84>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	6820      	ldr	r0, [r4, #0]
 800ab28:	b2f6      	uxtb	r6, r6
 800ab2a:	1ac0      	subs	r0, r0, r3
 800ab2c:	6963      	ldr	r3, [r4, #20]
 800ab2e:	4637      	mov	r7, r6
 800ab30:	4283      	cmp	r3, r0
 800ab32:	dc04      	bgt.n	800ab3e <__swbuf_r+0x42>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 f92a 	bl	800ad90 <_fflush_r>
 800ab3c:	bb30      	cbnz	r0, 800ab8c <__swbuf_r+0x90>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	3001      	adds	r0, #1
 800ab42:	3b01      	subs	r3, #1
 800ab44:	60a3      	str	r3, [r4, #8]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	6022      	str	r2, [r4, #0]
 800ab4c:	701e      	strb	r6, [r3, #0]
 800ab4e:	6963      	ldr	r3, [r4, #20]
 800ab50:	4283      	cmp	r3, r0
 800ab52:	d004      	beq.n	800ab5e <__swbuf_r+0x62>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	07db      	lsls	r3, r3, #31
 800ab58:	d506      	bpl.n	800ab68 <__swbuf_r+0x6c>
 800ab5a:	2e0a      	cmp	r6, #10
 800ab5c:	d104      	bne.n	800ab68 <__swbuf_r+0x6c>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	f000 f915 	bl	800ad90 <_fflush_r>
 800ab66:	b988      	cbnz	r0, 800ab8c <__swbuf_r+0x90>
 800ab68:	4638      	mov	r0, r7
 800ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <__swbuf_r+0x9c>)
 800ab6e:	429c      	cmp	r4, r3
 800ab70:	d101      	bne.n	800ab76 <__swbuf_r+0x7a>
 800ab72:	68ac      	ldr	r4, [r5, #8]
 800ab74:	e7cf      	b.n	800ab16 <__swbuf_r+0x1a>
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <__swbuf_r+0xa0>)
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	bf08      	it	eq
 800ab7c:	68ec      	ldreq	r4, [r5, #12]
 800ab7e:	e7ca      	b.n	800ab16 <__swbuf_r+0x1a>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f000 f80c 	bl	800aba0 <__swsetup_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0cb      	beq.n	800ab24 <__swbuf_r+0x28>
 800ab8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab90:	e7ea      	b.n	800ab68 <__swbuf_r+0x6c>
 800ab92:	bf00      	nop
 800ab94:	0800b5c0 	.word	0x0800b5c0
 800ab98:	0800b5e0 	.word	0x0800b5e0
 800ab9c:	0800b5a0 	.word	0x0800b5a0

0800aba0 <__swsetup_r>:
 800aba0:	4b32      	ldr	r3, [pc, #200]	; (800ac6c <__swsetup_r+0xcc>)
 800aba2:	b570      	push	{r4, r5, r6, lr}
 800aba4:	681d      	ldr	r5, [r3, #0]
 800aba6:	4606      	mov	r6, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	b125      	cbz	r5, 800abb6 <__swsetup_r+0x16>
 800abac:	69ab      	ldr	r3, [r5, #24]
 800abae:	b913      	cbnz	r3, 800abb6 <__swsetup_r+0x16>
 800abb0:	4628      	mov	r0, r5
 800abb2:	f000 f981 	bl	800aeb8 <__sinit>
 800abb6:	4b2e      	ldr	r3, [pc, #184]	; (800ac70 <__swsetup_r+0xd0>)
 800abb8:	429c      	cmp	r4, r3
 800abba:	d10f      	bne.n	800abdc <__swsetup_r+0x3c>
 800abbc:	686c      	ldr	r4, [r5, #4]
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc4:	0719      	lsls	r1, r3, #28
 800abc6:	d42c      	bmi.n	800ac22 <__swsetup_r+0x82>
 800abc8:	06dd      	lsls	r5, r3, #27
 800abca:	d411      	bmi.n	800abf0 <__swsetup_r+0x50>
 800abcc:	2309      	movs	r3, #9
 800abce:	6033      	str	r3, [r6, #0]
 800abd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	e03e      	b.n	800ac5a <__swsetup_r+0xba>
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <__swsetup_r+0xd4>)
 800abde:	429c      	cmp	r4, r3
 800abe0:	d101      	bne.n	800abe6 <__swsetup_r+0x46>
 800abe2:	68ac      	ldr	r4, [r5, #8]
 800abe4:	e7eb      	b.n	800abbe <__swsetup_r+0x1e>
 800abe6:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <__swsetup_r+0xd8>)
 800abe8:	429c      	cmp	r4, r3
 800abea:	bf08      	it	eq
 800abec:	68ec      	ldreq	r4, [r5, #12]
 800abee:	e7e6      	b.n	800abbe <__swsetup_r+0x1e>
 800abf0:	0758      	lsls	r0, r3, #29
 800abf2:	d512      	bpl.n	800ac1a <__swsetup_r+0x7a>
 800abf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abf6:	b141      	cbz	r1, 800ac0a <__swsetup_r+0x6a>
 800abf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d002      	beq.n	800ac06 <__swsetup_r+0x66>
 800ac00:	4630      	mov	r0, r6
 800ac02:	f7fe fdab 	bl	800975c <_free_r>
 800ac06:	2300      	movs	r3, #0
 800ac08:	6363      	str	r3, [r4, #52]	; 0x34
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	2300      	movs	r3, #0
 800ac14:	6063      	str	r3, [r4, #4]
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f043 0308 	orr.w	r3, r3, #8
 800ac20:	81a3      	strh	r3, [r4, #12]
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	b94b      	cbnz	r3, 800ac3a <__swsetup_r+0x9a>
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac30:	d003      	beq.n	800ac3a <__swsetup_r+0x9a>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 fa05 	bl	800b044 <__smakebuf_r>
 800ac3a:	89a0      	ldrh	r0, [r4, #12]
 800ac3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac40:	f010 0301 	ands.w	r3, r0, #1
 800ac44:	d00a      	beq.n	800ac5c <__swsetup_r+0xbc>
 800ac46:	2300      	movs	r3, #0
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	6963      	ldr	r3, [r4, #20]
 800ac4c:	425b      	negs	r3, r3
 800ac4e:	61a3      	str	r3, [r4, #24]
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	b943      	cbnz	r3, 800ac66 <__swsetup_r+0xc6>
 800ac54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac58:	d1ba      	bne.n	800abd0 <__swsetup_r+0x30>
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	0781      	lsls	r1, r0, #30
 800ac5e:	bf58      	it	pl
 800ac60:	6963      	ldrpl	r3, [r4, #20]
 800ac62:	60a3      	str	r3, [r4, #8]
 800ac64:	e7f4      	b.n	800ac50 <__swsetup_r+0xb0>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e7f7      	b.n	800ac5a <__swsetup_r+0xba>
 800ac6a:	bf00      	nop
 800ac6c:	20000184 	.word	0x20000184
 800ac70:	0800b5c0 	.word	0x0800b5c0
 800ac74:	0800b5e0 	.word	0x0800b5e0
 800ac78:	0800b5a0 	.word	0x0800b5a0

0800ac7c <abort>:
 800ac7c:	2006      	movs	r0, #6
 800ac7e:	b508      	push	{r3, lr}
 800ac80:	f000 faac 	bl	800b1dc <raise>
 800ac84:	2001      	movs	r0, #1
 800ac86:	f7f6 f802 	bl	8000c8e <_exit>
	...

0800ac8c <__sflush_r>:
 800ac8c:	898a      	ldrh	r2, [r1, #12]
 800ac8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac90:	4605      	mov	r5, r0
 800ac92:	0710      	lsls	r0, r2, #28
 800ac94:	460c      	mov	r4, r1
 800ac96:	d457      	bmi.n	800ad48 <__sflush_r+0xbc>
 800ac98:	684b      	ldr	r3, [r1, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dc04      	bgt.n	800aca8 <__sflush_r+0x1c>
 800ac9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc01      	bgt.n	800aca8 <__sflush_r+0x1c>
 800aca4:	2000      	movs	r0, #0
 800aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d0fa      	beq.n	800aca4 <__sflush_r+0x18>
 800acae:	2300      	movs	r3, #0
 800acb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb4:	682f      	ldr	r7, [r5, #0]
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	d032      	beq.n	800ad20 <__sflush_r+0x94>
 800acba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	075a      	lsls	r2, r3, #29
 800acc0:	d505      	bpl.n	800acce <__sflush_r+0x42>
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	1ac0      	subs	r0, r0, r3
 800acc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acc8:	b10b      	cbz	r3, 800acce <__sflush_r+0x42>
 800acca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800accc:	1ac0      	subs	r0, r0, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	4602      	mov	r2, r0
 800acd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd4:	4628      	mov	r0, r5
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	47b0      	blx	r6
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	d106      	bne.n	800acee <__sflush_r+0x62>
 800ace0:	6829      	ldr	r1, [r5, #0]
 800ace2:	291d      	cmp	r1, #29
 800ace4:	d82c      	bhi.n	800ad40 <__sflush_r+0xb4>
 800ace6:	4a29      	ldr	r2, [pc, #164]	; (800ad8c <__sflush_r+0x100>)
 800ace8:	40ca      	lsrs	r2, r1
 800acea:	07d6      	lsls	r6, r2, #31
 800acec:	d528      	bpl.n	800ad40 <__sflush_r+0xb4>
 800acee:	2200      	movs	r2, #0
 800acf0:	6062      	str	r2, [r4, #4]
 800acf2:	6922      	ldr	r2, [r4, #16]
 800acf4:	04d9      	lsls	r1, r3, #19
 800acf6:	6022      	str	r2, [r4, #0]
 800acf8:	d504      	bpl.n	800ad04 <__sflush_r+0x78>
 800acfa:	1c42      	adds	r2, r0, #1
 800acfc:	d101      	bne.n	800ad02 <__sflush_r+0x76>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	b903      	cbnz	r3, 800ad04 <__sflush_r+0x78>
 800ad02:	6560      	str	r0, [r4, #84]	; 0x54
 800ad04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad06:	602f      	str	r7, [r5, #0]
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	d0cb      	beq.n	800aca4 <__sflush_r+0x18>
 800ad0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d002      	beq.n	800ad1a <__sflush_r+0x8e>
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7fe fd21 	bl	800975c <_free_r>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1e:	e7c2      	b.n	800aca6 <__sflush_r+0x1a>
 800ad20:	6a21      	ldr	r1, [r4, #32]
 800ad22:	2301      	movs	r3, #1
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	1c41      	adds	r1, r0, #1
 800ad2a:	d1c7      	bne.n	800acbc <__sflush_r+0x30>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0c4      	beq.n	800acbc <__sflush_r+0x30>
 800ad32:	2b1d      	cmp	r3, #29
 800ad34:	d001      	beq.n	800ad3a <__sflush_r+0xae>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	d101      	bne.n	800ad3e <__sflush_r+0xb2>
 800ad3a:	602f      	str	r7, [r5, #0]
 800ad3c:	e7b2      	b.n	800aca4 <__sflush_r+0x18>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	e7ae      	b.n	800aca6 <__sflush_r+0x1a>
 800ad48:	690f      	ldr	r7, [r1, #16]
 800ad4a:	2f00      	cmp	r7, #0
 800ad4c:	d0aa      	beq.n	800aca4 <__sflush_r+0x18>
 800ad4e:	0793      	lsls	r3, r2, #30
 800ad50:	bf18      	it	ne
 800ad52:	2300      	movne	r3, #0
 800ad54:	680e      	ldr	r6, [r1, #0]
 800ad56:	bf08      	it	eq
 800ad58:	694b      	ldreq	r3, [r1, #20]
 800ad5a:	1bf6      	subs	r6, r6, r7
 800ad5c:	600f      	str	r7, [r1, #0]
 800ad5e:	608b      	str	r3, [r1, #8]
 800ad60:	2e00      	cmp	r6, #0
 800ad62:	dd9f      	ble.n	800aca4 <__sflush_r+0x18>
 800ad64:	4633      	mov	r3, r6
 800ad66:	463a      	mov	r2, r7
 800ad68:	4628      	mov	r0, r5
 800ad6a:	6a21      	ldr	r1, [r4, #32]
 800ad6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad70:	47e0      	blx	ip
 800ad72:	2800      	cmp	r0, #0
 800ad74:	dc06      	bgt.n	800ad84 <__sflush_r+0xf8>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	e790      	b.n	800aca6 <__sflush_r+0x1a>
 800ad84:	4407      	add	r7, r0
 800ad86:	1a36      	subs	r6, r6, r0
 800ad88:	e7ea      	b.n	800ad60 <__sflush_r+0xd4>
 800ad8a:	bf00      	nop
 800ad8c:	20400001 	.word	0x20400001

0800ad90 <_fflush_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	b913      	cbnz	r3, 800ada0 <_fflush_r+0x10>
 800ad9a:	2500      	movs	r5, #0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	b118      	cbz	r0, 800adaa <_fflush_r+0x1a>
 800ada2:	6983      	ldr	r3, [r0, #24]
 800ada4:	b90b      	cbnz	r3, 800adaa <_fflush_r+0x1a>
 800ada6:	f000 f887 	bl	800aeb8 <__sinit>
 800adaa:	4b14      	ldr	r3, [pc, #80]	; (800adfc <_fflush_r+0x6c>)
 800adac:	429c      	cmp	r4, r3
 800adae:	d11b      	bne.n	800ade8 <_fflush_r+0x58>
 800adb0:	686c      	ldr	r4, [r5, #4]
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0ef      	beq.n	800ad9a <_fflush_r+0xa>
 800adba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adbc:	07d0      	lsls	r0, r2, #31
 800adbe:	d404      	bmi.n	800adca <_fflush_r+0x3a>
 800adc0:	0599      	lsls	r1, r3, #22
 800adc2:	d402      	bmi.n	800adca <_fflush_r+0x3a>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f000 f915 	bl	800aff4 <__retarget_lock_acquire_recursive>
 800adca:	4628      	mov	r0, r5
 800adcc:	4621      	mov	r1, r4
 800adce:	f7ff ff5d 	bl	800ac8c <__sflush_r>
 800add2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add4:	4605      	mov	r5, r0
 800add6:	07da      	lsls	r2, r3, #31
 800add8:	d4e0      	bmi.n	800ad9c <_fflush_r+0xc>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	059b      	lsls	r3, r3, #22
 800adde:	d4dd      	bmi.n	800ad9c <_fflush_r+0xc>
 800ade0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade2:	f000 f908 	bl	800aff6 <__retarget_lock_release_recursive>
 800ade6:	e7d9      	b.n	800ad9c <_fflush_r+0xc>
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <_fflush_r+0x70>)
 800adea:	429c      	cmp	r4, r3
 800adec:	d101      	bne.n	800adf2 <_fflush_r+0x62>
 800adee:	68ac      	ldr	r4, [r5, #8]
 800adf0:	e7df      	b.n	800adb2 <_fflush_r+0x22>
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <_fflush_r+0x74>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	bf08      	it	eq
 800adf8:	68ec      	ldreq	r4, [r5, #12]
 800adfa:	e7da      	b.n	800adb2 <_fflush_r+0x22>
 800adfc:	0800b5c0 	.word	0x0800b5c0
 800ae00:	0800b5e0 	.word	0x0800b5e0
 800ae04:	0800b5a0 	.word	0x0800b5a0

0800ae08 <std>:
 800ae08:	2300      	movs	r3, #0
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae16:	6083      	str	r3, [r0, #8]
 800ae18:	8181      	strh	r1, [r0, #12]
 800ae1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae1c:	81c2      	strh	r2, [r0, #14]
 800ae1e:	6183      	str	r3, [r0, #24]
 800ae20:	4619      	mov	r1, r3
 800ae22:	2208      	movs	r2, #8
 800ae24:	305c      	adds	r0, #92	; 0x5c
 800ae26:	f7fe fb1f 	bl	8009468 <memset>
 800ae2a:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <std+0x38>)
 800ae2c:	6224      	str	r4, [r4, #32]
 800ae2e:	6263      	str	r3, [r4, #36]	; 0x24
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <std+0x3c>)
 800ae32:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <std+0x40>)
 800ae36:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <std+0x44>)
 800ae3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	bf00      	nop
 800ae40:	080094cd 	.word	0x080094cd
 800ae44:	080094f3 	.word	0x080094f3
 800ae48:	0800952b 	.word	0x0800952b
 800ae4c:	0800954f 	.word	0x0800954f

0800ae50 <_cleanup_r>:
 800ae50:	4901      	ldr	r1, [pc, #4]	; (800ae58 <_cleanup_r+0x8>)
 800ae52:	f000 b8af 	b.w	800afb4 <_fwalk_reent>
 800ae56:	bf00      	nop
 800ae58:	0800ad91 	.word	0x0800ad91

0800ae5c <__sfmoreglue>:
 800ae5c:	2268      	movs	r2, #104	; 0x68
 800ae5e:	b570      	push	{r4, r5, r6, lr}
 800ae60:	1e4d      	subs	r5, r1, #1
 800ae62:	4355      	muls	r5, r2
 800ae64:	460e      	mov	r6, r1
 800ae66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae6a:	f7fe fcdf 	bl	800982c <_malloc_r>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	b140      	cbz	r0, 800ae84 <__sfmoreglue+0x28>
 800ae72:	2100      	movs	r1, #0
 800ae74:	e9c0 1600 	strd	r1, r6, [r0]
 800ae78:	300c      	adds	r0, #12
 800ae7a:	60a0      	str	r0, [r4, #8]
 800ae7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae80:	f7fe faf2 	bl	8009468 <memset>
 800ae84:	4620      	mov	r0, r4
 800ae86:	bd70      	pop	{r4, r5, r6, pc}

0800ae88 <__sfp_lock_acquire>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__sfp_lock_acquire+0x8>)
 800ae8a:	f000 b8b3 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	2000153d 	.word	0x2000153d

0800ae94 <__sfp_lock_release>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__sfp_lock_release+0x8>)
 800ae96:	f000 b8ae 	b.w	800aff6 <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	2000153d 	.word	0x2000153d

0800aea0 <__sinit_lock_acquire>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__sinit_lock_acquire+0x8>)
 800aea2:	f000 b8a7 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800aea6:	bf00      	nop
 800aea8:	2000153e 	.word	0x2000153e

0800aeac <__sinit_lock_release>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__sinit_lock_release+0x8>)
 800aeae:	f000 b8a2 	b.w	800aff6 <__retarget_lock_release_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	2000153e 	.word	0x2000153e

0800aeb8 <__sinit>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	f7ff fff0 	bl	800aea0 <__sinit_lock_acquire>
 800aec0:	69a3      	ldr	r3, [r4, #24]
 800aec2:	b11b      	cbz	r3, 800aecc <__sinit+0x14>
 800aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec8:	f7ff bff0 	b.w	800aeac <__sinit_lock_release>
 800aecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aed0:	6523      	str	r3, [r4, #80]	; 0x50
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <__sinit+0x68>)
 800aed4:	4a13      	ldr	r2, [pc, #76]	; (800af24 <__sinit+0x6c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	bf08      	it	eq
 800aede:	2301      	moveq	r3, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	bf08      	it	eq
 800aee4:	61a3      	streq	r3, [r4, #24]
 800aee6:	f000 f81f 	bl	800af28 <__sfp>
 800aeea:	6060      	str	r0, [r4, #4]
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 f81b 	bl	800af28 <__sfp>
 800aef2:	60a0      	str	r0, [r4, #8]
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f817 	bl	800af28 <__sfp>
 800aefa:	2200      	movs	r2, #0
 800aefc:	2104      	movs	r1, #4
 800aefe:	60e0      	str	r0, [r4, #12]
 800af00:	6860      	ldr	r0, [r4, #4]
 800af02:	f7ff ff81 	bl	800ae08 <std>
 800af06:	2201      	movs	r2, #1
 800af08:	2109      	movs	r1, #9
 800af0a:	68a0      	ldr	r0, [r4, #8]
 800af0c:	f7ff ff7c 	bl	800ae08 <std>
 800af10:	2202      	movs	r2, #2
 800af12:	2112      	movs	r1, #18
 800af14:	68e0      	ldr	r0, [r4, #12]
 800af16:	f7ff ff77 	bl	800ae08 <std>
 800af1a:	2301      	movs	r3, #1
 800af1c:	61a3      	str	r3, [r4, #24]
 800af1e:	e7d1      	b.n	800aec4 <__sinit+0xc>
 800af20:	0800b39c 	.word	0x0800b39c
 800af24:	0800ae51 	.word	0x0800ae51

0800af28 <__sfp>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	4607      	mov	r7, r0
 800af2c:	f7ff ffac 	bl	800ae88 <__sfp_lock_acquire>
 800af30:	4b1e      	ldr	r3, [pc, #120]	; (800afac <__sfp+0x84>)
 800af32:	681e      	ldr	r6, [r3, #0]
 800af34:	69b3      	ldr	r3, [r6, #24]
 800af36:	b913      	cbnz	r3, 800af3e <__sfp+0x16>
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff ffbd 	bl	800aeb8 <__sinit>
 800af3e:	3648      	adds	r6, #72	; 0x48
 800af40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	d503      	bpl.n	800af50 <__sfp+0x28>
 800af48:	6833      	ldr	r3, [r6, #0]
 800af4a:	b30b      	cbz	r3, 800af90 <__sfp+0x68>
 800af4c:	6836      	ldr	r6, [r6, #0]
 800af4e:	e7f7      	b.n	800af40 <__sfp+0x18>
 800af50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af54:	b9d5      	cbnz	r5, 800af8c <__sfp+0x64>
 800af56:	4b16      	ldr	r3, [pc, #88]	; (800afb0 <__sfp+0x88>)
 800af58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af5c:	60e3      	str	r3, [r4, #12]
 800af5e:	6665      	str	r5, [r4, #100]	; 0x64
 800af60:	f000 f847 	bl	800aff2 <__retarget_lock_init_recursive>
 800af64:	f7ff ff96 	bl	800ae94 <__sfp_lock_release>
 800af68:	2208      	movs	r2, #8
 800af6a:	4629      	mov	r1, r5
 800af6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af74:	6025      	str	r5, [r4, #0]
 800af76:	61a5      	str	r5, [r4, #24]
 800af78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af7c:	f7fe fa74 	bl	8009468 <memset>
 800af80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af88:	4620      	mov	r0, r4
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	3468      	adds	r4, #104	; 0x68
 800af8e:	e7d9      	b.n	800af44 <__sfp+0x1c>
 800af90:	2104      	movs	r1, #4
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ff62 	bl	800ae5c <__sfmoreglue>
 800af98:	4604      	mov	r4, r0
 800af9a:	6030      	str	r0, [r6, #0]
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d1d5      	bne.n	800af4c <__sfp+0x24>
 800afa0:	f7ff ff78 	bl	800ae94 <__sfp_lock_release>
 800afa4:	230c      	movs	r3, #12
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	e7ee      	b.n	800af88 <__sfp+0x60>
 800afaa:	bf00      	nop
 800afac:	0800b39c 	.word	0x0800b39c
 800afb0:	ffff0001 	.word	0xffff0001

0800afb4 <_fwalk_reent>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	4606      	mov	r6, r0
 800afba:	4688      	mov	r8, r1
 800afbc:	2700      	movs	r7, #0
 800afbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afc6:	f1b9 0901 	subs.w	r9, r9, #1
 800afca:	d505      	bpl.n	800afd8 <_fwalk_reent+0x24>
 800afcc:	6824      	ldr	r4, [r4, #0]
 800afce:	2c00      	cmp	r4, #0
 800afd0:	d1f7      	bne.n	800afc2 <_fwalk_reent+0xe>
 800afd2:	4638      	mov	r0, r7
 800afd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d907      	bls.n	800afee <_fwalk_reent+0x3a>
 800afde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afe2:	3301      	adds	r3, #1
 800afe4:	d003      	beq.n	800afee <_fwalk_reent+0x3a>
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	47c0      	blx	r8
 800afec:	4307      	orrs	r7, r0
 800afee:	3568      	adds	r5, #104	; 0x68
 800aff0:	e7e9      	b.n	800afc6 <_fwalk_reent+0x12>

0800aff2 <__retarget_lock_init_recursive>:
 800aff2:	4770      	bx	lr

0800aff4 <__retarget_lock_acquire_recursive>:
 800aff4:	4770      	bx	lr

0800aff6 <__retarget_lock_release_recursive>:
 800aff6:	4770      	bx	lr

0800aff8 <__swhatbuf_r>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	460e      	mov	r6, r1
 800affc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b000:	4614      	mov	r4, r2
 800b002:	2900      	cmp	r1, #0
 800b004:	461d      	mov	r5, r3
 800b006:	b096      	sub	sp, #88	; 0x58
 800b008:	da08      	bge.n	800b01c <__swhatbuf_r+0x24>
 800b00a:	2200      	movs	r2, #0
 800b00c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	061a      	lsls	r2, r3, #24
 800b014:	d410      	bmi.n	800b038 <__swhatbuf_r+0x40>
 800b016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01a:	e00e      	b.n	800b03a <__swhatbuf_r+0x42>
 800b01c:	466a      	mov	r2, sp
 800b01e:	f000 f8f9 	bl	800b214 <_fstat_r>
 800b022:	2800      	cmp	r0, #0
 800b024:	dbf1      	blt.n	800b00a <__swhatbuf_r+0x12>
 800b026:	9a01      	ldr	r2, [sp, #4]
 800b028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b02c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b030:	425a      	negs	r2, r3
 800b032:	415a      	adcs	r2, r3
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	e7ee      	b.n	800b016 <__swhatbuf_r+0x1e>
 800b038:	2340      	movs	r3, #64	; 0x40
 800b03a:	2000      	movs	r0, #0
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	b016      	add	sp, #88	; 0x58
 800b040:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b044 <__smakebuf_r>:
 800b044:	898b      	ldrh	r3, [r1, #12]
 800b046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b048:	079d      	lsls	r5, r3, #30
 800b04a:	4606      	mov	r6, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	d507      	bpl.n	800b060 <__smakebuf_r+0x1c>
 800b050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	2301      	movs	r3, #1
 800b05a:	6163      	str	r3, [r4, #20]
 800b05c:	b002      	add	sp, #8
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	466a      	mov	r2, sp
 800b062:	ab01      	add	r3, sp, #4
 800b064:	f7ff ffc8 	bl	800aff8 <__swhatbuf_r>
 800b068:	9900      	ldr	r1, [sp, #0]
 800b06a:	4605      	mov	r5, r0
 800b06c:	4630      	mov	r0, r6
 800b06e:	f7fe fbdd 	bl	800982c <_malloc_r>
 800b072:	b948      	cbnz	r0, 800b088 <__smakebuf_r+0x44>
 800b074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b078:	059a      	lsls	r2, r3, #22
 800b07a:	d4ef      	bmi.n	800b05c <__smakebuf_r+0x18>
 800b07c:	f023 0303 	bic.w	r3, r3, #3
 800b080:	f043 0302 	orr.w	r3, r3, #2
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	e7e3      	b.n	800b050 <__smakebuf_r+0xc>
 800b088:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <__smakebuf_r+0x7c>)
 800b08a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	6120      	str	r0, [r4, #16]
 800b09a:	6163      	str	r3, [r4, #20]
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	b15b      	cbz	r3, 800b0b8 <__smakebuf_r+0x74>
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a6:	f000 f8c7 	bl	800b238 <_isatty_r>
 800b0aa:	b128      	cbz	r0, 800b0b8 <__smakebuf_r+0x74>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f023 0303 	bic.w	r3, r3, #3
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	89a0      	ldrh	r0, [r4, #12]
 800b0ba:	4305      	orrs	r5, r0
 800b0bc:	81a5      	strh	r5, [r4, #12]
 800b0be:	e7cd      	b.n	800b05c <__smakebuf_r+0x18>
 800b0c0:	0800ae51 	.word	0x0800ae51

0800b0c4 <memchr>:
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	b510      	push	{r4, lr}
 800b0c8:	b2c9      	uxtb	r1, r1
 800b0ca:	4402      	add	r2, r0
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	d101      	bne.n	800b0d6 <memchr+0x12>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e003      	b.n	800b0de <memchr+0x1a>
 800b0d6:	7804      	ldrb	r4, [r0, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	428c      	cmp	r4, r1
 800b0dc:	d1f6      	bne.n	800b0cc <memchr+0x8>
 800b0de:	bd10      	pop	{r4, pc}

0800b0e0 <memmove>:
 800b0e0:	4288      	cmp	r0, r1
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	eb01 0402 	add.w	r4, r1, r2
 800b0e8:	d902      	bls.n	800b0f0 <memmove+0x10>
 800b0ea:	4284      	cmp	r4, r0
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	d807      	bhi.n	800b100 <memmove+0x20>
 800b0f0:	1e43      	subs	r3, r0, #1
 800b0f2:	42a1      	cmp	r1, r4
 800b0f4:	d008      	beq.n	800b108 <memmove+0x28>
 800b0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0fe:	e7f8      	b.n	800b0f2 <memmove+0x12>
 800b100:	4601      	mov	r1, r0
 800b102:	4402      	add	r2, r0
 800b104:	428a      	cmp	r2, r1
 800b106:	d100      	bne.n	800b10a <memmove+0x2a>
 800b108:	bd10      	pop	{r4, pc}
 800b10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b112:	e7f7      	b.n	800b104 <memmove+0x24>

0800b114 <__malloc_lock>:
 800b114:	4801      	ldr	r0, [pc, #4]	; (800b11c <__malloc_lock+0x8>)
 800b116:	f7ff bf6d 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800b11a:	bf00      	nop
 800b11c:	2000153c 	.word	0x2000153c

0800b120 <__malloc_unlock>:
 800b120:	4801      	ldr	r0, [pc, #4]	; (800b128 <__malloc_unlock+0x8>)
 800b122:	f7ff bf68 	b.w	800aff6 <__retarget_lock_release_recursive>
 800b126:	bf00      	nop
 800b128:	2000153c 	.word	0x2000153c

0800b12c <_realloc_r>:
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	4680      	mov	r8, r0
 800b132:	4614      	mov	r4, r2
 800b134:	460e      	mov	r6, r1
 800b136:	b921      	cbnz	r1, 800b142 <_realloc_r+0x16>
 800b138:	4611      	mov	r1, r2
 800b13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13e:	f7fe bb75 	b.w	800982c <_malloc_r>
 800b142:	b92a      	cbnz	r2, 800b150 <_realloc_r+0x24>
 800b144:	f7fe fb0a 	bl	800975c <_free_r>
 800b148:	4625      	mov	r5, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	f000 f882 	bl	800b258 <_malloc_usable_size_r>
 800b154:	4284      	cmp	r4, r0
 800b156:	4607      	mov	r7, r0
 800b158:	d802      	bhi.n	800b160 <_realloc_r+0x34>
 800b15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b15e:	d812      	bhi.n	800b186 <_realloc_r+0x5a>
 800b160:	4621      	mov	r1, r4
 800b162:	4640      	mov	r0, r8
 800b164:	f7fe fb62 	bl	800982c <_malloc_r>
 800b168:	4605      	mov	r5, r0
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0ed      	beq.n	800b14a <_realloc_r+0x1e>
 800b16e:	42bc      	cmp	r4, r7
 800b170:	4622      	mov	r2, r4
 800b172:	4631      	mov	r1, r6
 800b174:	bf28      	it	cs
 800b176:	463a      	movcs	r2, r7
 800b178:	f7fe f968 	bl	800944c <memcpy>
 800b17c:	4631      	mov	r1, r6
 800b17e:	4640      	mov	r0, r8
 800b180:	f7fe faec 	bl	800975c <_free_r>
 800b184:	e7e1      	b.n	800b14a <_realloc_r+0x1e>
 800b186:	4635      	mov	r5, r6
 800b188:	e7df      	b.n	800b14a <_realloc_r+0x1e>

0800b18a <_raise_r>:
 800b18a:	291f      	cmp	r1, #31
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4604      	mov	r4, r0
 800b190:	460d      	mov	r5, r1
 800b192:	d904      	bls.n	800b19e <_raise_r+0x14>
 800b194:	2316      	movs	r3, #22
 800b196:	6003      	str	r3, [r0, #0]
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1a0:	b112      	cbz	r2, 800b1a8 <_raise_r+0x1e>
 800b1a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1a6:	b94b      	cbnz	r3, 800b1bc <_raise_r+0x32>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 f831 	bl	800b210 <_getpid_r>
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4601      	mov	r1, r0
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b8:	f000 b818 	b.w	800b1ec <_kill_r>
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d00a      	beq.n	800b1d6 <_raise_r+0x4c>
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	d103      	bne.n	800b1cc <_raise_r+0x42>
 800b1c4:	2316      	movs	r3, #22
 800b1c6:	6003      	str	r3, [r0, #0]
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	e7e7      	b.n	800b19c <_raise_r+0x12>
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1d4:	4798      	blx	r3
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e7e0      	b.n	800b19c <_raise_r+0x12>
	...

0800b1dc <raise>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <raise+0xc>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f7ff bfd2 	b.w	800b18a <_raise_r>
 800b1e6:	bf00      	nop
 800b1e8:	20000184 	.word	0x20000184

0800b1ec <_kill_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4d06      	ldr	r5, [pc, #24]	; (800b20c <_kill_r+0x20>)
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	f7f5 fd38 	bl	8000c6e <_kill>
 800b1fe:	1c43      	adds	r3, r0, #1
 800b200:	d102      	bne.n	800b208 <_kill_r+0x1c>
 800b202:	682b      	ldr	r3, [r5, #0]
 800b204:	b103      	cbz	r3, 800b208 <_kill_r+0x1c>
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	bd38      	pop	{r3, r4, r5, pc}
 800b20a:	bf00      	nop
 800b20c:	20001538 	.word	0x20001538

0800b210 <_getpid_r>:
 800b210:	f7f5 bd26 	b.w	8000c60 <_getpid>

0800b214 <_fstat_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	2300      	movs	r3, #0
 800b218:	4d06      	ldr	r5, [pc, #24]	; (800b234 <_fstat_r+0x20>)
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	f7f5 fd82 	bl	8000d2a <_fstat>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d102      	bne.n	800b230 <_fstat_r+0x1c>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	b103      	cbz	r3, 800b230 <_fstat_r+0x1c>
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	bf00      	nop
 800b234:	20001538 	.word	0x20001538

0800b238 <_isatty_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	2300      	movs	r3, #0
 800b23c:	4d05      	ldr	r5, [pc, #20]	; (800b254 <_isatty_r+0x1c>)
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	602b      	str	r3, [r5, #0]
 800b244:	f7f5 fd80 	bl	8000d48 <_isatty>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_isatty_r+0x1a>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_isatty_r+0x1a>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	20001538 	.word	0x20001538

0800b258 <_malloc_usable_size_r>:
 800b258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25c:	1f18      	subs	r0, r3, #4
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfbc      	itt	lt
 800b262:	580b      	ldrlt	r3, [r1, r0]
 800b264:	18c0      	addlt	r0, r0, r3
 800b266:	4770      	bx	lr

0800b268 <_init>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	bf00      	nop
 800b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26e:	bc08      	pop	{r3}
 800b270:	469e      	mov	lr, r3
 800b272:	4770      	bx	lr

0800b274 <_fini>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	bf00      	nop
 800b278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27a:	bc08      	pop	{r3}
 800b27c:	469e      	mov	lr, r3
 800b27e:	4770      	bx	lr
