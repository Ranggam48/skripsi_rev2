
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b034  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c0  0800b4c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4c0  0800b4c0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4c0  0800b4c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  200001e8  0800b6b0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001538  0800b6b0  00021538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172a6  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000374b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c006  00000000  00000000  0003d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a10c  00000000  00000000  00059836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f3d  00000000  00000000  00073942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010687f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006964  00000000  00000000  001068d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b128 	.word	0x0800b128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b128 	.word	0x0800b128

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	69b9      	ldr	r1, [r7, #24]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	1a8a      	subs	r2, r1, r2
 800018a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1acb      	subs	r3, r1, r3
 8000194:	fbb2 f2f3 	udiv	r2, r2, r3
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4413      	add	r3, r2
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <delay_us>:

void delay_us(uint32_t us) {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <delay_us+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8f9      	bhi.n	80001ba <delay_us+0x12>
		;
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200002a8 	.word	0x200002a8

080001d8 <modeSoftStart>:

void modeSoftStart() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	if (sign == -1) {
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <modeSoftStart+0x7c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001e4:	d10e      	bne.n	8000204 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <modeSoftStart+0x80>)
 80001e8:	f003 fdc8 	bl	8003d7c <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 ff0b 	bl	8001008 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f2:	2006      	movs	r0, #6
 80001f4:	f001 f843 	bl	800127e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f001 f840 	bl	800127e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80001fe:	2008      	movs	r0, #8
 8000200:	f001 f83d 	bl	800127e <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <modeSoftStart+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d120      	bne.n	800024e <modeSoftStart+0x76>
		sign = 0;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <modeSoftStart+0x7c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000212:	2006      	movs	r0, #6
 8000214:	f001 f841 	bl	800129a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000218:	2007      	movs	r0, #7
 800021a:	f001 f83e 	bl	800129a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800021e:	2008      	movs	r0, #8
 8000220:	f001 f83b 	bl	800129a <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <modeSoftStart+0x80>)
 8000226:	f003 fdfb 	bl	8003e20 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <modeSoftStart+0x88>)
 8000232:	f001 f9e8 	bl	8001606 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <modeSoftStart+0x88>)
 800023e:	f001 f9e2 	bl	8001606 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <modeSoftStart+0x88>)
 800024a:	f001 f9dc 	bl	8001606 <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	200002f0 	.word	0x200002f0
 800025c:	20000208 	.word	0x20000208
 8000260:	40010c00 	.word	0x40010c00

08000264 <modeDOL>:

void modeDOL(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <modeDOL+0x34>)
 8000270:	f001 f9c9 	bl	8001606 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <modeDOL+0x34>)
 800027c:	f001 f9c3 	bl	8001606 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <modeDOL+0x34>)
 8000288:	f001 f9bd 	bl	8001606 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f000 febb 	bl	8001008 <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <EXTI_Stop>:

void EXTI_Stop(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002a0:	2006      	movs	r0, #6
 80002a2:	f000 fffa 	bl	800129a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f000 fff7 	bl	800129a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f000 fff4 	bl	800129a <HAL_NVIC_DisableIRQ>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002bc:	f000 fe42 	bl	8000f44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c0:	f000 f866 	bl	8000390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c4:	f000 f9b4 	bl	8000630 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_I2C1_Init>
	MX_TIM1_Init();
 80002cc:	f000 f8e8 	bl	80004a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80002d0:	f000 f984 	bl	80005dc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002d4:	f000 f934 	bl	8000540 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002d8:	f008 fb40 	bl	800895c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 80002dc:	f7ff ffde 	bl	800029c <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 80002e0:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0xbc>)
 80002e2:	f003 fd01 	bl	8003ce8 <HAL_TIM_Base_Start>
	counter = time * 100;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2264      	movs	r2, #100	; 0x64
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0xc4>)
 80002f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <main+0x5a>
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0xcc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d105      	bne.n	8000312 <main+0x5a>
			modeDOL();
 8000306:	f7ff ffad 	bl	8000264 <modeDOL>
			HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 fe7c 	bl	8001008 <HAL_Delay>
 8000310:	e02e      	b.n	8000370 <main+0xb8>
		}

		else if (mode == 2 && flag == 1) {
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d109      	bne.n	800032e <main+0x76>
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x76>
			modeSoftStart();
 8000322:	f7ff ff59 	bl	80001d8 <modeSoftStart>
			HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fe6e 	bl	8001008 <HAL_Delay>
 800032c:	e020      	b.n	8000370 <main+0xb8>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xd0>)
 8000336:	f001 f966 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xd0>)
 8000342:	f001 f960 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xd0>)
 800034e:	f001 f95a 	bl	8001606 <HAL_GPIO_WritePin>
			sign = -1;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0xd4>)
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0xc0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0xc4>)
 8000368:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fe4c 	bl	8001008 <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000370:	e7c1      	b.n	80002f6 <main+0x3e>
 8000372:	bf00      	nop
 8000374:	200002a8 	.word	0x200002a8
 8000378:	20000004 	.word	0x20000004
 800037c:	20000208 	.word	0x20000208
 8000380:	2000024c 	.word	0x2000024c
 8000384:	20000250 	.word	0x20000250
 8000388:	40010c00 	.word	0x40010c00
 800038c:	20000000 	.word	0x20000000

08000390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f008 ffc2 	bl	8009328 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 ff5e 	bl	80032a8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
		Error_Handler();
 80003f2:	f000 fa4b 	bl	800088c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 f9ca 	bl	80037ac <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
		Error_Handler();
 800041e:	f000 fa35 	bl	800088c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fb55 	bl	8003adc <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
		Error_Handler();
 8000438:	f000 fa28 	bl	800088c <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 f909 	bl	8001698 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800048c:	f000 f9fe 	bl	800088c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000254 	.word	0x20000254
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_TIM1_Init+0x98>)
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x98>)
 80004c4:	2247      	movs	r2, #71	; 0x47
 80004c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_TIM1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ea:	f003 fbad 	bl	8003c48 <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80004f4:	f000 f9ca 	bl	800088c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM1_Init+0x98>)
 8000506:	f003 fdc1 	bl	800408c <HAL_TIM_ConfigClockSource>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000510:	f000 f9bc 	bl	800088c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x98>)
 8000522:	f003 ff93 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800052c:	f000 f9ae 	bl	800088c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002a8 	.word	0x200002a8
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000566:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800056a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f003 fb5e 	bl	8003c48 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000592:	f000 f97b 	bl	800088c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f003 fd72 	bl	800408c <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80005ae:	f000 f96d 	bl	800088c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f003 ff44 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005ca:	f000 f95f 	bl	800088c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002f0 	.word	0x200002f0

080005dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f003 ff8a 	bl	800452c <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 f935 	bl	800088c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000338 	.word	0x20000338
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x118>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MX_GPIO_Init+0x118>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x118>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x118>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x118>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x118>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_GPIO_Init+0x118>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_GPIO_Init+0x118>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0x118>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0x118>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0x118>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0x118>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_GPIO_Init+0x11c>)
 80006ac:	f000 ffab 	bl	8001606 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x120>)
 80006b8:	f000 ffa5 	bl	8001606 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0x11c>)
 80006d6:	f000 fdfb 	bl	80012d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80006da:	2307      	movs	r3, #7
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ee:	f000 fdef 	bl	80012d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0x120>)
 800070c:	f000 fde0 	bl	80012d0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2006      	movs	r0, #6
 8000716:	f000 fd96 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 fdaf 	bl	800127e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2007      	movs	r0, #7
 8000726:	f000 fd8e 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800072a:	2007      	movs	r0, #7
 800072c:	f000 fda7 	bl	800127e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fd86 	bl	8001246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800073a:	2008      	movs	r0, #8
 800073c:	f000 fd9f 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10110000 	.word	0x10110000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]

	delay = 7200;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000766:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800076a:	601a      	str	r2, [r3, #0]
	counter = counter - 10;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3b0a      	subs	r3, #10
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000774:	6013      	str	r3, [r2, #0]
	delay = MAP(counter, 0, time * 100, 200, 7200);
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	461a      	mov	r2, r3
 8000786:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	23c8      	movs	r3, #200	; 0xc8
 800078e:	2100      	movs	r1, #0
 8000790:	f7ff fcee 	bl	8000170 <MAP>
 8000794:	4603      	mov	r3, r0
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000798:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007a0:	f000 ff49 	bl	8001636 <HAL_GPIO_TogglePin>

}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000204 	.word	0x20000204
 80007b0:	20000208 	.word	0x20000208
 80007b4:	20000004 	.word	0x20000004
 80007b8:	40011000 	.word	0x40011000

080007bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d118      	bne.n	80007fe <HAL_GPIO_EXTI_Callback+0x42>

		delay_us(delay);
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_GPIO_EXTI_Callback+0xc0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fce9 	bl	80001a8 <delay_us>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4828      	ldr	r0, [pc, #160]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 80007de:	f000 ff12 	bl	8001606 <HAL_GPIO_WritePin>
		delay_us(50);
 80007e2:	2032      	movs	r0, #50	; 0x32
 80007e4:	f7ff fce0 	bl	80001a8 <delay_us>
		if (counter > 0) {
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <HAL_GPIO_EXTI_Callback+0xc8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d041      	beq.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4822      	ldr	r0, [pc, #136]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 80007f8:	f000 ff05 	bl	8001606 <HAL_GPIO_WritePin>
		delay_us(50);
		if (counter > 0) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}
 80007fc:	e03a      	b.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
	else if (GPIO_Pin == GPIO_PIN_1) {
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d118      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x7a>
		delay_us(delay);
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fccd 	bl	80001a8 <delay_us>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000816:	f000 fef6 	bl	8001606 <HAL_GPIO_WritePin>
		delay_us(50);
 800081a:	2032      	movs	r0, #50	; 0x32
 800081c:	f7ff fcc4 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d025      	beq.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000830:	f000 fee9 	bl	8001606 <HAL_GPIO_WritePin>
}
 8000834:	e01e      	b.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8000836:	2104      	movs	r1, #4
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <HAL_GPIO_EXTI_Callback+0xcc>)
 800083a:	f000 fecd 	bl	80015d8 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d017      	beq.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
		delay_us(delay);
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fcad 	bl	80001a8 <delay_us>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000854:	480a      	ldr	r0, [pc, #40]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000856:	f000 fed6 	bl	8001606 <HAL_GPIO_WritePin>
		delay_us(50);
 800085a:	2032      	movs	r0, #50	; 0x32
 800085c:	f7ff fca4 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <HAL_GPIO_EXTI_Callback+0xb8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000870:	f000 fec9 	bl	8001606 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000204 	.word	0x20000204
 8000880:	40010c00 	.word	0x40010c00
 8000884:	20000208 	.word	0x20000208
 8000888:	40011000 	.word	0x40011000

0800088c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <HAL_I2C_MspInit+0x70>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d123      	bne.n	8000964 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_I2C_MspInit+0x74>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_I2C_MspInit+0x74>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_I2C_MspInit+0x74>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000934:	23c0      	movs	r3, #192	; 0xc0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <HAL_I2C_MspInit+0x78>)
 8000948:	f000 fcc2 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_I2C_MspInit+0x74>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_I2C_MspInit+0x74>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000956:	61d3      	str	r3, [r2, #28]
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_I2C_MspInit+0x74>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40005400 	.word	0x40005400
 8000970:	40021000 	.word	0x40021000
 8000974:	40010c00 	.word	0x40010c00

08000978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_TIM_Base_MspInit+0x68>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10c      	bne.n	80009a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 8000990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a2:	e018      	b.n	80009d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ac:	d113      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_TIM_Base_MspInit+0x6c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	201c      	movs	r0, #28
 80009cc:	f000 fc3b 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d0:	201c      	movs	r0, #28
 80009d2:	f000 fc54 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d131      	bne.n	8000a6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0x90>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_UART_MspInit+0x94>)
 8000a4e:	f000 fc3f 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x94>)
 8000a68:	f000 fc32 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 fa83 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}

08000ace <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 fdc8 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f000 fdc1 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 fdba 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000afe:	f001 f840 	bl	8001b82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000101c 	.word	0x2000101c

08000b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM2_IRQHandler+0x10>)
 8000b12:	f003 f9b3 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200002f0 	.word	0x200002f0

08000b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	return 1;
 8000b24:	2301      	movs	r3, #1
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <_kill>:

int _kill(int pid, int sig)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b38:	f008 fbbe 	bl	80092b8 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2216      	movs	r2, #22
 8000b40:	601a      	str	r2, [r3, #0]
	return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_exit>:

void _exit (int status)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b56:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffe7 	bl	8000b2e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b60:	e7fe      	b.n	8000b60 <_exit+0x12>

08000b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e00a      	b.n	8000b8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b74:	f3af 8000 	nop.w
 8000b78:	4601      	mov	r1, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	60ba      	str	r2, [r7, #8]
 8000b80:	b2ca      	uxtb	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbf0      	blt.n	8000b74 <_read+0x12>
	}

return len;
 8000b92:	687b      	ldr	r3, [r7, #4]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e009      	b.n	8000bc2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dbf1      	blt.n	8000bae <_write+0x12>
	}
	return len;
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_close>:

int _close(int file)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <_isatty>:

int _isatty(int file)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f008 fb28 	bl	80092b8 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20005000 	.word	0x20005000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	2000037c 	.word	0x2000037c
 8000c9c:	20001538 	.word	0x20001538

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000cac:	b40f      	push	{r0, r1, r2, r3}
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b0c2      	sub	sp, #264	; 0x108
 8000cb2:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000cb4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000cb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000cbc:	4638      	mov	r0, r7
 8000cbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000cc2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000cc6:	21fe      	movs	r1, #254	; 0xfe
 8000cc8:	f008 fc2e 	bl	8009528 <vsniprintf>
 8000ccc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	dd0c      	ble.n	8000cf2 <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cdc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cde:	bfa8      	it	ge
 8000ce0:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f007 ff05 	bl	8008afc <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000cf2:	bf00      	nop
 8000cf4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cfe:	b004      	add	sp, #16
 8000d00:	4770      	bx	lr
	...

08000d04 <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0c4      	sub	sp, #272	; 0x110
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d12:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d22:	4962      	ldr	r1, [pc, #392]	; (8000eac <terminal_proses+0x1a8>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f008 fb77 	bl	8009418 <strtok>
 8000d2a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000d2e:	e012      	b.n	8000d56 <terminal_proses+0x52>
		argv[argc++] = p2;
 8000d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000d3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d3e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000d42:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000d46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000d4a:	4958      	ldr	r1, [pc, #352]	; (8000eac <terminal_proses+0x1a8>)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f008 fb63 	bl	8009418 <strtok>
 8000d52:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <terminal_proses+0x62>
 8000d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d62:	2b3f      	cmp	r3, #63	; 0x3f
 8000d64:	dde4      	ble.n	8000d30 <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000d6e:	4850      	ldr	r0, [pc, #320]	; (8000eb0 <terminal_proses+0x1ac>)
 8000d70:	f7ff ff9c 	bl	8000cac <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000d74:	e094      	b.n	8000ea0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	494c      	ldr	r1, [pc, #304]	; (8000eb4 <terminal_proses+0x1b0>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff f9e2 	bl	800014c <strcmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <terminal_proses+0x1b4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4849      	ldr	r0, [pc, #292]	; (8000ebc <terminal_proses+0x1b8>)
 8000d96:	f7ff ff89 	bl	8000cac <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <terminal_proses+0x1bc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4848      	ldr	r0, [pc, #288]	; (8000ec4 <terminal_proses+0x1c0>)
 8000da2:	f7ff ff83 	bl	8000cac <command_printf>
}
 8000da6:	e07b      	b.n	8000ea0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4945      	ldr	r1, [pc, #276]	; (8000ec8 <terminal_proses+0x1c4>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff f9c9 	bl	800014c <strcmp>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10c      	bne.n	8000dda <terminal_proses+0xd6>
		flag = 0;
 8000dc0:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <terminal_proses+0x1c8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4840      	ldr	r0, [pc, #256]	; (8000ed0 <terminal_proses+0x1cc>)
 8000dce:	f000 fc1a 	bl	8001606 <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000dd2:	4840      	ldr	r0, [pc, #256]	; (8000ed4 <terminal_proses+0x1d0>)
 8000dd4:	f7ff ff6a 	bl	8000cac <command_printf>
}
 8000dd8:	e062      	b.n	8000ea0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	493c      	ldr	r1, [pc, #240]	; (8000ed8 <terminal_proses+0x1d4>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9b0 	bl	800014c <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <terminal_proses+0x108>
		flag = 1;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <terminal_proses+0x1c8>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <terminal_proses+0x1cc>)
 8000e00:	f000 fc01 	bl	8001606 <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8000e04:	4835      	ldr	r0, [pc, #212]	; (8000edc <terminal_proses+0x1d8>)
 8000e06:	f7ff ff51 	bl	8000cac <command_printf>
}
 8000e0a:	e049      	b.n	8000ea0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8000e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4932      	ldr	r1, [pc, #200]	; (8000ee0 <terminal_proses+0x1dc>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f997 	bl	800014c <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11d      	bne.n	8000e60 <terminal_proses+0x15c>
		if (argc == 2) {
 8000e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d109      	bne.n	8000e40 <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8000e2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <terminal_proses+0x1b4>)
 8000e38:	492a      	ldr	r1, [pc, #168]	; (8000ee4 <terminal_proses+0x1e0>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f008 fa7c 	bl	8009338 <siscanf>
		if (mode == 1) {
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <terminal_proses+0x1b4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d103      	bne.n	8000e50 <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8000e48:	4827      	ldr	r0, [pc, #156]	; (8000ee8 <terminal_proses+0x1e4>)
 8000e4a:	f7ff ff2f 	bl	8000cac <command_printf>
}
 8000e4e:	e027      	b.n	8000ea0 <terminal_proses+0x19c>
		} else if (mode == 2) {
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <terminal_proses+0x1b4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <terminal_proses+0x1e8>)
 8000e5a:	f7ff ff27 	bl	8000cac <command_printf>
}
 8000e5e:	e01f      	b.n	8000ea0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 8000e60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4921      	ldr	r1, [pc, #132]	; (8000ef0 <terminal_proses+0x1ec>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f96d 	bl	800014c <strcmp>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d113      	bne.n	8000ea0 <terminal_proses+0x19c>
		if (argc == 2) {
 8000e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d10f      	bne.n	8000ea0 <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 8000e80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <terminal_proses+0x1bc>)
 8000e8c:	4915      	ldr	r1, [pc, #84]	; (8000ee4 <terminal_proses+0x1e0>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f008 fa52 	bl	8009338 <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <terminal_proses+0x1bc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <terminal_proses+0x1f0>)
 8000e9c:	f7ff ff06 	bl	8000cac <command_printf>
}
 8000ea0:	bf00      	nop
 8000ea2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	0800b140 	.word	0x0800b140
 8000eb0:	0800b144 	.word	0x0800b144
 8000eb4:	0800b158 	.word	0x0800b158
 8000eb8:	2000024c 	.word	0x2000024c
 8000ebc:	0800b160 	.word	0x0800b160
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	0800b16c 	.word	0x0800b16c
 8000ec8:	0800b178 	.word	0x0800b178
 8000ecc:	20000250 	.word	0x20000250
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	0800b17c 	.word	0x0800b17c
 8000ed8:	0800b184 	.word	0x0800b184
 8000edc:	0800b188 	.word	0x0800b188
 8000ee0:	0800b18c 	.word	0x0800b18c
 8000ee4:	0800b194 	.word	0x0800b194
 8000ee8:	0800b198 	.word	0x0800b198
 8000eec:	0800b1a4 	.word	0x0800b1a4
 8000ef0:	0800b1b8 	.word	0x0800b1b8
 8000ef4:	0800b1c4 	.word	0x0800b1c4

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff febf 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f008 f9cf 	bl	80092c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff f9c7 	bl	80002b8 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000f34:	0800b4c8 	.word	0x0800b4c8
  ldr r2, =_sbss
 8000f38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000f3c:	20001538 	.word	0x20001538

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f96b 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fc9a 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f991 	bl	80012b6 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f94b 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	2000000c 	.word	0x2000000c

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	20000380 	.word	0x20000380

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000380 	.word	0x20000380

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000010 	.word	0x20000010

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	; (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db12      	blt.n	8001124 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	490a      	ldr	r1, [pc, #40]	; (8001130 <__NVIC_DisableIRQ+0x44>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	3320      	adds	r3, #32
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001118:	f3bf 8f4f 	dsb	sy
}
 800111c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800111e:	f3bf 8f6f 	isb	sy
}
 8001122:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff90 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff09 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff1e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff11 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff1f 	bl	80010ec <__NVIC_DisableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff94 	bl	80011ec <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e169      	b.n	80015b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e4:	2201      	movs	r2, #1
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8158 	bne.w	80015b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a9a      	ldr	r2, [pc, #616]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d05e      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800130c:	4a98      	ldr	r2, [pc, #608]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d875      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001312:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d058      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001318:	4a96      	ldr	r2, [pc, #600]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d86f      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800131e:	4a96      	ldr	r2, [pc, #600]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001324:	4a94      	ldr	r2, [pc, #592]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d869      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800132a:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_GPIO_Init+0x2ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04c      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001330:	4a92      	ldr	r2, [pc, #584]	; (800157c <HAL_GPIO_Init+0x2ac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d863      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001336:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d046      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800133c:	4a90      	ldr	r2, [pc, #576]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d85d      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d82a      	bhi.n	800139c <HAL_GPIO_Init+0xcc>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d859      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <HAL_GPIO_Init+0x80>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013b7 	.word	0x080013b7
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013ff 	.word	0x080013ff
 8001364:	080013ff 	.word	0x080013ff
 8001368:	080013ff 	.word	0x080013ff
 800136c:	080013ff 	.word	0x080013ff
 8001370:	080013ff 	.word	0x080013ff
 8001374:	080013ff 	.word	0x080013ff
 8001378:	080013ff 	.word	0x080013ff
 800137c:	080013ff 	.word	0x080013ff
 8001380:	080013ff 	.word	0x080013ff
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013ff 	.word	0x080013ff
 800138c:	080013ff 	.word	0x080013ff
 8001390:	080013ff 	.word	0x080013ff
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013c1 	.word	0x080013c1
 800139c:	4a79      	ldr	r2, [pc, #484]	; (8001584 <HAL_GPIO_Init+0x2b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a2:	e02c      	b.n	80013fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e029      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e024      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	3308      	adds	r3, #8
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	330c      	adds	r3, #12
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e01a      	b.n	8001400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d2:	2304      	movs	r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e013      	b.n	8001400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	611a      	str	r2, [r3, #16]
          break;
 80013ea:	e009      	b.n	8001400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	615a      	str	r2, [r3, #20]
          break;
 80013f6:	e003      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x130>
          break;
 80013fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d801      	bhi.n	800140a <HAL_GPIO_Init+0x13a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e001      	b.n	800140e <HAL_GPIO_Init+0x13e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d802      	bhi.n	800141c <HAL_GPIO_Init+0x14c>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x152>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3b08      	subs	r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	210f      	movs	r1, #15
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b1 	beq.w	80015b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4c      	ldr	r2, [pc, #304]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2bc>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	; (800159c <HAL_GPIO_Init+0x2cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2bc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	492c      	ldr	r1, [pc, #176]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4928      	ldr	r1, [pc, #160]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491e      	ldr	r1, [pc, #120]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4918      	ldr	r1, [pc, #96]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4914      	ldr	r1, [pc, #80]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x2e2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40011400 	.word	0x40011400
 80015a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae8e 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	372c      	adds	r7, #44	; 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
 8001612:	4613      	mov	r3, r2
 8001614:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001616:	787b      	ldrb	r3, [r7, #1]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001622:	e003      	b.n	800162c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	041a      	lsls	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	611a      	str	r2, [r3, #16]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43d9      	mvns	r1, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f898 	bl	80007bc <HAL_GPIO_EXTI_Callback>
  }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e12b      	b.n	8001902 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff f91c 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2224      	movs	r2, #36	; 0x24
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016fc:	f002 f9a8 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 8001700:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a81      	ldr	r2, [pc, #516]	; (800190c <HAL_I2C_Init+0x274>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d807      	bhi.n	800171c <HAL_I2C_Init+0x84>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a80      	ldr	r2, [pc, #512]	; (8001910 <HAL_I2C_Init+0x278>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	e006      	b.n	800172a <HAL_I2C_Init+0x92>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a7d      	ldr	r2, [pc, #500]	; (8001914 <HAL_I2C_Init+0x27c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	bf94      	ite	ls
 8001724:	2301      	movls	r3, #1
 8001726:	2300      	movhi	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0e7      	b.n	8001902 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a78      	ldr	r2, [pc, #480]	; (8001918 <HAL_I2C_Init+0x280>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_I2C_Init+0x274>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d802      	bhi.n	800176c <HAL_I2C_Init+0xd4>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3301      	adds	r3, #1
 800176a:	e009      	b.n	8001780 <HAL_I2C_Init+0xe8>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	4a69      	ldr	r2, [pc, #420]	; (800191c <HAL_I2C_Init+0x284>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	3301      	adds	r3, #1
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	430b      	orrs	r3, r1
 8001786:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001792:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	495c      	ldr	r1, [pc, #368]	; (800190c <HAL_I2C_Init+0x274>)
 800179c:	428b      	cmp	r3, r1
 800179e:	d819      	bhi.n	80017d4 <HAL_I2C_Init+0x13c>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e59      	subs	r1, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ae:	1c59      	adds	r1, r3, #1
 80017b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017b4:	400b      	ands	r3, r1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00a      	beq.n	80017d0 <HAL_I2C_Init+0x138>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1e59      	subs	r1, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ce:	e051      	b.n	8001874 <HAL_I2C_Init+0x1dc>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e04f      	b.n	8001874 <HAL_I2C_Init+0x1dc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <HAL_I2C_Init+0x168>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1e58      	subs	r0, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	440b      	add	r3, r1
 80017ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e012      	b.n	8001826 <HAL_I2C_Init+0x18e>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	fbb0 f3f3 	udiv	r3, r0, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Init+0x196>
 800182a:	2301      	movs	r3, #1
 800182c:	e022      	b.n	8001874 <HAL_I2C_Init+0x1dc>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10e      	bne.n	8001854 <HAL_I2C_Init+0x1bc>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e58      	subs	r0, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	440b      	add	r3, r1
 8001844:	fbb0 f3f3 	udiv	r3, r0, r3
 8001848:	3301      	adds	r3, #1
 800184a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001852:	e00f      	b.n	8001874 <HAL_I2C_Init+0x1dc>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e58      	subs	r0, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	0099      	lsls	r1, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	fbb0 f3f3 	udiv	r3, r0, r3
 800186a:	3301      	adds	r3, #1
 800186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	6809      	ldr	r1, [r1, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6911      	ldr	r1, [r2, #16]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	000186a0 	.word	0x000186a0
 8001910:	001e847f 	.word	0x001e847f
 8001914:	003d08ff 	.word	0x003d08ff
 8001918:	431bde83 	.word	0x431bde83
 800191c:	10624dd3 	.word	0x10624dd3

08001920 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af06      	add	r7, sp, #24
 8001926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0fd      	b.n	8001b2e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f007 fa0c 	bl	8008d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fee9 	bl	8004730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	687e      	ldr	r6, [r7, #4]
 8001966:	466d      	mov	r5, sp
 8001968:	f106 0410 	add.w	r4, r6, #16
 800196c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	602b      	str	r3, [r5, #0]
 8001974:	1d33      	adds	r3, r6, #4
 8001976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f002 feb3 	bl	80046e4 <USB_CoreInit>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0ce      	b.n	8001b2e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fee4 	bl	8004764 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e04c      	b.n	8001a3c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3301      	adds	r3, #1
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	b298      	uxth	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	3336      	adds	r3, #54	; 0x36
 80019e0:	4602      	mov	r2, r0
 80019e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3303      	adds	r3, #3
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3338      	adds	r3, #56	; 0x38
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	333c      	adds	r3, #60	; 0x3c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3340      	adds	r3, #64	; 0x40
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3ad      	bcc.n	80019a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e044      	b.n	8001ad6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3b5      	bcc.n	8001a4c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	687e      	ldr	r6, [r7, #4]
 8001ae8:	466d      	mov	r5, sp
 8001aea:	f106 0410 	add.w	r4, r6, #16
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	602b      	str	r3, [r5, #0]
 8001af6:	1d33      	adds	r3, r6, #4
 8001af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f002 fe3e 	bl	800477c <USB_DevInit>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00d      	b.n	8001b2e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 faf0 	bl	800710c <USB_DevDisconnect>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_PCD_Start+0x16>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e016      	b.n	8001b7a <HAL_PCD_Start+0x44>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fdd3 	bl	8004704 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f007 fb72 	bl	800924a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 fac4 	bl	80070f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b088      	sub	sp, #32
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f005 fac6 	bl	8007120 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fb5f 	bl	8002264 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 fab8 	bl	8007120 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d112      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f007 f940 	bl	8008e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f923 	bl	8001e28 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 fa9a 	bl	8007120 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf6:	d10b      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fa83 	bl	8007120 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c24:	d10b      	bne.n	8001c3e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fa6c 	bl	8007120 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c52:	d126      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0204 	bic.w	r2, r2, #4
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0208 	bic.w	r2, r2, #8
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f007 f921 	bl	8008ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 fa3a 	bl	8007120 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb6:	f040 8082 	bne.w	8001dbe <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	e010      	b.n	8001ce2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	441a      	add	r2, r3
 8001ccc:	7ffb      	ldrb	r3, [r7, #31]
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	77fb      	strb	r3, [r7, #31]
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	d9eb      	bls.n	8001cc0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	b292      	uxth	r2, r2
 8001d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d18:	bf00      	nop
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f6      	beq.n	8001d1a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e00f      	b.n	8001d6a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4611      	mov	r1, r2
 8001d52:	7ffa      	ldrb	r2, [r7, #31]
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	440a      	add	r2, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3320      	adds	r3, #32
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d62:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	3301      	adds	r3, #1
 8001d68:	77fb      	strb	r3, [r7, #31]
 8001d6a:	7ffb      	ldrb	r3, [r7, #31]
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	d9ec      	bls.n	8001d4a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0208 	orr.w	r2, r2, #8
 8001d82:	b292      	uxth	r2, r2
 8001d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0204 	orr.w	r2, r2, #4
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f007 f86d 	bl	8008e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 f9ac 	bl	8007120 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd2:	d10e      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f007 f826 	bl	8008e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 f992 	bl	8007120 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e06:	d10b      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_SetAddress+0x1a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e013      	b.n	8001e6a <HAL_PCD_SetAddress+0x42>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f939 	bl	80070d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	70fb      	strb	r3, [r7, #3]
 8001e84:	460b      	mov	r3, r1
 8001e86:	803b      	strh	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da0e      	bge.n	8001eb6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
 8001eb4:	e00e      	b.n	8001ed4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ee0:	883a      	ldrh	r2, [r7, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	78ba      	ldrb	r2, [r7, #2]
 8001eea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001efe:	78bb      	ldrb	r3, [r7, #2]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d102      	bne.n	8001f0a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_Open+0xa6>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00e      	b.n	8001f36 <HAL_PCD_EP_Open+0xc4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fc48 	bl	80047bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f34:	7afb      	ldrb	r3, [r7, #11]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da0e      	bge.n	8001f70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	705a      	strb	r2, [r3, #1]
 8001f6e:	e00e      	b.n	8001f8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Close+0x6a>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_Close+0x88>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 ff6a 	bl	8004e90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 0207 	and.w	r2, r3, #7
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2200      	movs	r2, #0
 800200c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	b2da      	uxtb	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f91c 	bl	8005268 <USB_EPStartXfer>
 8002030:	e005      	b.n	800203e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 f915 	bl	8005268 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2201      	movs	r2, #1
 80020c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f8c2 	bl	8005268 <USB_EPStartXfer>
 80020e4:	e005      	b.n	80020f2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6979      	ldr	r1, [r7, #20]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 f8bb 	bl	8005268 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0207 	and.w	r2, r3, #7
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d901      	bls.n	800211a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e04c      	b.n	80021b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da0e      	bge.n	8002140 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	705a      	strb	r2, [r3, #1]
 800213e:	e00c      	b.n	800215a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_PCD_EP_SetStall+0x7e>
 8002176:	2302      	movs	r3, #2
 8002178:	e01c      	b.n	80021b4 <HAL_PCD_EP_SetStall+0xb8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fea5 	bl	8006ed8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	2b00      	cmp	r3, #0
 8002196:	d108      	bne.n	80021aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f004 ffca 	bl	800713e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e040      	b.n	800225c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0e      	bge.n	8002200 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	705a      	strb	r2, [r3, #1]
 80021fe:	e00e      	b.n	800221e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 0207 	and.w	r2, r3, #7
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_PCD_EP_ClrStall+0x82>
 800223a:	2302      	movs	r3, #2
 800223c:	e00e      	b.n	800225c <HAL_PCD_EP_ClrStall+0xa0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	4618      	mov	r0, r3
 800224e:	f004 fe93 	bl	8006f78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800226c:	e2ec      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002276:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002278:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002284:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8161 	bne.w	8002550 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800228e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d152      	bne.n	800233e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a8:	81fb      	strh	r3, [r7, #14]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	89fb      	ldrh	r3, [r7, #14]
 80022b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3328      	adds	r3, #40	; 0x28
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3302      	adds	r3, #2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	441a      	add	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022fc:	2100      	movs	r1, #0
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 fd83 	bl	8008e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 829b 	beq.w	8002848 <PCD_EP_ISR_Handler+0x5e4>
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8296 	bne.w	8002848 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002328:	b2da      	uxtb	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b292      	uxth	r2, r2
 8002330:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800233c:	e284      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800234e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002354:	2b00      	cmp	r3, #0
 8002356:	d034      	beq.n	80023c2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	3306      	adds	r3, #6
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002396:	b29b      	uxth	r3, r3
 8002398:	f004 ff21 	bl	80071de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023a8:	4013      	ands	r3, r2
 80023aa:	823b      	strh	r3, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	8a3a      	ldrh	r2, [r7, #16]
 80023b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b6:	b292      	uxth	r2, r2
 80023b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f006 fcf8 	bl	8008db0 <HAL_PCD_SetupStageCallback>
 80023c0:	e242      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f280 823e 	bge.w	8002848 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023d8:	4013      	ands	r3, r2
 80023da:	83bb      	strh	r3, [r7, #28]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	8bba      	ldrh	r2, [r7, #28]
 80023e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e6:	b292      	uxth	r2, r2
 80023e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	3306      	adds	r3, #6
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d019      	beq.n	8002452 <PCD_EP_ISR_Handler+0x1ee>
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	6959      	ldr	r1, [r3, #20]
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002436:	b29b      	uxth	r3, r3
 8002438:	f004 fed1 	bl	80071de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	441a      	add	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800244a:	2100      	movs	r1, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f006 fcc1 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 81f2 	bne.w	8002848 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d112      	bne.n	80024b2 <PCD_EP_ISR_Handler+0x24e>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002496:	b29a      	uxth	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e02f      	b.n	8002512 <PCD_EP_ISR_Handler+0x2ae>
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b3e      	cmp	r3, #62	; 0x3e
 80024b8:	d813      	bhi.n	80024e2 <PCD_EP_ISR_Handler+0x27e>
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x270>
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	3301      	adds	r3, #1
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	b29a      	uxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	e017      	b.n	8002512 <PCD_EP_ISR_Handler+0x2ae>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <PCD_EP_ISR_Handler+0x298>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	3b01      	subs	r3, #1
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	b29b      	uxth	r3, r3
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	b29b      	uxth	r3, r3
 8002504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250c:	b29a      	uxth	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	827b      	strh	r3, [r7, #18]
 8002524:	8a7b      	ldrh	r3, [r7, #18]
 8002526:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800252a:	827b      	strh	r3, [r7, #18]
 800252c:	8a7b      	ldrh	r3, [r7, #18]
 800252e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002532:	827b      	strh	r3, [r7, #18]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	8a7b      	ldrh	r3, [r7, #18]
 800253a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800253e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254a:	b29b      	uxth	r3, r3
 800254c:	8013      	strh	r3, [r2, #0]
 800254e:	e17b      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002566:	2b00      	cmp	r3, #0
 8002568:	f280 80ea 	bge.w	8002740 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29a      	uxth	r2, r3
 800257e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002582:	4013      	ands	r3, r2
 8002584:	853b      	strh	r3, [r7, #40]	; 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800259a:	b292      	uxth	r2, r2
 800259c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800259e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d122      	bne.n	8002602 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	3306      	adds	r3, #6
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8087 	beq.w	80026fc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	88da      	ldrh	r2, [r3, #6]
 80025fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025fc:	f004 fdef 	bl	80071de <USB_ReadPMA>
 8002600:	e07c      	b.n	80026fc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	78db      	ldrb	r3, [r3, #3]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d108      	bne.n	800261c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800260a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260c:	461a      	mov	r2, r3
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f927 	bl	8002864 <HAL_PCD_EP_DB_Receive>
 8002616:	4603      	mov	r3, r0
 8002618:	86fb      	strh	r3, [r7, #54]	; 0x36
 800261a:	e06f      	b.n	80026fc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	847b      	strh	r3, [r7, #34]	; 0x22
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002654:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002658:	b29b      	uxth	r3, r3
 800265a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	3302      	adds	r3, #2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02a      	beq.n	80026fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	6959      	ldr	r1, [r3, #20]
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	891a      	ldrh	r2, [r3, #8]
 80026b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b4:	f004 fd93 	bl	80071de <USB_ReadPMA>
 80026b8:	e020      	b.n	80026fc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	3306      	adds	r3, #6
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	6959      	ldr	r1, [r3, #20]
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	895a      	ldrh	r2, [r3, #10]
 80026f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f8:	f004 fd71 	bl	80071de <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002702:	441a      	add	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800270e:	441a      	add	r2, r3
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <PCD_EP_ISR_Handler+0x4c2>
 800271c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d206      	bcs.n	8002734 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f006 fb51 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
 8002732:	e005      	b.n	8002740 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fd94 	bl	8005268 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002740:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d07e      	beq.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800274a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	843b      	strh	r3, [r7, #32]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	441a      	add	r2, r3
 8002788:	8c3b      	ldrh	r3, [r7, #32]
 800278a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002792:	b29b      	uxth	r3, r3
 8002794:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	78db      	ldrb	r3, [r3, #3]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d00c      	beq.n	80027b8 <PCD_EP_ISR_Handler+0x554>
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d146      	bne.n	800283c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d141      	bne.n	800283c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	3302      	adds	r3, #2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	8bfb      	ldrh	r3, [r7, #30]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d906      	bls.n	80027fa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	8bfb      	ldrh	r3, [r7, #30]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	619a      	str	r2, [r3, #24]
 80027f8:	e002      	b.n	8002800 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f006 fafb 	bl	8008e0a <HAL_PCD_DataInStageCallback>
 8002814:	e018      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	8bfb      	ldrh	r3, [r7, #30]
 800281c:	441a      	add	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	8bfb      	ldrh	r3, [r7, #30]
 8002828:	441a      	add	r2, r3
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fd17 	bl	8005268 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800283a:	e005      	b.n	8002848 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800283c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800283e:	461a      	mov	r2, r3
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f91b 	bl	8002a7e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f6ff ad0a 	blt.w	800226e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3738      	adds	r7, #56	; 0x38
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d07e      	beq.n	800297a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	3302      	adds	r3, #2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d306      	bcc.n	80028be <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	8b7b      	ldrh	r3, [r7, #26]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e002      	b.n	80028c4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	833b      	strh	r3, [r7, #24]
 80028e8:	8b3b      	ldrh	r3, [r7, #24]
 80028ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ee:	833b      	strh	r3, [r7, #24]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	8b3b      	ldrh	r3, [r7, #24]
 8002900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01f      	beq.n	800295e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	82fb      	strh	r3, [r7, #22]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8087 	beq.w	8002a74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6959      	ldr	r1, [r3, #20]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	891a      	ldrh	r2, [r3, #8]
 8002972:	8b7b      	ldrh	r3, [r7, #26]
 8002974:	f004 fc33 	bl	80071de <USB_ReadPMA>
 8002978:	e07c      	b.n	8002a74 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	3306      	adds	r3, #6
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	8b7b      	ldrh	r3, [r7, #26]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d306      	bcc.n	80029bc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	8b7b      	ldrh	r3, [r7, #26]
 80029b4:	1ad2      	subs	r2, r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	619a      	str	r2, [r3, #24]
 80029ba:	e002      	b.n	80029c2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d123      	bne.n	8002a12 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	83fb      	strh	r3, [r7, #30]
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029ec:	83fb      	strh	r3, [r7, #30]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	441a      	add	r2, r3
 80029fc:	8bfb      	ldrh	r3, [r7, #30]
 80029fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11f      	bne.n	8002a5c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	83bb      	strh	r3, [r7, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	8bbb      	ldrh	r3, [r7, #28]
 8002a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a5c:	8b7b      	ldrh	r3, [r7, #26]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6959      	ldr	r1, [r3, #20]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	895a      	ldrh	r2, [r3, #10]
 8002a6e:	8b7b      	ldrh	r3, [r7, #26]
 8002a70:	f004 fbb5 	bl	80071de <USB_ReadPMA>
    }
  }

  return count;
 8002a74:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b0a2      	sub	sp, #136	; 0x88
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 81c7 	beq.w	8002e26 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3302      	adds	r3, #2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d907      	bls.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	e002      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 80b9 	bne.w	8002c62 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d126      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	4413      	add	r3, r2
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	011a      	lsls	r2, r3, #4
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	e01a      	b.n	8002b7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d116      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	4413      	add	r3, r2
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	011a      	lsls	r2, r3, #4
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	4413      	add	r3, r2
 8002b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d126      	bne.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	011a      	lsls	r2, r3, #4
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	e017      	b.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d113      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	4413      	add	r3, r2
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	011a      	lsls	r2, r3, #4
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2200      	movs	r2, #0
 8002c06:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f006 f8fb 	bl	8008e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 82d4 	beq.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	827b      	strh	r3, [r7, #18]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	8a7b      	ldrh	r3, [r7, #18]
 8002c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	8013      	strh	r3, [r2, #0]
 8002c60:	e2b2      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d021      	beq.n	8002cb0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 8286 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d309      	bcc.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	621a      	str	r2, [r3, #32]
 8002cf6:	e015      	b.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d0e:	e009      	b.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d155      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	4413      	add	r3, r2
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	011a      	lsls	r2, r3, #4
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d112      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x302>
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	e047      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	2b3e      	cmp	r3, #62	; 0x3e
 8002d84:	d811      	bhi.n	8002daa <HAL_PCD_EP_DB_Transmit+0x32c>
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	3301      	adds	r3, #1
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	e032      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x392>
 8002daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x342>
 8002dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e01b      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x392>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d117      	bne.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x392>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df4:	4413      	add	r3, r2
 8002df6:	643b      	str	r3, [r7, #64]	; 0x40
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	011a      	lsls	r2, r3, #4
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	4413      	add	r3, r2
 8002e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6959      	ldr	r1, [r3, #20]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	891a      	ldrh	r2, [r3, #8]
 8002e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f004 f998 	bl	8007154 <USB_WritePMA>
 8002e24:	e1d0      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3306      	adds	r3, #6
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d307      	bcc.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e66:	1ad2      	subs	r2, r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	619a      	str	r2, [r3, #24]
 8002e6c:	e002      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 80c4 	bne.w	8003006 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d126      	bne.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	4413      	add	r3, r2
 8002e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011a      	lsls	r2, r3, #4
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	e01a      	b.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d116      	bne.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef0:	4413      	add	r3, r2
 8002ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	011a      	lsls	r2, r3, #4
 8002efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efc:	4413      	add	r3, r2
 8002efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f02:	673b      	str	r3, [r7, #112]	; 0x70
 8002f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f06:	2200      	movs	r2, #0
 8002f08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d12f      	bne.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f30:	4413      	add	r3, r2
 8002f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	011a      	lsls	r2, r3, #4
 8002f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	e017      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d113      	bne.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8e:	4413      	add	r3, r2
 8002f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	011a      	lsls	r2, r3, #4
 8002f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f005 ff2b 	bl	8008e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8104 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	441a      	add	r2, r3
 8002fec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
 8003004:	e0e0      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d121      	bne.n	8003054 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	b29b      	uxth	r3, r3
 8003052:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 80b4 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003068:	441a      	add	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003076:	441a      	add	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	429a      	cmp	r2, r3
 8003086:	d309      	bcc.n	800309c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	621a      	str	r2, [r3, #32]
 800309a:	e015      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80030a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030b2:	e009      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	667b      	str	r3, [r7, #100]	; 0x64
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d155      	bne.n	8003182 <HAL_PCD_EP_DB_Transmit+0x704>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ea:	4413      	add	r3, r2
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	011a      	lsls	r2, r3, #4
 80030f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	2b00      	cmp	r3, #0
 8003102:	d112      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800310e:	b29a      	uxth	r2, r3
 8003110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003112:	801a      	strh	r2, [r3, #0]
 8003114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003122:	b29a      	uxth	r2, r3
 8003124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e044      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	2b3e      	cmp	r3, #62	; 0x3e
 800312e:	d811      	bhi.n	8003154 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	657b      	str	r3, [r7, #84]	; 0x54
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	3301      	adds	r3, #1
 8003144:	657b      	str	r3, [r7, #84]	; 0x54
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	b29b      	uxth	r3, r3
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	b29a      	uxth	r2, r3
 800314e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	e02f      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	657b      	str	r3, [r7, #84]	; 0x54
 800315a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	3b01      	subs	r3, #1
 8003168:	657b      	str	r3, [r7, #84]	; 0x54
 800316a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316c:	b29b      	uxth	r3, r3
 800316e:	029b      	lsls	r3, r3, #10
 8003170:	b29b      	uxth	r3, r3
 8003172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317a:	b29a      	uxth	r2, r3
 800317c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317e:	801a      	strh	r2, [r3, #0]
 8003180:	e018      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d114      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003198:	4413      	add	r3, r2
 800319a:	667b      	str	r3, [r7, #100]	; 0x64
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	011a      	lsls	r2, r3, #4
 80031a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031aa:	663b      	str	r3, [r7, #96]	; 0x60
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	895a      	ldrh	r2, [r3, #10]
 80031c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 ffc6 	bl	8007154 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e2:	823b      	strh	r3, [r7, #16]
 80031e4:	8a3b      	ldrh	r3, [r7, #16]
 80031e6:	f083 0310 	eor.w	r3, r3, #16
 80031ea:	823b      	strh	r3, [r7, #16]
 80031ec:	8a3b      	ldrh	r3, [r7, #16]
 80031ee:	f083 0320 	eor.w	r3, r3, #32
 80031f2:	823b      	strh	r3, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	8a3b      	ldrh	r3, [r7, #16]
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3788      	adds	r7, #136	; 0x88
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e009      	b.n	800326c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003258:	897a      	ldrh	r2, [r7, #10]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	b29a      	uxth	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	80da      	strh	r2, [r3, #6]
 8003280:	e00b      	b.n	800329a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2201      	movs	r2, #1
 8003286:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b29a      	uxth	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b29a      	uxth	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e272      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8087 	beq.w	80033d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c8:	4b92      	ldr	r3, [pc, #584]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d00c      	beq.n	80032ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d4:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d112      	bne.n	8003306 <HAL_RCC_OscConfig+0x5e>
 80032e0:	4b8c      	ldr	r3, [pc, #560]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d10b      	bne.n	8003306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ee:	4b89      	ldr	r3, [pc, #548]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d06c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x12c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d168      	bne.n	80033d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e24c      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x76>
 8003310:	4b80      	ldr	r3, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7f      	ldr	r2, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e02e      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x98>
 8003326:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b78      	ldr	r3, [pc, #480]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a77      	ldr	r2, [pc, #476]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0xbc>
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a71      	ldr	r2, [pc, #452]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b6f      	ldr	r3, [pc, #444]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 8003364:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a67      	ldr	r2, [pc, #412]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fd fe36 	bl	8000ff4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fd fe32 	bl	8000ff4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e200      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xe4>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fd fe22 	bl	8000ff4 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fe1e 	bl	8000ff4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ec      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	4b53      	ldr	r3, [pc, #332]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x10c>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d063      	beq.n	80034aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e2:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x18c>
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x176>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e1c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4939      	ldr	r1, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	e03a      	b.n	80034aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd fdd7 	bl	8000ff4 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fd fdd3 	bl	8000ff4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1a1      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4927      	ldr	r1, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fd fdb6 	bl	8000ff4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348c:	f7fd fdb2 	bl	8000ff4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e180      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03a      	beq.n	800352c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d019      	beq.n	80034f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCC_OscConfig+0x274>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fd fd96 	bl	8000ff4 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fd fd92 	bl	8000ff4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e160      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f000 fad8 	bl	8003aa0 <RCC_Delay>
 80034f0:	e01c      	b.n	800352c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_RCC_OscConfig+0x274>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fd fd7c 	bl	8000ff4 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fe:	e00f      	b.n	8003520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fd fd78 	bl	8000ff4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d908      	bls.n	8003520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e146      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	42420000 	.word	0x42420000
 800351c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e9      	bne.n	8003500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a6 	beq.w	8003686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b8b      	ldr	r3, [pc, #556]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a87      	ldr	r2, [pc, #540]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	61d3      	str	r3, [r2, #28]
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b82      	ldr	r3, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7e      	ldr	r2, [pc, #504]	; (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fd fd39 	bl	8000ff4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fd fd35 	bl	8000ff4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e103      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4c8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x312>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	e02d      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x334>
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a69      	ldr	r2, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	4b67      	ldr	r3, [pc, #412]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a66      	ldr	r2, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
 80035da:	e01c      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_OscConfig+0x356>
 80035e4:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a60      	ldr	r2, [pc, #384]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4a5d      	ldr	r2, [pc, #372]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6213      	str	r3, [r2, #32]
 80035fc:	e00b      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a5a      	ldr	r2, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a57      	ldr	r2, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fd fce9 	bl	8000ff4 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fd fce5 	bl	8000ff4 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0b1      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ee      	beq.n	8003626 <HAL_RCC_OscConfig+0x37e>
 8003648:	e014      	b.n	8003674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fd fcd3 	bl	8000ff4 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fccf 	bl	8000ff4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e09b      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ee      	bne.n	8003652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b3c      	ldr	r3, [pc, #240]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a3b      	ldr	r2, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8087 	beq.w	800379e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d061      	beq.n	8003760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d146      	bne.n	8003732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_RCC_OscConfig+0x4cc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fd fca3 	bl	8000ff4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fc9f 	bl	8000ff4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e06d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c4:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4921      	ldr	r1, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ec:	4b1f      	ldr	r3, [pc, #124]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a19      	ldr	r1, [r3, #32]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	430b      	orrs	r3, r1
 80036fe:	491b      	ldr	r1, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fd fc73 	bl	8000ff4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fd fc6f 	bl	8000ff4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x46a>
 8003730:	e035      	b.n	800379e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fd fc5c 	bl	8000ff4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fd fc58 	bl	8000ff4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e026      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x498>
 800375e:	e01e      	b.n	800379e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e019      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
 8003774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x500>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	429a      	cmp	r2, r3
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0d0      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4965      	ldr	r1, [pc, #404]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800382a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d040      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d115      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e073      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06b      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4936      	ldr	r1, [pc, #216]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fd fbaa 	bl	8000ff4 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fd fba6 	bl	8000ff4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e053      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d210      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4922      	ldr	r1, [pc, #136]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1cc>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1d0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fb08 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	0800b244 	.word	0x0800b244
 8003978:	20000008 	.word	0x20000008
 800397c:	2000000c 	.word	0x2000000c

08003980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b490      	push	{r4, r7}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003986:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xac>)
 8003988:	1d3c      	adds	r4, r7, #4
 800398a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003990:	f240 2301 	movw	r3, #513	; 0x201
 8003994:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x40>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x46>
 80039be:	e02b      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039c2:	623b      	str	r3, [r7, #32]
      break;
 80039c4:	e02b      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	0c9b      	lsrs	r3, r3, #18
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3328      	adds	r3, #40	; 0x28
 80039d0:	443b      	add	r3, r7
 80039d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0c5b      	lsrs	r3, r3, #17
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	443b      	add	r3, r7
 80039f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039fa:	fb03 f202 	mul.w	r2, r3, r2
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	e004      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	623b      	str	r3, [r7, #32]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a1a:	623b      	str	r3, [r7, #32]
      break;
 8003a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc90      	pop	{r4, r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800b1e0 	.word	0x0800b1e0
 8003a30:	40021000 	.word	0x40021000
 8003a34:	007a1200 	.word	0x007a1200
 8003a38:	003d0900 	.word	0x003d0900

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000008 	.word	0x20000008

08003a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a54:	f7ff fff2 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	0800b254 	.word	0x0800b254

08003a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a7c:	f7ff ffde 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0adb      	lsrs	r3, r3, #11
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	0800b254 	.word	0x0800b254

08003aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <RCC_Delay+0x34>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <RCC_Delay+0x38>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0a5b      	lsrs	r3, r3, #9
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003abc:	bf00      	nop
  }
  while (Delay --);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <RCC_Delay+0x1c>
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	20000008 	.word	0x20000008
 8003ad8:	10624dd3 	.word	0x10624dd3

08003adc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d07d      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a4b      	ldr	r2, [pc, #300]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d118      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fa5a 	bl	8000ff4 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fd fa56 	bl	8000ff4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e06d      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b62:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d027      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b90:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b96:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fa25 	bl	8000ff4 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd fa21 	bl	8000ff4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e036      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd0:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4917      	ldr	r1, [pc, #92]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	490b      	ldr	r1, [pc, #44]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4904      	ldr	r1, [pc, #16]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	42420440 	.word	0x42420440

08003c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e041      	b.n	8003cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc fe82 	bl	8000978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fae8 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d001      	beq.n	8003d00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e032      	b.n	8003d66 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_TIM_Base_Start+0x88>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start+0x48>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start+0x48>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <HAL_TIM_Base_Start+0x8c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start+0x48>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_TIM_Base_Start+0x90>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d010      	beq.n	8003d64 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	e007      	b.n	8003d64 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800

08003d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e03a      	b.n	8003e0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_Base_Start_IT+0x98>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x58>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d009      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x58>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x58>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d111      	bne.n	8003df8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d010      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df6:	e007      	b.n	8003e08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800

08003e20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <HAL_TIM_Base_Stop_IT+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	f240 4344 	movw	r3, #1092	; 0x444
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_Base_Stop_IT+0x48>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0202 	mvn.w	r2, #2
 8003ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b1 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9a4 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9b3 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f987 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f97a 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f989 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f95d 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f950 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f95f 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f933 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f926 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f935 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0201 	mvn.w	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fbae 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa77 	bl	800451a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8f9 	bl	800424a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b20      	cmp	r3, #32
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0220 	mvn.w	r2, #32
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa42 	bl	8004508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b3      	b.n	800420c <HAL_TIM_ConfigClockSource+0x180>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040dc:	d03e      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xd0>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e2:	f200 8087 	bhi.w	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	f000 8085 	beq.w	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d87f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d01a      	beq.n	800412e <HAL_TIM_ConfigClockSource+0xa2>
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d87b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d050      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x116>
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d877      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004104:	2b50      	cmp	r3, #80	; 0x50
 8004106:	d03c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xf6>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d873      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d058      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x136>
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d86f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d064      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d86b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d060      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d867      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d05a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800412c:	e062      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f000 f966 	bl	800440e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004150:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	609a      	str	r2, [r3, #8]
      break;
 800415a:	e04e      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f000 f94f 	bl	800440e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417e:	609a      	str	r2, [r3, #8]
      break;
 8004180:	e03b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 f8c6 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2150      	movs	r1, #80	; 0x50
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f91d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041a0:	e02b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 f8e4 	bl	800437c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2160      	movs	r1, #96	; 0x60
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f90d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041c0:	e01b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 f8a6 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f8fd 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 f8f4 	bl	80043da <TIM_ITRx_SetConfig>
        break;
 80041f2:	e002      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d007      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0xbc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0xc0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <TIM_Base_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <TIM_Base_SetConfig+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a07      	ldr	r2, [pc, #28]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800

08004320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 030a 	bic.w	r3, r3, #10
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 0210 	bic.w	r2, r3, #16
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	431a      	orrs	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e046      	b.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d009      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10c      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e03f      	b.n	80045be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fa48 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f829 	bl	80045c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004602:	f023 030c 	bic.w	r3, r3, #12
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	430b      	orrs	r3, r1
 800460e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <UART_SetConfig+0x114>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7ff fa22 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	e002      	b.n	800463e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004638:	f7ff fa0a 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 800463c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009a      	lsls	r2, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <UART_SetConfig+0x118>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	0119      	lsls	r1, r3, #4
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	fbb2 f2f3 	udiv	r2, r2, r3
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <UART_SetConfig+0x118>)
 8004676:	fba3 0302 	umull	r0, r3, r3, r2
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2064      	movs	r0, #100	; 0x64
 800467e:	fb00 f303 	mul.w	r3, r0, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	3332      	adds	r3, #50	; 0x32
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <UART_SetConfig+0x118>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	4419      	add	r1, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009a      	lsls	r2, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <UART_SetConfig+0x118>)
 80046ae:	fba3 0302 	umull	r0, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2064      	movs	r0, #100	; 0x64
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	3332      	adds	r3, #50	; 0x32
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <UART_SetConfig+0x118>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f003 020f 	and.w	r2, r3, #15
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	440a      	add	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40013800 	.word	0x40013800
 80046e0:	51eb851f 	.word	0x51eb851f

080046e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046e4:	b084      	sub	sp, #16
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	f107 0014 	add.w	r0, r7, #20
 80046f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	b004      	add	sp, #16
 8004702:	4770      	bx	lr

08004704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004714:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004718:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004738:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800473c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	b29b      	uxth	r3, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	b29b      	uxth	r3, r3
 800474e:	4013      	ands	r3, r2
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800477c:	b084      	sub	sp, #16
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	f107 0014 	add.w	r0, r7, #20
 800478a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	b004      	add	sp, #16
 80047ba:	4770      	bx	lr

080047bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047bc:	b480      	push	{r7}
 80047be:	b09b      	sub	sp, #108	; 0x6c
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d81f      	bhi.n	800482e <USB_ActivateEndpoint+0x72>
 80047ee:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <USB_ActivateEndpoint+0x38>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004837 	.word	0x08004837
 8004800:	08004813 	.word	0x08004813
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004804:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800480c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004810:	e012      	b.n	8004838 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004812:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004816:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800481a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800481e:	e00b      	b.n	8004838 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004820:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004828:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800482c:	e004      	b.n	8004838 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004834:	e000      	b.n	8004838 <USB_ActivateEndpoint+0x7c>
      break;
 8004836:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	b29a      	uxth	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800488c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	7b1b      	ldrb	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 8149 	bne.w	8004b3c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8084 	beq.w	80049bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	88db      	ldrh	r3, [r3, #6]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	81fb      	strh	r3, [r7, #14]
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01b      	beq.n	8004938 <USB_ActivateEndpoint+0x17c>
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	81bb      	strh	r3, [r7, #12]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	89bb      	ldrh	r3, [r7, #12]
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d020      	beq.n	8004982 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004956:	813b      	strh	r3, [r7, #8]
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	f083 0320 	eor.w	r3, r3, #32
 800495e:	813b      	strh	r3, [r7, #8]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
 8004980:	e27f      	b.n	8004e82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	897b      	ldrh	r3, [r7, #10]
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
 80049ba:	e262      	b.n	8004e82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	4413      	add	r3, r2
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	011a      	lsls	r2, r3, #4
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	88db      	ldrh	r3, [r3, #6]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	4413      	add	r3, r2
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d112      	bne.n	8004a42 <USB_ActivateEndpoint+0x286>
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e02f      	b.n	8004aa2 <USB_ActivateEndpoint+0x2e6>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b3e      	cmp	r3, #62	; 0x3e
 8004a48:	d813      	bhi.n	8004a72 <USB_ActivateEndpoint+0x2b6>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	663b      	str	r3, [r7, #96]	; 0x60
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <USB_ActivateEndpoint+0x2a8>
 8004a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a60:	3301      	adds	r3, #1
 8004a62:	663b      	str	r3, [r7, #96]	; 0x60
 8004a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	029b      	lsls	r3, r3, #10
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e017      	b.n	8004aa2 <USB_ActivateEndpoint+0x2e6>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <USB_ActivateEndpoint+0x2d0>
 8004a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	029b      	lsls	r3, r3, #10
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	83fb      	strh	r3, [r7, #30]
 8004ab0:	8bfb      	ldrh	r3, [r7, #30]
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <USB_ActivateEndpoint+0x336>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	83bb      	strh	r3, [r7, #28]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8bbb      	ldrh	r3, [r7, #28]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	837b      	strh	r3, [r7, #26]
 8004b0a:	8b7b      	ldrh	r3, [r7, #26]
 8004b0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b10:	837b      	strh	r3, [r7, #26]
 8004b12:	8b7b      	ldrh	r3, [r7, #26]
 8004b14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b18:	837b      	strh	r3, [r7, #26]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	8b7b      	ldrh	r3, [r7, #26]
 8004b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	8013      	strh	r3, [r2, #0]
 8004b3a:	e1a2      	b.n	8004e82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b88:	4413      	add	r3, r2
 8004b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	011a      	lsls	r2, r3, #4
 8004b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	891b      	ldrh	r3, [r3, #8]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	653b      	str	r3, [r7, #80]	; 0x50
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbc:	4413      	add	r3, r2
 8004bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	895b      	ldrh	r3, [r3, #10]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f040 8091 	bne.w	8004d0c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01b      	beq.n	8004c3a <USB_ActivateEndpoint+0x47e>
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01b      	beq.n	8004c8a <USB_ActivateEndpoint+0x4ce>
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ca2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ca4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ca8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004caa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]
 8004d0a:	e0ba      	b.n	8004e82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01d      	beq.n	8004d64 <USB_ActivateEndpoint+0x5a8>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01d      	beq.n	8004dbc <USB_ActivateEndpoint+0x600>
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d024      	beq.n	8004e0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004dde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004de2:	f083 0320 	eor.w	r3, r3, #32
 8004de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
 8004e0c:	e01d      	b.n	8004e4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	376c      	adds	r7, #108	; 0x6c
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b08d      	sub	sp, #52	; 0x34
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	7b1b      	ldrb	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 808e 	bne.w	8004fc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d044      	beq.n	8004f36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	81bb      	strh	r3, [r7, #12]
 8004eba:	89bb      	ldrh	r3, [r7, #12]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <USB_DeactivateEndpoint+0x6c>
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	817b      	strh	r3, [r7, #10]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	813b      	strh	r3, [r7, #8]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
 8004f34:	e192      	b.n	800525c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	827b      	strh	r3, [r7, #18]
 8004f44:	8a7b      	ldrh	r3, [r7, #18]
 8004f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01b      	beq.n	8004f86 <USB_DeactivateEndpoint+0xf6>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	823b      	strh	r3, [r7, #16]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	8a3b      	ldrh	r3, [r7, #16]
 8004f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	81fb      	strh	r3, [r7, #14]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
 8004fbe:	e14d      	b.n	800525c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 80a5 	bne.w	8005114 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	843b      	strh	r3, [r7, #32]
 8004fd8:	8c3b      	ldrh	r3, [r7, #32]
 8004fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01b      	beq.n	800501a <USB_DeactivateEndpoint+0x18a>
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	83fb      	strh	r3, [r7, #30]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	8bfb      	ldrh	r3, [r7, #30]
 8005006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	b29b      	uxth	r3, r3
 8005018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	83bb      	strh	r3, [r7, #28]
 8005028:	8bbb      	ldrh	r3, [r7, #28]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01b      	beq.n	800506a <USB_DeactivateEndpoint+0x1da>
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	837b      	strh	r3, [r7, #26]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8b7b      	ldrh	r3, [r7, #26]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005080:	833b      	strh	r3, [r7, #24]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8b3b      	ldrh	r3, [r7, #24]
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	82fb      	strh	r3, [r7, #22]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	8afb      	ldrh	r3, [r7, #22]
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f0:	82bb      	strh	r3, [r7, #20]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8abb      	ldrh	r3, [r7, #20]
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
 8005112:	e0a3      	b.n	800525c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <USB_DeactivateEndpoint+0x2d4>
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <USB_DeactivateEndpoint+0x324>
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	853b      	strh	r3, [r7, #40]	; 0x28
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005202:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	847b      	strh	r3, [r7, #34]	; 0x22
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3734      	adds	r7, #52	; 0x34
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0cc      	sub	sp, #304	; 0x130
 800526c:	af00      	add	r7, sp, #0
 800526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005276:	6018      	str	r0, [r3, #0]
 8005278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005280:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b01      	cmp	r3, #1
 8005290:	f041 817d 	bne.w	800658e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d908      	bls.n	80052c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80052c0:	e007      	b.n	80052d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	7b1b      	ldrb	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d152      	bne.n	8005388 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	88da      	ldrh	r2, [r3, #6]
 80052fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005304:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005308:	6800      	ldr	r0, [r0, #0]
 800530a:	f001 ff23 	bl	8007154 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005316:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800531a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	4619      	mov	r1, r3
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800533c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005340:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	440a      	add	r2, r1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	011a      	lsls	r2, r3, #4
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4413      	add	r3, r2
 8005364:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	b29a      	uxth	r2, r3
 8005378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	f001 b8b5 	b.w	80064f2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b02      	cmp	r3, #2
 8005396:	f040 84c6 	bne.w	8005d26 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f240 8443 	bls.w	8005c3e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80053b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 823e 	beq.w	80058d6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005462:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005466:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 809a 	bne.w	80055b4 <USB_EPStartXfer+0x34c>
 8005480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800548c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	4619      	mov	r1, r3
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054b2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	440a      	add	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d122      	bne.n	8005532 <USB_EPStartXfer+0x2ca>
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005522:	b29a      	uxth	r2, r3
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e079      	b.n	8005626 <USB_EPStartXfer+0x3be>
 8005532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005536:	2b3e      	cmp	r3, #62	; 0x3e
 8005538:	d81b      	bhi.n	8005572 <USB_EPStartXfer+0x30a>
 800553a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <USB_EPStartXfer+0x2f2>
 8005550:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005554:	3301      	adds	r3, #1
 8005556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800555a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800555e:	b29b      	uxth	r3, r3
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	b29a      	uxth	r2, r3
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e059      	b.n	8005626 <USB_EPStartXfer+0x3be>
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <USB_EPStartXfer+0x32a>
 8005588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800558c:	3b01      	subs	r3, #1
 800558e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005596:	b29b      	uxth	r3, r3
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e038      	b.n	8005626 <USB_EPStartXfer+0x3be>
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d130      	bne.n	8005626 <USB_EPStartXfer+0x3be>
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	440a      	add	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4413      	add	r3, r2
 8005606:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005618:	b29a      	uxth	r2, r3
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	895b      	ldrh	r3, [r3, #10]
 8005632:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6959      	ldr	r1, [r3, #20]
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005646:	b29b      	uxth	r3, r3
 8005648:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800564c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005650:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005654:	6800      	ldr	r0, [r0, #0]
 8005656:	f001 fd7d 	bl	8007154 <USB_WritePMA>
            ep->xfer_buff += len;
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566a:	441a      	add	r2, r3
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d90f      	bls.n	80056b4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	621a      	str	r2, [r3, #32]
 80056b2:	e00e      	b.n	80056d2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 809a 	bne.w	8005818 <USB_EPStartXfer+0x5b0>
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005712:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005716:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	440a      	add	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	011a      	lsls	r2, r3, #4
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800573e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005742:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d122      	bne.n	8005796 <USB_EPStartXfer+0x52e>
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005762:	b29a      	uxth	r2, r3
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e083      	b.n	800589e <USB_EPStartXfer+0x636>
 8005796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d81b      	bhi.n	80057d6 <USB_EPStartXfer+0x56e>
 800579e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <USB_EPStartXfer+0x556>
 80057b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057b8:	3301      	adds	r3, #1
 80057ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e063      	b.n	800589e <USB_EPStartXfer+0x636>
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <USB_EPStartXfer+0x58e>
 80057ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057f0:	3b01      	subs	r3, #1
 80057f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	029b      	lsls	r3, r3, #10
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	e042      	b.n	800589e <USB_EPStartXfer+0x636>
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d13a      	bne.n	800589e <USB_EPStartXfer+0x636>
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005830:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005834:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800585a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	440a      	add	r2, r1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	011a      	lsls	r2, r3, #4
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4413      	add	r3, r2
 800587e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	b29a      	uxth	r2, r3
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	891b      	ldrh	r3, [r3, #8]
 80058aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f001 fc41 	bl	8007154 <USB_WritePMA>
 80058d2:	f000 be0e 	b.w	80064f2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d16d      	bne.n	80059c2 <USB_EPStartXfer+0x75a>
 80058e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005906:	4413      	add	r3, r2
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	011a      	lsls	r2, r3, #4
 8005918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591a:	4413      	add	r3, r2
 800591c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
 8005922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d112      	bne.n	8005950 <USB_EPStartXfer+0x6e8>
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005934:	b29a      	uxth	r2, r3
 8005936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005948:	b29a      	uxth	r2, r3
 800594a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	e063      	b.n	8005a18 <USB_EPStartXfer+0x7b0>
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	2b3e      	cmp	r3, #62	; 0x3e
 8005956:	d817      	bhi.n	8005988 <USB_EPStartXfer+0x720>
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <USB_EPStartXfer+0x710>
 800596e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005972:	3301      	adds	r3, #1
 8005974:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005978:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29a      	uxth	r2, r3
 8005982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e047      	b.n	8005a18 <USB_EPStartXfer+0x7b0>
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <USB_EPStartXfer+0x740>
 800599e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059a2:	3b01      	subs	r3, #1
 80059a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e02a      	b.n	8005a18 <USB_EPStartXfer+0x7b0>
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d122      	bne.n	8005a18 <USB_EPStartXfer+0x7b0>
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	653b      	str	r3, [r7, #80]	; 0x50
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	4413      	add	r3, r2
 80059f4:	653b      	str	r3, [r7, #80]	; 0x50
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	891b      	ldrh	r3, [r3, #8]
 8005a24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6959      	ldr	r1, [r3, #20]
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a3e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a42:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a46:	6800      	ldr	r0, [r0, #0]
 8005a48:	f001 fb84 	bl	8007154 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5c:	441a      	add	r2, r3
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d90f      	bls.n	8005aa6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	621a      	str	r2, [r3, #32]
 8005aa4:	e00e      	b.n	8005ac4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d16d      	bne.n	8005bbc <USB_EPStartXfer+0x954>
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	4413      	add	r3, r2
 8005b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d112      	bne.n	8005b4a <USB_EPStartXfer+0x8e2>
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e05d      	b.n	8005c06 <USB_EPStartXfer+0x99e>
 8005b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b50:	d817      	bhi.n	8005b82 <USB_EPStartXfer+0x91a>
 8005b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <USB_EPStartXfer+0x90a>
 8005b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	029b      	lsls	r3, r3, #10
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e041      	b.n	8005c06 <USB_EPStartXfer+0x99e>
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <USB_EPStartXfer+0x93a>
 8005b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e024      	b.n	8005c06 <USB_EPStartXfer+0x99e>
 8005bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11c      	bne.n	8005c06 <USB_EPStartXfer+0x99e>
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be0:	4413      	add	r3, r2
 8005be2:	643b      	str	r3, [r7, #64]	; 0x40
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011a      	lsls	r2, r3, #4
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	895b      	ldrh	r3, [r3, #10]
 8005c12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6959      	ldr	r1, [r3, #20]
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c30:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c34:	6800      	ldr	r0, [r0, #0]
 8005c36:	f001 fa8d 	bl	8007154 <USB_WritePMA>
 8005c3a:	f000 bc5a 	b.w	80064f2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	441a      	add	r2, r3
 8005c92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cca:	4413      	add	r3, r2
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	891b      	ldrh	r3, [r3, #8]
 8005cfc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6959      	ldr	r1, [r3, #20]
 8005d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d16:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d1a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	f001 fa18 	bl	8007154 <USB_WritePMA>
 8005d24:	e3e5      	b.n	80064f2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 81bc 	beq.w	8006140 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d16d      	bne.n	8005ec2 <USB_EPStartXfer+0xc5a>
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e06:	4413      	add	r3, r2
 8005e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e20:	677b      	str	r3, [r7, #116]	; 0x74
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d112      	bne.n	8005e50 <USB_EPStartXfer+0xbe8>
 8005e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e060      	b.n	8005f12 <USB_EPStartXfer+0xcaa>
 8005e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e54:	2b3e      	cmp	r3, #62	; 0x3e
 8005e56:	d817      	bhi.n	8005e88 <USB_EPStartXfer+0xc20>
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <USB_EPStartXfer+0xc10>
 8005e6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e72:	3301      	adds	r3, #1
 8005e74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e044      	b.n	8005f12 <USB_EPStartXfer+0xcaa>
 8005e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0xc40>
 8005e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e027      	b.n	8005f12 <USB_EPStartXfer+0xcaa>
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d11f      	bne.n	8005f12 <USB_EPStartXfer+0xcaa>
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ee8:	4413      	add	r3, r2
 8005eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	011a      	lsls	r2, r3, #4
 8005efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f00:	4413      	add	r3, r2
 8005f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	895b      	ldrh	r3, [r3, #10]
 8005f1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6959      	ldr	r1, [r3, #20]
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f40:	6800      	ldr	r0, [r0, #0]
 8005f42:	f001 f907 	bl	8007154 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f56:	441a      	add	r2, r3
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d90f      	bls.n	8005fa0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	621a      	str	r2, [r3, #32]
 8005f9e:	e00e      	b.n	8005fbe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 8295 	beq.w	80064f2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d16d      	bne.n	80060b4 <USB_EPStartXfer+0xe4c>
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ff8:	4413      	add	r3, r2
 8005ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600c:	4413      	add	r3, r2
 800600e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006012:	667b      	str	r3, [r7, #100]	; 0x64
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d112      	bne.n	8006042 <USB_EPStartXfer+0xdda>
 800601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006026:	b29a      	uxth	r2, r3
 8006028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e063      	b.n	800610a <USB_EPStartXfer+0xea2>
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d817      	bhi.n	800607a <USB_EPStartXfer+0xe12>
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0xe02>
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29a      	uxth	r2, r3
 8006074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e047      	b.n	800610a <USB_EPStartXfer+0xea2>
 800607a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USB_EPStartXfer+0xe32>
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006094:	3b01      	subs	r3, #1
 8006096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e02a      	b.n	800610a <USB_EPStartXfer+0xea2>
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d122      	bne.n	800610a <USB_EPStartXfer+0xea2>
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	673b      	str	r3, [r7, #112]	; 0x70
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e4:	4413      	add	r3, r2
 80060e6:	673b      	str	r3, [r7, #112]	; 0x70
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	011a      	lsls	r2, r3, #4
 80060f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006104:	b29a      	uxth	r2, r3
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006108:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	891b      	ldrh	r3, [r3, #8]
 8006116:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6959      	ldr	r1, [r3, #20]
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	b29b      	uxth	r3, r3
 800612c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006130:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006134:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006138:	6800      	ldr	r0, [r0, #0]
 800613a:	f001 f80b 	bl	8007154 <USB_WritePMA>
 800613e:	e1d8      	b.n	80064f2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d178      	bne.n	8006242 <USB_EPStartXfer+0xfda>
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006174:	4413      	add	r3, r2
 8006176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	011a      	lsls	r2, r3, #4
 8006188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800618c:	4413      	add	r3, r2
 800618e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006192:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d116      	bne.n	80061cc <USB_EPStartXfer+0xf64>
 800619e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e06b      	b.n	80062a4 <USB_EPStartXfer+0x103c>
 80061cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d0:	2b3e      	cmp	r3, #62	; 0x3e
 80061d2:	d818      	bhi.n	8006206 <USB_EPStartXfer+0xf9e>
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <USB_EPStartXfer+0xf8c>
 80061ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ee:	3301      	adds	r3, #1
 80061f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e04e      	b.n	80062a4 <USB_EPStartXfer+0x103c>
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <USB_EPStartXfer+0xfbe>
 800621c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006220:	3b01      	subs	r3, #1
 8006222:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	e030      	b.n	80062a4 <USB_EPStartXfer+0x103c>
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d128      	bne.n	80062a4 <USB_EPStartXfer+0x103c>
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006276:	4413      	add	r3, r2
 8006278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800627c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800628e:	4413      	add	r3, r2
 8006290:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006294:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	891b      	ldrh	r3, [r3, #8]
 80062b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6959      	ldr	r1, [r3, #20]
 80062c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	f000 ff3e 	bl	8007154 <USB_WritePMA>
          ep->xfer_buff += len;
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	441a      	add	r2, r3
 80062ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	d90f      	bls.n	8006332 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	621a      	str	r2, [r3, #32]
 8006330:	e00e      	b.n	8006350 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2200      	movs	r2, #0
 800634e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80cc 	beq.w	80064f2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800635a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d178      	bne.n	800646a <USB_EPStartXfer+0x1202>
 8006378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006394:	b29b      	uxth	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800639c:	4413      	add	r3, r2
 800639e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <USB_EPStartXfer+0x118c>
 80063c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e064      	b.n	80064be <USB_EPStartXfer+0x1256>
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	2b3e      	cmp	r3, #62	; 0x3e
 80063fa:	d818      	bhi.n	800642e <USB_EPStartXfer+0x11c6>
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <USB_EPStartXfer+0x11b4>
 8006412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006416:	3301      	adds	r3, #1
 8006418:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800641c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e047      	b.n	80064be <USB_EPStartXfer+0x1256>
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USB_EPStartXfer+0x11e6>
 8006444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006448:	3b01      	subs	r3, #1
 800644a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	b29b      	uxth	r3, r3
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e029      	b.n	80064be <USB_EPStartXfer+0x1256>
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d121      	bne.n	80064be <USB_EPStartXfer+0x1256>
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006490:	4413      	add	r3, r2
 8006492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	895b      	ldrh	r3, [r3, #10]
 80064ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f000 fe31 	bl	8007154 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006514:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006520:	8013      	strh	r3, [r2, #0]
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800652a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800652e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006532:	8812      	ldrh	r2, [r2, #0]
 8006534:	f082 0210 	eor.w	r2, r2, #16
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006542:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006546:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800654a:	8812      	ldrh	r2, [r2, #0]
 800654c:	f082 0220 	eor.w	r2, r2, #32
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006570:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006586:	b29b      	uxth	r3, r3
 8006588:	8013      	strh	r3, [r2, #0]
 800658a:	f000 bc9f 	b.w	8006ecc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	7b1b      	ldrb	r3, [r3, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 80ae 	bne.w	80066fc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d917      	bls.n	80065ec <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80065cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065dc:	1ad2      	subs	r2, r2, r3
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	619a      	str	r2, [r3, #24]
 80065ea:	e00e      	b.n	800660a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80065ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800662e:	4413      	add	r3, r2
 8006630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006646:	4413      	add	r3, r2
 8006648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d116      	bne.n	8006686 <USB_EPStartXfer+0x141e>
 8006658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006664:	b29a      	uxth	r2, r3
 8006666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667c:	b29a      	uxth	r2, r3
 800667e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e3e8      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
 8006686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668a:	2b3e      	cmp	r3, #62	; 0x3e
 800668c:	d818      	bhi.n	80066c0 <USB_EPStartXfer+0x1458>
 800668e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <USB_EPStartXfer+0x1446>
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e3cb      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <USB_EPStartXfer+0x1478>
 80066d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066da:	3b01      	subs	r3, #1
 80066dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e3ad      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	78db      	ldrb	r3, [r3, #3]
 8006708:	2b02      	cmp	r3, #2
 800670a:	f040 8200 	bne.w	8006b0e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 8091 	bne.w	8006842 <USB_EPStartXfer+0x15da>
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006744:	4413      	add	r3, r2
 8006746:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	011a      	lsls	r2, r3, #4
 8006758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800675c:	4413      	add	r3, r2
 800675e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d116      	bne.n	80067a4 <USB_EPStartXfer+0x153c>
 8006776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e083      	b.n	80068ac <USB_EPStartXfer+0x1644>
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b3e      	cmp	r3, #62	; 0x3e
 80067b2:	d820      	bhi.n	80067f6 <USB_EPStartXfer+0x158e>
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <USB_EPStartXfer+0x157c>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	3301      	adds	r3, #1
 80067e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e05a      	b.n	80068ac <USB_EPStartXfer+0x1644>
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <USB_EPStartXfer+0x15be>
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006820:	3b01      	subs	r3, #1
 8006822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682a:	b29b      	uxth	r3, r3
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e034      	b.n	80068ac <USB_EPStartXfer+0x1644>
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d12c      	bne.n	80068ac <USB_EPStartXfer+0x1644>
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006876:	4413      	add	r3, r2
 8006878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	011a      	lsls	r2, r3, #4
 800688a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688e:	4413      	add	r3, r2
 8006890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8091 	bne.w	80069ee <USB_EPStartXfer+0x1786>
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068f0:	4413      	add	r3, r2
 80068f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	011a      	lsls	r2, r3, #4
 8006904:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006908:	4413      	add	r3, r2
 800690a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800690e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d116      	bne.n	8006950 <USB_EPStartXfer+0x16e8>
 8006922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e07c      	b.n	8006a4a <USB_EPStartXfer+0x17e2>
 8006950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b3e      	cmp	r3, #62	; 0x3e
 800695e:	d820      	bhi.n	80069a2 <USB_EPStartXfer+0x173a>
 8006960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <USB_EPStartXfer+0x1728>
 8006986:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800698a:	3301      	adds	r3, #1
 800698c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006990:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006994:	b29b      	uxth	r3, r3
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	b29a      	uxth	r2, r3
 800699a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e053      	b.n	8006a4a <USB_EPStartXfer+0x17e2>
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USB_EPStartXfer+0x176a>
 80069c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e02d      	b.n	8006a4a <USB_EPStartXfer+0x17e2>
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d125      	bne.n	8006a4a <USB_EPStartXfer+0x17e2>
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a14:	4413      	add	r3, r2
 8006a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	011a      	lsls	r2, r3, #4
 8006a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 81fe 	beq.w	8006e58 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a7c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <USB_EPStartXfer+0x182c>
 8006a88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10d      	bne.n	8006ab0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 81db 	bne.w	8006e58 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aa2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 81d4 	bne.w	8006e58 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]
 8006b0c:	e1a4      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	78db      	ldrb	r3, [r3, #3]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	f040 819a 	bne.w	8006e54 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d917      	bls.n	8006b6c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	619a      	str	r2, [r3, #24]
 8006b6a:	e00e      	b.n	8006b8a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d178      	bne.n	8006c8c <USB_EPStartXfer+0x1a24>
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d116      	bne.n	8006c16 <USB_EPStartXfer+0x19ae>
 8006be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	e06b      	b.n	8006cee <USB_EPStartXfer+0x1a86>
 8006c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c1c:	d818      	bhi.n	8006c50 <USB_EPStartXfer+0x19e8>
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <USB_EPStartXfer+0x19d6>
 8006c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c38:	3301      	adds	r3, #1
 8006c3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	029b      	lsls	r3, r3, #10
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	e04e      	b.n	8006cee <USB_EPStartXfer+0x1a86>
 8006c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <USB_EPStartXfer+0x1a08>
 8006c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e030      	b.n	8006cee <USB_EPStartXfer+0x1a86>
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d128      	bne.n	8006cee <USB_EPStartXfer+0x1a86>
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	011a      	lsls	r2, r3, #4
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d178      	bne.n	8006dfe <USB_EPStartXfer+0x1b96>
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	4413      	add	r3, r2
 8006d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d116      	bne.n	8006d88 <USB_EPStartXfer+0x1b20>
 8006d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e067      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
 8006d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d8e:	d818      	bhi.n	8006dc2 <USB_EPStartXfer+0x1b5a>
 8006d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <USB_EPStartXfer+0x1b48>
 8006da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006daa:	3301      	adds	r3, #1
 8006dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006db0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e04a      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <USB_EPStartXfer+0x1b7a>
 8006dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	029b      	lsls	r3, r3, #10
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e02c      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
 8006dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d124      	bne.n	8006e58 <USB_EPStartXfer+0x1bf0>
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	4413      	add	r3, r2
 8006e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	e001      	b.n	8006e58 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e03a      	b.n	8006ece <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e82:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e8e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d020      	beq.n	8006f2c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f00:	81bb      	strh	r3, [r7, #12]
 8006f02:	89bb      	ldrh	r3, [r7, #12]
 8006f04:	f083 0310 	eor.w	r3, r3, #16
 8006f08:	81bb      	strh	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	89bb      	ldrh	r3, [r7, #12]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e01f      	b.n	8006f6c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	81fb      	strh	r3, [r7, #14]
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f4a:	81fb      	strh	r3, [r7, #14]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	89fb      	ldrh	r3, [r7, #14]
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	7b1b      	ldrb	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 809d 	bne.w	80070c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d04c      	beq.n	800702e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	823b      	strh	r3, [r7, #16]
 8006fa2:	8a3b      	ldrh	r3, [r7, #16]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01b      	beq.n	8006fe4 <USB_EPClearStall+0x6c>
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	81fb      	strh	r3, [r7, #14]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	89fb      	ldrh	r3, [r7, #14]
 8006fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	78db      	ldrb	r3, [r3, #3]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d06c      	beq.n	80070c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007002:	81bb      	strh	r3, [r7, #12]
 8007004:	89bb      	ldrh	r3, [r7, #12]
 8007006:	f083 0320 	eor.w	r3, r3, #32
 800700a:	81bb      	strh	r3, [r7, #12]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	89bb      	ldrh	r3, [r7, #12]
 8007018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]
 800702c:	e04b      	b.n	80070c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	82fb      	strh	r3, [r7, #22]
 800703c:	8afb      	ldrh	r3, [r7, #22]
 800703e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <USB_EPClearStall+0x106>
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	82bb      	strh	r3, [r7, #20]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	8abb      	ldrh	r3, [r7, #20]
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	827b      	strh	r3, [r7, #18]
 8007096:	8a7b      	ldrh	r3, [r7, #18]
 8007098:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800709c:	827b      	strh	r3, [r7, #18]
 800709e:	8a7b      	ldrh	r3, [r7, #18]
 80070a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a4:	827b      	strh	r3, [r7, #18]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	8a7b      	ldrh	r3, [r7, #18]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800712e:	b29b      	uxth	r3, r3
 8007130:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007154:	b480      	push	{r7}
 8007156:	b08d      	sub	sp, #52	; 0x34
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	460b      	mov	r3, r1
 8007164:	80fb      	strh	r3, [r7, #6]
 8007166:	4613      	mov	r3, r2
 8007168:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800716a:	88bb      	ldrh	r3, [r7, #4]
 800716c:	3301      	adds	r3, #1
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	005a      	lsls	r2, r3, #1
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718c:	e01e      	b.n	80071cc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	3301      	adds	r3, #1
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	3302      	adds	r3, #2
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	3302      	adds	r3, #2
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	3b01      	subs	r3, #1
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1dd      	bne.n	800718e <USB_WritePMA+0x3a>
  }
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	3734      	adds	r7, #52	; 0x34
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071de:	b480      	push	{r7}
 80071e0:	b08b      	sub	sp, #44	; 0x2c
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	4611      	mov	r1, r2
 80071ea:	461a      	mov	r2, r3
 80071ec:	460b      	mov	r3, r1
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	4613      	mov	r3, r2
 80071f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071f4:	88bb      	ldrh	r3, [r7, #4]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	005a      	lsls	r2, r3, #1
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007210:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
 8007216:	e01b      	b.n	8007250 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	3302      	adds	r3, #2
 8007224:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3301      	adds	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	b2da      	uxtb	r2, r3
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	3302      	adds	r3, #2
 8007248:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	3b01      	subs	r3, #1
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e0      	bne.n	8007218 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007256:	88bb      	ldrh	r3, [r7, #4]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	701a      	strb	r2, [r3, #0]
  }
}
 8007272:	bf00      	nop
 8007274:	372c      	adds	r7, #44	; 0x2c
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	7c1b      	ldrb	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d115      	bne.n	80072c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007298:	2202      	movs	r2, #2
 800729a:	2181      	movs	r1, #129	; 0x81
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fe98 	bl	8008fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ac:	2202      	movs	r2, #2
 80072ae:	2101      	movs	r1, #1
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fe8e 	bl	8008fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80072be:	e012      	b.n	80072e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072c0:	2340      	movs	r3, #64	; 0x40
 80072c2:	2202      	movs	r2, #2
 80072c4:	2181      	movs	r1, #129	; 0x81
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fe83 	bl	8008fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072d2:	2340      	movs	r3, #64	; 0x40
 80072d4:	2202      	movs	r2, #2
 80072d6:	2101      	movs	r1, #1
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fe7a 	bl	8008fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072e6:	2308      	movs	r3, #8
 80072e8:	2203      	movs	r2, #3
 80072ea:	2182      	movs	r1, #130	; 0x82
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fe70 	bl	8008fd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072fc:	f001 ff90 	bl	8009220 <USBD_static_malloc>
 8007300:	4602      	mov	r2, r0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007312:	2301      	movs	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
 8007316:	e026      	b.n	8007366 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c1b      	ldrb	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734c:	2101      	movs	r1, #1
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 ff30 	bl	80091b4 <USBD_LL_PrepareReceive>
 8007354:	e007      	b.n	8007366 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800735c:	2340      	movs	r3, #64	; 0x40
 800735e:	2101      	movs	r1, #1
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 ff27 	bl	80091b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007380:	2181      	movs	r1, #129	; 0x81
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fe4b 	bl	800901e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800738e:	2101      	movs	r1, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe44 	bl	800901e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800739e:	2182      	movs	r1, #130	; 0x82
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 fe3c 	bl	800901e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00e      	beq.n	80073d4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 ff36 	bl	8009238 <USBD_static_free>
    pdev->pClassData = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007404:	2b00      	cmp	r3, #0
 8007406:	d039      	beq.n	800747c <USBD_CDC_Setup+0x9e>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d17f      	bne.n	800750c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	88db      	ldrh	r3, [r3, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d029      	beq.n	8007468 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	b25b      	sxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	da11      	bge.n	8007442 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800742a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	88d2      	ldrh	r2, [r2, #6]
 8007430:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007432:	6939      	ldr	r1, [r7, #16]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	461a      	mov	r2, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fa09 	bl	8008852 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007440:	e06b      	b.n	800751a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785a      	ldrb	r2, [r3, #1]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	88db      	ldrh	r3, [r3, #6]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007458:	6939      	ldr	r1, [r7, #16]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88db      	ldrh	r3, [r3, #6]
 800745e:	461a      	mov	r2, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fa24 	bl	80088ae <USBD_CtlPrepareRx>
      break;
 8007466:	e058      	b.n	800751a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	7850      	ldrb	r0, [r2, #1]
 8007474:	2200      	movs	r2, #0
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	4798      	blx	r3
      break;
 800747a:	e04e      	b.n	800751a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b0b      	cmp	r3, #11
 8007482:	d02e      	beq.n	80074e2 <USBD_CDC_Setup+0x104>
 8007484:	2b0b      	cmp	r3, #11
 8007486:	dc38      	bgt.n	80074fa <USBD_CDC_Setup+0x11c>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <USBD_CDC_Setup+0xb4>
 800748c:	2b0a      	cmp	r3, #10
 800748e:	d014      	beq.n	80074ba <USBD_CDC_Setup+0xdc>
 8007490:	e033      	b.n	80074fa <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	2b03      	cmp	r3, #3
 800749a:	d107      	bne.n	80074ac <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	2202      	movs	r2, #2
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f9d4 	bl	8008852 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074aa:	e02e      	b.n	800750a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f965 	bl	800877e <USBD_CtlError>
            ret = USBD_FAIL;
 80074b4:	2302      	movs	r3, #2
 80074b6:	75fb      	strb	r3, [r7, #23]
          break;
 80074b8:	e027      	b.n	800750a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d107      	bne.n	80074d4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80074c4:	f107 030f 	add.w	r3, r7, #15
 80074c8:	2201      	movs	r2, #1
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 f9c0 	bl	8008852 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074d2:	e01a      	b.n	800750a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 f951 	bl	800877e <USBD_CtlError>
            ret = USBD_FAIL;
 80074dc:	2302      	movs	r3, #2
 80074de:	75fb      	strb	r3, [r7, #23]
          break;
 80074e0:	e013      	b.n	800750a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d00d      	beq.n	8007508 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 f945 	bl	800877e <USBD_CtlError>
            ret = USBD_FAIL;
 80074f4:	2302      	movs	r3, #2
 80074f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074f8:	e006      	b.n	8007508 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f93e 	bl	800877e <USBD_CtlError>
          ret = USBD_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	75fb      	strb	r3, [r7, #23]
          break;
 8007506:	e000      	b.n	800750a <USBD_CDC_Setup+0x12c>
          break;
 8007508:	bf00      	nop
      }
      break;
 800750a:	e006      	b.n	800751a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f935 	bl	800877e <USBD_CtlError>
      ret = USBD_FAIL;
 8007514:	2302      	movs	r3, #2
 8007516:	75fb      	strb	r3, [r7, #23]
      break;
 8007518:	bf00      	nop
  }

  return ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800753e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d03a      	beq.n	80075c0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	331c      	adds	r3, #28
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d029      	beq.n	80075b4 <USBD_CDC_DataIn+0x90>
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	331c      	adds	r3, #28
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	78f9      	ldrb	r1, [r7, #3]
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	460b      	mov	r3, r1
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4403      	add	r3, r0
 8007580:	3338      	adds	r3, #56	; 0x38
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	fbb2 f1f3 	udiv	r1, r2, r3
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d110      	bne.n	80075b4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	331c      	adds	r3, #28
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075a6:	78f9      	ldrb	r1, [r7, #3]
 80075a8:	2300      	movs	r3, #0
 80075aa:	2200      	movs	r2, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fdde 	bl	800916e <USBD_LL_Transmit>
 80075b2:	e003      	b.n	80075bc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fe09 	bl	80091fa <USBD_LL_GetRxDataSize>
 80075e8:	4602      	mov	r2, r0
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800760e:	4611      	mov	r1, r2
 8007610:	4798      	blx	r3

    return USBD_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e000      	b.n	8007618 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007616:	2302      	movs	r3, #2
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <USBD_CDC_EP0_RxReady+0x46>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007640:	2bff      	cmp	r3, #255	; 0xff
 8007642:	d010      	beq.n	8007666 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007652:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800765a:	b292      	uxth	r2, r2
 800765c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	22ff      	movs	r2, #255	; 0xff
 8007662:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2243      	movs	r2, #67	; 0x43
 800767c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	; (800768c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	2000009c 	.word	0x2000009c

08007690 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2243      	movs	r2, #67	; 0x43
 800769c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000058 	.word	0x20000058

080076b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2243      	movs	r2, #67	; 0x43
 80076bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	200000e0 	.word	0x200000e0

080076d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	220a      	movs	r2, #10
 80076dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80076de:	4b03      	ldr	r3, [pc, #12]	; (80076ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000014 	.word	0x20000014

080076f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80076fa:	2302      	movs	r3, #2
 80076fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007782:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d01c      	beq.n	80077c8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007794:	2b00      	cmp	r3, #0
 8007796:	d115      	bne.n	80077c4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2181      	movs	r1, #129	; 0x81
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fcd7 	bl	800916e <USBD_LL_Transmit>

      return USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e002      	b.n	80077ca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077fe:	2101      	movs	r1, #1
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fcd7 	bl	80091b4 <USBD_LL_PrepareReceive>
 8007806:	e007      	b.n	8007818 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800780e:	2340      	movs	r3, #64	; 0x40
 8007810:	2101      	movs	r1, #1
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fcce 	bl	80091b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	4613      	mov	r3, r2
 8007832:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	e01a      	b.n	8007874 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	79fa      	ldrb	r2, [r7, #7]
 800786a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f001 fb3b 	bl	8008ee8 <USBD_LL_Init>

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
 800789c:	e001      	b.n	80078a2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800789e:	2302      	movs	r3, #2
 80078a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fb70 	bl	8008f9c <USBD_LL_Start>

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00c      	beq.n	800790e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	4611      	mov	r1, r2
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	4611      	mov	r1, r2
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fed8 	bl	8008706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2b02      	cmp	r3, #2
 8007978:	d016      	beq.n	80079a8 <USBD_LL_SetupStage+0x6a>
 800797a:	2b02      	cmp	r3, #2
 800797c:	d81c      	bhi.n	80079b8 <USBD_LL_SetupStage+0x7a>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <USBD_LL_SetupStage+0x4a>
 8007982:	2b01      	cmp	r3, #1
 8007984:	d008      	beq.n	8007998 <USBD_LL_SetupStage+0x5a>
 8007986:	e017      	b.n	80079b8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9cb 	bl	8007d2c <USBD_StdDevReq>
      break;
 8007996:	e01a      	b.n	80079ce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa2d 	bl	8007e00 <USBD_StdItfReq>
      break;
 80079a6:	e012      	b.n	80079ce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa6d 	bl	8007e90 <USBD_StdEPReq>
      break;
 80079b6:	e00a      	b.n	80079ce <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fb48 	bl	800905c <USBD_LL_StallEP>
      break;
 80079cc:	bf00      	nop
  }

  return USBD_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	460b      	mov	r3, r1
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d14b      	bne.n	8007a84 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d134      	bne.n	8007a68 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d919      	bls.n	8007a3e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d203      	bcs.n	8007a2c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	e002      	b.n	8007a32 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 ff57 	bl	80088ea <USBD_CtlContinueRx>
 8007a3c:	e038      	b.n	8007ab0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d105      	bne.n	8007a60 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 ff54 	bl	800890e <USBD_CtlSendStatus>
 8007a66:	e023      	b.n	8007ab0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d11e      	bne.n	8007ab0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f001 faed 	bl	800905c <USBD_LL_StallEP>
 8007a82:	e015      	b.n	8007ab0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00d      	beq.n	8007aac <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d108      	bne.n	8007aac <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	7afa      	ldrb	r2, [r7, #11]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	4798      	blx	r3
 8007aaa:	e001      	b.n	8007ab0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007aac:	2302      	movs	r3, #2
 8007aae:	e000      	b.n	8007ab2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d17f      	bne.n	8007bce <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d15c      	bne.n	8007b98 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d915      	bls.n	8007b16 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fec1 	bl	800888a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 fb50 	bl	80091b4 <USBD_LL_PrepareReceive>
 8007b14:	e04e      	b.n	8007bb4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	6912      	ldr	r2, [r2, #16]
 8007b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b22:	fb01 f202 	mul.w	r2, r1, r2
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11c      	bne.n	8007b66 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d316      	bcc.n	8007b66 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d20f      	bcs.n	8007b66 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b46:	2200      	movs	r2, #0
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fe9d 	bl	800888a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 fb28 	bl	80091b4 <USBD_LL_PrepareReceive>
 8007b64:	e026      	b.n	8007bb4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d105      	bne.n	8007b88 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b88:	2180      	movs	r1, #128	; 0x80
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f001 fa66 	bl	800905c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fecf 	bl	8008934 <USBD_CtlReceiveStatus>
 8007b96:	e00d      	b.n	8007bb4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d004      	beq.n	8007bac <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f001 fa54 	bl	800905c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d11d      	bne.n	8007bfa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff fe81 	bl	80078c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bcc:	e015      	b.n	8007bfa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d108      	bne.n	8007bf6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	7afa      	ldrb	r2, [r7, #11]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	4798      	blx	r3
 8007bf4:	e001      	b.n	8007bfa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e000      	b.n	8007bfc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f9dd 	bl	8008fd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2240      	movs	r2, #64	; 0x40
 8007c24:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2180      	movs	r1, #128	; 0x80
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f9cf 	bl	8008fd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	4611      	mov	r1, r2
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
  }

  return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr

08007ccc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d105      	bne.n	8007cea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d10b      	bne.n	8007d20 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d005      	beq.n	8007d52 <USBD_StdDevReq+0x26>
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d84f      	bhi.n	8007dea <USBD_StdDevReq+0xbe>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <USBD_StdDevReq+0x36>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d14b      	bne.n	8007dea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      break;
 8007d60:	e048      	b.n	8007df4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b09      	cmp	r3, #9
 8007d68:	d839      	bhi.n	8007dde <USBD_StdDevReq+0xb2>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <USBD_StdDevReq+0x44>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007dc1 	.word	0x08007dc1
 8007d74:	08007dd5 	.word	0x08007dd5
 8007d78:	08007ddf 	.word	0x08007ddf
 8007d7c:	08007dcb 	.word	0x08007dcb
 8007d80:	08007ddf 	.word	0x08007ddf
 8007d84:	08007da3 	.word	0x08007da3
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007ddf 	.word	0x08007ddf
 8007d90:	08007db7 	.word	0x08007db7
 8007d94:	08007dad 	.word	0x08007dad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9dc 	bl	8008158 <USBD_GetDescriptor>
          break;
 8007da0:	e022      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fb3f 	bl	8008428 <USBD_SetAddress>
          break;
 8007daa:	e01d      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb7e 	bl	80084b0 <USBD_SetConfig>
          break;
 8007db4:	e018      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc07 	bl	80085cc <USBD_GetConfig>
          break;
 8007dbe:	e013      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc37 	bl	8008636 <USBD_GetStatus>
          break;
 8007dc8:	e00e      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc65 	bl	800869c <USBD_SetFeature>
          break;
 8007dd2:	e009      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fc74 	bl	80086c4 <USBD_ClrFeature>
          break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fccc 	bl	800877e <USBD_CtlError>
          break;
 8007de6:	bf00      	nop
      }
      break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcc6 	bl	800877e <USBD_CtlError>
      break;
 8007df2:	bf00      	nop
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop

08007e00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d005      	beq.n	8007e26 <USBD_StdItfReq+0x26>
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d82e      	bhi.n	8007e7c <USBD_StdItfReq+0x7c>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBD_StdItfReq+0x26>
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d12a      	bne.n	8007e7c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d81d      	bhi.n	8007e6e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	889b      	ldrh	r3, [r3, #4]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d813      	bhi.n	8007e64 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88db      	ldrh	r3, [r3, #6]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d110      	bne.n	8007e78 <USBD_StdItfReq+0x78>
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10d      	bne.n	8007e78 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fd56 	bl	800890e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e62:	e009      	b.n	8007e78 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fc89 	bl	800877e <USBD_CtlError>
          break;
 8007e6c:	e004      	b.n	8007e78 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc84 	bl	800877e <USBD_CtlError>
          break;
 8007e76:	e000      	b.n	8007e7a <USBD_StdItfReq+0x7a>
          break;
 8007e78:	bf00      	nop
      }
      break;
 8007e7a:	e004      	b.n	8007e86 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc7d 	bl	800877e <USBD_CtlError>
      break;
 8007e84:	bf00      	nop
  }

  return USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	889b      	ldrh	r3, [r3, #4]
 8007ea2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	d007      	beq.n	8007ec0 <USBD_StdEPReq+0x30>
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	f200 8146 	bhi.w	8008142 <USBD_StdEPReq+0x2b2>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <USBD_StdEPReq+0x40>
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	f040 8141 	bne.w	8008142 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
      break;
 8007ece:	e13d      	b.n	800814c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d10a      	bne.n	8007ef2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	e12d      	b.n	800814e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d007      	beq.n	8007f0a <USBD_StdEPReq+0x7a>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f300 811b 	bgt.w	8008136 <USBD_StdEPReq+0x2a6>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d072      	beq.n	8007fea <USBD_StdEPReq+0x15a>
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d03a      	beq.n	8007f7e <USBD_StdEPReq+0xee>
 8007f08:	e115      	b.n	8008136 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d002      	beq.n	8007f1a <USBD_StdEPReq+0x8a>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d015      	beq.n	8007f44 <USBD_StdEPReq+0xb4>
 8007f18:	e02b      	b.n	8007f72 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00c      	beq.n	8007f3a <USBD_StdEPReq+0xaa>
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b80      	cmp	r3, #128	; 0x80
 8007f24:	d009      	beq.n	8007f3a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f896 	bl	800905c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f30:	2180      	movs	r1, #128	; 0x80
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f892 	bl	800905c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f38:	e020      	b.n	8007f7c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fc1e 	bl	800877e <USBD_CtlError>
              break;
 8007f42:	e01b      	b.n	8007f7c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	885b      	ldrh	r3, [r3, #2]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <USBD_StdEPReq+0xda>
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b80      	cmp	r3, #128	; 0x80
 8007f56:	d008      	beq.n	8007f6a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f879 	bl	800905c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fccf 	bl	800890e <USBD_CtlSendStatus>

              break;
 8007f70:	e004      	b.n	8007f7c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc02 	bl	800877e <USBD_CtlError>
              break;
 8007f7a:	bf00      	nop
          }
          break;
 8007f7c:	e0e0      	b.n	8008140 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_StdEPReq+0xfe>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d015      	beq.n	8007fb8 <USBD_StdEPReq+0x128>
 8007f8c:	e026      	b.n	8007fdc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00c      	beq.n	8007fae <USBD_StdEPReq+0x11e>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b80      	cmp	r3, #128	; 0x80
 8007f98:	d009      	beq.n	8007fae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f85c 	bl	800905c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 f858 	bl	800905c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fac:	e01c      	b.n	8007fe8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fbe4 	bl	800877e <USBD_CtlError>
              break;
 8007fb6:	e017      	b.n	8007fe8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	885b      	ldrh	r3, [r3, #2]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d112      	bne.n	8007fe6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f863 	bl	800909a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc9a 	bl	800890e <USBD_CtlSendStatus>
              }
              break;
 8007fda:	e004      	b.n	8007fe6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fbcd 	bl	800877e <USBD_CtlError>
              break;
 8007fe4:	e000      	b.n	8007fe8 <USBD_StdEPReq+0x158>
              break;
 8007fe6:	bf00      	nop
          }
          break;
 8007fe8:	e0aa      	b.n	8008140 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d002      	beq.n	8007ffa <USBD_StdEPReq+0x16a>
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d032      	beq.n	800805e <USBD_StdEPReq+0x1ce>
 8007ff8:	e097      	b.n	800812a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <USBD_StdEPReq+0x180>
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d004      	beq.n	8008010 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fbb8 	bl	800877e <USBD_CtlError>
                break;
 800800e:	e091      	b.n	8008134 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da0b      	bge.n	8008030 <USBD_StdEPReq+0x1a0>
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	3310      	adds	r3, #16
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	3304      	adds	r3, #4
 800802e:	e00b      	b.n	8008048 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4413      	add	r3, r2
 8008046:	3304      	adds	r3, #4
 8008048:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fbfb 	bl	8008852 <USBD_CtlSendData>
              break;
 800805c:	e06a      	b.n	8008134 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800805e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	da11      	bge.n	800808a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	f003 020f 	and.w	r2, r3, #15
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	3318      	adds	r3, #24
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d117      	bne.n	80080b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fb7b 	bl	800877e <USBD_CtlError>
                  break;
 8008088:	e054      	b.n	8008134 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	f003 020f 	and.w	r2, r3, #15
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fb68 	bl	800877e <USBD_CtlError>
                  break;
 80080ae:	e041      	b.n	8008134 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	da0b      	bge.n	80080d0 <USBD_StdEPReq+0x240>
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	3310      	adds	r3, #16
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	3304      	adds	r3, #4
 80080ce:	e00b      	b.n	80080e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4413      	add	r3, r2
 80080e6:	3304      	adds	r3, #4
 80080e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <USBD_StdEPReq+0x266>
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b80      	cmp	r3, #128	; 0x80
 80080f4:	d103      	bne.n	80080fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	e00e      	b.n	800811c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 ffe8 	bl	80090d8 <USBD_LL_IsStallEP>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2201      	movs	r2, #1
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e002      	b.n	800811c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2202      	movs	r2, #2
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fb95 	bl	8008852 <USBD_CtlSendData>
              break;
 8008128:	e004      	b.n	8008134 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fb26 	bl	800877e <USBD_CtlError>
              break;
 8008132:	bf00      	nop
          }
          break;
 8008134:	e004      	b.n	8008140 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fb20 	bl	800877e <USBD_CtlError>
          break;
 800813e:	bf00      	nop
      }
      break;
 8008140:	e004      	b.n	800814c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fb1a 	bl	800877e <USBD_CtlError>
      break;
 800814a:	bf00      	nop
  }

  return ret;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	2b06      	cmp	r3, #6
 800817a:	f200 8128 	bhi.w	80083ce <USBD_GetDescriptor+0x276>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <USBD_GetDescriptor+0x2c>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081a1 	.word	0x080081a1
 8008188:	080081b9 	.word	0x080081b9
 800818c:	080081f9 	.word	0x080081f9
 8008190:	080083cf 	.word	0x080083cf
 8008194:	080083cf 	.word	0x080083cf
 8008198:	0800836f 	.word	0x0800836f
 800819c:	0800839b 	.word	0x0800839b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	7c12      	ldrb	r2, [r2, #16]
 80081ac:	f107 0108 	add.w	r1, r7, #8
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	60f8      	str	r0, [r7, #12]
      break;
 80081b6:	e112      	b.n	80083de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7c1b      	ldrb	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f107 0208 	add.w	r2, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	2202      	movs	r2, #2
 80081d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081da:	e100      	b.n	80083de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f107 0208 	add.w	r2, r7, #8
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	2202      	movs	r2, #2
 80081f4:	701a      	strb	r2, [r3, #0]
      break;
 80081f6:	e0f2      	b.n	80083de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b05      	cmp	r3, #5
 8008200:	f200 80ac 	bhi.w	800835c <USBD_GetDescriptor+0x204>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_GetDescriptor+0xb4>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008225 	.word	0x08008225
 8008210:	08008259 	.word	0x08008259
 8008214:	0800828d 	.word	0x0800828d
 8008218:	080082c1 	.word	0x080082c1
 800821c:	080082f5 	.word	0x080082f5
 8008220:	08008329 	.word	0x08008329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	7c12      	ldrb	r2, [r2, #16]
 800823c:	f107 0108 	add.w	r1, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008246:	e091      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa97 	bl	800877e <USBD_CtlError>
            err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
          break;
 8008256:	e089      	b.n	800836c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e077      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa7d 	bl	800877e <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e06f      	b.n	800836c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7c12      	ldrb	r2, [r2, #16]
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ae:	e05d      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa63 	bl	800877e <USBD_CtlError>
            err++;
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	3301      	adds	r3, #1
 80082bc:	72fb      	strb	r3, [r7, #11]
          break;
 80082be:	e055      	b.n	800836c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e043      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa49 	bl	800877e <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e03b      	b.n	800836c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e029      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa2f 	bl	800877e <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e021      	b.n	800836c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e00f      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa15 	bl	800877e <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e007      	b.n	800836c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa0d 	bl	800877e <USBD_CtlError>
          err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800836a:	e038      	b.n	80083de <USBD_GetDescriptor+0x286>
 800836c:	e037      	b.n	80083de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	7c1b      	ldrb	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	f107 0208 	add.w	r2, r7, #8
 8008382:	4610      	mov	r0, r2
 8008384:	4798      	blx	r3
 8008386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008388:	e029      	b.n	80083de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f9f6 	bl	800877e <USBD_CtlError>
        err++;
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	3301      	adds	r3, #1
 8008396:	72fb      	strb	r3, [r7, #11]
      break;
 8008398:	e021      	b.n	80083de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7c1b      	ldrb	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	f107 0208 	add.w	r2, r7, #8
 80083ae:	4610      	mov	r0, r2
 80083b0:	4798      	blx	r3
 80083b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	2207      	movs	r2, #7
 80083ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083bc:	e00f      	b.n	80083de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f9dc 	bl	800877e <USBD_CtlError>
        err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	e007      	b.n	80083de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f9d4 	bl	800877e <USBD_CtlError>
      err++;
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	3301      	adds	r3, #1
 80083da:	72fb      	strb	r3, [r7, #11]
      break;
 80083dc:	bf00      	nop
  }

  if (err != 0U)
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11c      	bne.n	800841e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80083e4:	893b      	ldrh	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <USBD_GetDescriptor+0x2b6>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00d      	beq.n	800840e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88da      	ldrh	r2, [r3, #6]
 80083f6:	893b      	ldrh	r3, [r7, #8]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	bf28      	it	cs
 80083fc:	4613      	movcs	r3, r2
 80083fe:	b29b      	uxth	r3, r3
 8008400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	461a      	mov	r2, r3
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fa22 	bl	8008852 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d104      	bne.n	8008420 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa79 	bl	800890e <USBD_CtlSendStatus>
 800841c:	e000      	b.n	8008420 <USBD_GetDescriptor+0x2c8>
    return;
 800841e:	bf00      	nop
    }
  }
}
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop

08008428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	889b      	ldrh	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d130      	bne.n	800849c <USBD_SetAddress+0x74>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	88db      	ldrh	r3, [r3, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d12c      	bne.n	800849c <USBD_SetAddress+0x74>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	2b7f      	cmp	r3, #127	; 0x7f
 8008448:	d828      	bhi.n	800849c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845c:	2b03      	cmp	r3, #3
 800845e:	d104      	bne.n	800846a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f98b 	bl	800877e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008468:	e01d      	b.n	80084a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7bfa      	ldrb	r2, [r7, #15]
 800846e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fe5a 	bl	8009130 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa46 	bl	800890e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008490:	e009      	b.n	80084a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849a:	e004      	b.n	80084a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f96d 	bl	800877e <USBD_CtlError>
  }
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	885b      	ldrh	r3, [r3, #2]
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	4b41      	ldr	r3, [pc, #260]	; (80085c8 <USBD_SetConfig+0x118>)
 80084c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084c4:	4b40      	ldr	r3, [pc, #256]	; (80085c8 <USBD_SetConfig+0x118>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d904      	bls.n	80084d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f955 	bl	800877e <USBD_CtlError>
 80084d4:	e075      	b.n	80085c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_SetConfig+0x36>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d023      	beq.n	800852c <USBD_SetConfig+0x7c>
 80084e4:	e062      	b.n	80085ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80084e6:	4b38      	ldr	r3, [pc, #224]	; (80085c8 <USBD_SetConfig+0x118>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01a      	beq.n	8008524 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80084ee:	4b36      	ldr	r3, [pc, #216]	; (80085c8 <USBD_SetConfig+0x118>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2203      	movs	r2, #3
 80084fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008500:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <USBD_SetConfig+0x118>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff f9e7 	bl	80078da <USBD_SetClassConfig>
 800850c:	4603      	mov	r3, r0
 800850e:	2b02      	cmp	r3, #2
 8008510:	d104      	bne.n	800851c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f932 	bl	800877e <USBD_CtlError>
            return;
 800851a:	e052      	b.n	80085c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9f6 	bl	800890e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008522:	e04e      	b.n	80085c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9f2 	bl	800890e <USBD_CtlSendStatus>
        break;
 800852a:	e04a      	b.n	80085c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800852c:	4b26      	ldr	r3, [pc, #152]	; (80085c8 <USBD_SetConfig+0x118>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d112      	bne.n	800855a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800853c:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <USBD_SetConfig+0x118>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008546:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <USBD_SetConfig+0x118>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff f9e3 	bl	8007918 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9db 	bl	800890e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008558:	e033      	b.n	80085c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800855a:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <USBD_SetConfig+0x118>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	429a      	cmp	r2, r3
 8008566:	d01d      	beq.n	80085a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff f9d1 	bl	8007918 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008576:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <USBD_SetConfig+0x118>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <USBD_SetConfig+0x118>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff f9a7 	bl	80078da <USBD_SetClassConfig>
 800858c:	4603      	mov	r3, r0
 800858e:	2b02      	cmp	r3, #2
 8008590:	d104      	bne.n	800859c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f8f2 	bl	800877e <USBD_CtlError>
            return;
 800859a:	e012      	b.n	80085c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9b6 	bl	800890e <USBD_CtlSendStatus>
        break;
 80085a2:	e00e      	b.n	80085c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9b2 	bl	800890e <USBD_CtlSendStatus>
        break;
 80085aa:	e00a      	b.n	80085c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8e5 	bl	800877e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <USBD_SetConfig+0x118>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff f9ac 	bl	8007918 <USBD_ClrClassConfig>
        break;
 80085c0:	bf00      	nop
    }
  }
}
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000384 	.word	0x20000384

080085cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	88db      	ldrh	r3, [r3, #6]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d004      	beq.n	80085e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f8cc 	bl	800877e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085e6:	e022      	b.n	800862e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	dc02      	bgt.n	80085f8 <USBD_GetConfig+0x2c>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dc03      	bgt.n	80085fe <USBD_GetConfig+0x32>
 80085f6:	e015      	b.n	8008624 <USBD_GetConfig+0x58>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d00b      	beq.n	8008614 <USBD_GetConfig+0x48>
 80085fc:	e012      	b.n	8008624 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3308      	adds	r3, #8
 8008608:	2201      	movs	r2, #1
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f920 	bl	8008852 <USBD_CtlSendData>
        break;
 8008612:	e00c      	b.n	800862e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	2201      	movs	r2, #1
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f918 	bl	8008852 <USBD_CtlSendData>
        break;
 8008622:	e004      	b.n	800862e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f8a9 	bl	800877e <USBD_CtlError>
        break;
 800862c:	bf00      	nop
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	3b01      	subs	r3, #1
 8008648:	2b02      	cmp	r3, #2
 800864a:	d81e      	bhi.n	800868a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	88db      	ldrh	r3, [r3, #6]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d004      	beq.n	800865e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f891 	bl	800877e <USBD_CtlError>
        break;
 800865c:	e01a      	b.n	8008694 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f043 0202 	orr.w	r2, r3, #2
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	330c      	adds	r3, #12
 800867e:	2202      	movs	r2, #2
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8e5 	bl	8008852 <USBD_CtlSendData>
      break;
 8008688:	e004      	b.n	8008694 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f876 	bl	800877e <USBD_CtlError>
      break;
 8008692:	bf00      	nop
  }
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d106      	bne.n	80086bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f929 	bl	800890e <USBD_CtlSendStatus>
  }
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d4:	3b01      	subs	r3, #1
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d80b      	bhi.n	80086f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d10c      	bne.n	80086fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f90f 	bl	800890e <USBD_CtlSendStatus>
      }
      break;
 80086f0:	e004      	b.n	80086fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f842 	bl	800877e <USBD_CtlError>
      break;
 80086fa:	e000      	b.n	80086fe <USBD_ClrFeature+0x3a>
      break;
 80086fc:	bf00      	nop
  }
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785a      	ldrb	r2, [r3, #1]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3302      	adds	r3, #2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b29a      	uxth	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	3303      	adds	r3, #3
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	b29b      	uxth	r3, r3
 8008734:	4413      	add	r3, r2
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	3304      	adds	r3, #4
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	3305      	adds	r3, #5
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	4413      	add	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	3306      	adds	r3, #6
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	3307      	adds	r3, #7
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	b29b      	uxth	r3, r3
 800876c:	4413      	add	r3, r2
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	80da      	strh	r2, [r3, #6]

}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr

0800877e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008788:	2180      	movs	r1, #128	; 0x80
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fc66 	bl	800905c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fc62 	bl	800905c <USBD_LL_StallEP>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d032      	beq.n	800881c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f834 	bl	8008824 <USBD_GetLen>
 80087bc:	4603      	mov	r3, r0
 80087be:	3301      	adds	r3, #1
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	75fa      	strb	r2, [r7, #23]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4413      	add	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	7812      	ldrb	r2, [r2, #0]
 80087da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	75fa      	strb	r2, [r7, #23]
 80087e2:	461a      	mov	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	2203      	movs	r2, #3
 80087ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087ec:	e012      	b.n	8008814 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	60fa      	str	r2, [r7, #12]
 80087f4:	7dfa      	ldrb	r2, [r7, #23]
 80087f6:	1c51      	adds	r1, r2, #1
 80087f8:	75f9      	strb	r1, [r7, #23]
 80087fa:	4611      	mov	r1, r2
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	440a      	add	r2, r1
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	75fa      	strb	r2, [r7, #23]
 800880a:	461a      	mov	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4413      	add	r3, r2
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e8      	bne.n	80087ee <USBD_GetString+0x4e>
    }
  }
}
 800881c:	bf00      	nop
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008830:	e005      	b.n	800883e <USBD_GetLen+0x1a>
  {
    len++;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	3301      	adds	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3301      	adds	r3, #1
 800883c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f5      	bne.n	8008832 <USBD_GetLen+0xe>
  }

  return len;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	4613      	mov	r3, r2
 800885e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008868:	88fa      	ldrh	r2, [r7, #6]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008874:	88fb      	ldrh	r3, [r7, #6]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	2100      	movs	r1, #0
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fc77 	bl	800916e <USBD_LL_Transmit>

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	4613      	mov	r3, r2
 8008896:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	2100      	movs	r1, #0
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 fc65 	bl	800916e <USBD_LL_Transmit>

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4613      	mov	r3, r2
 80088ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2203      	movs	r2, #3
 80088c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80088cc:	88fa      	ldrh	r2, [r7, #6]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	2100      	movs	r1, #0
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 fc6a 	bl	80091b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	4613      	mov	r3, r2
 80088f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fc58 	bl	80091b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2204      	movs	r2, #4
 800891a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800891e:	2300      	movs	r3, #0
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fc22 	bl	800916e <USBD_LL_Transmit>

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2205      	movs	r2, #5
 8008940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fc32 	bl	80091b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008960:	2200      	movs	r2, #0
 8008962:	4912      	ldr	r1, [pc, #72]	; (80089ac <MX_USB_DEVICE_Init+0x50>)
 8008964:	4812      	ldr	r0, [pc, #72]	; (80089b0 <MX_USB_DEVICE_Init+0x54>)
 8008966:	f7fe ff5e 	bl	8007826 <USBD_Init>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008970:	f7f7 ff8c 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008974:	490f      	ldr	r1, [pc, #60]	; (80089b4 <MX_USB_DEVICE_Init+0x58>)
 8008976:	480e      	ldr	r0, [pc, #56]	; (80089b0 <MX_USB_DEVICE_Init+0x54>)
 8008978:	f7fe ff80 	bl	800787c <USBD_RegisterClass>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008982:	f7f7 ff83 	bl	800088c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008986:	490c      	ldr	r1, [pc, #48]	; (80089b8 <MX_USB_DEVICE_Init+0x5c>)
 8008988:	4809      	ldr	r0, [pc, #36]	; (80089b0 <MX_USB_DEVICE_Init+0x54>)
 800898a:	f7fe feb1 	bl	80076f0 <USBD_CDC_RegisterInterface>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008994:	f7f7 ff7a 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008998:	4805      	ldr	r0, [pc, #20]	; (80089b0 <MX_USB_DEVICE_Init+0x54>)
 800899a:	f7fe ff88 	bl	80078ae <USBD_Start>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089a4:	f7f7 ff72 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089a8:	bf00      	nop
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000134 	.word	0x20000134
 80089b0:	20000388 	.word	0x20000388
 80089b4:	20000020 	.word	0x20000020
 80089b8:	20000124 	.word	0x20000124

080089bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	4905      	ldr	r1, [pc, #20]	; (80089d8 <CDC_Init_FS+0x1c>)
 80089c4:	4805      	ldr	r0, [pc, #20]	; (80089dc <CDC_Init_FS+0x20>)
 80089c6:	f7fe fea9 	bl	800771c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089ca:	4905      	ldr	r1, [pc, #20]	; (80089e0 <CDC_Init_FS+0x24>)
 80089cc:	4803      	ldr	r0, [pc, #12]	; (80089dc <CDC_Init_FS+0x20>)
 80089ce:	f7fe febe 	bl	800774e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000a34 	.word	0x20000a34
 80089dc:	20000388 	.word	0x20000388
 80089e0:	2000064c 	.word	0x2000064c

080089e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
	...

080089f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	6039      	str	r1, [r7, #0]
 80089fe:	71fb      	strb	r3, [r7, #7]
 8008a00:	4613      	mov	r3, r2
 8008a02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b23      	cmp	r3, #35	; 0x23
 8008a08:	d84a      	bhi.n	8008aa0 <CDC_Control_FS+0xac>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <CDC_Control_FS+0x1c>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008aa1 	.word	0x08008aa1
 8008a14:	08008aa1 	.word	0x08008aa1
 8008a18:	08008aa1 	.word	0x08008aa1
 8008a1c:	08008aa1 	.word	0x08008aa1
 8008a20:	08008aa1 	.word	0x08008aa1
 8008a24:	08008aa1 	.word	0x08008aa1
 8008a28:	08008aa1 	.word	0x08008aa1
 8008a2c:	08008aa1 	.word	0x08008aa1
 8008a30:	08008aa1 	.word	0x08008aa1
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008aa1 	.word	0x08008aa1
 8008a44:	08008aa1 	.word	0x08008aa1
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008aa1 	.word	0x08008aa1
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008aa1 	.word	0x08008aa1
 8008a74:	08008aa1 	.word	0x08008aa1
 8008a78:	08008aa1 	.word	0x08008aa1
 8008a7c:	08008aa1 	.word	0x08008aa1
 8008a80:	08008aa1 	.word	0x08008aa1
 8008a84:	08008aa1 	.word	0x08008aa1
 8008a88:	08008aa1 	.word	0x08008aa1
 8008a8c:	08008aa1 	.word	0x08008aa1
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008aa1 	.word	0x08008aa1
 8008a98:	08008aa1 	.word	0x08008aa1
 8008a9c:	08008aa1 	.word	0x08008aa1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008aa0:	bf00      	nop
  }

  return (USBD_OK);
 8008aa2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop

08008ab0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	480d      	ldr	r0, [pc, #52]	; (8008af4 <CDC_Receive_FS+0x44>)
 8008abe:	f7fe fe46 	bl	800774e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ac2:	480c      	ldr	r0, [pc, #48]	; (8008af4 <CDC_Receive_FS+0x44>)
 8008ac4:	f7fe fe85 	bl	80077d2 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8008ace:	2240      	movs	r2, #64	; 0x40
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4809      	ldr	r0, [pc, #36]	; (8008af8 <CDC_Receive_FS+0x48>)
 8008ad4:	f000 fc28 	bl	8009328 <memset>
  memcpy(buffer, Buf, len);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	461a      	mov	r2, r3
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4806      	ldr	r0, [pc, #24]	; (8008af8 <CDC_Receive_FS+0x48>)
 8008ae0:	f000 fc14 	bl	800930c <memcpy>
  terminal_proses(buffer);
 8008ae4:	4804      	ldr	r0, [pc, #16]	; (8008af8 <CDC_Receive_FS+0x48>)
 8008ae6:	f7f8 f90d 	bl	8000d04 <terminal_proses>
  return (USBD_OK);
 8008aea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000388 	.word	0x20000388
 8008af8:	2000020c 	.word	0x2000020c

08008afc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <CDC_Transmit_FS+0x48>)
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e00b      	b.n	8008b3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b22:	887b      	ldrh	r3, [r7, #2]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4806      	ldr	r0, [pc, #24]	; (8008b44 <CDC_Transmit_FS+0x48>)
 8008b2a:	f7fe fdf7 	bl	800771c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b2e:	4805      	ldr	r0, [pc, #20]	; (8008b44 <CDC_Transmit_FS+0x48>)
 8008b30:	f7fe fe20 	bl	8007774 <USBD_CDC_TransmitPacket>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20000388 	.word	0x20000388

08008b48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2212      	movs	r2, #18
 8008b58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20000150 	.word	0x20000150

08008b6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000164 	.word	0x20000164

08008b90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d105      	bne.n	8008bae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	4907      	ldr	r1, [pc, #28]	; (8008bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ba6:	4808      	ldr	r0, [pc, #32]	; (8008bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ba8:	f7ff fdfa 	bl	80087a0 <USBD_GetString>
 8008bac:	e004      	b.n	8008bb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4904      	ldr	r1, [pc, #16]	; (8008bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bb2:	4805      	ldr	r0, [pc, #20]	; (8008bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bb4:	f7ff fdf4 	bl	80087a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb8:	4b02      	ldr	r3, [pc, #8]	; (8008bc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000e1c 	.word	0x20000e1c
 8008bc8:	0800b1f0 	.word	0x0800b1f0

08008bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	4904      	ldr	r1, [pc, #16]	; (8008bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bdc:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bde:	f7ff fddf 	bl	80087a0 <USBD_GetString>
  return USBD_StrDesc;
 8008be2:	4b02      	ldr	r3, [pc, #8]	; (8008bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20000e1c 	.word	0x20000e1c
 8008bf0:	0800b208 	.word	0x0800b208

08008bf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	221a      	movs	r2, #26
 8008c04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c06:	f000 f843 	bl	8008c90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c0a:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000168 	.word	0x20000168

08008c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	4907      	ldr	r1, [pc, #28]	; (8008c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c2e:	4808      	ldr	r0, [pc, #32]	; (8008c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c30:	f7ff fdb6 	bl	80087a0 <USBD_GetString>
 8008c34:	e004      	b.n	8008c40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	4904      	ldr	r1, [pc, #16]	; (8008c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c3c:	f7ff fdb0 	bl	80087a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000e1c 	.word	0x20000e1c
 8008c50:	0800b21c 	.word	0x0800b21c

08008c54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d105      	bne.n	8008c72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	4907      	ldr	r1, [pc, #28]	; (8008c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c6a:	4808      	ldr	r0, [pc, #32]	; (8008c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c6c:	f7ff fd98 	bl	80087a0 <USBD_GetString>
 8008c70:	e004      	b.n	8008c7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4904      	ldr	r1, [pc, #16]	; (8008c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c76:	4805      	ldr	r0, [pc, #20]	; (8008c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c78:	f7ff fd92 	bl	80087a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c7c:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000e1c 	.word	0x20000e1c
 8008c8c:	0800b228 	.word	0x0800b228

08008c90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c96:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <Get_SerialNum+0x44>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <Get_SerialNum+0x48>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ca2:	4b0e      	ldr	r3, [pc, #56]	; (8008cdc <Get_SerialNum+0x4c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cb6:	2208      	movs	r2, #8
 8008cb8:	4909      	ldr	r1, [pc, #36]	; (8008ce0 <Get_SerialNum+0x50>)
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f814 	bl	8008ce8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cc0:	2204      	movs	r2, #4
 8008cc2:	4908      	ldr	r1, [pc, #32]	; (8008ce4 <Get_SerialNum+0x54>)
 8008cc4:	68b8      	ldr	r0, [r7, #8]
 8008cc6:	f000 f80f 	bl	8008ce8 <IntToUnicode>
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	1ffff7e8 	.word	0x1ffff7e8
 8008cd8:	1ffff7ec 	.word	0x1ffff7ec
 8008cdc:	1ffff7f0 	.word	0x1ffff7f0
 8008ce0:	2000016a 	.word	0x2000016a
 8008ce4:	2000017a 	.word	0x2000017a

08008ce8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75fb      	strb	r3, [r7, #23]
 8008cfe:	e027      	b.n	8008d50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	0f1b      	lsrs	r3, r3, #28
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	d80b      	bhi.n	8008d20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	0f1b      	lsrs	r3, r3, #28
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4619      	mov	r1, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	440b      	add	r3, r1
 8008d18:	3230      	adds	r2, #48	; 0x30
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	e00a      	b.n	8008d36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	0f1b      	lsrs	r3, r3, #28
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	440b      	add	r3, r1
 8008d30:	3237      	adds	r2, #55	; 0x37
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	3301      	adds	r3, #1
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
 8008d50:	7dfa      	ldrb	r2, [r7, #23]
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d3d3      	bcc.n	8008d00 <IntToUnicode+0x18>
  }
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0d      	ldr	r2, [pc, #52]	; (8008da8 <HAL_PCD_MspInit+0x44>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d113      	bne.n	8008d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d76:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <HAL_PCD_MspInit+0x48>)
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	4a0c      	ldr	r2, [pc, #48]	; (8008dac <HAL_PCD_MspInit+0x48>)
 8008d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d80:	61d3      	str	r3, [r2, #28]
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <HAL_PCD_MspInit+0x48>)
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	2014      	movs	r0, #20
 8008d94:	f7f8 fa57 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d98:	2014      	movs	r0, #20
 8008d9a:	f7f8 fa70 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	40005c00 	.word	0x40005c00
 8008dac:	40021000 	.word	0x40021000

08008db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fdb9 	bl	800793e <USBD_LL_SetupStage>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	440b      	add	r3, r1
 8008df4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe fdeb 	bl	80079d8 <USBD_LL_DataOutStage>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	4613      	mov	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	440b      	add	r3, r1
 8008e2a:	333c      	adds	r3, #60	; 0x3c
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	4619      	mov	r1, r3
 8008e32:	f7fe fe42 	bl	8007aba <USBD_LL_DataInStage>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe ff52 	bl	8007cf6 <USBD_LL_SOF>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d001      	beq.n	8008e72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e6e:	f7f7 fd0d 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e78:	7bfa      	ldrb	r2, [r7, #15]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe ff02 	bl	8007c86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe febb 	bl	8007c04 <USBD_LL_Reset>
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fefc 	bl	8007ca4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <HAL_PCD_SuspendCallback+0x30>)
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	4a03      	ldr	r2, [pc, #12]	; (8008ec8 <HAL_PCD_SuspendCallback+0x30>)
 8008eba:	f043 0306 	orr.w	r3, r3, #6
 8008ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed00 	.word	0xe000ed00

08008ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fef6 	bl	8007ccc <USBD_LL_Resume>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ef0:	4a28      	ldr	r2, [pc, #160]	; (8008f94 <USBD_LL_Init+0xac>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <USBD_LL_Init+0xac>)
 8008efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f02:	4a25      	ldr	r2, [pc, #148]	; (8008f98 <USBD_LL_Init+0xb0>)
 8008f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f06:	4b23      	ldr	r3, [pc, #140]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f08:	2208      	movs	r2, #8
 8008f0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f0c:	4b21      	ldr	r3, [pc, #132]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f0e:	2202      	movs	r2, #2
 8008f10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f12:	4b20      	ldr	r3, [pc, #128]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f18:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f24:	481b      	ldr	r0, [pc, #108]	; (8008f94 <USBD_LL_Init+0xac>)
 8008f26:	f7f8 fcfb 	bl	8001920 <HAL_PCD_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f30:	f7f7 fcac 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f3a:	2318      	movs	r3, #24
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2100      	movs	r1, #0
 8008f40:	f7fa f96f 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f4a:	2358      	movs	r3, #88	; 0x58
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2180      	movs	r1, #128	; 0x80
 8008f50:	f7fa f967 	bl	8003222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f5a:	23c0      	movs	r3, #192	; 0xc0
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2181      	movs	r1, #129	; 0x81
 8008f60:	f7fa f95f 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2101      	movs	r1, #1
 8008f72:	f7fa f956 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f80:	2200      	movs	r2, #0
 8008f82:	2182      	movs	r1, #130	; 0x82
 8008f84:	f7fa f94d 	bl	8003222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	2000101c 	.word	0x2000101c
 8008f98:	40005c00 	.word	0x40005c00

08008f9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7f8 fdbf 	bl	8001b36 <HAL_PCD_Start>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f94e 	bl	8009260 <USBD_Get_USB_Status>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	70fb      	strb	r3, [r7, #3]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70bb      	strb	r3, [r7, #2]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ffa:	78bb      	ldrb	r3, [r7, #2]
 8008ffc:	883a      	ldrh	r2, [r7, #0]
 8008ffe:	78f9      	ldrb	r1, [r7, #3]
 8009000:	f7f8 ff37 	bl	8001e72 <HAL_PCD_EP_Open>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f928 	bl	8009260 <USBD_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7f8 ff7e 	bl	8001f3e <HAL_PCD_EP_Close>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f909 	bl	8009260 <USBD_Get_USB_Status>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009052:	7bbb      	ldrb	r3, [r7, #14]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f7f9 f83e 	bl	80020fc <HAL_PCD_EP_SetStall>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f8ea 	bl	8009260 <USBD_Get_USB_Status>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009090:	7bbb      	ldrb	r3, [r7, #14]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090b4:	78fa      	ldrb	r2, [r7, #3]
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f9 f87f 	bl	80021bc <HAL_PCD_EP_ClrStall>
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f8cb 	bl	8009260 <USBD_Get_USB_Status>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da0c      	bge.n	800910e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	440b      	add	r3, r1
 8009108:	3302      	adds	r3, #2
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	e00b      	b.n	8009126 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009114:	68f9      	ldr	r1, [r7, #12]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	440b      	add	r3, r1
 8009120:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009124:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7f8 fe6a 	bl	8001e28 <HAL_PCD_SetAddress>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f880 	bl	8009260 <USBD_Get_USB_Status>
 8009160:	4603      	mov	r3, r0
 8009162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009164:	7bbb      	ldrb	r3, [r7, #14]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	461a      	mov	r2, r3
 800917a:	460b      	mov	r3, r1
 800917c:	72fb      	strb	r3, [r7, #11]
 800917e:	4613      	mov	r3, r2
 8009180:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009190:	893b      	ldrh	r3, [r7, #8]
 8009192:	7af9      	ldrb	r1, [r7, #11]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	f7f8 ff6e 	bl	8002076 <HAL_PCD_EP_Transmit>
 800919a:	4603      	mov	r3, r0
 800919c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 f85d 	bl	8009260 <USBD_Get_USB_Status>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	461a      	mov	r2, r3
 80091c0:	460b      	mov	r3, r1
 80091c2:	72fb      	strb	r3, [r7, #11]
 80091c4:	4613      	mov	r3, r2
 80091c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091d6:	893b      	ldrh	r3, [r7, #8]
 80091d8:	7af9      	ldrb	r1, [r7, #11]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	f7f8 fef7 	bl	8001fce <HAL_PCD_EP_Receive>
 80091e0:	4603      	mov	r3, r0
 80091e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f83a 	bl	8009260 <USBD_Get_USB_Status>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7f8 ff19 	bl	8002048 <HAL_PCD_EP_GetRxCount>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009228:	4b02      	ldr	r3, [pc, #8]	; (8009234 <USBD_static_malloc+0x14>)
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr
 8009234:	20001308 	.word	0x20001308

08009238 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]

}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	bc80      	pop	{r7}
 8009248:	4770      	bx	lr

0800924a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d817      	bhi.n	80092a4 <USBD_Get_USB_Status+0x44>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <USBD_Get_USB_Status+0x1c>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	0800928d 	.word	0x0800928d
 8009280:	08009293 	.word	0x08009293
 8009284:	08009299 	.word	0x08009299
 8009288:	0800929f 	.word	0x0800929f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	e00b      	b.n	80092aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009292:	2302      	movs	r3, #2
 8009294:	73fb      	strb	r3, [r7, #15]
    break;
 8009296:	e008      	b.n	80092aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
    break;
 800929c:	e005      	b.n	80092aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800929e:	2302      	movs	r3, #2
 80092a0:	73fb      	strb	r3, [r7, #15]
    break;
 80092a2:	e002      	b.n	80092aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092a4:	2302      	movs	r3, #2
 80092a6:	73fb      	strb	r3, [r7, #15]
    break;
 80092a8:	bf00      	nop
  }
  return usb_status;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop

080092b8 <__errno>:
 80092b8:	4b01      	ldr	r3, [pc, #4]	; (80092c0 <__errno+0x8>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000184 	.word	0x20000184

080092c4 <__libc_init_array>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	2600      	movs	r6, #0
 80092c8:	4d0c      	ldr	r5, [pc, #48]	; (80092fc <__libc_init_array+0x38>)
 80092ca:	4c0d      	ldr	r4, [pc, #52]	; (8009300 <__libc_init_array+0x3c>)
 80092cc:	1b64      	subs	r4, r4, r5
 80092ce:	10a4      	asrs	r4, r4, #2
 80092d0:	42a6      	cmp	r6, r4
 80092d2:	d109      	bne.n	80092e8 <__libc_init_array+0x24>
 80092d4:	f001 ff28 	bl	800b128 <_init>
 80092d8:	2600      	movs	r6, #0
 80092da:	4d0a      	ldr	r5, [pc, #40]	; (8009304 <__libc_init_array+0x40>)
 80092dc:	4c0a      	ldr	r4, [pc, #40]	; (8009308 <__libc_init_array+0x44>)
 80092de:	1b64      	subs	r4, r4, r5
 80092e0:	10a4      	asrs	r4, r4, #2
 80092e2:	42a6      	cmp	r6, r4
 80092e4:	d105      	bne.n	80092f2 <__libc_init_array+0x2e>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ec:	4798      	blx	r3
 80092ee:	3601      	adds	r6, #1
 80092f0:	e7ee      	b.n	80092d0 <__libc_init_array+0xc>
 80092f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f6:	4798      	blx	r3
 80092f8:	3601      	adds	r6, #1
 80092fa:	e7f2      	b.n	80092e2 <__libc_init_array+0x1e>
 80092fc:	0800b4c0 	.word	0x0800b4c0
 8009300:	0800b4c0 	.word	0x0800b4c0
 8009304:	0800b4c0 	.word	0x0800b4c0
 8009308:	0800b4c4 	.word	0x0800b4c4

0800930c <memcpy>:
 800930c:	440a      	add	r2, r1
 800930e:	4291      	cmp	r1, r2
 8009310:	f100 33ff 	add.w	r3, r0, #4294967295
 8009314:	d100      	bne.n	8009318 <memcpy+0xc>
 8009316:	4770      	bx	lr
 8009318:	b510      	push	{r4, lr}
 800931a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800931e:	4291      	cmp	r1, r2
 8009320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009324:	d1f9      	bne.n	800931a <memcpy+0xe>
 8009326:	bd10      	pop	{r4, pc}

08009328 <memset>:
 8009328:	4603      	mov	r3, r0
 800932a:	4402      	add	r2, r0
 800932c:	4293      	cmp	r3, r2
 800932e:	d100      	bne.n	8009332 <memset+0xa>
 8009330:	4770      	bx	lr
 8009332:	f803 1b01 	strb.w	r1, [r3], #1
 8009336:	e7f9      	b.n	800932c <memset+0x4>

08009338 <siscanf>:
 8009338:	b40e      	push	{r1, r2, r3}
 800933a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800933e:	b530      	push	{r4, r5, lr}
 8009340:	b09c      	sub	sp, #112	; 0x70
 8009342:	ac1f      	add	r4, sp, #124	; 0x7c
 8009344:	f854 5b04 	ldr.w	r5, [r4], #4
 8009348:	f8ad 2014 	strh.w	r2, [sp, #20]
 800934c:	9002      	str	r0, [sp, #8]
 800934e:	9006      	str	r0, [sp, #24]
 8009350:	f7f6 ff06 	bl	8000160 <strlen>
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <siscanf+0x4c>)
 8009356:	9003      	str	r0, [sp, #12]
 8009358:	930b      	str	r3, [sp, #44]	; 0x2c
 800935a:	2300      	movs	r3, #0
 800935c:	930f      	str	r3, [sp, #60]	; 0x3c
 800935e:	9314      	str	r3, [sp, #80]	; 0x50
 8009360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009364:	9007      	str	r0, [sp, #28]
 8009366:	4808      	ldr	r0, [pc, #32]	; (8009388 <siscanf+0x50>)
 8009368:	f8ad 3016 	strh.w	r3, [sp, #22]
 800936c:	462a      	mov	r2, r5
 800936e:	4623      	mov	r3, r4
 8009370:	a902      	add	r1, sp, #8
 8009372:	6800      	ldr	r0, [r0, #0]
 8009374:	9401      	str	r4, [sp, #4]
 8009376:	f000 fbe3 	bl	8009b40 <__ssvfiscanf_r>
 800937a:	b01c      	add	sp, #112	; 0x70
 800937c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	080093af 	.word	0x080093af
 8009388:	20000184 	.word	0x20000184

0800938c <__sread>:
 800938c:	b510      	push	{r4, lr}
 800938e:	460c      	mov	r4, r1
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	f001 f98e 	bl	800a6b4 <_read_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	bfab      	itete	ge
 800939c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800939e:	89a3      	ldrhlt	r3, [r4, #12]
 80093a0:	181b      	addge	r3, r3, r0
 80093a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093a6:	bfac      	ite	ge
 80093a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093aa:	81a3      	strhlt	r3, [r4, #12]
 80093ac:	bd10      	pop	{r4, pc}

080093ae <__seofread>:
 80093ae:	2000      	movs	r0, #0
 80093b0:	4770      	bx	lr

080093b2 <__swrite>:
 80093b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	461f      	mov	r7, r3
 80093b8:	898b      	ldrh	r3, [r1, #12]
 80093ba:	4605      	mov	r5, r0
 80093bc:	05db      	lsls	r3, r3, #23
 80093be:	460c      	mov	r4, r1
 80093c0:	4616      	mov	r6, r2
 80093c2:	d505      	bpl.n	80093d0 <__swrite+0x1e>
 80093c4:	2302      	movs	r3, #2
 80093c6:	2200      	movs	r2, #0
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	f000 f90c 	bl	80095e8 <_lseek_r>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	4632      	mov	r2, r6
 80093d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	4628      	mov	r0, r5
 80093dc:	463b      	mov	r3, r7
 80093de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e6:	f000 b8ad 	b.w	8009544 <_write_r>

080093ea <__sseek>:
 80093ea:	b510      	push	{r4, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f2:	f000 f8f9 	bl	80095e8 <_lseek_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	bf15      	itete	ne
 80093fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009406:	81a3      	strheq	r3, [r4, #12]
 8009408:	bf18      	it	ne
 800940a:	81a3      	strhne	r3, [r4, #12]
 800940c:	bd10      	pop	{r4, pc}

0800940e <__sclose>:
 800940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009412:	f000 b8c7 	b.w	80095a4 <_close_r>
	...

08009418 <strtok>:
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <strtok+0x5c>)
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	681f      	ldr	r7, [r3, #0]
 8009420:	4605      	mov	r5, r0
 8009422:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009424:	460e      	mov	r6, r1
 8009426:	b9ec      	cbnz	r4, 8009464 <strtok+0x4c>
 8009428:	2050      	movs	r0, #80	; 0x50
 800942a:	f000 f8ef 	bl	800960c <malloc>
 800942e:	4602      	mov	r2, r0
 8009430:	65b8      	str	r0, [r7, #88]	; 0x58
 8009432:	b920      	cbnz	r0, 800943e <strtok+0x26>
 8009434:	2157      	movs	r1, #87	; 0x57
 8009436:	4b10      	ldr	r3, [pc, #64]	; (8009478 <strtok+0x60>)
 8009438:	4810      	ldr	r0, [pc, #64]	; (800947c <strtok+0x64>)
 800943a:	f000 f895 	bl	8009568 <__assert_func>
 800943e:	e9c0 4400 	strd	r4, r4, [r0]
 8009442:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009446:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800944a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800944e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009452:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009456:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800945a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800945e:	6184      	str	r4, [r0, #24]
 8009460:	7704      	strb	r4, [r0, #28]
 8009462:	6244      	str	r4, [r0, #36]	; 0x24
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800946a:	2301      	movs	r3, #1
 800946c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	f000 b806 	b.w	8009480 <__strtok_r>
 8009474:	20000184 	.word	0x20000184
 8009478:	0800b260 	.word	0x0800b260
 800947c:	0800b277 	.word	0x0800b277

08009480 <__strtok_r>:
 8009480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009482:	b908      	cbnz	r0, 8009488 <__strtok_r+0x8>
 8009484:	6810      	ldr	r0, [r2, #0]
 8009486:	b188      	cbz	r0, 80094ac <__strtok_r+0x2c>
 8009488:	4604      	mov	r4, r0
 800948a:	460f      	mov	r7, r1
 800948c:	4620      	mov	r0, r4
 800948e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009492:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009496:	b91e      	cbnz	r6, 80094a0 <__strtok_r+0x20>
 8009498:	b965      	cbnz	r5, 80094b4 <__strtok_r+0x34>
 800949a:	4628      	mov	r0, r5
 800949c:	6015      	str	r5, [r2, #0]
 800949e:	e005      	b.n	80094ac <__strtok_r+0x2c>
 80094a0:	42b5      	cmp	r5, r6
 80094a2:	d1f6      	bne.n	8009492 <__strtok_r+0x12>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1f0      	bne.n	800948a <__strtok_r+0xa>
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	7003      	strb	r3, [r0, #0]
 80094ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ae:	461c      	mov	r4, r3
 80094b0:	e00c      	b.n	80094cc <__strtok_r+0x4c>
 80094b2:	b915      	cbnz	r5, 80094ba <__strtok_r+0x3a>
 80094b4:	460e      	mov	r6, r1
 80094b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80094be:	42ab      	cmp	r3, r5
 80094c0:	d1f7      	bne.n	80094b2 <__strtok_r+0x32>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0f3      	beq.n	80094ae <__strtok_r+0x2e>
 80094c6:	2300      	movs	r3, #0
 80094c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80094cc:	6014      	str	r4, [r2, #0]
 80094ce:	e7ed      	b.n	80094ac <__strtok_r+0x2c>

080094d0 <_vsniprintf_r>:
 80094d0:	b530      	push	{r4, r5, lr}
 80094d2:	4614      	mov	r4, r2
 80094d4:	2c00      	cmp	r4, #0
 80094d6:	4605      	mov	r5, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	b09b      	sub	sp, #108	; 0x6c
 80094dc:	da05      	bge.n	80094ea <_vsniprintf_r+0x1a>
 80094de:	238b      	movs	r3, #139	; 0x8b
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295
 80094e6:	b01b      	add	sp, #108	; 0x6c
 80094e8:	bd30      	pop	{r4, r5, pc}
 80094ea:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80094f2:	bf0c      	ite	eq
 80094f4:	4623      	moveq	r3, r4
 80094f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	9305      	str	r3, [sp, #20]
 80094fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009502:	9100      	str	r1, [sp, #0]
 8009504:	9104      	str	r1, [sp, #16]
 8009506:	f8ad 300e 	strh.w	r3, [sp, #14]
 800950a:	4669      	mov	r1, sp
 800950c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800950e:	f000 f9bd 	bl	800988c <_svfiprintf_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	bfbc      	itt	lt
 8009516:	238b      	movlt	r3, #139	; 0x8b
 8009518:	602b      	strlt	r3, [r5, #0]
 800951a:	2c00      	cmp	r4, #0
 800951c:	d0e3      	beq.n	80094e6 <_vsniprintf_r+0x16>
 800951e:	2200      	movs	r2, #0
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e7df      	b.n	80094e6 <_vsniprintf_r+0x16>
	...

08009528 <vsniprintf>:
 8009528:	b507      	push	{r0, r1, r2, lr}
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4613      	mov	r3, r2
 800952e:	460a      	mov	r2, r1
 8009530:	4601      	mov	r1, r0
 8009532:	4803      	ldr	r0, [pc, #12]	; (8009540 <vsniprintf+0x18>)
 8009534:	6800      	ldr	r0, [r0, #0]
 8009536:	f7ff ffcb 	bl	80094d0 <_vsniprintf_r>
 800953a:	b003      	add	sp, #12
 800953c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009540:	20000184 	.word	0x20000184

08009544 <_write_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	2200      	movs	r2, #0
 800954e:	4d05      	ldr	r5, [pc, #20]	; (8009564 <_write_r+0x20>)
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f7 fb22 	bl	8000b9c <_write>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_write_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_write_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20001530 	.word	0x20001530

08009568 <__assert_func>:
 8009568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800956a:	4614      	mov	r4, r2
 800956c:	461a      	mov	r2, r3
 800956e:	4b09      	ldr	r3, [pc, #36]	; (8009594 <__assert_func+0x2c>)
 8009570:	4605      	mov	r5, r0
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68d8      	ldr	r0, [r3, #12]
 8009576:	b14c      	cbz	r4, 800958c <__assert_func+0x24>
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <__assert_func+0x30>)
 800957a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800957e:	9100      	str	r1, [sp, #0]
 8009580:	462b      	mov	r3, r5
 8009582:	4906      	ldr	r1, [pc, #24]	; (800959c <__assert_func+0x34>)
 8009584:	f000 f81e 	bl	80095c4 <fiprintf>
 8009588:	f001 fad8 	bl	800ab3c <abort>
 800958c:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <__assert_func+0x38>)
 800958e:	461c      	mov	r4, r3
 8009590:	e7f3      	b.n	800957a <__assert_func+0x12>
 8009592:	bf00      	nop
 8009594:	20000184 	.word	0x20000184
 8009598:	0800b2d4 	.word	0x0800b2d4
 800959c:	0800b2e1 	.word	0x0800b2e1
 80095a0:	0800b30f 	.word	0x0800b30f

080095a4 <_close_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	2300      	movs	r3, #0
 80095a8:	4d05      	ldr	r5, [pc, #20]	; (80095c0 <_close_r+0x1c>)
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	602b      	str	r3, [r5, #0]
 80095b0:	f7f7 fb10 	bl	8000bd4 <_close>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_close_r+0x1a>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_close_r+0x1a>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	20001530 	.word	0x20001530

080095c4 <fiprintf>:
 80095c4:	b40e      	push	{r1, r2, r3}
 80095c6:	b503      	push	{r0, r1, lr}
 80095c8:	4601      	mov	r1, r0
 80095ca:	ab03      	add	r3, sp, #12
 80095cc:	4805      	ldr	r0, [pc, #20]	; (80095e4 <fiprintf+0x20>)
 80095ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d2:	6800      	ldr	r0, [r0, #0]
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	f000 fc55 	bl	8009e84 <_vfiprintf_r>
 80095da:	b002      	add	sp, #8
 80095dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e0:	b003      	add	sp, #12
 80095e2:	4770      	bx	lr
 80095e4:	20000184 	.word	0x20000184

080095e8 <_lseek_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	2200      	movs	r2, #0
 80095f2:	4d05      	ldr	r5, [pc, #20]	; (8009608 <_lseek_r+0x20>)
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f7f7 fb10 	bl	8000c1c <_lseek>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_lseek_r+0x1e>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_lseek_r+0x1e>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20001530 	.word	0x20001530

0800960c <malloc>:
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <malloc+0xc>)
 800960e:	4601      	mov	r1, r0
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	f000 b86b 	b.w	80096ec <_malloc_r>
 8009616:	bf00      	nop
 8009618:	20000184 	.word	0x20000184

0800961c <_free_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4605      	mov	r5, r0
 8009620:	2900      	cmp	r1, #0
 8009622:	d040      	beq.n	80096a6 <_free_r+0x8a>
 8009624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009628:	1f0c      	subs	r4, r1, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	bfb8      	it	lt
 800962e:	18e4      	addlt	r4, r4, r3
 8009630:	f001 fcd0 	bl	800afd4 <__malloc_lock>
 8009634:	4a1c      	ldr	r2, [pc, #112]	; (80096a8 <_free_r+0x8c>)
 8009636:	6813      	ldr	r3, [r2, #0]
 8009638:	b933      	cbnz	r3, 8009648 <_free_r+0x2c>
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	6014      	str	r4, [r2, #0]
 800963e:	4628      	mov	r0, r5
 8009640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009644:	f001 bccc 	b.w	800afe0 <__malloc_unlock>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d908      	bls.n	800965e <_free_r+0x42>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	1821      	adds	r1, r4, r0
 8009650:	428b      	cmp	r3, r1
 8009652:	bf01      	itttt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	1809      	addeq	r1, r1, r0
 800965a:	6021      	streq	r1, [r4, #0]
 800965c:	e7ed      	b.n	800963a <_free_r+0x1e>
 800965e:	461a      	mov	r2, r3
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b10b      	cbz	r3, 8009668 <_free_r+0x4c>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d9fa      	bls.n	800965e <_free_r+0x42>
 8009668:	6811      	ldr	r1, [r2, #0]
 800966a:	1850      	adds	r0, r2, r1
 800966c:	42a0      	cmp	r0, r4
 800966e:	d10b      	bne.n	8009688 <_free_r+0x6c>
 8009670:	6820      	ldr	r0, [r4, #0]
 8009672:	4401      	add	r1, r0
 8009674:	1850      	adds	r0, r2, r1
 8009676:	4283      	cmp	r3, r0
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	d1e0      	bne.n	800963e <_free_r+0x22>
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	4401      	add	r1, r0
 8009682:	6011      	str	r1, [r2, #0]
 8009684:	6053      	str	r3, [r2, #4]
 8009686:	e7da      	b.n	800963e <_free_r+0x22>
 8009688:	d902      	bls.n	8009690 <_free_r+0x74>
 800968a:	230c      	movs	r3, #12
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	e7d6      	b.n	800963e <_free_r+0x22>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	1821      	adds	r1, r4, r0
 8009694:	428b      	cmp	r3, r1
 8009696:	bf01      	itttt	eq
 8009698:	6819      	ldreq	r1, [r3, #0]
 800969a:	685b      	ldreq	r3, [r3, #4]
 800969c:	1809      	addeq	r1, r1, r0
 800969e:	6021      	streq	r1, [r4, #0]
 80096a0:	6063      	str	r3, [r4, #4]
 80096a2:	6054      	str	r4, [r2, #4]
 80096a4:	e7cb      	b.n	800963e <_free_r+0x22>
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	20001528 	.word	0x20001528

080096ac <sbrk_aligned>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4e0e      	ldr	r6, [pc, #56]	; (80096e8 <sbrk_aligned+0x3c>)
 80096b0:	460c      	mov	r4, r1
 80096b2:	6831      	ldr	r1, [r6, #0]
 80096b4:	4605      	mov	r5, r0
 80096b6:	b911      	cbnz	r1, 80096be <sbrk_aligned+0x12>
 80096b8:	f001 f80e 	bl	800a6d8 <_sbrk_r>
 80096bc:	6030      	str	r0, [r6, #0]
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f001 f809 	bl	800a6d8 <_sbrk_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d00a      	beq.n	80096e0 <sbrk_aligned+0x34>
 80096ca:	1cc4      	adds	r4, r0, #3
 80096cc:	f024 0403 	bic.w	r4, r4, #3
 80096d0:	42a0      	cmp	r0, r4
 80096d2:	d007      	beq.n	80096e4 <sbrk_aligned+0x38>
 80096d4:	1a21      	subs	r1, r4, r0
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 fffe 	bl	800a6d8 <_sbrk_r>
 80096dc:	3001      	adds	r0, #1
 80096de:	d101      	bne.n	80096e4 <sbrk_aligned+0x38>
 80096e0:	f04f 34ff 	mov.w	r4, #4294967295
 80096e4:	4620      	mov	r0, r4
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	2000152c 	.word	0x2000152c

080096ec <_malloc_r>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	1ccd      	adds	r5, r1, #3
 80096f2:	f025 0503 	bic.w	r5, r5, #3
 80096f6:	3508      	adds	r5, #8
 80096f8:	2d0c      	cmp	r5, #12
 80096fa:	bf38      	it	cc
 80096fc:	250c      	movcc	r5, #12
 80096fe:	2d00      	cmp	r5, #0
 8009700:	4607      	mov	r7, r0
 8009702:	db01      	blt.n	8009708 <_malloc_r+0x1c>
 8009704:	42a9      	cmp	r1, r5
 8009706:	d905      	bls.n	8009714 <_malloc_r+0x28>
 8009708:	230c      	movs	r3, #12
 800970a:	2600      	movs	r6, #0
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	4630      	mov	r0, r6
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	4e2e      	ldr	r6, [pc, #184]	; (80097d0 <_malloc_r+0xe4>)
 8009716:	f001 fc5d 	bl	800afd4 <__malloc_lock>
 800971a:	6833      	ldr	r3, [r6, #0]
 800971c:	461c      	mov	r4, r3
 800971e:	bb34      	cbnz	r4, 800976e <_malloc_r+0x82>
 8009720:	4629      	mov	r1, r5
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ffc2 	bl	80096ac <sbrk_aligned>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	4604      	mov	r4, r0
 800972c:	d14d      	bne.n	80097ca <_malloc_r+0xde>
 800972e:	6834      	ldr	r4, [r6, #0]
 8009730:	4626      	mov	r6, r4
 8009732:	2e00      	cmp	r6, #0
 8009734:	d140      	bne.n	80097b8 <_malloc_r+0xcc>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	4631      	mov	r1, r6
 800973a:	4638      	mov	r0, r7
 800973c:	eb04 0803 	add.w	r8, r4, r3
 8009740:	f000 ffca 	bl	800a6d8 <_sbrk_r>
 8009744:	4580      	cmp	r8, r0
 8009746:	d13a      	bne.n	80097be <_malloc_r+0xd2>
 8009748:	6821      	ldr	r1, [r4, #0]
 800974a:	3503      	adds	r5, #3
 800974c:	1a6d      	subs	r5, r5, r1
 800974e:	f025 0503 	bic.w	r5, r5, #3
 8009752:	3508      	adds	r5, #8
 8009754:	2d0c      	cmp	r5, #12
 8009756:	bf38      	it	cc
 8009758:	250c      	movcc	r5, #12
 800975a:	4638      	mov	r0, r7
 800975c:	4629      	mov	r1, r5
 800975e:	f7ff ffa5 	bl	80096ac <sbrk_aligned>
 8009762:	3001      	adds	r0, #1
 8009764:	d02b      	beq.n	80097be <_malloc_r+0xd2>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	442b      	add	r3, r5
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	e00e      	b.n	800978c <_malloc_r+0xa0>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	1b52      	subs	r2, r2, r5
 8009772:	d41e      	bmi.n	80097b2 <_malloc_r+0xc6>
 8009774:	2a0b      	cmp	r2, #11
 8009776:	d916      	bls.n	80097a6 <_malloc_r+0xba>
 8009778:	1961      	adds	r1, r4, r5
 800977a:	42a3      	cmp	r3, r4
 800977c:	6025      	str	r5, [r4, #0]
 800977e:	bf18      	it	ne
 8009780:	6059      	strne	r1, [r3, #4]
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	bf08      	it	eq
 8009786:	6031      	streq	r1, [r6, #0]
 8009788:	5162      	str	r2, [r4, r5]
 800978a:	604b      	str	r3, [r1, #4]
 800978c:	4638      	mov	r0, r7
 800978e:	f104 060b 	add.w	r6, r4, #11
 8009792:	f001 fc25 	bl	800afe0 <__malloc_unlock>
 8009796:	f026 0607 	bic.w	r6, r6, #7
 800979a:	1d23      	adds	r3, r4, #4
 800979c:	1af2      	subs	r2, r6, r3
 800979e:	d0b6      	beq.n	800970e <_malloc_r+0x22>
 80097a0:	1b9b      	subs	r3, r3, r6
 80097a2:	50a3      	str	r3, [r4, r2]
 80097a4:	e7b3      	b.n	800970e <_malloc_r+0x22>
 80097a6:	6862      	ldr	r2, [r4, #4]
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	bf0c      	ite	eq
 80097ac:	6032      	streq	r2, [r6, #0]
 80097ae:	605a      	strne	r2, [r3, #4]
 80097b0:	e7ec      	b.n	800978c <_malloc_r+0xa0>
 80097b2:	4623      	mov	r3, r4
 80097b4:	6864      	ldr	r4, [r4, #4]
 80097b6:	e7b2      	b.n	800971e <_malloc_r+0x32>
 80097b8:	4634      	mov	r4, r6
 80097ba:	6876      	ldr	r6, [r6, #4]
 80097bc:	e7b9      	b.n	8009732 <_malloc_r+0x46>
 80097be:	230c      	movs	r3, #12
 80097c0:	4638      	mov	r0, r7
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	f001 fc0c 	bl	800afe0 <__malloc_unlock>
 80097c8:	e7a1      	b.n	800970e <_malloc_r+0x22>
 80097ca:	6025      	str	r5, [r4, #0]
 80097cc:	e7de      	b.n	800978c <_malloc_r+0xa0>
 80097ce:	bf00      	nop
 80097d0:	20001528 	.word	0x20001528

080097d4 <__ssputs_r>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	688e      	ldr	r6, [r1, #8]
 80097da:	4682      	mov	sl, r0
 80097dc:	429e      	cmp	r6, r3
 80097de:	460c      	mov	r4, r1
 80097e0:	4690      	mov	r8, r2
 80097e2:	461f      	mov	r7, r3
 80097e4:	d838      	bhi.n	8009858 <__ssputs_r+0x84>
 80097e6:	898a      	ldrh	r2, [r1, #12]
 80097e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ec:	d032      	beq.n	8009854 <__ssputs_r+0x80>
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	6909      	ldr	r1, [r1, #16]
 80097f2:	3301      	adds	r3, #1
 80097f4:	eba5 0901 	sub.w	r9, r5, r1
 80097f8:	6965      	ldr	r5, [r4, #20]
 80097fa:	444b      	add	r3, r9
 80097fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	429d      	cmp	r5, r3
 8009808:	bf38      	it	cc
 800980a:	461d      	movcc	r5, r3
 800980c:	0553      	lsls	r3, r2, #21
 800980e:	d531      	bpl.n	8009874 <__ssputs_r+0xa0>
 8009810:	4629      	mov	r1, r5
 8009812:	f7ff ff6b 	bl	80096ec <_malloc_r>
 8009816:	4606      	mov	r6, r0
 8009818:	b950      	cbnz	r0, 8009830 <__ssputs_r+0x5c>
 800981a:	230c      	movs	r3, #12
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	f8ca 3000 	str.w	r3, [sl]
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982a:	81a3      	strh	r3, [r4, #12]
 800982c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009830:	464a      	mov	r2, r9
 8009832:	6921      	ldr	r1, [r4, #16]
 8009834:	f7ff fd6a 	bl	800930c <memcpy>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800983e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	6126      	str	r6, [r4, #16]
 8009846:	444e      	add	r6, r9
 8009848:	6026      	str	r6, [r4, #0]
 800984a:	463e      	mov	r6, r7
 800984c:	6165      	str	r5, [r4, #20]
 800984e:	eba5 0509 	sub.w	r5, r5, r9
 8009852:	60a5      	str	r5, [r4, #8]
 8009854:	42be      	cmp	r6, r7
 8009856:	d900      	bls.n	800985a <__ssputs_r+0x86>
 8009858:	463e      	mov	r6, r7
 800985a:	4632      	mov	r2, r6
 800985c:	4641      	mov	r1, r8
 800985e:	6820      	ldr	r0, [r4, #0]
 8009860:	f001 fb9e 	bl	800afa0 <memmove>
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	2000      	movs	r0, #0
 8009868:	1b9b      	subs	r3, r3, r6
 800986a:	60a3      	str	r3, [r4, #8]
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	4433      	add	r3, r6
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	e7db      	b.n	800982c <__ssputs_r+0x58>
 8009874:	462a      	mov	r2, r5
 8009876:	f001 fbb9 	bl	800afec <_realloc_r>
 800987a:	4606      	mov	r6, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	d1e1      	bne.n	8009844 <__ssputs_r+0x70>
 8009880:	4650      	mov	r0, sl
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	f7ff feca 	bl	800961c <_free_r>
 8009888:	e7c7      	b.n	800981a <__ssputs_r+0x46>
	...

0800988c <_svfiprintf_r>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	4698      	mov	r8, r3
 8009892:	898b      	ldrh	r3, [r1, #12]
 8009894:	4607      	mov	r7, r0
 8009896:	061b      	lsls	r3, r3, #24
 8009898:	460d      	mov	r5, r1
 800989a:	4614      	mov	r4, r2
 800989c:	b09d      	sub	sp, #116	; 0x74
 800989e:	d50e      	bpl.n	80098be <_svfiprintf_r+0x32>
 80098a0:	690b      	ldr	r3, [r1, #16]
 80098a2:	b963      	cbnz	r3, 80098be <_svfiprintf_r+0x32>
 80098a4:	2140      	movs	r1, #64	; 0x40
 80098a6:	f7ff ff21 	bl	80096ec <_malloc_r>
 80098aa:	6028      	str	r0, [r5, #0]
 80098ac:	6128      	str	r0, [r5, #16]
 80098ae:	b920      	cbnz	r0, 80098ba <_svfiprintf_r+0x2e>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e0d1      	b.n	8009a5e <_svfiprintf_r+0x1d2>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	616b      	str	r3, [r5, #20]
 80098be:	2300      	movs	r3, #0
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	2320      	movs	r3, #32
 80098c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098c8:	2330      	movs	r3, #48	; 0x30
 80098ca:	f04f 0901 	mov.w	r9, #1
 80098ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a78 <_svfiprintf_r+0x1ec>
 80098d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098da:	4623      	mov	r3, r4
 80098dc:	469a      	mov	sl, r3
 80098de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e2:	b10a      	cbz	r2, 80098e8 <_svfiprintf_r+0x5c>
 80098e4:	2a25      	cmp	r2, #37	; 0x25
 80098e6:	d1f9      	bne.n	80098dc <_svfiprintf_r+0x50>
 80098e8:	ebba 0b04 	subs.w	fp, sl, r4
 80098ec:	d00b      	beq.n	8009906 <_svfiprintf_r+0x7a>
 80098ee:	465b      	mov	r3, fp
 80098f0:	4622      	mov	r2, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ff6d 	bl	80097d4 <__ssputs_r>
 80098fa:	3001      	adds	r0, #1
 80098fc:	f000 80aa 	beq.w	8009a54 <_svfiprintf_r+0x1c8>
 8009900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009902:	445a      	add	r2, fp
 8009904:	9209      	str	r2, [sp, #36]	; 0x24
 8009906:	f89a 3000 	ldrb.w	r3, [sl]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80a2 	beq.w	8009a54 <_svfiprintf_r+0x1c8>
 8009910:	2300      	movs	r3, #0
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991a:	f10a 0a01 	add.w	sl, sl, #1
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	9307      	str	r3, [sp, #28]
 8009922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009926:	931a      	str	r3, [sp, #104]	; 0x68
 8009928:	4654      	mov	r4, sl
 800992a:	2205      	movs	r2, #5
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	4851      	ldr	r0, [pc, #324]	; (8009a78 <_svfiprintf_r+0x1ec>)
 8009932:	f001 fb27 	bl	800af84 <memchr>
 8009936:	9a04      	ldr	r2, [sp, #16]
 8009938:	b9d8      	cbnz	r0, 8009972 <_svfiprintf_r+0xe6>
 800993a:	06d0      	lsls	r0, r2, #27
 800993c:	bf44      	itt	mi
 800993e:	2320      	movmi	r3, #32
 8009940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009944:	0711      	lsls	r1, r2, #28
 8009946:	bf44      	itt	mi
 8009948:	232b      	movmi	r3, #43	; 0x2b
 800994a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800994e:	f89a 3000 	ldrb.w	r3, [sl]
 8009952:	2b2a      	cmp	r3, #42	; 0x2a
 8009954:	d015      	beq.n	8009982 <_svfiprintf_r+0xf6>
 8009956:	4654      	mov	r4, sl
 8009958:	2000      	movs	r0, #0
 800995a:	f04f 0c0a 	mov.w	ip, #10
 800995e:	9a07      	ldr	r2, [sp, #28]
 8009960:	4621      	mov	r1, r4
 8009962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009966:	3b30      	subs	r3, #48	; 0x30
 8009968:	2b09      	cmp	r3, #9
 800996a:	d94e      	bls.n	8009a0a <_svfiprintf_r+0x17e>
 800996c:	b1b0      	cbz	r0, 800999c <_svfiprintf_r+0x110>
 800996e:	9207      	str	r2, [sp, #28]
 8009970:	e014      	b.n	800999c <_svfiprintf_r+0x110>
 8009972:	eba0 0308 	sub.w	r3, r0, r8
 8009976:	fa09 f303 	lsl.w	r3, r9, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	46a2      	mov	sl, r4
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	e7d2      	b.n	8009928 <_svfiprintf_r+0x9c>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	1d19      	adds	r1, r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	9103      	str	r1, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfbb      	ittet	lt
 800998e:	425b      	neglt	r3, r3
 8009990:	f042 0202 	orrlt.w	r2, r2, #2
 8009994:	9307      	strge	r3, [sp, #28]
 8009996:	9307      	strlt	r3, [sp, #28]
 8009998:	bfb8      	it	lt
 800999a:	9204      	strlt	r2, [sp, #16]
 800999c:	7823      	ldrb	r3, [r4, #0]
 800999e:	2b2e      	cmp	r3, #46	; 0x2e
 80099a0:	d10c      	bne.n	80099bc <_svfiprintf_r+0x130>
 80099a2:	7863      	ldrb	r3, [r4, #1]
 80099a4:	2b2a      	cmp	r3, #42	; 0x2a
 80099a6:	d135      	bne.n	8009a14 <_svfiprintf_r+0x188>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	3402      	adds	r4, #2
 80099ac:	1d1a      	adds	r2, r3, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	9203      	str	r2, [sp, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfb8      	it	lt
 80099b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009a7c <_svfiprintf_r+0x1f0>
 80099c0:	2203      	movs	r2, #3
 80099c2:	4650      	mov	r0, sl
 80099c4:	7821      	ldrb	r1, [r4, #0]
 80099c6:	f001 fadd 	bl	800af84 <memchr>
 80099ca:	b140      	cbz	r0, 80099de <_svfiprintf_r+0x152>
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	eba0 000a 	sub.w	r0, r0, sl
 80099d2:	fa03 f000 	lsl.w	r0, r3, r0
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3401      	adds	r4, #1
 80099da:	4303      	orrs	r3, r0
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e2:	2206      	movs	r2, #6
 80099e4:	4826      	ldr	r0, [pc, #152]	; (8009a80 <_svfiprintf_r+0x1f4>)
 80099e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ea:	f001 facb 	bl	800af84 <memchr>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d038      	beq.n	8009a64 <_svfiprintf_r+0x1d8>
 80099f2:	4b24      	ldr	r3, [pc, #144]	; (8009a84 <_svfiprintf_r+0x1f8>)
 80099f4:	bb1b      	cbnz	r3, 8009a3e <_svfiprintf_r+0x1b2>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	3307      	adds	r3, #7
 80099fa:	f023 0307 	bic.w	r3, r3, #7
 80099fe:	3308      	adds	r3, #8
 8009a00:	9303      	str	r3, [sp, #12]
 8009a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a04:	4433      	add	r3, r6
 8009a06:	9309      	str	r3, [sp, #36]	; 0x24
 8009a08:	e767      	b.n	80098da <_svfiprintf_r+0x4e>
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a12:	e7a5      	b.n	8009960 <_svfiprintf_r+0xd4>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f04f 0c0a 	mov.w	ip, #10
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	3401      	adds	r4, #1
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	4620      	mov	r0, r4
 8009a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a26:	3a30      	subs	r2, #48	; 0x30
 8009a28:	2a09      	cmp	r2, #9
 8009a2a:	d903      	bls.n	8009a34 <_svfiprintf_r+0x1a8>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0c5      	beq.n	80099bc <_svfiprintf_r+0x130>
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	e7c3      	b.n	80099bc <_svfiprintf_r+0x130>
 8009a34:	4604      	mov	r4, r0
 8009a36:	2301      	movs	r3, #1
 8009a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a3c:	e7f0      	b.n	8009a20 <_svfiprintf_r+0x194>
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	462a      	mov	r2, r5
 8009a44:	4638      	mov	r0, r7
 8009a46:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <_svfiprintf_r+0x1fc>)
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	f3af 8000 	nop.w
 8009a4e:	1c42      	adds	r2, r0, #1
 8009a50:	4606      	mov	r6, r0
 8009a52:	d1d6      	bne.n	8009a02 <_svfiprintf_r+0x176>
 8009a54:	89ab      	ldrh	r3, [r5, #12]
 8009a56:	065b      	lsls	r3, r3, #25
 8009a58:	f53f af2c 	bmi.w	80098b4 <_svfiprintf_r+0x28>
 8009a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a5e:	b01d      	add	sp, #116	; 0x74
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <_svfiprintf_r+0x1fc>)
 8009a6e:	a904      	add	r1, sp, #16
 8009a70:	f000 fba8 	bl	800a1c4 <_printf_i>
 8009a74:	e7eb      	b.n	8009a4e <_svfiprintf_r+0x1c2>
 8009a76:	bf00      	nop
 8009a78:	0800b310 	.word	0x0800b310
 8009a7c:	0800b316 	.word	0x0800b316
 8009a80:	0800b31a 	.word	0x0800b31a
 8009a84:	00000000 	.word	0x00000000
 8009a88:	080097d5 	.word	0x080097d5

08009a8c <_sungetc_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	1c4b      	adds	r3, r1, #1
 8009a90:	4614      	mov	r4, r2
 8009a92:	d103      	bne.n	8009a9c <_sungetc_r+0x10>
 8009a94:	f04f 35ff 	mov.w	r5, #4294967295
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	8993      	ldrh	r3, [r2, #12]
 8009a9e:	b2cd      	uxtb	r5, r1
 8009aa0:	f023 0320 	bic.w	r3, r3, #32
 8009aa4:	8193      	strh	r3, [r2, #12]
 8009aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aa8:	6852      	ldr	r2, [r2, #4]
 8009aaa:	b18b      	cbz	r3, 8009ad0 <_sungetc_r+0x44>
 8009aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	dd08      	ble.n	8009ac4 <_sungetc_r+0x38>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	1e5a      	subs	r2, r3, #1
 8009ab6:	6022      	str	r2, [r4, #0]
 8009ab8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009abc:	6863      	ldr	r3, [r4, #4]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	e7e9      	b.n	8009a98 <_sungetc_r+0xc>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f000 ff41 	bl	800a94c <__submore>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0f1      	beq.n	8009ab2 <_sungetc_r+0x26>
 8009ace:	e7e1      	b.n	8009a94 <_sungetc_r+0x8>
 8009ad0:	6921      	ldr	r1, [r4, #16]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	b151      	cbz	r1, 8009aec <_sungetc_r+0x60>
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	d208      	bcs.n	8009aec <_sungetc_r+0x60>
 8009ada:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009ade:	42a9      	cmp	r1, r5
 8009ae0:	d104      	bne.n	8009aec <_sungetc_r+0x60>
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	6062      	str	r2, [r4, #4]
 8009aea:	e7d5      	b.n	8009a98 <_sungetc_r+0xc>
 8009aec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af4:	6363      	str	r3, [r4, #52]	; 0x34
 8009af6:	2303      	movs	r3, #3
 8009af8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009afa:	4623      	mov	r3, r4
 8009afc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	2301      	movs	r3, #1
 8009b04:	e7dc      	b.n	8009ac0 <_sungetc_r+0x34>

08009b06 <__ssrefill_r>:
 8009b06:	b510      	push	{r4, lr}
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009b0c:	b169      	cbz	r1, 8009b2a <__ssrefill_r+0x24>
 8009b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b12:	4299      	cmp	r1, r3
 8009b14:	d001      	beq.n	8009b1a <__ssrefill_r+0x14>
 8009b16:	f7ff fd81 	bl	800961c <_free_r>
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	b113      	cbz	r3, 8009b2a <__ssrefill_r+0x24>
 8009b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	2300      	movs	r3, #0
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	f043 0320 	orr.w	r3, r3, #32
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	e7f3      	b.n	8009b28 <__ssrefill_r+0x22>

08009b40 <__ssvfiscanf_r>:
 8009b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	2100      	movs	r1, #0
 8009b48:	4606      	mov	r6, r0
 8009b4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009b4e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009b52:	49a7      	ldr	r1, [pc, #668]	; (8009df0 <__ssvfiscanf_r+0x2b0>)
 8009b54:	f10d 0804 	add.w	r8, sp, #4
 8009b58:	91a0      	str	r1, [sp, #640]	; 0x280
 8009b5a:	49a6      	ldr	r1, [pc, #664]	; (8009df4 <__ssvfiscanf_r+0x2b4>)
 8009b5c:	4fa6      	ldr	r7, [pc, #664]	; (8009df8 <__ssvfiscanf_r+0x2b8>)
 8009b5e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009dfc <__ssvfiscanf_r+0x2bc>
 8009b62:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009b66:	91a1      	str	r1, [sp, #644]	; 0x284
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	7813      	ldrb	r3, [r2, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 815c 	beq.w	8009e2a <__ssvfiscanf_r+0x2ea>
 8009b72:	5dd9      	ldrb	r1, [r3, r7]
 8009b74:	1c55      	adds	r5, r2, #1
 8009b76:	f011 0108 	ands.w	r1, r1, #8
 8009b7a:	d019      	beq.n	8009bb0 <__ssvfiscanf_r+0x70>
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dd0f      	ble.n	8009ba2 <__ssvfiscanf_r+0x62>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	5cba      	ldrb	r2, [r7, r2]
 8009b88:	0712      	lsls	r2, r2, #28
 8009b8a:	d401      	bmi.n	8009b90 <__ssvfiscanf_r+0x50>
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	e7ec      	b.n	8009b6a <__ssvfiscanf_r+0x2a>
 8009b90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b92:	3301      	adds	r3, #1
 8009b94:	3201      	adds	r2, #1
 8009b96:	9245      	str	r2, [sp, #276]	; 0x114
 8009b98:	6862      	ldr	r2, [r4, #4]
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	6062      	str	r2, [r4, #4]
 8009ba0:	e7ec      	b.n	8009b7c <__ssvfiscanf_r+0x3c>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ba8:	4798      	blx	r3
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d0e9      	beq.n	8009b82 <__ssvfiscanf_r+0x42>
 8009bae:	e7ed      	b.n	8009b8c <__ssvfiscanf_r+0x4c>
 8009bb0:	2b25      	cmp	r3, #37	; 0x25
 8009bb2:	d012      	beq.n	8009bda <__ssvfiscanf_r+0x9a>
 8009bb4:	469a      	mov	sl, r3
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f340 8094 	ble.w	8009ce6 <__ssvfiscanf_r+0x1a6>
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	7813      	ldrb	r3, [r2, #0]
 8009bc2:	4553      	cmp	r3, sl
 8009bc4:	f040 8131 	bne.w	8009e2a <__ssvfiscanf_r+0x2ea>
 8009bc8:	6863      	ldr	r3, [r4, #4]
 8009bca:	3201      	adds	r2, #1
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009bd2:	6022      	str	r2, [r4, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	9345      	str	r3, [sp, #276]	; 0x114
 8009bd8:	e7d8      	b.n	8009b8c <__ssvfiscanf_r+0x4c>
 8009bda:	9141      	str	r1, [sp, #260]	; 0x104
 8009bdc:	9143      	str	r1, [sp, #268]	; 0x10c
 8009bde:	7853      	ldrb	r3, [r2, #1]
 8009be0:	2b2a      	cmp	r3, #42	; 0x2a
 8009be2:	bf04      	itt	eq
 8009be4:	2310      	moveq	r3, #16
 8009be6:	1c95      	addeq	r5, r2, #2
 8009be8:	f04f 020a 	mov.w	r2, #10
 8009bec:	bf08      	it	eq
 8009bee:	9341      	streq	r3, [sp, #260]	; 0x104
 8009bf0:	46aa      	mov	sl, r5
 8009bf2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009bf6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009bfa:	2b09      	cmp	r3, #9
 8009bfc:	d91d      	bls.n	8009c3a <__ssvfiscanf_r+0xfa>
 8009bfe:	2203      	movs	r2, #3
 8009c00:	487e      	ldr	r0, [pc, #504]	; (8009dfc <__ssvfiscanf_r+0x2bc>)
 8009c02:	f001 f9bf 	bl	800af84 <memchr>
 8009c06:	b140      	cbz	r0, 8009c1a <__ssvfiscanf_r+0xda>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4655      	mov	r5, sl
 8009c0c:	eba0 0009 	sub.w	r0, r0, r9
 8009c10:	fa03 f000 	lsl.w	r0, r3, r0
 8009c14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c16:	4318      	orrs	r0, r3
 8009c18:	9041      	str	r0, [sp, #260]	; 0x104
 8009c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c1e:	2b78      	cmp	r3, #120	; 0x78
 8009c20:	d806      	bhi.n	8009c30 <__ssvfiscanf_r+0xf0>
 8009c22:	2b57      	cmp	r3, #87	; 0x57
 8009c24:	d810      	bhi.n	8009c48 <__ssvfiscanf_r+0x108>
 8009c26:	2b25      	cmp	r3, #37	; 0x25
 8009c28:	d0c4      	beq.n	8009bb4 <__ssvfiscanf_r+0x74>
 8009c2a:	d857      	bhi.n	8009cdc <__ssvfiscanf_r+0x19c>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d065      	beq.n	8009cfc <__ssvfiscanf_r+0x1bc>
 8009c30:	2303      	movs	r3, #3
 8009c32:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c34:	230a      	movs	r3, #10
 8009c36:	9342      	str	r3, [sp, #264]	; 0x108
 8009c38:	e072      	b.n	8009d20 <__ssvfiscanf_r+0x1e0>
 8009c3a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009c3c:	4655      	mov	r5, sl
 8009c3e:	fb02 1103 	mla	r1, r2, r3, r1
 8009c42:	3930      	subs	r1, #48	; 0x30
 8009c44:	9143      	str	r1, [sp, #268]	; 0x10c
 8009c46:	e7d3      	b.n	8009bf0 <__ssvfiscanf_r+0xb0>
 8009c48:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009c4c:	2a20      	cmp	r2, #32
 8009c4e:	d8ef      	bhi.n	8009c30 <__ssvfiscanf_r+0xf0>
 8009c50:	a101      	add	r1, pc, #4	; (adr r1, 8009c58 <__ssvfiscanf_r+0x118>)
 8009c52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009d0b 	.word	0x08009d0b
 8009c5c:	08009c31 	.word	0x08009c31
 8009c60:	08009c31 	.word	0x08009c31
 8009c64:	08009d69 	.word	0x08009d69
 8009c68:	08009c31 	.word	0x08009c31
 8009c6c:	08009c31 	.word	0x08009c31
 8009c70:	08009c31 	.word	0x08009c31
 8009c74:	08009c31 	.word	0x08009c31
 8009c78:	08009c31 	.word	0x08009c31
 8009c7c:	08009c31 	.word	0x08009c31
 8009c80:	08009c31 	.word	0x08009c31
 8009c84:	08009d7f 	.word	0x08009d7f
 8009c88:	08009d55 	.word	0x08009d55
 8009c8c:	08009ce3 	.word	0x08009ce3
 8009c90:	08009ce3 	.word	0x08009ce3
 8009c94:	08009ce3 	.word	0x08009ce3
 8009c98:	08009c31 	.word	0x08009c31
 8009c9c:	08009d59 	.word	0x08009d59
 8009ca0:	08009c31 	.word	0x08009c31
 8009ca4:	08009c31 	.word	0x08009c31
 8009ca8:	08009c31 	.word	0x08009c31
 8009cac:	08009c31 	.word	0x08009c31
 8009cb0:	08009d8f 	.word	0x08009d8f
 8009cb4:	08009d61 	.word	0x08009d61
 8009cb8:	08009d03 	.word	0x08009d03
 8009cbc:	08009c31 	.word	0x08009c31
 8009cc0:	08009c31 	.word	0x08009c31
 8009cc4:	08009d8b 	.word	0x08009d8b
 8009cc8:	08009c31 	.word	0x08009c31
 8009ccc:	08009d55 	.word	0x08009d55
 8009cd0:	08009c31 	.word	0x08009c31
 8009cd4:	08009c31 	.word	0x08009c31
 8009cd8:	08009d0b 	.word	0x08009d0b
 8009cdc:	3b45      	subs	r3, #69	; 0x45
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d8a6      	bhi.n	8009c30 <__ssvfiscanf_r+0xf0>
 8009ce2:	2305      	movs	r3, #5
 8009ce4:	e01b      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4630      	mov	r0, r6
 8009cea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cec:	4798      	blx	r3
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f af65 	beq.w	8009bbe <__ssvfiscanf_r+0x7e>
 8009cf4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f040 808d 	bne.w	8009e16 <__ssvfiscanf_r+0x2d6>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e08f      	b.n	8009e22 <__ssvfiscanf_r+0x2e2>
 8009d02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d04:	f042 0220 	orr.w	r2, r2, #32
 8009d08:	9241      	str	r2, [sp, #260]	; 0x104
 8009d0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d10:	9241      	str	r2, [sp, #260]	; 0x104
 8009d12:	2210      	movs	r2, #16
 8009d14:	2b6f      	cmp	r3, #111	; 0x6f
 8009d16:	bf34      	ite	cc
 8009d18:	2303      	movcc	r3, #3
 8009d1a:	2304      	movcs	r3, #4
 8009d1c:	9242      	str	r2, [sp, #264]	; 0x108
 8009d1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dd42      	ble.n	8009dac <__ssvfiscanf_r+0x26c>
 8009d26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d28:	0659      	lsls	r1, r3, #25
 8009d2a:	d404      	bmi.n	8009d36 <__ssvfiscanf_r+0x1f6>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	5cba      	ldrb	r2, [r7, r2]
 8009d32:	0712      	lsls	r2, r2, #28
 8009d34:	d441      	bmi.n	8009dba <__ssvfiscanf_r+0x27a>
 8009d36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	dc50      	bgt.n	8009dde <__ssvfiscanf_r+0x29e>
 8009d3c:	466b      	mov	r3, sp
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4630      	mov	r0, r6
 8009d42:	a941      	add	r1, sp, #260	; 0x104
 8009d44:	f000 fb64 	bl	800a410 <_scanf_chars>
 8009d48:	2801      	cmp	r0, #1
 8009d4a:	d06e      	beq.n	8009e2a <__ssvfiscanf_r+0x2ea>
 8009d4c:	2802      	cmp	r0, #2
 8009d4e:	f47f af1d 	bne.w	8009b8c <__ssvfiscanf_r+0x4c>
 8009d52:	e7cf      	b.n	8009cf4 <__ssvfiscanf_r+0x1b4>
 8009d54:	220a      	movs	r2, #10
 8009d56:	e7dd      	b.n	8009d14 <__ssvfiscanf_r+0x1d4>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9342      	str	r3, [sp, #264]	; 0x108
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e7de      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009d60:	2308      	movs	r3, #8
 8009d62:	9342      	str	r3, [sp, #264]	; 0x108
 8009d64:	2304      	movs	r3, #4
 8009d66:	e7da      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	f000 fcc4 	bl	800a6f8 <__sccl>
 8009d70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d72:	4605      	mov	r5, r0
 8009d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d78:	9341      	str	r3, [sp, #260]	; 0x104
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e7cf      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009d7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d84:	9341      	str	r3, [sp, #260]	; 0x104
 8009d86:	2300      	movs	r3, #0
 8009d88:	e7c9      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e7c7      	b.n	8009d1e <__ssvfiscanf_r+0x1de>
 8009d8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009d90:	06c3      	lsls	r3, r0, #27
 8009d92:	f53f aefb 	bmi.w	8009b8c <__ssvfiscanf_r+0x4c>
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	9100      	str	r1, [sp, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f010 0f01 	tst.w	r0, #1
 8009da4:	bf14      	ite	ne
 8009da6:	801a      	strhne	r2, [r3, #0]
 8009da8:	601a      	streq	r2, [r3, #0]
 8009daa:	e6ef      	b.n	8009b8c <__ssvfiscanf_r+0x4c>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4630      	mov	r0, r6
 8009db0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009db2:	4798      	blx	r3
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d0b6      	beq.n	8009d26 <__ssvfiscanf_r+0x1e6>
 8009db8:	e79c      	b.n	8009cf4 <__ssvfiscanf_r+0x1b4>
 8009dba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	9245      	str	r2, [sp, #276]	; 0x114
 8009dc0:	6862      	ldr	r2, [r4, #4]
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	6062      	str	r2, [r4, #4]
 8009dc8:	dd02      	ble.n	8009dd0 <__ssvfiscanf_r+0x290>
 8009dca:	3301      	adds	r3, #1
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	e7ad      	b.n	8009d2c <__ssvfiscanf_r+0x1ec>
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009dd6:	4798      	blx	r3
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0a7      	beq.n	8009d2c <__ssvfiscanf_r+0x1ec>
 8009ddc:	e78a      	b.n	8009cf4 <__ssvfiscanf_r+0x1b4>
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	dc0e      	bgt.n	8009e00 <__ssvfiscanf_r+0x2c0>
 8009de2:	466b      	mov	r3, sp
 8009de4:	4622      	mov	r2, r4
 8009de6:	4630      	mov	r0, r6
 8009de8:	a941      	add	r1, sp, #260	; 0x104
 8009dea:	f000 fb6b 	bl	800a4c4 <_scanf_i>
 8009dee:	e7ab      	b.n	8009d48 <__ssvfiscanf_r+0x208>
 8009df0:	08009a8d 	.word	0x08009a8d
 8009df4:	08009b07 	.word	0x08009b07
 8009df8:	0800b35f 	.word	0x0800b35f
 8009dfc:	0800b316 	.word	0x0800b316
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <__ssvfiscanf_r+0x2f0>)
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f43f aec2 	beq.w	8009b8c <__ssvfiscanf_r+0x4c>
 8009e08:	466b      	mov	r3, sp
 8009e0a:	4622      	mov	r2, r4
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	a941      	add	r1, sp, #260	; 0x104
 8009e10:	f3af 8000 	nop.w
 8009e14:	e798      	b.n	8009d48 <__ssvfiscanf_r+0x208>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e1c:	bf18      	it	ne
 8009e1e:	f04f 30ff 	movne.w	r0, #4294967295
 8009e22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e2c:	e7f9      	b.n	8009e22 <__ssvfiscanf_r+0x2e2>
 8009e2e:	bf00      	nop
 8009e30:	00000000 	.word	0x00000000

08009e34 <__sfputc_r>:
 8009e34:	6893      	ldr	r3, [r2, #8]
 8009e36:	b410      	push	{r4}
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	6093      	str	r3, [r2, #8]
 8009e3e:	da07      	bge.n	8009e50 <__sfputc_r+0x1c>
 8009e40:	6994      	ldr	r4, [r2, #24]
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	db01      	blt.n	8009e4a <__sfputc_r+0x16>
 8009e46:	290a      	cmp	r1, #10
 8009e48:	d102      	bne.n	8009e50 <__sfputc_r+0x1c>
 8009e4a:	bc10      	pop	{r4}
 8009e4c:	f000 bdb6 	b.w	800a9bc <__swbuf_r>
 8009e50:	6813      	ldr	r3, [r2, #0]
 8009e52:	1c58      	adds	r0, r3, #1
 8009e54:	6010      	str	r0, [r2, #0]
 8009e56:	7019      	strb	r1, [r3, #0]
 8009e58:	4608      	mov	r0, r1
 8009e5a:	bc10      	pop	{r4}
 8009e5c:	4770      	bx	lr

08009e5e <__sfputs_r>:
 8009e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e60:	4606      	mov	r6, r0
 8009e62:	460f      	mov	r7, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	18d5      	adds	r5, r2, r3
 8009e68:	42ac      	cmp	r4, r5
 8009e6a:	d101      	bne.n	8009e70 <__sfputs_r+0x12>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e007      	b.n	8009e80 <__sfputs_r+0x22>
 8009e70:	463a      	mov	r2, r7
 8009e72:	4630      	mov	r0, r6
 8009e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e78:	f7ff ffdc 	bl	8009e34 <__sfputc_r>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d1f3      	bne.n	8009e68 <__sfputs_r+0xa>
 8009e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e84 <_vfiprintf_r>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	460d      	mov	r5, r1
 8009e8a:	4614      	mov	r4, r2
 8009e8c:	4698      	mov	r8, r3
 8009e8e:	4606      	mov	r6, r0
 8009e90:	b09d      	sub	sp, #116	; 0x74
 8009e92:	b118      	cbz	r0, 8009e9c <_vfiprintf_r+0x18>
 8009e94:	6983      	ldr	r3, [r0, #24]
 8009e96:	b90b      	cbnz	r3, 8009e9c <_vfiprintf_r+0x18>
 8009e98:	f000 ff6e 	bl	800ad78 <__sinit>
 8009e9c:	4b89      	ldr	r3, [pc, #548]	; (800a0c4 <_vfiprintf_r+0x240>)
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	d11b      	bne.n	8009eda <_vfiprintf_r+0x56>
 8009ea2:	6875      	ldr	r5, [r6, #4]
 8009ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea6:	07d9      	lsls	r1, r3, #31
 8009ea8:	d405      	bmi.n	8009eb6 <_vfiprintf_r+0x32>
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d402      	bmi.n	8009eb6 <_vfiprintf_r+0x32>
 8009eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb2:	f000 ffff 	bl	800aeb4 <__retarget_lock_acquire_recursive>
 8009eb6:	89ab      	ldrh	r3, [r5, #12]
 8009eb8:	071b      	lsls	r3, r3, #28
 8009eba:	d501      	bpl.n	8009ec0 <_vfiprintf_r+0x3c>
 8009ebc:	692b      	ldr	r3, [r5, #16]
 8009ebe:	b9eb      	cbnz	r3, 8009efc <_vfiprintf_r+0x78>
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f000 fdcc 	bl	800aa60 <__swsetup_r>
 8009ec8:	b1c0      	cbz	r0, 8009efc <_vfiprintf_r+0x78>
 8009eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ecc:	07dc      	lsls	r4, r3, #31
 8009ece:	d50e      	bpl.n	8009eee <_vfiprintf_r+0x6a>
 8009ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed4:	b01d      	add	sp, #116	; 0x74
 8009ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eda:	4b7b      	ldr	r3, [pc, #492]	; (800a0c8 <_vfiprintf_r+0x244>)
 8009edc:	429d      	cmp	r5, r3
 8009ede:	d101      	bne.n	8009ee4 <_vfiprintf_r+0x60>
 8009ee0:	68b5      	ldr	r5, [r6, #8]
 8009ee2:	e7df      	b.n	8009ea4 <_vfiprintf_r+0x20>
 8009ee4:	4b79      	ldr	r3, [pc, #484]	; (800a0cc <_vfiprintf_r+0x248>)
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	bf08      	it	eq
 8009eea:	68f5      	ldreq	r5, [r6, #12]
 8009eec:	e7da      	b.n	8009ea4 <_vfiprintf_r+0x20>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	0598      	lsls	r0, r3, #22
 8009ef2:	d4ed      	bmi.n	8009ed0 <_vfiprintf_r+0x4c>
 8009ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef6:	f000 ffde 	bl	800aeb6 <__retarget_lock_release_recursive>
 8009efa:	e7e9      	b.n	8009ed0 <_vfiprintf_r+0x4c>
 8009efc:	2300      	movs	r3, #0
 8009efe:	9309      	str	r3, [sp, #36]	; 0x24
 8009f00:	2320      	movs	r3, #32
 8009f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f06:	2330      	movs	r3, #48	; 0x30
 8009f08:	f04f 0901 	mov.w	r9, #1
 8009f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a0d0 <_vfiprintf_r+0x24c>
 8009f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f18:	4623      	mov	r3, r4
 8009f1a:	469a      	mov	sl, r3
 8009f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f20:	b10a      	cbz	r2, 8009f26 <_vfiprintf_r+0xa2>
 8009f22:	2a25      	cmp	r2, #37	; 0x25
 8009f24:	d1f9      	bne.n	8009f1a <_vfiprintf_r+0x96>
 8009f26:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2a:	d00b      	beq.n	8009f44 <_vfiprintf_r+0xc0>
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff ff93 	bl	8009e5e <__sfputs_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	f000 80aa 	beq.w	800a092 <_vfiprintf_r+0x20e>
 8009f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f40:	445a      	add	r2, fp
 8009f42:	9209      	str	r2, [sp, #36]	; 0x24
 8009f44:	f89a 3000 	ldrb.w	r3, [sl]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 80a2 	beq.w	800a092 <_vfiprintf_r+0x20e>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f04f 32ff 	mov.w	r2, #4294967295
 8009f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f58:	f10a 0a01 	add.w	sl, sl, #1
 8009f5c:	9304      	str	r3, [sp, #16]
 8009f5e:	9307      	str	r3, [sp, #28]
 8009f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f64:	931a      	str	r3, [sp, #104]	; 0x68
 8009f66:	4654      	mov	r4, sl
 8009f68:	2205      	movs	r2, #5
 8009f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6e:	4858      	ldr	r0, [pc, #352]	; (800a0d0 <_vfiprintf_r+0x24c>)
 8009f70:	f001 f808 	bl	800af84 <memchr>
 8009f74:	9a04      	ldr	r2, [sp, #16]
 8009f76:	b9d8      	cbnz	r0, 8009fb0 <_vfiprintf_r+0x12c>
 8009f78:	06d1      	lsls	r1, r2, #27
 8009f7a:	bf44      	itt	mi
 8009f7c:	2320      	movmi	r3, #32
 8009f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f82:	0713      	lsls	r3, r2, #28
 8009f84:	bf44      	itt	mi
 8009f86:	232b      	movmi	r3, #43	; 0x2b
 8009f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f90:	2b2a      	cmp	r3, #42	; 0x2a
 8009f92:	d015      	beq.n	8009fc0 <_vfiprintf_r+0x13c>
 8009f94:	4654      	mov	r4, sl
 8009f96:	2000      	movs	r0, #0
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	9a07      	ldr	r2, [sp, #28]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa4:	3b30      	subs	r3, #48	; 0x30
 8009fa6:	2b09      	cmp	r3, #9
 8009fa8:	d94e      	bls.n	800a048 <_vfiprintf_r+0x1c4>
 8009faa:	b1b0      	cbz	r0, 8009fda <_vfiprintf_r+0x156>
 8009fac:	9207      	str	r2, [sp, #28]
 8009fae:	e014      	b.n	8009fda <_vfiprintf_r+0x156>
 8009fb0:	eba0 0308 	sub.w	r3, r0, r8
 8009fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	46a2      	mov	sl, r4
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	e7d2      	b.n	8009f66 <_vfiprintf_r+0xe2>
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	1d19      	adds	r1, r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	9103      	str	r1, [sp, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	bfbb      	ittet	lt
 8009fcc:	425b      	neglt	r3, r3
 8009fce:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd2:	9307      	strge	r3, [sp, #28]
 8009fd4:	9307      	strlt	r3, [sp, #28]
 8009fd6:	bfb8      	it	lt
 8009fd8:	9204      	strlt	r2, [sp, #16]
 8009fda:	7823      	ldrb	r3, [r4, #0]
 8009fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8009fde:	d10c      	bne.n	8009ffa <_vfiprintf_r+0x176>
 8009fe0:	7863      	ldrb	r3, [r4, #1]
 8009fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe4:	d135      	bne.n	800a052 <_vfiprintf_r+0x1ce>
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	3402      	adds	r4, #2
 8009fea:	1d1a      	adds	r2, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9203      	str	r2, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfb8      	it	lt
 8009ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a0d4 <_vfiprintf_r+0x250>
 8009ffe:	2203      	movs	r2, #3
 800a000:	4650      	mov	r0, sl
 800a002:	7821      	ldrb	r1, [r4, #0]
 800a004:	f000 ffbe 	bl	800af84 <memchr>
 800a008:	b140      	cbz	r0, 800a01c <_vfiprintf_r+0x198>
 800a00a:	2340      	movs	r3, #64	; 0x40
 800a00c:	eba0 000a 	sub.w	r0, r0, sl
 800a010:	fa03 f000 	lsl.w	r0, r3, r0
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	3401      	adds	r4, #1
 800a018:	4303      	orrs	r3, r0
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a020:	2206      	movs	r2, #6
 800a022:	482d      	ldr	r0, [pc, #180]	; (800a0d8 <_vfiprintf_r+0x254>)
 800a024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a028:	f000 ffac 	bl	800af84 <memchr>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d03f      	beq.n	800a0b0 <_vfiprintf_r+0x22c>
 800a030:	4b2a      	ldr	r3, [pc, #168]	; (800a0dc <_vfiprintf_r+0x258>)
 800a032:	bb1b      	cbnz	r3, 800a07c <_vfiprintf_r+0x1f8>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	3307      	adds	r3, #7
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	3308      	adds	r3, #8
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a042:	443b      	add	r3, r7
 800a044:	9309      	str	r3, [sp, #36]	; 0x24
 800a046:	e767      	b.n	8009f18 <_vfiprintf_r+0x94>
 800a048:	460c      	mov	r4, r1
 800a04a:	2001      	movs	r0, #1
 800a04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a050:	e7a5      	b.n	8009f9e <_vfiprintf_r+0x11a>
 800a052:	2300      	movs	r3, #0
 800a054:	f04f 0c0a 	mov.w	ip, #10
 800a058:	4619      	mov	r1, r3
 800a05a:	3401      	adds	r4, #1
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	4620      	mov	r0, r4
 800a060:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a064:	3a30      	subs	r2, #48	; 0x30
 800a066:	2a09      	cmp	r2, #9
 800a068:	d903      	bls.n	800a072 <_vfiprintf_r+0x1ee>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0c5      	beq.n	8009ffa <_vfiprintf_r+0x176>
 800a06e:	9105      	str	r1, [sp, #20]
 800a070:	e7c3      	b.n	8009ffa <_vfiprintf_r+0x176>
 800a072:	4604      	mov	r4, r0
 800a074:	2301      	movs	r3, #1
 800a076:	fb0c 2101 	mla	r1, ip, r1, r2
 800a07a:	e7f0      	b.n	800a05e <_vfiprintf_r+0x1da>
 800a07c:	ab03      	add	r3, sp, #12
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	462a      	mov	r2, r5
 800a082:	4630      	mov	r0, r6
 800a084:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <_vfiprintf_r+0x25c>)
 800a086:	a904      	add	r1, sp, #16
 800a088:	f3af 8000 	nop.w
 800a08c:	4607      	mov	r7, r0
 800a08e:	1c78      	adds	r0, r7, #1
 800a090:	d1d6      	bne.n	800a040 <_vfiprintf_r+0x1bc>
 800a092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a094:	07d9      	lsls	r1, r3, #31
 800a096:	d405      	bmi.n	800a0a4 <_vfiprintf_r+0x220>
 800a098:	89ab      	ldrh	r3, [r5, #12]
 800a09a:	059a      	lsls	r2, r3, #22
 800a09c:	d402      	bmi.n	800a0a4 <_vfiprintf_r+0x220>
 800a09e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a0:	f000 ff09 	bl	800aeb6 <__retarget_lock_release_recursive>
 800a0a4:	89ab      	ldrh	r3, [r5, #12]
 800a0a6:	065b      	lsls	r3, r3, #25
 800a0a8:	f53f af12 	bmi.w	8009ed0 <_vfiprintf_r+0x4c>
 800a0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ae:	e711      	b.n	8009ed4 <_vfiprintf_r+0x50>
 800a0b0:	ab03      	add	r3, sp, #12
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <_vfiprintf_r+0x25c>)
 800a0ba:	a904      	add	r1, sp, #16
 800a0bc:	f000 f882 	bl	800a1c4 <_printf_i>
 800a0c0:	e7e4      	b.n	800a08c <_vfiprintf_r+0x208>
 800a0c2:	bf00      	nop
 800a0c4:	0800b480 	.word	0x0800b480
 800a0c8:	0800b4a0 	.word	0x0800b4a0
 800a0cc:	0800b460 	.word	0x0800b460
 800a0d0:	0800b310 	.word	0x0800b310
 800a0d4:	0800b316 	.word	0x0800b316
 800a0d8:	0800b31a 	.word	0x0800b31a
 800a0dc:	00000000 	.word	0x00000000
 800a0e0:	08009e5f 	.word	0x08009e5f

0800a0e4 <_printf_common>:
 800a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	4699      	mov	r9, r3
 800a0ec:	688a      	ldr	r2, [r1, #8]
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	bfb8      	it	lt
 800a0f6:	4613      	movlt	r3, r2
 800a0f8:	6033      	str	r3, [r6, #0]
 800a0fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0fe:	460c      	mov	r4, r1
 800a100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a104:	b10a      	cbz	r2, 800a10a <_printf_common+0x26>
 800a106:	3301      	adds	r3, #1
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	0699      	lsls	r1, r3, #26
 800a10e:	bf42      	ittt	mi
 800a110:	6833      	ldrmi	r3, [r6, #0]
 800a112:	3302      	addmi	r3, #2
 800a114:	6033      	strmi	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	f015 0506 	ands.w	r5, r5, #6
 800a11c:	d106      	bne.n	800a12c <_printf_common+0x48>
 800a11e:	f104 0a19 	add.w	sl, r4, #25
 800a122:	68e3      	ldr	r3, [r4, #12]
 800a124:	6832      	ldr	r2, [r6, #0]
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	42ab      	cmp	r3, r5
 800a12a:	dc28      	bgt.n	800a17e <_printf_common+0x9a>
 800a12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a130:	1e13      	subs	r3, r2, #0
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	bf18      	it	ne
 800a136:	2301      	movne	r3, #1
 800a138:	0692      	lsls	r2, r2, #26
 800a13a:	d42d      	bmi.n	800a198 <_printf_common+0xb4>
 800a13c:	4649      	mov	r1, r9
 800a13e:	4638      	mov	r0, r7
 800a140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a144:	47c0      	blx	r8
 800a146:	3001      	adds	r0, #1
 800a148:	d020      	beq.n	800a18c <_printf_common+0xa8>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	68e5      	ldr	r5, [r4, #12]
 800a14e:	f003 0306 	and.w	r3, r3, #6
 800a152:	2b04      	cmp	r3, #4
 800a154:	bf18      	it	ne
 800a156:	2500      	movne	r5, #0
 800a158:	6832      	ldr	r2, [r6, #0]
 800a15a:	f04f 0600 	mov.w	r6, #0
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	bf08      	it	eq
 800a162:	1aad      	subeq	r5, r5, r2
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	bf08      	it	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfc4      	itt	gt
 800a170:	1a9b      	subgt	r3, r3, r2
 800a172:	18ed      	addgt	r5, r5, r3
 800a174:	341a      	adds	r4, #26
 800a176:	42b5      	cmp	r5, r6
 800a178:	d11a      	bne.n	800a1b0 <_printf_common+0xcc>
 800a17a:	2000      	movs	r0, #0
 800a17c:	e008      	b.n	800a190 <_printf_common+0xac>
 800a17e:	2301      	movs	r3, #1
 800a180:	4652      	mov	r2, sl
 800a182:	4649      	mov	r1, r9
 800a184:	4638      	mov	r0, r7
 800a186:	47c0      	blx	r8
 800a188:	3001      	adds	r0, #1
 800a18a:	d103      	bne.n	800a194 <_printf_common+0xb0>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a194:	3501      	adds	r5, #1
 800a196:	e7c4      	b.n	800a122 <_printf_common+0x3e>
 800a198:	2030      	movs	r0, #48	; 0x30
 800a19a:	18e1      	adds	r1, r4, r3
 800a19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1a6:	4422      	add	r2, r4
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ae:	e7c5      	b.n	800a13c <_printf_common+0x58>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c0      	blx	r8
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d0e6      	beq.n	800a18c <_printf_common+0xa8>
 800a1be:	3601      	adds	r6, #1
 800a1c0:	e7d9      	b.n	800a176 <_printf_common+0x92>
	...

0800a1c4 <_printf_i>:
 800a1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c8:	7e0f      	ldrb	r7, [r1, #24]
 800a1ca:	4691      	mov	r9, r2
 800a1cc:	2f78      	cmp	r7, #120	; 0x78
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	469a      	mov	sl, r3
 800a1d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1da:	d807      	bhi.n	800a1ec <_printf_i+0x28>
 800a1dc:	2f62      	cmp	r7, #98	; 0x62
 800a1de:	d80a      	bhi.n	800a1f6 <_printf_i+0x32>
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	f000 80d9 	beq.w	800a398 <_printf_i+0x1d4>
 800a1e6:	2f58      	cmp	r7, #88	; 0x58
 800a1e8:	f000 80a4 	beq.w	800a334 <_printf_i+0x170>
 800a1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f4:	e03a      	b.n	800a26c <_printf_i+0xa8>
 800a1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fa:	2b15      	cmp	r3, #21
 800a1fc:	d8f6      	bhi.n	800a1ec <_printf_i+0x28>
 800a1fe:	a101      	add	r1, pc, #4	; (adr r1, 800a204 <_printf_i+0x40>)
 800a200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a204:	0800a25d 	.word	0x0800a25d
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a1ed 	.word	0x0800a1ed
 800a210:	0800a1ed 	.word	0x0800a1ed
 800a214:	0800a1ed 	.word	0x0800a1ed
 800a218:	0800a1ed 	.word	0x0800a1ed
 800a21c:	0800a271 	.word	0x0800a271
 800a220:	0800a1ed 	.word	0x0800a1ed
 800a224:	0800a1ed 	.word	0x0800a1ed
 800a228:	0800a1ed 	.word	0x0800a1ed
 800a22c:	0800a1ed 	.word	0x0800a1ed
 800a230:	0800a37f 	.word	0x0800a37f
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a361 	.word	0x0800a361
 800a23c:	0800a1ed 	.word	0x0800a1ed
 800a240:	0800a1ed 	.word	0x0800a1ed
 800a244:	0800a3a1 	.word	0x0800a3a1
 800a248:	0800a1ed 	.word	0x0800a1ed
 800a24c:	0800a2a1 	.word	0x0800a2a1
 800a250:	0800a1ed 	.word	0x0800a1ed
 800a254:	0800a1ed 	.word	0x0800a1ed
 800a258:	0800a369 	.word	0x0800a369
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	602a      	str	r2, [r5, #0]
 800a264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a26c:	2301      	movs	r3, #1
 800a26e:	e0a4      	b.n	800a3ba <_printf_i+0x1f6>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	6829      	ldr	r1, [r5, #0]
 800a274:	0606      	lsls	r6, r0, #24
 800a276:	f101 0304 	add.w	r3, r1, #4
 800a27a:	d50a      	bpl.n	800a292 <_printf_i+0xce>
 800a27c:	680e      	ldr	r6, [r1, #0]
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	2e00      	cmp	r6, #0
 800a282:	da03      	bge.n	800a28c <_printf_i+0xc8>
 800a284:	232d      	movs	r3, #45	; 0x2d
 800a286:	4276      	negs	r6, r6
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	230a      	movs	r3, #10
 800a28e:	485e      	ldr	r0, [pc, #376]	; (800a408 <_printf_i+0x244>)
 800a290:	e019      	b.n	800a2c6 <_printf_i+0x102>
 800a292:	680e      	ldr	r6, [r1, #0]
 800a294:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	bf18      	it	ne
 800a29c:	b236      	sxthne	r6, r6
 800a29e:	e7ef      	b.n	800a280 <_printf_i+0xbc>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	6029      	str	r1, [r5, #0]
 800a2a8:	0601      	lsls	r1, r0, #24
 800a2aa:	d501      	bpl.n	800a2b0 <_printf_i+0xec>
 800a2ac:	681e      	ldr	r6, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <_printf_i+0xf2>
 800a2b0:	0646      	lsls	r6, r0, #25
 800a2b2:	d5fb      	bpl.n	800a2ac <_printf_i+0xe8>
 800a2b4:	881e      	ldrh	r6, [r3, #0]
 800a2b6:	2f6f      	cmp	r7, #111	; 0x6f
 800a2b8:	bf0c      	ite	eq
 800a2ba:	2308      	moveq	r3, #8
 800a2bc:	230a      	movne	r3, #10
 800a2be:	4852      	ldr	r0, [pc, #328]	; (800a408 <_printf_i+0x244>)
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2c6:	6865      	ldr	r5, [r4, #4]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	bfa8      	it	ge
 800a2cc:	6821      	ldrge	r1, [r4, #0]
 800a2ce:	60a5      	str	r5, [r4, #8]
 800a2d0:	bfa4      	itt	ge
 800a2d2:	f021 0104 	bicge.w	r1, r1, #4
 800a2d6:	6021      	strge	r1, [r4, #0]
 800a2d8:	b90e      	cbnz	r6, 800a2de <_printf_i+0x11a>
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	d04d      	beq.n	800a37a <_printf_i+0x1b6>
 800a2de:	4615      	mov	r5, r2
 800a2e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2e4:	fb03 6711 	mls	r7, r3, r1, r6
 800a2e8:	5dc7      	ldrb	r7, [r0, r7]
 800a2ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2ee:	4637      	mov	r7, r6
 800a2f0:	42bb      	cmp	r3, r7
 800a2f2:	460e      	mov	r6, r1
 800a2f4:	d9f4      	bls.n	800a2e0 <_printf_i+0x11c>
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d10b      	bne.n	800a312 <_printf_i+0x14e>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	07de      	lsls	r6, r3, #31
 800a2fe:	d508      	bpl.n	800a312 <_printf_i+0x14e>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	4299      	cmp	r1, r3
 800a306:	bfde      	ittt	le
 800a308:	2330      	movle	r3, #48	; 0x30
 800a30a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a30e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a312:	1b52      	subs	r2, r2, r5
 800a314:	6122      	str	r2, [r4, #16]
 800a316:	464b      	mov	r3, r9
 800a318:	4621      	mov	r1, r4
 800a31a:	4640      	mov	r0, r8
 800a31c:	f8cd a000 	str.w	sl, [sp]
 800a320:	aa03      	add	r2, sp, #12
 800a322:	f7ff fedf 	bl	800a0e4 <_printf_common>
 800a326:	3001      	adds	r0, #1
 800a328:	d14c      	bne.n	800a3c4 <_printf_i+0x200>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	b004      	add	sp, #16
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	4834      	ldr	r0, [pc, #208]	; (800a408 <_printf_i+0x244>)
 800a336:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a33a:	6829      	ldr	r1, [r5, #0]
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a342:	6029      	str	r1, [r5, #0]
 800a344:	061d      	lsls	r5, r3, #24
 800a346:	d514      	bpl.n	800a372 <_printf_i+0x1ae>
 800a348:	07df      	lsls	r7, r3, #31
 800a34a:	bf44      	itt	mi
 800a34c:	f043 0320 	orrmi.w	r3, r3, #32
 800a350:	6023      	strmi	r3, [r4, #0]
 800a352:	b91e      	cbnz	r6, 800a35c <_printf_i+0x198>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	f023 0320 	bic.w	r3, r3, #32
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	2310      	movs	r3, #16
 800a35e:	e7af      	b.n	800a2c0 <_printf_i+0xfc>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	f043 0320 	orr.w	r3, r3, #32
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	2378      	movs	r3, #120	; 0x78
 800a36a:	4828      	ldr	r0, [pc, #160]	; (800a40c <_printf_i+0x248>)
 800a36c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a370:	e7e3      	b.n	800a33a <_printf_i+0x176>
 800a372:	0659      	lsls	r1, r3, #25
 800a374:	bf48      	it	mi
 800a376:	b2b6      	uxthmi	r6, r6
 800a378:	e7e6      	b.n	800a348 <_printf_i+0x184>
 800a37a:	4615      	mov	r5, r2
 800a37c:	e7bb      	b.n	800a2f6 <_printf_i+0x132>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	6826      	ldr	r6, [r4, #0]
 800a382:	1d18      	adds	r0, r3, #4
 800a384:	6961      	ldr	r1, [r4, #20]
 800a386:	6028      	str	r0, [r5, #0]
 800a388:	0635      	lsls	r5, r6, #24
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	d501      	bpl.n	800a392 <_printf_i+0x1ce>
 800a38e:	6019      	str	r1, [r3, #0]
 800a390:	e002      	b.n	800a398 <_printf_i+0x1d4>
 800a392:	0670      	lsls	r0, r6, #25
 800a394:	d5fb      	bpl.n	800a38e <_printf_i+0x1ca>
 800a396:	8019      	strh	r1, [r3, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	4615      	mov	r5, r2
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	e7ba      	b.n	800a316 <_printf_i+0x152>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	681d      	ldr	r5, [r3, #0]
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fde9 	bl	800af84 <memchr>
 800a3b2:	b108      	cbz	r0, 800a3b8 <_printf_i+0x1f4>
 800a3b4:	1b40      	subs	r0, r0, r5
 800a3b6:	6060      	str	r0, [r4, #4]
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c2:	e7a8      	b.n	800a316 <_printf_i+0x152>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	47d0      	blx	sl
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d0ab      	beq.n	800a32a <_printf_i+0x166>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	079b      	lsls	r3, r3, #30
 800a3d6:	d413      	bmi.n	800a400 <_printf_i+0x23c>
 800a3d8:	68e0      	ldr	r0, [r4, #12]
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	4298      	cmp	r0, r3
 800a3de:	bfb8      	it	lt
 800a3e0:	4618      	movlt	r0, r3
 800a3e2:	e7a4      	b.n	800a32e <_printf_i+0x16a>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	47d0      	blx	sl
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d09b      	beq.n	800a32a <_printf_i+0x166>
 800a3f2:	3501      	adds	r5, #1
 800a3f4:	68e3      	ldr	r3, [r4, #12]
 800a3f6:	9903      	ldr	r1, [sp, #12]
 800a3f8:	1a5b      	subs	r3, r3, r1
 800a3fa:	42ab      	cmp	r3, r5
 800a3fc:	dcf2      	bgt.n	800a3e4 <_printf_i+0x220>
 800a3fe:	e7eb      	b.n	800a3d8 <_printf_i+0x214>
 800a400:	2500      	movs	r5, #0
 800a402:	f104 0619 	add.w	r6, r4, #25
 800a406:	e7f5      	b.n	800a3f4 <_printf_i+0x230>
 800a408:	0800b321 	.word	0x0800b321
 800a40c:	0800b332 	.word	0x0800b332

0800a410 <_scanf_chars>:
 800a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a414:	4615      	mov	r5, r2
 800a416:	688a      	ldr	r2, [r1, #8]
 800a418:	4680      	mov	r8, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	b932      	cbnz	r2, 800a42c <_scanf_chars+0x1c>
 800a41e:	698a      	ldr	r2, [r1, #24]
 800a420:	2a00      	cmp	r2, #0
 800a422:	bf0c      	ite	eq
 800a424:	2201      	moveq	r2, #1
 800a426:	f04f 32ff 	movne.w	r2, #4294967295
 800a42a:	608a      	str	r2, [r1, #8]
 800a42c:	2700      	movs	r7, #0
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a4c0 <_scanf_chars+0xb0>
 800a434:	06d1      	lsls	r1, r2, #27
 800a436:	bf5f      	itttt	pl
 800a438:	681a      	ldrpl	r2, [r3, #0]
 800a43a:	1d11      	addpl	r1, r2, #4
 800a43c:	6019      	strpl	r1, [r3, #0]
 800a43e:	6816      	ldrpl	r6, [r2, #0]
 800a440:	69a0      	ldr	r0, [r4, #24]
 800a442:	b188      	cbz	r0, 800a468 <_scanf_chars+0x58>
 800a444:	2801      	cmp	r0, #1
 800a446:	d107      	bne.n	800a458 <_scanf_chars+0x48>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	781a      	ldrb	r2, [r3, #0]
 800a44c:	6963      	ldr	r3, [r4, #20]
 800a44e:	5c9b      	ldrb	r3, [r3, r2]
 800a450:	b953      	cbnz	r3, 800a468 <_scanf_chars+0x58>
 800a452:	2f00      	cmp	r7, #0
 800a454:	d031      	beq.n	800a4ba <_scanf_chars+0xaa>
 800a456:	e022      	b.n	800a49e <_scanf_chars+0x8e>
 800a458:	2802      	cmp	r0, #2
 800a45a:	d120      	bne.n	800a49e <_scanf_chars+0x8e>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a464:	071b      	lsls	r3, r3, #28
 800a466:	d41a      	bmi.n	800a49e <_scanf_chars+0x8e>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	3701      	adds	r7, #1
 800a46c:	06da      	lsls	r2, r3, #27
 800a46e:	bf5e      	ittt	pl
 800a470:	682b      	ldrpl	r3, [r5, #0]
 800a472:	781b      	ldrbpl	r3, [r3, #0]
 800a474:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a478:	682a      	ldr	r2, [r5, #0]
 800a47a:	686b      	ldr	r3, [r5, #4]
 800a47c:	3201      	adds	r2, #1
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	68a2      	ldr	r2, [r4, #8]
 800a482:	3b01      	subs	r3, #1
 800a484:	3a01      	subs	r2, #1
 800a486:	606b      	str	r3, [r5, #4]
 800a488:	60a2      	str	r2, [r4, #8]
 800a48a:	b142      	cbz	r2, 800a49e <_scanf_chars+0x8e>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dcd7      	bgt.n	800a440 <_scanf_chars+0x30>
 800a490:	4629      	mov	r1, r5
 800a492:	4640      	mov	r0, r8
 800a494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a498:	4798      	blx	r3
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d0d0      	beq.n	800a440 <_scanf_chars+0x30>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	f013 0310 	ands.w	r3, r3, #16
 800a4a4:	d105      	bne.n	800a4b2 <_scanf_chars+0xa2>
 800a4a6:	68e2      	ldr	r2, [r4, #12]
 800a4a8:	3201      	adds	r2, #1
 800a4aa:	60e2      	str	r2, [r4, #12]
 800a4ac:	69a2      	ldr	r2, [r4, #24]
 800a4ae:	b102      	cbz	r2, 800a4b2 <_scanf_chars+0xa2>
 800a4b0:	7033      	strb	r3, [r6, #0]
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	443b      	add	r3, r7
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800b35f 	.word	0x0800b35f

0800a4c4 <_scanf_i>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	4698      	mov	r8, r3
 800a4cc:	4b75      	ldr	r3, [pc, #468]	; (800a6a4 <_scanf_i+0x1e0>)
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	4616      	mov	r6, r2
 800a4d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a4de:	4b72      	ldr	r3, [pc, #456]	; (800a6a8 <_scanf_i+0x1e4>)
 800a4e0:	69a1      	ldr	r1, [r4, #24]
 800a4e2:	4a72      	ldr	r2, [pc, #456]	; (800a6ac <_scanf_i+0x1e8>)
 800a4e4:	4627      	mov	r7, r4
 800a4e6:	2903      	cmp	r1, #3
 800a4e8:	bf18      	it	ne
 800a4ea:	461a      	movne	r2, r3
 800a4ec:	68a3      	ldr	r3, [r4, #8]
 800a4ee:	9201      	str	r2, [sp, #4]
 800a4f0:	1e5a      	subs	r2, r3, #1
 800a4f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4f6:	bf81      	itttt	hi
 800a4f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4fc:	eb03 0905 	addhi.w	r9, r3, r5
 800a500:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a504:	60a3      	strhi	r3, [r4, #8]
 800a506:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a50a:	bf98      	it	ls
 800a50c:	f04f 0900 	movls.w	r9, #0
 800a510:	463d      	mov	r5, r7
 800a512:	f04f 0b00 	mov.w	fp, #0
 800a516:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	6831      	ldr	r1, [r6, #0]
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	2202      	movs	r2, #2
 800a522:	7809      	ldrb	r1, [r1, #0]
 800a524:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a528:	f000 fd2c 	bl	800af84 <memchr>
 800a52c:	b328      	cbz	r0, 800a57a <_scanf_i+0xb6>
 800a52e:	f1bb 0f01 	cmp.w	fp, #1
 800a532:	d159      	bne.n	800a5e8 <_scanf_i+0x124>
 800a534:	6862      	ldr	r2, [r4, #4]
 800a536:	b92a      	cbnz	r2, 800a544 <_scanf_i+0x80>
 800a538:	2308      	movs	r3, #8
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a542:	6022      	str	r2, [r4, #0]
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a54a:	6022      	str	r2, [r4, #0]
 800a54c:	68a2      	ldr	r2, [r4, #8]
 800a54e:	1e51      	subs	r1, r2, #1
 800a550:	60a1      	str	r1, [r4, #8]
 800a552:	b192      	cbz	r2, 800a57a <_scanf_i+0xb6>
 800a554:	6832      	ldr	r2, [r6, #0]
 800a556:	1c51      	adds	r1, r2, #1
 800a558:	6031      	str	r1, [r6, #0]
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	f805 2b01 	strb.w	r2, [r5], #1
 800a560:	6872      	ldr	r2, [r6, #4]
 800a562:	3a01      	subs	r2, #1
 800a564:	2a00      	cmp	r2, #0
 800a566:	6072      	str	r2, [r6, #4]
 800a568:	dc07      	bgt.n	800a57a <_scanf_i+0xb6>
 800a56a:	4631      	mov	r1, r6
 800a56c:	4650      	mov	r0, sl
 800a56e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a572:	4790      	blx	r2
 800a574:	2800      	cmp	r0, #0
 800a576:	f040 8085 	bne.w	800a684 <_scanf_i+0x1c0>
 800a57a:	f10b 0b01 	add.w	fp, fp, #1
 800a57e:	f1bb 0f03 	cmp.w	fp, #3
 800a582:	d1cb      	bne.n	800a51c <_scanf_i+0x58>
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	b90b      	cbnz	r3, 800a58c <_scanf_i+0xc8>
 800a588:	230a      	movs	r3, #10
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	4948      	ldr	r1, [pc, #288]	; (800a6b0 <_scanf_i+0x1ec>)
 800a590:	6960      	ldr	r0, [r4, #20]
 800a592:	1ac9      	subs	r1, r1, r3
 800a594:	f000 f8b0 	bl	800a6f8 <__sccl>
 800a598:	f04f 0b00 	mov.w	fp, #0
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03d      	beq.n	800a620 <_scanf_i+0x15c>
 800a5a4:	6831      	ldr	r1, [r6, #0]
 800a5a6:	6960      	ldr	r0, [r4, #20]
 800a5a8:	f891 c000 	ldrb.w	ip, [r1]
 800a5ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d035      	beq.n	800a620 <_scanf_i+0x15c>
 800a5b4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a5b8:	d124      	bne.n	800a604 <_scanf_i+0x140>
 800a5ba:	0510      	lsls	r0, r2, #20
 800a5bc:	d522      	bpl.n	800a604 <_scanf_i+0x140>
 800a5be:	f10b 0b01 	add.w	fp, fp, #1
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	d003      	beq.n	800a5d0 <_scanf_i+0x10c>
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5ce:	60a3      	str	r3, [r4, #8]
 800a5d0:	6873      	ldr	r3, [r6, #4]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	6073      	str	r3, [r6, #4]
 800a5d8:	dd1b      	ble.n	800a612 <_scanf_i+0x14e>
 800a5da:	6833      	ldr	r3, [r6, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	6033      	str	r3, [r6, #0]
 800a5e0:	68a3      	ldr	r3, [r4, #8]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	e7d9      	b.n	800a59c <_scanf_i+0xd8>
 800a5e8:	f1bb 0f02 	cmp.w	fp, #2
 800a5ec:	d1ae      	bne.n	800a54c <_scanf_i+0x88>
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a5f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a5f8:	d1bf      	bne.n	800a57a <_scanf_i+0xb6>
 800a5fa:	2310      	movs	r3, #16
 800a5fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	e7a2      	b.n	800a54a <_scanf_i+0x86>
 800a604:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	780b      	ldrb	r3, [r1, #0]
 800a60c:	f805 3b01 	strb.w	r3, [r5], #1
 800a610:	e7de      	b.n	800a5d0 <_scanf_i+0x10c>
 800a612:	4631      	mov	r1, r6
 800a614:	4650      	mov	r0, sl
 800a616:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a61a:	4798      	blx	r3
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0df      	beq.n	800a5e0 <_scanf_i+0x11c>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	05db      	lsls	r3, r3, #23
 800a624:	d50d      	bpl.n	800a642 <_scanf_i+0x17e>
 800a626:	42bd      	cmp	r5, r7
 800a628:	d909      	bls.n	800a63e <_scanf_i+0x17a>
 800a62a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a62e:	4632      	mov	r2, r6
 800a630:	4650      	mov	r0, sl
 800a632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a636:	f105 39ff 	add.w	r9, r5, #4294967295
 800a63a:	4798      	blx	r3
 800a63c:	464d      	mov	r5, r9
 800a63e:	42bd      	cmp	r5, r7
 800a640:	d02d      	beq.n	800a69e <_scanf_i+0x1da>
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	f012 0210 	ands.w	r2, r2, #16
 800a648:	d113      	bne.n	800a672 <_scanf_i+0x1ae>
 800a64a:	702a      	strb	r2, [r5, #0]
 800a64c:	4639      	mov	r1, r7
 800a64e:	6863      	ldr	r3, [r4, #4]
 800a650:	4650      	mov	r0, sl
 800a652:	9e01      	ldr	r6, [sp, #4]
 800a654:	47b0      	blx	r6
 800a656:	6821      	ldr	r1, [r4, #0]
 800a658:	f8d8 3000 	ldr.w	r3, [r8]
 800a65c:	f011 0f20 	tst.w	r1, #32
 800a660:	d013      	beq.n	800a68a <_scanf_i+0x1c6>
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	f8c8 2000 	str.w	r2, [r8]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6018      	str	r0, [r3, #0]
 800a66c:	68e3      	ldr	r3, [r4, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	60e3      	str	r3, [r4, #12]
 800a672:	2000      	movs	r0, #0
 800a674:	1bed      	subs	r5, r5, r7
 800a676:	44ab      	add	fp, r5
 800a678:	6925      	ldr	r5, [r4, #16]
 800a67a:	445d      	add	r5, fp
 800a67c:	6125      	str	r5, [r4, #16]
 800a67e:	b007      	add	sp, #28
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	f04f 0b00 	mov.w	fp, #0
 800a688:	e7ca      	b.n	800a620 <_scanf_i+0x15c>
 800a68a:	1d1a      	adds	r2, r3, #4
 800a68c:	f8c8 2000 	str.w	r2, [r8]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f011 0f01 	tst.w	r1, #1
 800a696:	bf14      	ite	ne
 800a698:	8018      	strhne	r0, [r3, #0]
 800a69a:	6018      	streq	r0, [r3, #0]
 800a69c:	e7e6      	b.n	800a66c <_scanf_i+0x1a8>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7ed      	b.n	800a67e <_scanf_i+0x1ba>
 800a6a2:	bf00      	nop
 800a6a4:	0800b238 	.word	0x0800b238
 800a6a8:	0800a949 	.word	0x0800a949
 800a6ac:	0800a861 	.word	0x0800a861
 800a6b0:	0800b35c 	.word	0x0800b35c

0800a6b4 <_read_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4d05      	ldr	r5, [pc, #20]	; (800a6d4 <_read_r+0x20>)
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f6 fa4d 	bl	8000b62 <_read>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_read_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_read_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20001530 	.word	0x20001530

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4d05      	ldr	r5, [pc, #20]	; (800a6f4 <_sbrk_r+0x1c>)
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f6 faa6 	bl	8000c34 <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20001530 	.word	0x20001530

0800a6f8 <__sccl>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	780b      	ldrb	r3, [r1, #0]
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	2b5e      	cmp	r3, #94	; 0x5e
 800a700:	bf13      	iteet	ne
 800a702:	2200      	movne	r2, #0
 800a704:	2201      	moveq	r2, #1
 800a706:	784b      	ldrbeq	r3, [r1, #1]
 800a708:	1c48      	addne	r0, r1, #1
 800a70a:	bf08      	it	eq
 800a70c:	1c88      	addeq	r0, r1, #2
 800a70e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a712:	1e61      	subs	r1, r4, #1
 800a714:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a718:	42a9      	cmp	r1, r5
 800a71a:	d1fb      	bne.n	800a714 <__sccl+0x1c>
 800a71c:	b90b      	cbnz	r3, 800a722 <__sccl+0x2a>
 800a71e:	3801      	subs	r0, #1
 800a720:	bd70      	pop	{r4, r5, r6, pc}
 800a722:	f082 0201 	eor.w	r2, r2, #1
 800a726:	4605      	mov	r5, r0
 800a728:	54e2      	strb	r2, [r4, r3]
 800a72a:	4628      	mov	r0, r5
 800a72c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a730:	292d      	cmp	r1, #45	; 0x2d
 800a732:	d006      	beq.n	800a742 <__sccl+0x4a>
 800a734:	295d      	cmp	r1, #93	; 0x5d
 800a736:	d0f3      	beq.n	800a720 <__sccl+0x28>
 800a738:	b909      	cbnz	r1, 800a73e <__sccl+0x46>
 800a73a:	4628      	mov	r0, r5
 800a73c:	e7f0      	b.n	800a720 <__sccl+0x28>
 800a73e:	460b      	mov	r3, r1
 800a740:	e7f1      	b.n	800a726 <__sccl+0x2e>
 800a742:	786e      	ldrb	r6, [r5, #1]
 800a744:	2e5d      	cmp	r6, #93	; 0x5d
 800a746:	d0fa      	beq.n	800a73e <__sccl+0x46>
 800a748:	42b3      	cmp	r3, r6
 800a74a:	dcf8      	bgt.n	800a73e <__sccl+0x46>
 800a74c:	4619      	mov	r1, r3
 800a74e:	3502      	adds	r5, #2
 800a750:	3101      	adds	r1, #1
 800a752:	428e      	cmp	r6, r1
 800a754:	5462      	strb	r2, [r4, r1]
 800a756:	dcfb      	bgt.n	800a750 <__sccl+0x58>
 800a758:	1af1      	subs	r1, r6, r3
 800a75a:	3901      	subs	r1, #1
 800a75c:	42b3      	cmp	r3, r6
 800a75e:	bfa8      	it	ge
 800a760:	2100      	movge	r1, #0
 800a762:	1c58      	adds	r0, r3, #1
 800a764:	1843      	adds	r3, r0, r1
 800a766:	e7e0      	b.n	800a72a <__sccl+0x32>

0800a768 <_strtol_l.constprop.0>:
 800a768:	2b01      	cmp	r3, #1
 800a76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76e:	4680      	mov	r8, r0
 800a770:	d001      	beq.n	800a776 <_strtol_l.constprop.0+0xe>
 800a772:	2b24      	cmp	r3, #36	; 0x24
 800a774:	d906      	bls.n	800a784 <_strtol_l.constprop.0+0x1c>
 800a776:	f7fe fd9f 	bl	80092b8 <__errno>
 800a77a:	2316      	movs	r3, #22
 800a77c:	6003      	str	r3, [r0, #0]
 800a77e:	2000      	movs	r0, #0
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a784:	460d      	mov	r5, r1
 800a786:	4f35      	ldr	r7, [pc, #212]	; (800a85c <_strtol_l.constprop.0+0xf4>)
 800a788:	4628      	mov	r0, r5
 800a78a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a78e:	5de6      	ldrb	r6, [r4, r7]
 800a790:	f016 0608 	ands.w	r6, r6, #8
 800a794:	d1f8      	bne.n	800a788 <_strtol_l.constprop.0+0x20>
 800a796:	2c2d      	cmp	r4, #45	; 0x2d
 800a798:	d12f      	bne.n	800a7fa <_strtol_l.constprop.0+0x92>
 800a79a:	2601      	movs	r6, #1
 800a79c:	782c      	ldrb	r4, [r5, #0]
 800a79e:	1c85      	adds	r5, r0, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d057      	beq.n	800a854 <_strtol_l.constprop.0+0xec>
 800a7a4:	2b10      	cmp	r3, #16
 800a7a6:	d109      	bne.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a7a8:	2c30      	cmp	r4, #48	; 0x30
 800a7aa:	d107      	bne.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a7ac:	7828      	ldrb	r0, [r5, #0]
 800a7ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a7b2:	2858      	cmp	r0, #88	; 0x58
 800a7b4:	d149      	bne.n	800a84a <_strtol_l.constprop.0+0xe2>
 800a7b6:	2310      	movs	r3, #16
 800a7b8:	786c      	ldrb	r4, [r5, #1]
 800a7ba:	3502      	adds	r5, #2
 800a7bc:	2700      	movs	r7, #0
 800a7be:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a7c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a7c6:	fbbe f9f3 	udiv	r9, lr, r3
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	fb03 ea19 	mls	sl, r3, r9, lr
 800a7d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7d4:	f1bc 0f09 	cmp.w	ip, #9
 800a7d8:	d814      	bhi.n	800a804 <_strtol_l.constprop.0+0x9c>
 800a7da:	4664      	mov	r4, ip
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	dd22      	ble.n	800a826 <_strtol_l.constprop.0+0xbe>
 800a7e0:	2f00      	cmp	r7, #0
 800a7e2:	db1d      	blt.n	800a820 <_strtol_l.constprop.0+0xb8>
 800a7e4:	4581      	cmp	r9, r0
 800a7e6:	d31b      	bcc.n	800a820 <_strtol_l.constprop.0+0xb8>
 800a7e8:	d101      	bne.n	800a7ee <_strtol_l.constprop.0+0x86>
 800a7ea:	45a2      	cmp	sl, r4
 800a7ec:	db18      	blt.n	800a820 <_strtol_l.constprop.0+0xb8>
 800a7ee:	2701      	movs	r7, #1
 800a7f0:	fb00 4003 	mla	r0, r0, r3, r4
 800a7f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f8:	e7ea      	b.n	800a7d0 <_strtol_l.constprop.0+0x68>
 800a7fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a7fc:	bf04      	itt	eq
 800a7fe:	782c      	ldrbeq	r4, [r5, #0]
 800a800:	1c85      	addeq	r5, r0, #2
 800a802:	e7cd      	b.n	800a7a0 <_strtol_l.constprop.0+0x38>
 800a804:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a808:	f1bc 0f19 	cmp.w	ip, #25
 800a80c:	d801      	bhi.n	800a812 <_strtol_l.constprop.0+0xaa>
 800a80e:	3c37      	subs	r4, #55	; 0x37
 800a810:	e7e4      	b.n	800a7dc <_strtol_l.constprop.0+0x74>
 800a812:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a816:	f1bc 0f19 	cmp.w	ip, #25
 800a81a:	d804      	bhi.n	800a826 <_strtol_l.constprop.0+0xbe>
 800a81c:	3c57      	subs	r4, #87	; 0x57
 800a81e:	e7dd      	b.n	800a7dc <_strtol_l.constprop.0+0x74>
 800a820:	f04f 37ff 	mov.w	r7, #4294967295
 800a824:	e7e6      	b.n	800a7f4 <_strtol_l.constprop.0+0x8c>
 800a826:	2f00      	cmp	r7, #0
 800a828:	da07      	bge.n	800a83a <_strtol_l.constprop.0+0xd2>
 800a82a:	2322      	movs	r3, #34	; 0x22
 800a82c:	4670      	mov	r0, lr
 800a82e:	f8c8 3000 	str.w	r3, [r8]
 800a832:	2a00      	cmp	r2, #0
 800a834:	d0a4      	beq.n	800a780 <_strtol_l.constprop.0+0x18>
 800a836:	1e69      	subs	r1, r5, #1
 800a838:	e005      	b.n	800a846 <_strtol_l.constprop.0+0xde>
 800a83a:	b106      	cbz	r6, 800a83e <_strtol_l.constprop.0+0xd6>
 800a83c:	4240      	negs	r0, r0
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d09e      	beq.n	800a780 <_strtol_l.constprop.0+0x18>
 800a842:	2f00      	cmp	r7, #0
 800a844:	d1f7      	bne.n	800a836 <_strtol_l.constprop.0+0xce>
 800a846:	6011      	str	r1, [r2, #0]
 800a848:	e79a      	b.n	800a780 <_strtol_l.constprop.0+0x18>
 800a84a:	2430      	movs	r4, #48	; 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1b5      	bne.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a850:	2308      	movs	r3, #8
 800a852:	e7b3      	b.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a854:	2c30      	cmp	r4, #48	; 0x30
 800a856:	d0a9      	beq.n	800a7ac <_strtol_l.constprop.0+0x44>
 800a858:	230a      	movs	r3, #10
 800a85a:	e7af      	b.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a85c:	0800b35f 	.word	0x0800b35f

0800a860 <_strtol_r>:
 800a860:	f7ff bf82 	b.w	800a768 <_strtol_l.constprop.0>

0800a864 <_strtoul_l.constprop.0>:
 800a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a868:	4686      	mov	lr, r0
 800a86a:	460d      	mov	r5, r1
 800a86c:	4f35      	ldr	r7, [pc, #212]	; (800a944 <_strtoul_l.constprop.0+0xe0>)
 800a86e:	4628      	mov	r0, r5
 800a870:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a874:	5de6      	ldrb	r6, [r4, r7]
 800a876:	f016 0608 	ands.w	r6, r6, #8
 800a87a:	d1f8      	bne.n	800a86e <_strtoul_l.constprop.0+0xa>
 800a87c:	2c2d      	cmp	r4, #45	; 0x2d
 800a87e:	d12f      	bne.n	800a8e0 <_strtoul_l.constprop.0+0x7c>
 800a880:	2601      	movs	r6, #1
 800a882:	782c      	ldrb	r4, [r5, #0]
 800a884:	1c85      	adds	r5, r0, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d057      	beq.n	800a93a <_strtoul_l.constprop.0+0xd6>
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d109      	bne.n	800a8a2 <_strtoul_l.constprop.0+0x3e>
 800a88e:	2c30      	cmp	r4, #48	; 0x30
 800a890:	d107      	bne.n	800a8a2 <_strtoul_l.constprop.0+0x3e>
 800a892:	7828      	ldrb	r0, [r5, #0]
 800a894:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a898:	2858      	cmp	r0, #88	; 0x58
 800a89a:	d149      	bne.n	800a930 <_strtoul_l.constprop.0+0xcc>
 800a89c:	2310      	movs	r3, #16
 800a89e:	786c      	ldrb	r4, [r5, #1]
 800a8a0:	3502      	adds	r5, #2
 800a8a2:	f04f 38ff 	mov.w	r8, #4294967295
 800a8a6:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8aa:	2700      	movs	r7, #0
 800a8ac:	fb03 f908 	mul.w	r9, r3, r8
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	ea6f 0909 	mvn.w	r9, r9
 800a8b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a8ba:	f1bc 0f09 	cmp.w	ip, #9
 800a8be:	d814      	bhi.n	800a8ea <_strtoul_l.constprop.0+0x86>
 800a8c0:	4664      	mov	r4, ip
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	dd22      	ble.n	800a90c <_strtoul_l.constprop.0+0xa8>
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	db1d      	blt.n	800a906 <_strtoul_l.constprop.0+0xa2>
 800a8ca:	4580      	cmp	r8, r0
 800a8cc:	d31b      	bcc.n	800a906 <_strtoul_l.constprop.0+0xa2>
 800a8ce:	d101      	bne.n	800a8d4 <_strtoul_l.constprop.0+0x70>
 800a8d0:	45a1      	cmp	r9, r4
 800a8d2:	db18      	blt.n	800a906 <_strtoul_l.constprop.0+0xa2>
 800a8d4:	2701      	movs	r7, #1
 800a8d6:	fb00 4003 	mla	r0, r0, r3, r4
 800a8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8de:	e7ea      	b.n	800a8b6 <_strtoul_l.constprop.0+0x52>
 800a8e0:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e2:	bf04      	itt	eq
 800a8e4:	782c      	ldrbeq	r4, [r5, #0]
 800a8e6:	1c85      	addeq	r5, r0, #2
 800a8e8:	e7cd      	b.n	800a886 <_strtoul_l.constprop.0+0x22>
 800a8ea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a8ee:	f1bc 0f19 	cmp.w	ip, #25
 800a8f2:	d801      	bhi.n	800a8f8 <_strtoul_l.constprop.0+0x94>
 800a8f4:	3c37      	subs	r4, #55	; 0x37
 800a8f6:	e7e4      	b.n	800a8c2 <_strtoul_l.constprop.0+0x5e>
 800a8f8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8fc:	f1bc 0f19 	cmp.w	ip, #25
 800a900:	d804      	bhi.n	800a90c <_strtoul_l.constprop.0+0xa8>
 800a902:	3c57      	subs	r4, #87	; 0x57
 800a904:	e7dd      	b.n	800a8c2 <_strtoul_l.constprop.0+0x5e>
 800a906:	f04f 37ff 	mov.w	r7, #4294967295
 800a90a:	e7e6      	b.n	800a8da <_strtoul_l.constprop.0+0x76>
 800a90c:	2f00      	cmp	r7, #0
 800a90e:	da07      	bge.n	800a920 <_strtoul_l.constprop.0+0xbc>
 800a910:	2322      	movs	r3, #34	; 0x22
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	f8ce 3000 	str.w	r3, [lr]
 800a91a:	b932      	cbnz	r2, 800a92a <_strtoul_l.constprop.0+0xc6>
 800a91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a920:	b106      	cbz	r6, 800a924 <_strtoul_l.constprop.0+0xc0>
 800a922:	4240      	negs	r0, r0
 800a924:	2a00      	cmp	r2, #0
 800a926:	d0f9      	beq.n	800a91c <_strtoul_l.constprop.0+0xb8>
 800a928:	b107      	cbz	r7, 800a92c <_strtoul_l.constprop.0+0xc8>
 800a92a:	1e69      	subs	r1, r5, #1
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7f5      	b.n	800a91c <_strtoul_l.constprop.0+0xb8>
 800a930:	2430      	movs	r4, #48	; 0x30
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1b5      	bne.n	800a8a2 <_strtoul_l.constprop.0+0x3e>
 800a936:	2308      	movs	r3, #8
 800a938:	e7b3      	b.n	800a8a2 <_strtoul_l.constprop.0+0x3e>
 800a93a:	2c30      	cmp	r4, #48	; 0x30
 800a93c:	d0a9      	beq.n	800a892 <_strtoul_l.constprop.0+0x2e>
 800a93e:	230a      	movs	r3, #10
 800a940:	e7af      	b.n	800a8a2 <_strtoul_l.constprop.0+0x3e>
 800a942:	bf00      	nop
 800a944:	0800b35f 	.word	0x0800b35f

0800a948 <_strtoul_r>:
 800a948:	f7ff bf8c 	b.w	800a864 <_strtoul_l.constprop.0>

0800a94c <__submore>:
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a958:	4299      	cmp	r1, r3
 800a95a:	d11b      	bne.n	800a994 <__submore+0x48>
 800a95c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a960:	f7fe fec4 	bl	80096ec <_malloc_r>
 800a964:	b918      	cbnz	r0, 800a96e <__submore+0x22>
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a972:	63a3      	str	r3, [r4, #56]	; 0x38
 800a974:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a978:	6360      	str	r0, [r4, #52]	; 0x34
 800a97a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a97e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a982:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a986:	7043      	strb	r3, [r0, #1]
 800a988:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a98c:	7003      	strb	r3, [r0, #0]
 800a98e:	6020      	str	r0, [r4, #0]
 800a990:	2000      	movs	r0, #0
 800a992:	e7ea      	b.n	800a96a <__submore+0x1e>
 800a994:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a996:	0077      	lsls	r7, r6, #1
 800a998:	463a      	mov	r2, r7
 800a99a:	f000 fb27 	bl	800afec <_realloc_r>
 800a99e:	4605      	mov	r5, r0
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d0e0      	beq.n	800a966 <__submore+0x1a>
 800a9a4:	eb00 0806 	add.w	r8, r0, r6
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	f7fe fcad 	bl	800930c <memcpy>
 800a9b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a9b6:	f8c4 8000 	str.w	r8, [r4]
 800a9ba:	e7e9      	b.n	800a990 <__submore+0x44>

0800a9bc <__swbuf_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	460e      	mov	r6, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	b118      	cbz	r0, 800a9ce <__swbuf_r+0x12>
 800a9c6:	6983      	ldr	r3, [r0, #24]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <__swbuf_r+0x12>
 800a9ca:	f000 f9d5 	bl	800ad78 <__sinit>
 800a9ce:	4b21      	ldr	r3, [pc, #132]	; (800aa54 <__swbuf_r+0x98>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d12b      	bne.n	800aa2c <__swbuf_r+0x70>
 800a9d4:	686c      	ldr	r4, [r5, #4]
 800a9d6:	69a3      	ldr	r3, [r4, #24]
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	071a      	lsls	r2, r3, #28
 800a9de:	d52f      	bpl.n	800aa40 <__swbuf_r+0x84>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	b36b      	cbz	r3, 800aa40 <__swbuf_r+0x84>
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	b2f6      	uxtb	r6, r6
 800a9ea:	1ac0      	subs	r0, r0, r3
 800a9ec:	6963      	ldr	r3, [r4, #20]
 800a9ee:	4637      	mov	r7, r6
 800a9f0:	4283      	cmp	r3, r0
 800a9f2:	dc04      	bgt.n	800a9fe <__swbuf_r+0x42>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f000 f92a 	bl	800ac50 <_fflush_r>
 800a9fc:	bb30      	cbnz	r0, 800aa4c <__swbuf_r+0x90>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	3001      	adds	r0, #1
 800aa02:	3b01      	subs	r3, #1
 800aa04:	60a3      	str	r3, [r4, #8]
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	701e      	strb	r6, [r3, #0]
 800aa0e:	6963      	ldr	r3, [r4, #20]
 800aa10:	4283      	cmp	r3, r0
 800aa12:	d004      	beq.n	800aa1e <__swbuf_r+0x62>
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	07db      	lsls	r3, r3, #31
 800aa18:	d506      	bpl.n	800aa28 <__swbuf_r+0x6c>
 800aa1a:	2e0a      	cmp	r6, #10
 800aa1c:	d104      	bne.n	800aa28 <__swbuf_r+0x6c>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f000 f915 	bl	800ac50 <_fflush_r>
 800aa26:	b988      	cbnz	r0, 800aa4c <__swbuf_r+0x90>
 800aa28:	4638      	mov	r0, r7
 800aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <__swbuf_r+0x9c>)
 800aa2e:	429c      	cmp	r4, r3
 800aa30:	d101      	bne.n	800aa36 <__swbuf_r+0x7a>
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	e7cf      	b.n	800a9d6 <__swbuf_r+0x1a>
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <__swbuf_r+0xa0>)
 800aa38:	429c      	cmp	r4, r3
 800aa3a:	bf08      	it	eq
 800aa3c:	68ec      	ldreq	r4, [r5, #12]
 800aa3e:	e7ca      	b.n	800a9d6 <__swbuf_r+0x1a>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f80c 	bl	800aa60 <__swsetup_r>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d0cb      	beq.n	800a9e4 <__swbuf_r+0x28>
 800aa4c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa50:	e7ea      	b.n	800aa28 <__swbuf_r+0x6c>
 800aa52:	bf00      	nop
 800aa54:	0800b480 	.word	0x0800b480
 800aa58:	0800b4a0 	.word	0x0800b4a0
 800aa5c:	0800b460 	.word	0x0800b460

0800aa60 <__swsetup_r>:
 800aa60:	4b32      	ldr	r3, [pc, #200]	; (800ab2c <__swsetup_r+0xcc>)
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	681d      	ldr	r5, [r3, #0]
 800aa66:	4606      	mov	r6, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	b125      	cbz	r5, 800aa76 <__swsetup_r+0x16>
 800aa6c:	69ab      	ldr	r3, [r5, #24]
 800aa6e:	b913      	cbnz	r3, 800aa76 <__swsetup_r+0x16>
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 f981 	bl	800ad78 <__sinit>
 800aa76:	4b2e      	ldr	r3, [pc, #184]	; (800ab30 <__swsetup_r+0xd0>)
 800aa78:	429c      	cmp	r4, r3
 800aa7a:	d10f      	bne.n	800aa9c <__swsetup_r+0x3c>
 800aa7c:	686c      	ldr	r4, [r5, #4]
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa84:	0719      	lsls	r1, r3, #28
 800aa86:	d42c      	bmi.n	800aae2 <__swsetup_r+0x82>
 800aa88:	06dd      	lsls	r5, r3, #27
 800aa8a:	d411      	bmi.n	800aab0 <__swsetup_r+0x50>
 800aa8c:	2309      	movs	r3, #9
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	e03e      	b.n	800ab1a <__swsetup_r+0xba>
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <__swsetup_r+0xd4>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	d101      	bne.n	800aaa6 <__swsetup_r+0x46>
 800aaa2:	68ac      	ldr	r4, [r5, #8]
 800aaa4:	e7eb      	b.n	800aa7e <__swsetup_r+0x1e>
 800aaa6:	4b24      	ldr	r3, [pc, #144]	; (800ab38 <__swsetup_r+0xd8>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	bf08      	it	eq
 800aaac:	68ec      	ldreq	r4, [r5, #12]
 800aaae:	e7e6      	b.n	800aa7e <__swsetup_r+0x1e>
 800aab0:	0758      	lsls	r0, r3, #29
 800aab2:	d512      	bpl.n	800aada <__swsetup_r+0x7a>
 800aab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab6:	b141      	cbz	r1, 800aaca <__swsetup_r+0x6a>
 800aab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aabc:	4299      	cmp	r1, r3
 800aabe:	d002      	beq.n	800aac6 <__swsetup_r+0x66>
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7fe fdab 	bl	800961c <_free_r>
 800aac6:	2300      	movs	r3, #0
 800aac8:	6363      	str	r3, [r4, #52]	; 0x34
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	2300      	movs	r3, #0
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	6923      	ldr	r3, [r4, #16]
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f043 0308 	orr.w	r3, r3, #8
 800aae0:	81a3      	strh	r3, [r4, #12]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	b94b      	cbnz	r3, 800aafa <__swsetup_r+0x9a>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aaec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaf0:	d003      	beq.n	800aafa <__swsetup_r+0x9a>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f000 fa05 	bl	800af04 <__smakebuf_r>
 800aafa:	89a0      	ldrh	r0, [r4, #12]
 800aafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab00:	f010 0301 	ands.w	r3, r0, #1
 800ab04:	d00a      	beq.n	800ab1c <__swsetup_r+0xbc>
 800ab06:	2300      	movs	r3, #0
 800ab08:	60a3      	str	r3, [r4, #8]
 800ab0a:	6963      	ldr	r3, [r4, #20]
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	61a3      	str	r3, [r4, #24]
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	b943      	cbnz	r3, 800ab26 <__swsetup_r+0xc6>
 800ab14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab18:	d1ba      	bne.n	800aa90 <__swsetup_r+0x30>
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	0781      	lsls	r1, r0, #30
 800ab1e:	bf58      	it	pl
 800ab20:	6963      	ldrpl	r3, [r4, #20]
 800ab22:	60a3      	str	r3, [r4, #8]
 800ab24:	e7f4      	b.n	800ab10 <__swsetup_r+0xb0>
 800ab26:	2000      	movs	r0, #0
 800ab28:	e7f7      	b.n	800ab1a <__swsetup_r+0xba>
 800ab2a:	bf00      	nop
 800ab2c:	20000184 	.word	0x20000184
 800ab30:	0800b480 	.word	0x0800b480
 800ab34:	0800b4a0 	.word	0x0800b4a0
 800ab38:	0800b460 	.word	0x0800b460

0800ab3c <abort>:
 800ab3c:	2006      	movs	r0, #6
 800ab3e:	b508      	push	{r3, lr}
 800ab40:	f000 faac 	bl	800b09c <raise>
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7f6 f802 	bl	8000b4e <_exit>
	...

0800ab4c <__sflush_r>:
 800ab4c:	898a      	ldrh	r2, [r1, #12]
 800ab4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab50:	4605      	mov	r5, r0
 800ab52:	0710      	lsls	r0, r2, #28
 800ab54:	460c      	mov	r4, r1
 800ab56:	d457      	bmi.n	800ac08 <__sflush_r+0xbc>
 800ab58:	684b      	ldr	r3, [r1, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	dc04      	bgt.n	800ab68 <__sflush_r+0x1c>
 800ab5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dc01      	bgt.n	800ab68 <__sflush_r+0x1c>
 800ab64:	2000      	movs	r0, #0
 800ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d0fa      	beq.n	800ab64 <__sflush_r+0x18>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab74:	682f      	ldr	r7, [r5, #0]
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	d032      	beq.n	800abe0 <__sflush_r+0x94>
 800ab7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	075a      	lsls	r2, r3, #29
 800ab80:	d505      	bpl.n	800ab8e <__sflush_r+0x42>
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	1ac0      	subs	r0, r0, r3
 800ab86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab88:	b10b      	cbz	r3, 800ab8e <__sflush_r+0x42>
 800ab8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab8c:	1ac0      	subs	r0, r0, r3
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4602      	mov	r2, r0
 800ab92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab94:	4628      	mov	r0, r5
 800ab96:	6a21      	ldr	r1, [r4, #32]
 800ab98:	47b0      	blx	r6
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	d106      	bne.n	800abae <__sflush_r+0x62>
 800aba0:	6829      	ldr	r1, [r5, #0]
 800aba2:	291d      	cmp	r1, #29
 800aba4:	d82c      	bhi.n	800ac00 <__sflush_r+0xb4>
 800aba6:	4a29      	ldr	r2, [pc, #164]	; (800ac4c <__sflush_r+0x100>)
 800aba8:	40ca      	lsrs	r2, r1
 800abaa:	07d6      	lsls	r6, r2, #31
 800abac:	d528      	bpl.n	800ac00 <__sflush_r+0xb4>
 800abae:	2200      	movs	r2, #0
 800abb0:	6062      	str	r2, [r4, #4]
 800abb2:	6922      	ldr	r2, [r4, #16]
 800abb4:	04d9      	lsls	r1, r3, #19
 800abb6:	6022      	str	r2, [r4, #0]
 800abb8:	d504      	bpl.n	800abc4 <__sflush_r+0x78>
 800abba:	1c42      	adds	r2, r0, #1
 800abbc:	d101      	bne.n	800abc2 <__sflush_r+0x76>
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	b903      	cbnz	r3, 800abc4 <__sflush_r+0x78>
 800abc2:	6560      	str	r0, [r4, #84]	; 0x54
 800abc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	2900      	cmp	r1, #0
 800abca:	d0cb      	beq.n	800ab64 <__sflush_r+0x18>
 800abcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd0:	4299      	cmp	r1, r3
 800abd2:	d002      	beq.n	800abda <__sflush_r+0x8e>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f7fe fd21 	bl	800961c <_free_r>
 800abda:	2000      	movs	r0, #0
 800abdc:	6360      	str	r0, [r4, #52]	; 0x34
 800abde:	e7c2      	b.n	800ab66 <__sflush_r+0x1a>
 800abe0:	6a21      	ldr	r1, [r4, #32]
 800abe2:	2301      	movs	r3, #1
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b0      	blx	r6
 800abe8:	1c41      	adds	r1, r0, #1
 800abea:	d1c7      	bne.n	800ab7c <__sflush_r+0x30>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0c4      	beq.n	800ab7c <__sflush_r+0x30>
 800abf2:	2b1d      	cmp	r3, #29
 800abf4:	d001      	beq.n	800abfa <__sflush_r+0xae>
 800abf6:	2b16      	cmp	r3, #22
 800abf8:	d101      	bne.n	800abfe <__sflush_r+0xb2>
 800abfa:	602f      	str	r7, [r5, #0]
 800abfc:	e7b2      	b.n	800ab64 <__sflush_r+0x18>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	e7ae      	b.n	800ab66 <__sflush_r+0x1a>
 800ac08:	690f      	ldr	r7, [r1, #16]
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	d0aa      	beq.n	800ab64 <__sflush_r+0x18>
 800ac0e:	0793      	lsls	r3, r2, #30
 800ac10:	bf18      	it	ne
 800ac12:	2300      	movne	r3, #0
 800ac14:	680e      	ldr	r6, [r1, #0]
 800ac16:	bf08      	it	eq
 800ac18:	694b      	ldreq	r3, [r1, #20]
 800ac1a:	1bf6      	subs	r6, r6, r7
 800ac1c:	600f      	str	r7, [r1, #0]
 800ac1e:	608b      	str	r3, [r1, #8]
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	dd9f      	ble.n	800ab64 <__sflush_r+0x18>
 800ac24:	4633      	mov	r3, r6
 800ac26:	463a      	mov	r2, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	6a21      	ldr	r1, [r4, #32]
 800ac2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ac30:	47e0      	blx	ip
 800ac32:	2800      	cmp	r0, #0
 800ac34:	dc06      	bgt.n	800ac44 <__sflush_r+0xf8>
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	e790      	b.n	800ab66 <__sflush_r+0x1a>
 800ac44:	4407      	add	r7, r0
 800ac46:	1a36      	subs	r6, r6, r0
 800ac48:	e7ea      	b.n	800ac20 <__sflush_r+0xd4>
 800ac4a:	bf00      	nop
 800ac4c:	20400001 	.word	0x20400001

0800ac50 <_fflush_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	690b      	ldr	r3, [r1, #16]
 800ac54:	4605      	mov	r5, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	b913      	cbnz	r3, 800ac60 <_fflush_r+0x10>
 800ac5a:	2500      	movs	r5, #0
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	b118      	cbz	r0, 800ac6a <_fflush_r+0x1a>
 800ac62:	6983      	ldr	r3, [r0, #24]
 800ac64:	b90b      	cbnz	r3, 800ac6a <_fflush_r+0x1a>
 800ac66:	f000 f887 	bl	800ad78 <__sinit>
 800ac6a:	4b14      	ldr	r3, [pc, #80]	; (800acbc <_fflush_r+0x6c>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	d11b      	bne.n	800aca8 <_fflush_r+0x58>
 800ac70:	686c      	ldr	r4, [r5, #4]
 800ac72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0ef      	beq.n	800ac5a <_fflush_r+0xa>
 800ac7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac7c:	07d0      	lsls	r0, r2, #31
 800ac7e:	d404      	bmi.n	800ac8a <_fflush_r+0x3a>
 800ac80:	0599      	lsls	r1, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_fflush_r+0x3a>
 800ac84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac86:	f000 f915 	bl	800aeb4 <__retarget_lock_acquire_recursive>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	f7ff ff5d 	bl	800ab4c <__sflush_r>
 800ac92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac94:	4605      	mov	r5, r0
 800ac96:	07da      	lsls	r2, r3, #31
 800ac98:	d4e0      	bmi.n	800ac5c <_fflush_r+0xc>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	059b      	lsls	r3, r3, #22
 800ac9e:	d4dd      	bmi.n	800ac5c <_fflush_r+0xc>
 800aca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca2:	f000 f908 	bl	800aeb6 <__retarget_lock_release_recursive>
 800aca6:	e7d9      	b.n	800ac5c <_fflush_r+0xc>
 800aca8:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <_fflush_r+0x70>)
 800acaa:	429c      	cmp	r4, r3
 800acac:	d101      	bne.n	800acb2 <_fflush_r+0x62>
 800acae:	68ac      	ldr	r4, [r5, #8]
 800acb0:	e7df      	b.n	800ac72 <_fflush_r+0x22>
 800acb2:	4b04      	ldr	r3, [pc, #16]	; (800acc4 <_fflush_r+0x74>)
 800acb4:	429c      	cmp	r4, r3
 800acb6:	bf08      	it	eq
 800acb8:	68ec      	ldreq	r4, [r5, #12]
 800acba:	e7da      	b.n	800ac72 <_fflush_r+0x22>
 800acbc:	0800b480 	.word	0x0800b480
 800acc0:	0800b4a0 	.word	0x0800b4a0
 800acc4:	0800b460 	.word	0x0800b460

0800acc8 <std>:
 800acc8:	2300      	movs	r3, #0
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	e9c0 3300 	strd	r3, r3, [r0]
 800acd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd6:	6083      	str	r3, [r0, #8]
 800acd8:	8181      	strh	r1, [r0, #12]
 800acda:	6643      	str	r3, [r0, #100]	; 0x64
 800acdc:	81c2      	strh	r2, [r0, #14]
 800acde:	6183      	str	r3, [r0, #24]
 800ace0:	4619      	mov	r1, r3
 800ace2:	2208      	movs	r2, #8
 800ace4:	305c      	adds	r0, #92	; 0x5c
 800ace6:	f7fe fb1f 	bl	8009328 <memset>
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x38>)
 800acec:	6224      	str	r4, [r4, #32]
 800acee:	6263      	str	r3, [r4, #36]	; 0x24
 800acf0:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <std+0x3c>)
 800acf2:	62a3      	str	r3, [r4, #40]	; 0x28
 800acf4:	4b04      	ldr	r3, [pc, #16]	; (800ad08 <std+0x40>)
 800acf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <std+0x44>)
 800acfa:	6323      	str	r3, [r4, #48]	; 0x30
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	bf00      	nop
 800ad00:	0800938d 	.word	0x0800938d
 800ad04:	080093b3 	.word	0x080093b3
 800ad08:	080093eb 	.word	0x080093eb
 800ad0c:	0800940f 	.word	0x0800940f

0800ad10 <_cleanup_r>:
 800ad10:	4901      	ldr	r1, [pc, #4]	; (800ad18 <_cleanup_r+0x8>)
 800ad12:	f000 b8af 	b.w	800ae74 <_fwalk_reent>
 800ad16:	bf00      	nop
 800ad18:	0800ac51 	.word	0x0800ac51

0800ad1c <__sfmoreglue>:
 800ad1c:	2268      	movs	r2, #104	; 0x68
 800ad1e:	b570      	push	{r4, r5, r6, lr}
 800ad20:	1e4d      	subs	r5, r1, #1
 800ad22:	4355      	muls	r5, r2
 800ad24:	460e      	mov	r6, r1
 800ad26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad2a:	f7fe fcdf 	bl	80096ec <_malloc_r>
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b140      	cbz	r0, 800ad44 <__sfmoreglue+0x28>
 800ad32:	2100      	movs	r1, #0
 800ad34:	e9c0 1600 	strd	r1, r6, [r0]
 800ad38:	300c      	adds	r0, #12
 800ad3a:	60a0      	str	r0, [r4, #8]
 800ad3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad40:	f7fe faf2 	bl	8009328 <memset>
 800ad44:	4620      	mov	r0, r4
 800ad46:	bd70      	pop	{r4, r5, r6, pc}

0800ad48 <__sfp_lock_acquire>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sfp_lock_acquire+0x8>)
 800ad4a:	f000 b8b3 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20001535 	.word	0x20001535

0800ad54 <__sfp_lock_release>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__sfp_lock_release+0x8>)
 800ad56:	f000 b8ae 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20001535 	.word	0x20001535

0800ad60 <__sinit_lock_acquire>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__sinit_lock_acquire+0x8>)
 800ad62:	f000 b8a7 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	20001536 	.word	0x20001536

0800ad6c <__sinit_lock_release>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	; (800ad74 <__sinit_lock_release+0x8>)
 800ad6e:	f000 b8a2 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	20001536 	.word	0x20001536

0800ad78 <__sinit>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	f7ff fff0 	bl	800ad60 <__sinit_lock_acquire>
 800ad80:	69a3      	ldr	r3, [r4, #24]
 800ad82:	b11b      	cbz	r3, 800ad8c <__sinit+0x14>
 800ad84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad88:	f7ff bff0 	b.w	800ad6c <__sinit_lock_release>
 800ad8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad90:	6523      	str	r3, [r4, #80]	; 0x50
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <__sinit+0x68>)
 800ad94:	4a13      	ldr	r2, [pc, #76]	; (800ade4 <__sinit+0x6c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	bf08      	it	eq
 800ad9e:	2301      	moveq	r3, #1
 800ada0:	4620      	mov	r0, r4
 800ada2:	bf08      	it	eq
 800ada4:	61a3      	streq	r3, [r4, #24]
 800ada6:	f000 f81f 	bl	800ade8 <__sfp>
 800adaa:	6060      	str	r0, [r4, #4]
 800adac:	4620      	mov	r0, r4
 800adae:	f000 f81b 	bl	800ade8 <__sfp>
 800adb2:	60a0      	str	r0, [r4, #8]
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 f817 	bl	800ade8 <__sfp>
 800adba:	2200      	movs	r2, #0
 800adbc:	2104      	movs	r1, #4
 800adbe:	60e0      	str	r0, [r4, #12]
 800adc0:	6860      	ldr	r0, [r4, #4]
 800adc2:	f7ff ff81 	bl	800acc8 <std>
 800adc6:	2201      	movs	r2, #1
 800adc8:	2109      	movs	r1, #9
 800adca:	68a0      	ldr	r0, [r4, #8]
 800adcc:	f7ff ff7c 	bl	800acc8 <std>
 800add0:	2202      	movs	r2, #2
 800add2:	2112      	movs	r1, #18
 800add4:	68e0      	ldr	r0, [r4, #12]
 800add6:	f7ff ff77 	bl	800acc8 <std>
 800adda:	2301      	movs	r3, #1
 800addc:	61a3      	str	r3, [r4, #24]
 800adde:	e7d1      	b.n	800ad84 <__sinit+0xc>
 800ade0:	0800b25c 	.word	0x0800b25c
 800ade4:	0800ad11 	.word	0x0800ad11

0800ade8 <__sfp>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	4607      	mov	r7, r0
 800adec:	f7ff ffac 	bl	800ad48 <__sfp_lock_acquire>
 800adf0:	4b1e      	ldr	r3, [pc, #120]	; (800ae6c <__sfp+0x84>)
 800adf2:	681e      	ldr	r6, [r3, #0]
 800adf4:	69b3      	ldr	r3, [r6, #24]
 800adf6:	b913      	cbnz	r3, 800adfe <__sfp+0x16>
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ffbd 	bl	800ad78 <__sinit>
 800adfe:	3648      	adds	r6, #72	; 0x48
 800ae00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	d503      	bpl.n	800ae10 <__sfp+0x28>
 800ae08:	6833      	ldr	r3, [r6, #0]
 800ae0a:	b30b      	cbz	r3, 800ae50 <__sfp+0x68>
 800ae0c:	6836      	ldr	r6, [r6, #0]
 800ae0e:	e7f7      	b.n	800ae00 <__sfp+0x18>
 800ae10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae14:	b9d5      	cbnz	r5, 800ae4c <__sfp+0x64>
 800ae16:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <__sfp+0x88>)
 800ae18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae1c:	60e3      	str	r3, [r4, #12]
 800ae1e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae20:	f000 f847 	bl	800aeb2 <__retarget_lock_init_recursive>
 800ae24:	f7ff ff96 	bl	800ad54 <__sfp_lock_release>
 800ae28:	2208      	movs	r2, #8
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae34:	6025      	str	r5, [r4, #0]
 800ae36:	61a5      	str	r5, [r4, #24]
 800ae38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae3c:	f7fe fa74 	bl	8009328 <memset>
 800ae40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae48:	4620      	mov	r0, r4
 800ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae4c:	3468      	adds	r4, #104	; 0x68
 800ae4e:	e7d9      	b.n	800ae04 <__sfp+0x1c>
 800ae50:	2104      	movs	r1, #4
 800ae52:	4638      	mov	r0, r7
 800ae54:	f7ff ff62 	bl	800ad1c <__sfmoreglue>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	6030      	str	r0, [r6, #0]
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1d5      	bne.n	800ae0c <__sfp+0x24>
 800ae60:	f7ff ff78 	bl	800ad54 <__sfp_lock_release>
 800ae64:	230c      	movs	r3, #12
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	e7ee      	b.n	800ae48 <__sfp+0x60>
 800ae6a:	bf00      	nop
 800ae6c:	0800b25c 	.word	0x0800b25c
 800ae70:	ffff0001 	.word	0xffff0001

0800ae74 <_fwalk_reent>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	4606      	mov	r6, r0
 800ae7a:	4688      	mov	r8, r1
 800ae7c:	2700      	movs	r7, #0
 800ae7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae86:	f1b9 0901 	subs.w	r9, r9, #1
 800ae8a:	d505      	bpl.n	800ae98 <_fwalk_reent+0x24>
 800ae8c:	6824      	ldr	r4, [r4, #0]
 800ae8e:	2c00      	cmp	r4, #0
 800ae90:	d1f7      	bne.n	800ae82 <_fwalk_reent+0xe>
 800ae92:	4638      	mov	r0, r7
 800ae94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae98:	89ab      	ldrh	r3, [r5, #12]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d907      	bls.n	800aeae <_fwalk_reent+0x3a>
 800ae9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aea2:	3301      	adds	r3, #1
 800aea4:	d003      	beq.n	800aeae <_fwalk_reent+0x3a>
 800aea6:	4629      	mov	r1, r5
 800aea8:	4630      	mov	r0, r6
 800aeaa:	47c0      	blx	r8
 800aeac:	4307      	orrs	r7, r0
 800aeae:	3568      	adds	r5, #104	; 0x68
 800aeb0:	e7e9      	b.n	800ae86 <_fwalk_reent+0x12>

0800aeb2 <__retarget_lock_init_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <__retarget_lock_acquire_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <__retarget_lock_release_recursive>:
 800aeb6:	4770      	bx	lr

0800aeb8 <__swhatbuf_r>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	460e      	mov	r6, r1
 800aebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec0:	4614      	mov	r4, r2
 800aec2:	2900      	cmp	r1, #0
 800aec4:	461d      	mov	r5, r3
 800aec6:	b096      	sub	sp, #88	; 0x58
 800aec8:	da08      	bge.n	800aedc <__swhatbuf_r+0x24>
 800aeca:	2200      	movs	r2, #0
 800aecc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	061a      	lsls	r2, r3, #24
 800aed4:	d410      	bmi.n	800aef8 <__swhatbuf_r+0x40>
 800aed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeda:	e00e      	b.n	800aefa <__swhatbuf_r+0x42>
 800aedc:	466a      	mov	r2, sp
 800aede:	f000 f8f9 	bl	800b0d4 <_fstat_r>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	dbf1      	blt.n	800aeca <__swhatbuf_r+0x12>
 800aee6:	9a01      	ldr	r2, [sp, #4]
 800aee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aef0:	425a      	negs	r2, r3
 800aef2:	415a      	adcs	r2, r3
 800aef4:	602a      	str	r2, [r5, #0]
 800aef6:	e7ee      	b.n	800aed6 <__swhatbuf_r+0x1e>
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	2000      	movs	r0, #0
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	b016      	add	sp, #88	; 0x58
 800af00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af04 <__smakebuf_r>:
 800af04:	898b      	ldrh	r3, [r1, #12]
 800af06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af08:	079d      	lsls	r5, r3, #30
 800af0a:	4606      	mov	r6, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	d507      	bpl.n	800af20 <__smakebuf_r+0x1c>
 800af10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	2301      	movs	r3, #1
 800af1a:	6163      	str	r3, [r4, #20]
 800af1c:	b002      	add	sp, #8
 800af1e:	bd70      	pop	{r4, r5, r6, pc}
 800af20:	466a      	mov	r2, sp
 800af22:	ab01      	add	r3, sp, #4
 800af24:	f7ff ffc8 	bl	800aeb8 <__swhatbuf_r>
 800af28:	9900      	ldr	r1, [sp, #0]
 800af2a:	4605      	mov	r5, r0
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7fe fbdd 	bl	80096ec <_malloc_r>
 800af32:	b948      	cbnz	r0, 800af48 <__smakebuf_r+0x44>
 800af34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af38:	059a      	lsls	r2, r3, #22
 800af3a:	d4ef      	bmi.n	800af1c <__smakebuf_r+0x18>
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	f043 0302 	orr.w	r3, r3, #2
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	e7e3      	b.n	800af10 <__smakebuf_r+0xc>
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <__smakebuf_r+0x7c>)
 800af4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	9b00      	ldr	r3, [sp, #0]
 800af58:	6120      	str	r0, [r4, #16]
 800af5a:	6163      	str	r3, [r4, #20]
 800af5c:	9b01      	ldr	r3, [sp, #4]
 800af5e:	b15b      	cbz	r3, 800af78 <__smakebuf_r+0x74>
 800af60:	4630      	mov	r0, r6
 800af62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af66:	f000 f8c7 	bl	800b0f8 <_isatty_r>
 800af6a:	b128      	cbz	r0, 800af78 <__smakebuf_r+0x74>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	f043 0301 	orr.w	r3, r3, #1
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	89a0      	ldrh	r0, [r4, #12]
 800af7a:	4305      	orrs	r5, r0
 800af7c:	81a5      	strh	r5, [r4, #12]
 800af7e:	e7cd      	b.n	800af1c <__smakebuf_r+0x18>
 800af80:	0800ad11 	.word	0x0800ad11

0800af84 <memchr>:
 800af84:	4603      	mov	r3, r0
 800af86:	b510      	push	{r4, lr}
 800af88:	b2c9      	uxtb	r1, r1
 800af8a:	4402      	add	r2, r0
 800af8c:	4293      	cmp	r3, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	d101      	bne.n	800af96 <memchr+0x12>
 800af92:	2000      	movs	r0, #0
 800af94:	e003      	b.n	800af9e <memchr+0x1a>
 800af96:	7804      	ldrb	r4, [r0, #0]
 800af98:	3301      	adds	r3, #1
 800af9a:	428c      	cmp	r4, r1
 800af9c:	d1f6      	bne.n	800af8c <memchr+0x8>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <memmove>:
 800afa0:	4288      	cmp	r0, r1
 800afa2:	b510      	push	{r4, lr}
 800afa4:	eb01 0402 	add.w	r4, r1, r2
 800afa8:	d902      	bls.n	800afb0 <memmove+0x10>
 800afaa:	4284      	cmp	r4, r0
 800afac:	4623      	mov	r3, r4
 800afae:	d807      	bhi.n	800afc0 <memmove+0x20>
 800afb0:	1e43      	subs	r3, r0, #1
 800afb2:	42a1      	cmp	r1, r4
 800afb4:	d008      	beq.n	800afc8 <memmove+0x28>
 800afb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afbe:	e7f8      	b.n	800afb2 <memmove+0x12>
 800afc0:	4601      	mov	r1, r0
 800afc2:	4402      	add	r2, r0
 800afc4:	428a      	cmp	r2, r1
 800afc6:	d100      	bne.n	800afca <memmove+0x2a>
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afd2:	e7f7      	b.n	800afc4 <memmove+0x24>

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f7ff bf6d 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	20001534 	.word	0x20001534

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f7ff bf68 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	20001534 	.word	0x20001534

0800afec <_realloc_r>:
 800afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff0:	4680      	mov	r8, r0
 800aff2:	4614      	mov	r4, r2
 800aff4:	460e      	mov	r6, r1
 800aff6:	b921      	cbnz	r1, 800b002 <_realloc_r+0x16>
 800aff8:	4611      	mov	r1, r2
 800affa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800affe:	f7fe bb75 	b.w	80096ec <_malloc_r>
 800b002:	b92a      	cbnz	r2, 800b010 <_realloc_r+0x24>
 800b004:	f7fe fb0a 	bl	800961c <_free_r>
 800b008:	4625      	mov	r5, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	f000 f882 	bl	800b118 <_malloc_usable_size_r>
 800b014:	4284      	cmp	r4, r0
 800b016:	4607      	mov	r7, r0
 800b018:	d802      	bhi.n	800b020 <_realloc_r+0x34>
 800b01a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b01e:	d812      	bhi.n	800b046 <_realloc_r+0x5a>
 800b020:	4621      	mov	r1, r4
 800b022:	4640      	mov	r0, r8
 800b024:	f7fe fb62 	bl	80096ec <_malloc_r>
 800b028:	4605      	mov	r5, r0
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d0ed      	beq.n	800b00a <_realloc_r+0x1e>
 800b02e:	42bc      	cmp	r4, r7
 800b030:	4622      	mov	r2, r4
 800b032:	4631      	mov	r1, r6
 800b034:	bf28      	it	cs
 800b036:	463a      	movcs	r2, r7
 800b038:	f7fe f968 	bl	800930c <memcpy>
 800b03c:	4631      	mov	r1, r6
 800b03e:	4640      	mov	r0, r8
 800b040:	f7fe faec 	bl	800961c <_free_r>
 800b044:	e7e1      	b.n	800b00a <_realloc_r+0x1e>
 800b046:	4635      	mov	r5, r6
 800b048:	e7df      	b.n	800b00a <_realloc_r+0x1e>

0800b04a <_raise_r>:
 800b04a:	291f      	cmp	r1, #31
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	d904      	bls.n	800b05e <_raise_r+0x14>
 800b054:	2316      	movs	r3, #22
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	bd38      	pop	{r3, r4, r5, pc}
 800b05e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b060:	b112      	cbz	r2, 800b068 <_raise_r+0x1e>
 800b062:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b066:	b94b      	cbnz	r3, 800b07c <_raise_r+0x32>
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 f831 	bl	800b0d0 <_getpid_r>
 800b06e:	462a      	mov	r2, r5
 800b070:	4601      	mov	r1, r0
 800b072:	4620      	mov	r0, r4
 800b074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b078:	f000 b818 	b.w	800b0ac <_kill_r>
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d00a      	beq.n	800b096 <_raise_r+0x4c>
 800b080:	1c59      	adds	r1, r3, #1
 800b082:	d103      	bne.n	800b08c <_raise_r+0x42>
 800b084:	2316      	movs	r3, #22
 800b086:	6003      	str	r3, [r0, #0]
 800b088:	2001      	movs	r0, #1
 800b08a:	e7e7      	b.n	800b05c <_raise_r+0x12>
 800b08c:	2400      	movs	r4, #0
 800b08e:	4628      	mov	r0, r5
 800b090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b094:	4798      	blx	r3
 800b096:	2000      	movs	r0, #0
 800b098:	e7e0      	b.n	800b05c <_raise_r+0x12>
	...

0800b09c <raise>:
 800b09c:	4b02      	ldr	r3, [pc, #8]	; (800b0a8 <raise+0xc>)
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	f7ff bfd2 	b.w	800b04a <_raise_r>
 800b0a6:	bf00      	nop
 800b0a8:	20000184 	.word	0x20000184

0800b0ac <_kill_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4d06      	ldr	r5, [pc, #24]	; (800b0cc <_kill_r+0x20>)
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	602b      	str	r3, [r5, #0]
 800b0ba:	f7f5 fd38 	bl	8000b2e <_kill>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d102      	bne.n	800b0c8 <_kill_r+0x1c>
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	b103      	cbz	r3, 800b0c8 <_kill_r+0x1c>
 800b0c6:	6023      	str	r3, [r4, #0]
 800b0c8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20001530 	.word	0x20001530

0800b0d0 <_getpid_r>:
 800b0d0:	f7f5 bd26 	b.w	8000b20 <_getpid>

0800b0d4 <_fstat_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4d06      	ldr	r5, [pc, #24]	; (800b0f4 <_fstat_r+0x20>)
 800b0da:	4604      	mov	r4, r0
 800b0dc:	4608      	mov	r0, r1
 800b0de:	4611      	mov	r1, r2
 800b0e0:	602b      	str	r3, [r5, #0]
 800b0e2:	f7f5 fd82 	bl	8000bea <_fstat>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d102      	bne.n	800b0f0 <_fstat_r+0x1c>
 800b0ea:	682b      	ldr	r3, [r5, #0]
 800b0ec:	b103      	cbz	r3, 800b0f0 <_fstat_r+0x1c>
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	bd38      	pop	{r3, r4, r5, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20001530 	.word	0x20001530

0800b0f8 <_isatty_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4d05      	ldr	r5, [pc, #20]	; (800b114 <_isatty_r+0x1c>)
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	f7f5 fd80 	bl	8000c08 <_isatty>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_isatty_r+0x1a>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_isatty_r+0x1a>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	20001530 	.word	0x20001530

0800b118 <_malloc_usable_size_r>:
 800b118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b11c:	1f18      	subs	r0, r3, #4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfbc      	itt	lt
 800b122:	580b      	ldrlt	r3, [r1, r0]
 800b124:	18c0      	addlt	r0, r0, r3
 800b126:	4770      	bx	lr

0800b128 <_init>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr

0800b134 <_fini>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr
