
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b164  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f0  0800b5f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5f0  0800b5f0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5f0  0800b5f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200001e8  0800b7e0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  0800b7e0  00021540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ca  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c006  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a17f  00000000  00000000  0005985e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f52  00000000  00000000  000739dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010692f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006964  00000000  00000000  00106980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b258 	.word	0x0800b258

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b258 	.word	0x0800b258

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	69b9      	ldr	r1, [r7, #24]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	1a8a      	subs	r2, r1, r2
 800018a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1acb      	subs	r3, r1, r3
 8000194:	fbb2 f2f3 	udiv	r2, r2, r3
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4413      	add	r3, r2
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <delay_us>:

void delay_us(uint32_t us) {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <delay_us+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8f9      	bhi.n	80001ba <delay_us+0x12>
		;
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200002b0 	.word	0x200002b0

080001d8 <modeSoftStart>:

void modeSoftStart() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	if (sign == -1) {
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <modeSoftStart+0x7c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001e4:	d10e      	bne.n	8000204 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <modeSoftStart+0x80>)
 80001e8:	f003 fe60 	bl	8003eac <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 ffa3 	bl	8001138 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f2:	2006      	movs	r0, #6
 80001f4:	f001 f8db 	bl	80013ae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f001 f8d8 	bl	80013ae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80001fe:	2008      	movs	r0, #8
 8000200:	f001 f8d5 	bl	80013ae <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <modeSoftStart+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d120      	bne.n	800024e <modeSoftStart+0x76>
		sign = 0;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <modeSoftStart+0x7c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000212:	2006      	movs	r0, #6
 8000214:	f001 f8d9 	bl	80013ca <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000218:	2007      	movs	r0, #7
 800021a:	f001 f8d6 	bl	80013ca <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800021e:	2008      	movs	r0, #8
 8000220:	f001 f8d3 	bl	80013ca <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <modeSoftStart+0x80>)
 8000226:	f003 fe93 	bl	8003f50 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <modeSoftStart+0x88>)
 8000232:	f001 fa80 	bl	8001736 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <modeSoftStart+0x88>)
 800023e:	f001 fa7a 	bl	8001736 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <modeSoftStart+0x88>)
 800024a:	f001 fa74 	bl	8001736 <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	200002f8 	.word	0x200002f8
 800025c:	20000210 	.word	0x20000210
 8000260:	40010c00 	.word	0x40010c00

08000264 <modeDOL>:

void modeDOL(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <modeDOL+0x34>)
 8000270:	f001 fa61 	bl	8001736 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <modeDOL+0x34>)
 800027c:	f001 fa5b 	bl	8001736 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <modeDOL+0x34>)
 8000288:	f001 fa55 	bl	8001736 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f000 ff53 	bl	8001138 <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <EXTI_Stop>:

void EXTI_Stop(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002a0:	2006      	movs	r0, #6
 80002a2:	f001 f892 	bl	80013ca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f001 f88f 	bl	80013ca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f001 f88c 	bl	80013ca <HAL_NVIC_DisableIRQ>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002bc:	f000 feda 	bl	8001074 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c0:	f000 f866 	bl	8000390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c4:	f000 f9b4 	bl	8000630 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_I2C1_Init>
	MX_TIM1_Init();
 80002cc:	f000 f8e8 	bl	80004a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80002d0:	f000 f984 	bl	80005dc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002d4:	f000 f934 	bl	8000540 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002d8:	f008 fbd8 	bl	8008a8c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 80002dc:	f7ff ffde 	bl	800029c <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 80002e0:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0xbc>)
 80002e2:	f003 fd99 	bl	8003e18 <HAL_TIM_Base_Start>
	counter = time * 100;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2264      	movs	r2, #100	; 0x64
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0xc4>)
 80002f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <main+0x5a>
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0xcc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d105      	bne.n	8000312 <main+0x5a>
			modeDOL();
 8000306:	f7ff ffad 	bl	8000264 <modeDOL>
			HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 ff14 	bl	8001138 <HAL_Delay>
 8000310:	e02e      	b.n	8000370 <main+0xb8>
		}

		else if (mode == 2 && flag == 1) {
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d109      	bne.n	800032e <main+0x76>
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x76>
			modeSoftStart();
 8000322:	f7ff ff59 	bl	80001d8 <modeSoftStart>
			HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 ff06 	bl	8001138 <HAL_Delay>
 800032c:	e020      	b.n	8000370 <main+0xb8>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xd0>)
 8000336:	f001 f9fe 	bl	8001736 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xd0>)
 8000342:	f001 f9f8 	bl	8001736 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xd0>)
 800034e:	f001 f9f2 	bl	8001736 <HAL_GPIO_WritePin>
			sign = -1;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0xd4>)
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0xc0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0xc4>)
 8000368:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fee4 	bl	8001138 <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000370:	e7c1      	b.n	80002f6 <main+0x3e>
 8000372:	bf00      	nop
 8000374:	200002b0 	.word	0x200002b0
 8000378:	20000004 	.word	0x20000004
 800037c:	20000210 	.word	0x20000210
 8000380:	20000254 	.word	0x20000254
 8000384:	20000258 	.word	0x20000258
 8000388:	40010c00 	.word	0x40010c00
 800038c:	20000000 	.word	0x20000000

08000390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 f85a 	bl	8009458 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fff6 	bl	80033d8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
		Error_Handler();
 80003f2:	f000 fae3 	bl	80009bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fa62 	bl	80038dc <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
		Error_Handler();
 800041e:	f000 facd 	bl	80009bc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fbed 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
		Error_Handler();
 8000438:	f000 fac0 	bl	80009bc <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 f9a1 	bl	80017c8 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800048c:	f000 fa96 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000025c 	.word	0x2000025c
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_TIM1_Init+0x98>)
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x98>)
 80004c4:	2247      	movs	r2, #71	; 0x47
 80004c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_TIM1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ea:	f003 fc45 	bl	8003d78 <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80004f4:	f000 fa62 	bl	80009bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM1_Init+0x98>)
 8000506:	f003 fe59 	bl	80041bc <HAL_TIM_ConfigClockSource>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000510:	f000 fa54 	bl	80009bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x98>)
 8000522:	f004 f82b 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800052c:	f000 fa46 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002b0 	.word	0x200002b0
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000566:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800056a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f003 fbf6 	bl	8003d78 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000592:	f000 fa13 	bl	80009bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f003 fe0a 	bl	80041bc <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80005ae:	f000 fa05 	bl	80009bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f003 ffdc 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005ca:	f000 f9f7 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002f8 	.word	0x200002f8

080005dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f004 f822 	bl	800465c <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 f9cd 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000340 	.word	0x20000340
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x118>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MX_GPIO_Init+0x118>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x118>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x118>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x118>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x118>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_GPIO_Init+0x118>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_GPIO_Init+0x118>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0x118>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0x118>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0x118>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0x118>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_GPIO_Init+0x11c>)
 80006ac:	f001 f843 	bl	8001736 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x120>)
 80006b8:	f001 f83d 	bl	8001736 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0x11c>)
 80006d6:	f000 fe93 	bl	8001400 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80006da:	2307      	movs	r3, #7
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ee:	f000 fe87 	bl	8001400 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0x120>)
 800070c:	f000 fe78 	bl	8001400 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2006      	movs	r0, #6
 8000716:	f000 fe2e 	bl	8001376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 fe47 	bl	80013ae <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2007      	movs	r0, #7
 8000726:	f000 fe26 	bl	8001376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800072a:	2007      	movs	r0, #7
 800072c:	f000 fe3f 	bl	80013ae <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fe1e 	bl	8001376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800073a:	2008      	movs	r0, #8
 800073c:	f000 fe37 	bl	80013ae <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10110000 	.word	0x10110000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]

	counter = counter - 10;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b0a      	subs	r3, #10
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076c:	6013      	str	r3, [r2, #0]
	delay1 = delay2 = delay3 = MAP(counter, 0, time * 100, 200, 2800);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	23c8      	movs	r3, #200	; 0xc8
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fcf2 	bl	8000170 <MAP>
 800078c:	4603      	mov	r3, r0
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007a0:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007a8:	f000 ffdd 	bl	8001766 <HAL_GPIO_TogglePin>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000210 	.word	0x20000210
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000020c 	.word	0x2000020c
 80007c0:	20000208 	.word	0x20000208
 80007c4:	20000204 	.word	0x20000204
 80007c8:	40011000 	.word	0x40011000

080007cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d147      	bne.n	800086c <HAL_GPIO_EXTI_Callback+0xa0>

		delay_us(delay1);
 80007dc:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fce1 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 2800) {
 80007e6:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	4b6f      	ldr	r3, [pc, #444]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	441a      	add	r2, r3
 80007f0:	4b6e      	ldr	r3, [pc, #440]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80007fa:	d205      	bcs.n	8000808 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000802:	486b      	ldr	r0, [pc, #428]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000804:	f000 ff97 	bl	8001736 <HAL_GPIO_WritePin>
		}
		if (delay1 + delay2 + delay3 < 5600) {
 8000808:	4b66      	ldr	r3, [pc, #408]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b66      	ldr	r3, [pc, #408]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	441a      	add	r2, r3
 8000812:	4b66      	ldr	r3, [pc, #408]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800081c:	d205      	bcs.n	800082a <HAL_GPIO_EXTI_Callback+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	4862      	ldr	r0, [pc, #392]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000826:	f000 ff86 	bl	8001736 <HAL_GPIO_WritePin>
		}
		if (delay1 + delay2 + delay3 < 8400) {
 800082a:	4b5e      	ldr	r3, [pc, #376]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	441a      	add	r2, r3
 8000834:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4413      	add	r3, r2
 800083a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800083e:	4293      	cmp	r3, r2
 8000840:	d805      	bhi.n	800084e <HAL_GPIO_EXTI_Callback+0x82>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000848:	4859      	ldr	r0, [pc, #356]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800084a:	f000 ff74 	bl	8001736 <HAL_GPIO_WritePin>
		}
		delay_us(50);
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f7ff fcaa 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 809e 	beq.w	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4852      	ldr	r0, [pc, #328]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000866:	f000 ff66 	bl	8001736 <HAL_GPIO_WritePin>
		delay_us(50);
		if (counter > 0) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}
 800086a:	e096      	b.n	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
	else if (GPIO_Pin == GPIO_PIN_1) {
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d146      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x134>
		delay_us(delay2);
 8000872:	4b4d      	ldr	r3, [pc, #308]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc96 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 8400) {
 800087c:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	441a      	add	r2, r3
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000890:	4293      	cmp	r3, r2
 8000892:	d805      	bhi.n	80008a0 <HAL_GPIO_EXTI_Callback+0xd4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089a:	4845      	ldr	r0, [pc, #276]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800089c:	f000 ff4b 	bl	8001736 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 2800) {
 80008a0:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	441a      	add	r2, r3
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80008b4:	d205      	bcs.n	80008c2 <HAL_GPIO_EXTI_Callback+0xf6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	483c      	ldr	r0, [pc, #240]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008be:	f000 ff3a 	bl	8001736 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 5600) {
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	441a      	add	r2, r3
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 80008d6:	d205      	bcs.n	80008e4 <HAL_GPIO_EXTI_Callback+0x118>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008de:	4834      	ldr	r0, [pc, #208]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008e0:	f000 ff29 	bl	8001736 <HAL_GPIO_WritePin>
		delay_us(50);
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fc5f 	bl	80001a8 <delay_us>
		if (counter > 0) {
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d053      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008fa:	f000 ff1c 	bl	8001736 <HAL_GPIO_WritePin>
}
 80008fe:	e04c      	b.n	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8000900:	2104      	movs	r1, #4
 8000902:	482d      	ldr	r0, [pc, #180]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000904:	f000 ff00 	bl	8001708 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d045      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
		delay_us(delay3);
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc48 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 5600) {
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	441a      	add	r2, r3
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800092c:	d205      	bcs.n	800093a <HAL_GPIO_EXTI_Callback+0x16e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	481e      	ldr	r0, [pc, #120]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000936:	f000 fefe 	bl	8001736 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 8400) {
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	441a      	add	r2, r3
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4413      	add	r3, r2
 800094a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800094e:	4293      	cmp	r3, r2
 8000950:	d805      	bhi.n	800095e <HAL_GPIO_EXTI_Callback+0x192>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800095a:	f000 feec 	bl	8001736 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 2800) {
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	441a      	add	r2, r3
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4413      	add	r3, r2
 800096e:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000972:	d205      	bcs.n	8000980 <HAL_GPIO_EXTI_Callback+0x1b4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800097c:	f000 fedb 	bl	8001736 <HAL_GPIO_WritePin>
		delay_us(50);
 8000980:	2032      	movs	r0, #50	; 0x32
 8000982:	f7ff fc11 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x1ce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000996:	f000 fece 	bl	8001736 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000204 	.word	0x20000204
 80009a8:	20000208 	.word	0x20000208
 80009ac:	2000020c 	.word	0x2000020c
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	20000210 	.word	0x20000210
 80009b8:	40011000 	.word	0x40011000

080009bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_MspInit+0x5c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <HAL_MspInit+0x5c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_MspInit+0x5c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x5c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x5c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x5c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_MspInit+0x60>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_MspInit+0x60>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000

08000a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <HAL_I2C_MspInit+0x70>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d123      	bne.n	8000a94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a64:	23c0      	movs	r3, #192	; 0xc0
 8000a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a68:	2312      	movs	r3, #18
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_I2C_MspInit+0x78>)
 8000a78:	f000 fcc2 	bl	8001400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_I2C_MspInit+0x74>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <HAL_TIM_Base_MspInit+0x68>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ad2:	e018      	b.n	8000b06 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000adc:	d113      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x6c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	201c      	movs	r0, #28
 8000afc:	f000 fc3b 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b00:	201c      	movs	r0, #28
 8000b02:	f000 fc54 	bl	80013ae <HAL_NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d131      	bne.n	8000b9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <HAL_UART_MspInit+0x94>)
 8000b7e:	f000 fc3f 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_UART_MspInit+0x94>)
 8000b98:	f000 fc32 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 fa83 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fdc8 	bl	8001798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 fdc1 	bl	8001798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f000 fdba 	bl	8001798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c2e:	f001 f840 	bl	8001cb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20001024 	.word	0x20001024

08000c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM2_IRQHandler+0x10>)
 8000c42:	f003 f9b3 	bl	8003fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200002f8 	.word	0x200002f8

08000c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	return 1;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <_kill>:

int _kill(int pid, int sig)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c68:	f008 fbbe 	bl	80093e8 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2216      	movs	r2, #22
 8000c70:	601a      	str	r2, [r3, #0]
	return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_exit>:

void _exit (int status)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c86:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffe7 	bl	8000c5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c90:	e7fe      	b.n	8000c90 <_exit+0x12>

08000c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e00a      	b.n	8000cba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	4601      	mov	r1, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	b2ca      	uxtb	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf0      	blt.n	8000ca4 <_read+0x12>
	}

return len;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e009      	b.n	8000cf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	60ba      	str	r2, [r7, #8]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	dbf1      	blt.n	8000cde <_write+0x12>
	}
	return len;
 8000cfa:	687b      	ldr	r3, [r7, #4]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_close>:

int _close(int file)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <_isatty>:

int _isatty(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f008 fb28 	bl	80093e8 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20005000 	.word	0x20005000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000384 	.word	0x20000384
 8000dcc:	20001540 	.word	0x20001540

08000dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000ddc:	b40f      	push	{r0, r1, r2, r3}
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b0c2      	sub	sp, #264	; 0x108
 8000de2:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000de4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000dec:	4638      	mov	r0, r7
 8000dee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000df2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000df6:	21fe      	movs	r1, #254	; 0xfe
 8000df8:	f008 fc2e 	bl	8009658 <vsniprintf>
 8000dfc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	dd0c      	ble.n	8000e22 <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e0c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e0e:	bfa8      	it	ge
 8000e10:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	3301      	adds	r3, #1
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 ff05 	bl	8008c2c <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000e22:	bf00      	nop
 8000e24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e2e:	b004      	add	sp, #16
 8000e30:	4770      	bx	lr
	...

08000e34 <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0c4      	sub	sp, #272	; 0x110
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e42:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e52:	4962      	ldr	r1, [pc, #392]	; (8000fdc <terminal_proses+0x1a8>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f008 fb77 	bl	8009548 <strtok>
 8000e5a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000e5e:	e012      	b.n	8000e86 <terminal_proses+0x52>
		argv[argc++] = p2;
 8000e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000e6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e6e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000e72:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000e76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000e7a:	4958      	ldr	r1, [pc, #352]	; (8000fdc <terminal_proses+0x1a8>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f008 fb63 	bl	8009548 <strtok>
 8000e82:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <terminal_proses+0x62>
 8000e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e92:	2b3f      	cmp	r3, #63	; 0x3f
 8000e94:	dde4      	ble.n	8000e60 <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000e9e:	4850      	ldr	r0, [pc, #320]	; (8000fe0 <terminal_proses+0x1ac>)
 8000ea0:	f7ff ff9c 	bl	8000ddc <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000ea4:	e094      	b.n	8000fd0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000ea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	494c      	ldr	r1, [pc, #304]	; (8000fe4 <terminal_proses+0x1b0>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f94a 	bl	800014c <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000ebe:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <terminal_proses+0x1b4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4849      	ldr	r0, [pc, #292]	; (8000fec <terminal_proses+0x1b8>)
 8000ec6:	f7ff ff89 	bl	8000ddc <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <terminal_proses+0x1bc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4848      	ldr	r0, [pc, #288]	; (8000ff4 <terminal_proses+0x1c0>)
 8000ed2:	f7ff ff83 	bl	8000ddc <command_printf>
}
 8000ed6:	e07b      	b.n	8000fd0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4945      	ldr	r1, [pc, #276]	; (8000ff8 <terminal_proses+0x1c4>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f931 	bl	800014c <strcmp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10c      	bne.n	8000f0a <terminal_proses+0xd6>
		flag = 0;
 8000ef0:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <terminal_proses+0x1c8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efc:	4840      	ldr	r0, [pc, #256]	; (8001000 <terminal_proses+0x1cc>)
 8000efe:	f000 fc1a 	bl	8001736 <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <terminal_proses+0x1d0>)
 8000f04:	f7ff ff6a 	bl	8000ddc <command_printf>
}
 8000f08:	e062      	b.n	8000fd0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	493c      	ldr	r1, [pc, #240]	; (8001008 <terminal_proses+0x1d4>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f918 	bl	800014c <strcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <terminal_proses+0x108>
		flag = 1;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <terminal_proses+0x1c8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	4834      	ldr	r0, [pc, #208]	; (8001000 <terminal_proses+0x1cc>)
 8000f30:	f000 fc01 	bl	8001736 <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8000f34:	4835      	ldr	r0, [pc, #212]	; (800100c <terminal_proses+0x1d8>)
 8000f36:	f7ff ff51 	bl	8000ddc <command_printf>
}
 8000f3a:	e049      	b.n	8000fd0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8000f3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4932      	ldr	r1, [pc, #200]	; (8001010 <terminal_proses+0x1dc>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f8ff 	bl	800014c <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d11d      	bne.n	8000f90 <terminal_proses+0x15c>
		if (argc == 2) {
 8000f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d109      	bne.n	8000f70 <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8000f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <terminal_proses+0x1b4>)
 8000f68:	492a      	ldr	r1, [pc, #168]	; (8001014 <terminal_proses+0x1e0>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 fa7c 	bl	8009468 <siscanf>
		if (mode == 1) {
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <terminal_proses+0x1b4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8000f78:	4827      	ldr	r0, [pc, #156]	; (8001018 <terminal_proses+0x1e4>)
 8000f7a:	f7ff ff2f 	bl	8000ddc <command_printf>
}
 8000f7e:	e027      	b.n	8000fd0 <terminal_proses+0x19c>
		} else if (mode == 2) {
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <terminal_proses+0x1b4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8000f88:	4824      	ldr	r0, [pc, #144]	; (800101c <terminal_proses+0x1e8>)
 8000f8a:	f7ff ff27 	bl	8000ddc <command_printf>
}
 8000f8e:	e01f      	b.n	8000fd0 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 8000f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4921      	ldr	r1, [pc, #132]	; (8001020 <terminal_proses+0x1ec>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f8d5 	bl	800014c <strcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d113      	bne.n	8000fd0 <terminal_proses+0x19c>
		if (argc == 2) {
 8000fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d10f      	bne.n	8000fd0 <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 8000fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <terminal_proses+0x1bc>)
 8000fbc:	4915      	ldr	r1, [pc, #84]	; (8001014 <terminal_proses+0x1e0>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f008 fa52 	bl	8009468 <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <terminal_proses+0x1bc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <terminal_proses+0x1f0>)
 8000fcc:	f7ff ff06 	bl	8000ddc <command_printf>
}
 8000fd0:	bf00      	nop
 8000fd2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800b270 	.word	0x0800b270
 8000fe0:	0800b274 	.word	0x0800b274
 8000fe4:	0800b288 	.word	0x0800b288
 8000fe8:	20000254 	.word	0x20000254
 8000fec:	0800b290 	.word	0x0800b290
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	0800b29c 	.word	0x0800b29c
 8000ff8:	0800b2a8 	.word	0x0800b2a8
 8000ffc:	20000258 	.word	0x20000258
 8001000:	40011000 	.word	0x40011000
 8001004:	0800b2ac 	.word	0x0800b2ac
 8001008:	0800b2b4 	.word	0x0800b2b4
 800100c:	0800b2b8 	.word	0x0800b2b8
 8001010:	0800b2bc 	.word	0x0800b2bc
 8001014:	0800b2c4 	.word	0x0800b2c4
 8001018:	0800b2c8 	.word	0x0800b2c8
 800101c:	0800b2d4 	.word	0x0800b2d4
 8001020:	0800b2e8 	.word	0x0800b2e8
 8001024:	0800b2f4 	.word	0x0800b2f4

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff febf 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f008 f9cf 	bl	80093f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff f92f 	bl	80002b8 <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001064:	0800b5f8 	.word	0x0800b5f8
  ldr r2, =_sbss
 8001068:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800106c:	20001540 	.word	0x20001540

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x28>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x28>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f96b 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fc9a 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f991 	bl	80013e6 <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f94b 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000010 	.word	0x20000010
 80010fc:	2000000c 	.word	0x2000000c

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x20>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000010 	.word	0x20000010
 8001120:	20000388 	.word	0x20000388

08001124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20000388 	.word	0x20000388

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff fff0 	bl	8001124 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffe0 	bl	8001124 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000010 	.word	0x20000010

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4906      	ldr	r1, [pc, #24]	; (8001218 <__NVIC_EnableIRQ+0x34>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db12      	blt.n	8001254 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	490a      	ldr	r1, [pc, #40]	; (8001260 <__NVIC_DisableIRQ+0x44>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	3320      	adds	r3, #32
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001248:	f3bf 8f4f 	dsb	sy
}
 800124c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124e:	f3bf 8f6f 	isb	sy
}
 8001252:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff90 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff09 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff1e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff90 	bl	80012b8 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5f 	bl	8001264 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff11 	bl	80011e4 <__NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff1f 	bl	800121c <__NVIC_DisableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff94 	bl	800131c <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b08b      	sub	sp, #44	; 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e169      	b.n	80016e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001414:	2201      	movs	r2, #1
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8158 	bne.w	80016e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a9a      	ldr	r2, [pc, #616]	; (80016a0 <HAL_GPIO_Init+0x2a0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d05e      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800143c:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_GPIO_Init+0x2a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d875      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001442:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <HAL_GPIO_Init+0x2a4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d058      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001448:	4a96      	ldr	r2, [pc, #600]	; (80016a4 <HAL_GPIO_Init+0x2a4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d86f      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800144e:	4a96      	ldr	r2, [pc, #600]	; (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d052      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001454:	4a94      	ldr	r2, [pc, #592]	; (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d869      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800145a:	4a94      	ldr	r2, [pc, #592]	; (80016ac <HAL_GPIO_Init+0x2ac>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04c      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001460:	4a92      	ldr	r2, [pc, #584]	; (80016ac <HAL_GPIO_Init+0x2ac>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d863      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001466:	4a92      	ldr	r2, [pc, #584]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d046      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800146c:	4a90      	ldr	r2, [pc, #576]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d85d      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d82a      	bhi.n	80014cc <HAL_GPIO_Init+0xcc>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d859      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <HAL_GPIO_Init+0x80>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	080014fb 	.word	0x080014fb
 8001484:	080014d5 	.word	0x080014d5
 8001488:	080014e7 	.word	0x080014e7
 800148c:	08001529 	.word	0x08001529
 8001490:	0800152f 	.word	0x0800152f
 8001494:	0800152f 	.word	0x0800152f
 8001498:	0800152f 	.word	0x0800152f
 800149c:	0800152f 	.word	0x0800152f
 80014a0:	0800152f 	.word	0x0800152f
 80014a4:	0800152f 	.word	0x0800152f
 80014a8:	0800152f 	.word	0x0800152f
 80014ac:	0800152f 	.word	0x0800152f
 80014b0:	0800152f 	.word	0x0800152f
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	0800152f 	.word	0x0800152f
 80014bc:	0800152f 	.word	0x0800152f
 80014c0:	0800152f 	.word	0x0800152f
 80014c4:	080014dd 	.word	0x080014dd
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	4a79      	ldr	r2, [pc, #484]	; (80016b4 <HAL_GPIO_Init+0x2b4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d2:	e02c      	b.n	800152e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e029      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e024      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3308      	adds	r3, #8
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e01f      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	330c      	adds	r3, #12
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e01a      	b.n	8001530 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e013      	b.n	8001530 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	611a      	str	r2, [r3, #16]
          break;
 800151a:	e009      	b.n	8001530 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	615a      	str	r2, [r3, #20]
          break;
 8001526:	e003      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x130>
          break;
 800152e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2bff      	cmp	r3, #255	; 0xff
 8001534:	d801      	bhi.n	800153a <HAL_GPIO_Init+0x13a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e001      	b.n	800153e <HAL_GPIO_Init+0x13e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d802      	bhi.n	800154c <HAL_GPIO_Init+0x14c>
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x152>
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	3b08      	subs	r3, #8
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	210f      	movs	r1, #15
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	6a39      	ldr	r1, [r7, #32]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	431a      	orrs	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80b1 	beq.w	80016e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2bc>)
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HAL_GPIO_Init+0x2c0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d013      	beq.n	80015ec <HAL_GPIO_Init+0x1ec>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_GPIO_Init+0x2c4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00d      	beq.n	80015e8 <HAL_GPIO_Init+0x1e8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3e      	ldr	r2, [pc, #248]	; (80016c8 <HAL_GPIO_Init+0x2c8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1e4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <HAL_GPIO_Init+0x2cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_Init+0x1e0>
 80015dc:	2303      	movs	r3, #3
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015ec:	2300      	movs	r3, #0
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fe:	492f      	ldr	r1, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x2bc>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	492c      	ldr	r1, [pc, #176]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4928      	ldr	r1, [pc, #160]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4922      	ldr	r1, [pc, #136]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	491e      	ldr	r1, [pc, #120]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	4918      	ldr	r1, [pc, #96]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4914      	ldr	r1, [pc, #80]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d021      	beq.n	80016d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
 800169c:	e021      	b.n	80016e2 <HAL_GPIO_Init+0x2e2>
 800169e:	bf00      	nop
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40011400 	.word	0x40011400
 80016d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_GPIO_Init+0x304>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4909      	ldr	r1, [pc, #36]	; (8001704 <HAL_GPIO_Init+0x304>)
 80016de:	4013      	ands	r3, r2
 80016e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f ae8e 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	372c      	adds	r7, #44	; 0x2c
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e001      	b.n	800172a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001746:	787b      	ldrb	r3, [r7, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001752:	e003      	b.n	800175c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	041a      	lsls	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001778:	887a      	ldrh	r2, [r7, #2]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	041a      	lsls	r2, r3, #16
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43d9      	mvns	r1, r3
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	400b      	ands	r3, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f808 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12b      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff f91c 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800182c:	f002 f9a8 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a81      	ldr	r2, [pc, #516]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d807      	bhi.n	800184c <HAL_I2C_Init+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_I2C_Init+0x278>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e006      	b.n	800185a <HAL_I2C_Init+0x92>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a7d      	ldr	r2, [pc, #500]	; (8001a44 <HAL_I2C_Init+0x27c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_I2C_Init+0x280>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a6a      	ldr	r2, [pc, #424]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d802      	bhi.n	800189c <HAL_I2C_Init+0xd4>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	e009      	b.n	80018b0 <HAL_I2C_Init+0xe8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_I2C_Init+0x284>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	495c      	ldr	r1, [pc, #368]	; (8001a3c <HAL_I2C_Init+0x274>)
 80018cc:	428b      	cmp	r3, r1
 80018ce:	d819      	bhi.n	8001904 <HAL_I2C_Init+0x13c>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_I2C_Init+0x138>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	e051      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001900:	2304      	movs	r3, #4
 8001902:	e04f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <HAL_I2C_Init+0x168>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e012      	b.n	8001956 <HAL_I2C_Init+0x18e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x196>
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <HAL_I2C_Init+0x1bc>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e58      	subs	r0, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	3301      	adds	r3, #1
 800197a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6911      	ldr	r1, [r2, #16]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	000186a0 	.word	0x000186a0
 8001a40:	001e847f 	.word	0x001e847f
 8001a44:	003d08ff 	.word	0x003d08ff
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af06      	add	r7, sp, #24
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0fd      	b.n	8001c5e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f007 fa0c 	bl	8008e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fee9 	bl	8004860 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	687e      	ldr	r6, [r7, #4]
 8001a96:	466d      	mov	r5, sp
 8001a98:	f106 0410 	add.w	r4, r6, #16
 8001a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	602b      	str	r3, [r5, #0]
 8001aa4:	1d33      	adds	r3, r6, #4
 8001aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f002 feb3 	bl	8004814 <USB_CoreInit>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0ce      	b.n	8001c5e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fee4 	bl	8004894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e04c      	b.n	8001b6c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	b298      	uxth	r0, r3
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3336      	adds	r3, #54	; 0x36
 8001b10:	4602      	mov	r2, r0
 8001b12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3303      	adds	r3, #3
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3338      	adds	r3, #56	; 0x38
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	333c      	adds	r3, #60	; 0x3c
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3340      	adds	r3, #64	; 0x40
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3ad      	bcc.n	8001ad2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e044      	b.n	8001c06 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3b5      	bcc.n	8001b7c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	687e      	ldr	r6, [r7, #4]
 8001c18:	466d      	mov	r5, sp
 8001c1a:	f106 0410 	add.w	r4, r6, #16
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	1d33      	adds	r3, r6, #4
 8001c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f002 fe3e 	bl	80048ac <USB_DevInit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00d      	b.n	8001c5e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 faf0 	bl	800723c <USB_DevDisconnect>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_Start+0x16>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e016      	b.n	8001caa <HAL_PCD_Start+0x44>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fdd3 	bl	8004834 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c8e:	2101      	movs	r1, #1
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f007 fb72 	bl	800937a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 fac4 	bl	8007228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b088      	sub	sp, #32
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 fac6 	bl	8007250 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cce:	d102      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fb5f 	bl	8002394 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 fab8 	bl	8007250 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d112      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f007 f940 	bl	8008f8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f923 	bl	8001f58 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 fa9a 	bl	8007250 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d26:	d10b      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 fa83 	bl	8007250 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d54:	d10b      	bne.n	8001d6e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fa6c 	bl	8007250 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d82:	d126      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0204 	bic.w	r2, r2, #4
 8001d96:	b292      	uxth	r2, r2
 8001d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0208 	bic.w	r2, r2, #8
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f007 f921 	bl	8008ffc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 fa3a 	bl	8007250 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de6:	f040 8082 	bne.w	8001eee <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	77fb      	strb	r3, [r7, #31]
 8001dee:	e010      	b.n	8001e12 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	441a      	add	r2, r3
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
 8001dfe:	8812      	ldrh	r2, [r2, #0]
 8001e00:	b292      	uxth	r2, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	3320      	adds	r3, #32
 8001e06:	443b      	add	r3, r7
 8001e08:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	77fb      	strb	r3, [r7, #31]
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d9eb      	bls.n	8001df0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e48:	bf00      	nop
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f6      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
 8001e78:	e00f      	b.n	8001e9a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	4611      	mov	r1, r2
 8001e82:	7ffa      	ldrb	r2, [r7, #31]
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	440a      	add	r2, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e92:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e94:	7ffb      	ldrb	r3, [r7, #31]
 8001e96:	3301      	adds	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	2b07      	cmp	r3, #7
 8001e9e:	d9ec      	bls.n	8001e7a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0204 	orr.w	r2, r2, #4
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f007 f86d 	bl	8008fc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 f9ac 	bl	8007250 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d10e      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f007 f826 	bl	8008f6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f992 	bl	8007250 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f36:	d10b      	bne.n	8001f50 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_SetAddress+0x1a>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e013      	b.n	8001f9a <HAL_PCD_SetAddress+0x42>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f005 f939 	bl	8007202 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	4608      	mov	r0, r1
 8001fac:	4611      	mov	r1, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	70fb      	strb	r3, [r7, #3]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	803b      	strh	r3, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da0e      	bge.n	8001fe6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	705a      	strb	r2, [r3, #1]
 8001fe4:	e00e      	b.n	8002004 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 0207 	and.w	r2, r3, #7
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002010:	883a      	ldrh	r2, [r7, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	78ba      	ldrb	r2, [r7, #2]
 800201a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800202e:	78bb      	ldrb	r3, [r7, #2]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d102      	bne.n	800203a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_EP_Open+0xa6>
 8002044:	2302      	movs	r3, #2
 8002046:	e00e      	b.n	8002066 <HAL_PCD_EP_Open+0xc4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fc48 	bl	80048ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002064:	7afb      	ldrb	r3, [r7, #11]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	da0e      	bge.n	80020a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
 800209e:	e00e      	b.n	80020be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_EP_Close+0x6a>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00e      	b.n	80020f6 <HAL_PCD_EP_Close+0x88>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 ff6a 	bl	8004fc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 f91c 	bl	8005398 <USB_EPStartXfer>
 8002160:	e005      	b.n	800216e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f915 	bl	8005398 <USB_EPStartXfer>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2201      	movs	r2, #1
 80021f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 f8c2 	bl	8005398 <USB_EPStartXfer>
 8002214:	e005      	b.n	8002222 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6979      	ldr	r1, [r7, #20]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f8bb 	bl	8005398 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d901      	bls.n	800224a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e04c      	b.n	80022e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	da0e      	bge.n	8002270 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
 800226e:	e00c      	b.n	800228a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_EP_SetStall+0x7e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e01c      	b.n	80022e4 <HAL_PCD_EP_SetStall+0xb8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 fea5 	bl	8007008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f004 ffca 	bl	800726e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d901      	bls.n	800230a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e040      	b.n	800238c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800230a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230e:	2b00      	cmp	r3, #0
 8002310:	da0e      	bge.n	8002330 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	705a      	strb	r2, [r3, #1]
 800232e:	e00e      	b.n	800234e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 0207 	and.w	r2, r3, #7
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	b2da      	uxtb	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_PCD_EP_ClrStall+0x82>
 800236a:	2302      	movs	r3, #2
 800236c:	e00e      	b.n	800238c <HAL_PCD_EP_ClrStall+0xa0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 fe93 	bl	80070a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800239c:	e2ec      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8161 	bne.w	8002680 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d152      	bne.n	800246e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	81fb      	strh	r3, [r7, #14]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	89fb      	ldrh	r3, [r7, #14]
 80023e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3328      	adds	r3, #40	; 0x28
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	3302      	adds	r3, #2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	441a      	add	r2, r3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f006 fd83 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 829b 	beq.w	8002978 <PCD_EP_ISR_Handler+0x5e4>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8296 	bne.w	8002978 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b292      	uxth	r2, r2
 8002460:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800246c:	e284      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800247e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002484:	2b00      	cmp	r3, #0
 8002486:	d034      	beq.n	80024f2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	3306      	adds	r3, #6
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f004 ff21 	bl	800730e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024d8:	4013      	ands	r3, r2
 80024da:	823b      	strh	r3, [r7, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	8a3a      	ldrh	r2, [r7, #16]
 80024e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e6:	b292      	uxth	r2, r2
 80024e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f006 fcf8 	bl	8008ee0 <HAL_PCD_SetupStageCallback>
 80024f0:	e242      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f280 823e 	bge.w	8002978 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002508:	4013      	ands	r3, r2
 800250a:	83bb      	strh	r3, [r7, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	8bba      	ldrh	r2, [r7, #28]
 8002512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002516:	b292      	uxth	r2, r2
 8002518:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	3306      	adds	r3, #6
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d019      	beq.n	8002582 <PCD_EP_ISR_Handler+0x1ee>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	6959      	ldr	r1, [r3, #20]
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002566:	b29b      	uxth	r3, r3
 8002568:	f004 fed1 	bl	800730e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	441a      	add	r2, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800257a:	2100      	movs	r1, #0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f006 fcc1 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 81f2 	bne.w	8002978 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d112      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x24e>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025da:	b29a      	uxth	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e02f      	b.n	8002642 <PCD_EP_ISR_Handler+0x2ae>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b3e      	cmp	r3, #62	; 0x3e
 80025e8:	d813      	bhi.n	8002612 <PCD_EP_ISR_Handler+0x27e>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <PCD_EP_ISR_Handler+0x270>
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	3301      	adds	r3, #1
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	b29b      	uxth	r3, r3
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	b29a      	uxth	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	801a      	strh	r2, [r3, #0]
 8002610:	e017      	b.n	8002642 <PCD_EP_ISR_Handler+0x2ae>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <PCD_EP_ISR_Handler+0x298>
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	3b01      	subs	r3, #1
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	b29b      	uxth	r3, r3
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	b29b      	uxth	r3, r3
 8002634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263c:	b29a      	uxth	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	827b      	strh	r3, [r7, #18]
 8002654:	8a7b      	ldrh	r3, [r7, #18]
 8002656:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800265a:	827b      	strh	r3, [r7, #18]
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002662:	827b      	strh	r3, [r7, #18]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
 800267e:	e17b      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002692:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002696:	2b00      	cmp	r3, #0
 8002698:	f280 80ea 	bge.w	8002870 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b2:	4013      	ands	r3, r2
 80026b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	b292      	uxth	r2, r2
 80026cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d122      	bne.n	8002732 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	3306      	adds	r3, #6
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002714:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8087 	beq.w	800282c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	88da      	ldrh	r2, [r3, #6]
 800272a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800272c:	f004 fdef 	bl	800730e <USB_ReadPMA>
 8002730:	e07c      	b.n	800282c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	78db      	ldrb	r3, [r3, #3]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d108      	bne.n	800274c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800273a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800273c:	461a      	mov	r2, r3
 800273e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f927 	bl	8002994 <HAL_PCD_EP_DB_Receive>
 8002746:	4603      	mov	r3, r0
 8002748:	86fb      	strh	r3, [r7, #54]	; 0x36
 800274a:	e06f      	b.n	800282c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	847b      	strh	r3, [r7, #34]	; 0x22
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d021      	beq.n	80027ea <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	3302      	adds	r3, #2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02a      	beq.n	800282c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	6959      	ldr	r1, [r3, #20]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	891a      	ldrh	r2, [r3, #8]
 80027e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e4:	f004 fd93 	bl	800730e <USB_ReadPMA>
 80027e8:	e020      	b.n	800282c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	3306      	adds	r3, #6
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	6959      	ldr	r1, [r3, #20]
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	895a      	ldrh	r2, [r3, #10]
 8002826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002828:	f004 fd71 	bl	800730e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002832:	441a      	add	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283e:	441a      	add	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <PCD_EP_ISR_Handler+0x4c2>
 800284c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	429a      	cmp	r2, r3
 8002854:	d206      	bcs.n	8002864 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f006 fb51 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
 8002862:	e005      	b.n	8002870 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fd94 	bl	8005398 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07e      	beq.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800287a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	843b      	strh	r3, [r7, #32]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	8c3b      	ldrh	r3, [r7, #32]
 80028ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	78db      	ldrb	r3, [r3, #3]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d00c      	beq.n	80028e8 <PCD_EP_ISR_Handler+0x554>
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	78db      	ldrb	r3, [r3, #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d146      	bne.n	800296c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d141      	bne.n	800296c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	3302      	adds	r3, #2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002910:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	8bfb      	ldrh	r3, [r7, #30]
 8002918:	429a      	cmp	r2, r3
 800291a:	d906      	bls.n	800292a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	8bfb      	ldrh	r3, [r7, #30]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e002      	b.n	8002930 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 fafb 	bl	8008f3a <HAL_PCD_DataInStageCallback>
 8002944:	e018      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	441a      	add	r2, r3
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	8bfb      	ldrh	r3, [r7, #30]
 8002958:	441a      	add	r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fd17 	bl	8005398 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800296a:	e005      	b.n	8002978 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800296c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800296e:	461a      	mov	r2, r3
 8002970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f91b 	bl	8002bae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21b      	sxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f6ff ad0a 	blt.w	800239e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3738      	adds	r7, #56	; 0x38
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d07e      	beq.n	8002aaa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	3302      	adds	r3, #2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	8b7b      	ldrh	r3, [r7, #26]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d306      	bcc.n	80029ee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	8b7b      	ldrh	r3, [r7, #26]
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	e002      	b.n	80029f4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d123      	bne.n	8002a44 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	833b      	strh	r3, [r7, #24]
 8002a18:	8b3b      	ldrh	r3, [r7, #24]
 8002a1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a1e:	833b      	strh	r3, [r7, #24]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	8b3b      	ldrh	r3, [r7, #24]
 8002a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01f      	beq.n	8002a8e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a68:	82fb      	strh	r3, [r7, #22]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	8afb      	ldrh	r3, [r7, #22]
 8002a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8087 	beq.w	8002ba4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6959      	ldr	r1, [r3, #20]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	891a      	ldrh	r2, [r3, #8]
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	f004 fc33 	bl	800730e <USB_ReadPMA>
 8002aa8:	e07c      	b.n	8002ba4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	3306      	adds	r3, #6
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	8b7b      	ldrh	r3, [r7, #26]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d306      	bcc.n	8002aec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	1ad2      	subs	r2, r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	e002      	b.n	8002af2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d123      	bne.n	8002b42 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b14:	83fb      	strh	r3, [r7, #30]
 8002b16:	8bfb      	ldrh	r3, [r7, #30]
 8002b18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b1c:	83fb      	strh	r3, [r7, #30]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	441a      	add	r2, r3
 8002b2c:	8bfb      	ldrh	r3, [r7, #30]
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11f      	bne.n	8002b8c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	83bb      	strh	r3, [r7, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	8bbb      	ldrh	r3, [r7, #28]
 8002b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b8c:	8b7b      	ldrh	r3, [r7, #26]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	895a      	ldrh	r2, [r3, #10]
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	f004 fbb5 	bl	800730e <USB_ReadPMA>
    }
  }

  return count;
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b0a2      	sub	sp, #136	; 0x88
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 81c7 	beq.w	8002f56 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d907      	bls.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	619a      	str	r2, [r3, #24]
 8002c0e:	e002      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80b9 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d126      	bne.n	8002c76 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	4413      	add	r3, r2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	011a      	lsls	r2, r3, #4
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	4413      	add	r3, r2
 8002c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	801a      	strh	r2, [r3, #0]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e01a      	b.n	8002cac <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d116      	bne.n	8002cac <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	4413      	add	r3, r2
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	011a      	lsls	r2, r3, #4
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d126      	bne.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	011a      	lsls	r2, r3, #4
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	e017      	b.n	8002d38 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d113      	bne.n	8002d38 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	4413      	add	r3, r2
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	011a      	lsls	r2, r3, #4
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f006 f8fb 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 82d4 	beq.w	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	827b      	strh	r3, [r7, #18]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	8a7b      	ldrh	r3, [r7, #18]
 8002d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]
 8002d90:	e2b2      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f040 8286 	bne.w	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002df4:	441a      	add	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e02:	441a      	add	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d309      	bcc.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	1ad2      	subs	r2, r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	621a      	str	r2, [r3, #32]
 8002e26:	e015      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e3e:	e009      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d155      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	4413      	add	r3, r2
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	011a      	lsls	r2, r3, #4
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d112      	bne.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x302>
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e047      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x392>
 8002eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb4:	d811      	bhi.n	8002eda <HAL_PCD_EP_DB_Transmit+0x32c>
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x31e>
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	3301      	adds	r3, #1
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	029b      	lsls	r3, r3, #10
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	e032      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x392>
 8002eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x342>
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	3b01      	subs	r3, #1
 8002eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	801a      	strh	r2, [r3, #0]
 8002f06:	e01b      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d117      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	643b      	str	r3, [r7, #64]	; 0x40
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f24:	4413      	add	r3, r2
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	011a      	lsls	r2, r3, #4
 8002f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f30:	4413      	add	r3, r2
 8002f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6959      	ldr	r1, [r3, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	891a      	ldrh	r2, [r3, #8]
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f004 f998 	bl	8007284 <USB_WritePMA>
 8002f54:	e1d0      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3306      	adds	r3, #6
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d307      	bcc.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	e002      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 80c4 	bne.w	8003136 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d126      	bne.n	8003004 <HAL_PCD_EP_DB_Transmit+0x456>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fca:	4413      	add	r3, r2
 8002fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	e01a      	b.n	800303a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d116      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0x48c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	677b      	str	r3, [r7, #116]	; 0x74
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	4413      	add	r3, r2
 8003022:	677b      	str	r3, [r7, #116]	; 0x74
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	011a      	lsls	r2, r3, #4
 800302a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302c:	4413      	add	r3, r2
 800302e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003032:	673b      	str	r3, [r7, #112]	; 0x70
 8003034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003036:	2200      	movs	r2, #0
 8003038:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d12f      	bne.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003060:	4413      	add	r3, r2
 8003062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011a      	lsls	r2, r3, #4
 800306c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003070:	4413      	add	r3, r2
 8003072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800307a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003086:	b29a      	uxth	r2, r3
 8003088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309e:	b29a      	uxth	r2, r3
 80030a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a4:	801a      	strh	r2, [r3, #0]
 80030a6:	e017      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d113      	bne.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030be:	4413      	add	r3, r2
 80030c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	011a      	lsls	r2, r3, #4
 80030c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ca:	4413      	add	r3, r2
 80030cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f005 ff2b 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8104 	bne.w	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	b29b      	uxth	r3, r3
 8003132:	8013      	strh	r3, [r2, #0]
 8003134:	e0e0      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d121      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	b29b      	uxth	r3, r3
 8003182:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 80b4 	bne.w	80032f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003198:	441a      	add	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a6:	441a      	add	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d309      	bcc.n	80031cc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c4:	1ad2      	subs	r2, r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	621a      	str	r2, [r3, #32]
 80031ca:	e015      	b.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80031d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031e2:	e009      	b.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	667b      	str	r3, [r7, #100]	; 0x64
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d155      	bne.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x704>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003214:	b29b      	uxth	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321a:	4413      	add	r3, r2
 800321c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	011a      	lsls	r2, r3, #4
 8003224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003226:	4413      	add	r3, r2
 8003228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800322c:	65bb      	str	r3, [r7, #88]	; 0x58
 800322e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003230:	2b00      	cmp	r3, #0
 8003232:	d112      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800323e:	b29a      	uxth	r2, r3
 8003240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003252:	b29a      	uxth	r2, r3
 8003254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e044      	b.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x736>
 800325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325c:	2b3e      	cmp	r3, #62	; 0x3e
 800325e:	d811      	bhi.n	8003284 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	657b      	str	r3, [r7, #84]	; 0x54
 8003266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003272:	3301      	adds	r3, #1
 8003274:	657b      	str	r3, [r7, #84]	; 0x54
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	b29b      	uxth	r3, r3
 800327a:	029b      	lsls	r3, r3, #10
 800327c:	b29a      	uxth	r2, r3
 800327e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	e02f      	b.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
 800328a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003296:	3b01      	subs	r3, #1
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329c:	b29b      	uxth	r3, r3
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ae:	801a      	strh	r2, [r3, #0]
 80032b0:	e018      	b.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d114      	bne.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c8:	4413      	add	r3, r2
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	011a      	lsls	r2, r3, #4
 80032d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d4:	4413      	add	r3, r2
 80032d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	895a      	ldrh	r2, [r3, #10]
 80032f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f003 ffc6 	bl	8007284 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	823b      	strh	r3, [r7, #16]
 8003314:	8a3b      	ldrh	r3, [r7, #16]
 8003316:	f083 0310 	eor.w	r3, r3, #16
 800331a:	823b      	strh	r3, [r7, #16]
 800331c:	8a3b      	ldrh	r3, [r7, #16]
 800331e:	f083 0320 	eor.w	r3, r3, #32
 8003322:	823b      	strh	r3, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	8a3b      	ldrh	r3, [r7, #16]
 8003334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3788      	adds	r7, #136	; 0x88
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003352:	b480      	push	{r7}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	817b      	strh	r3, [r7, #10]
 8003360:	4613      	mov	r3, r2
 8003362:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003364:	897b      	ldrh	r3, [r7, #10]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e009      	b.n	800339c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003388:	897a      	ldrh	r2, [r7, #10]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	80da      	strh	r2, [r3, #6]
 80033b0:	e00b      	b.n	80033ca <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2201      	movs	r2, #1
 80033b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e272      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8087 	beq.w	8003506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f8:	4b92      	ldr	r3, [pc, #584]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00c      	beq.n	800341e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003404:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d112      	bne.n	8003436 <HAL_RCC_OscConfig+0x5e>
 8003410:	4b8c      	ldr	r3, [pc, #560]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d10b      	bne.n	8003436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	4b89      	ldr	r3, [pc, #548]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06c      	beq.n	8003504 <HAL_RCC_OscConfig+0x12c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d168      	bne.n	8003504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e24c      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x76>
 8003440:	4b80      	ldr	r3, [pc, #512]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7f      	ldr	r2, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b78      	ldr	r3, [pc, #480]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a77      	ldr	r2, [pc, #476]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e01d      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0xbc>
 800347a:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a71      	ldr	r2, [pc, #452]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 8003494:	4b6b      	ldr	r3, [pc, #428]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6a      	ldr	r2, [pc, #424]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a67      	ldr	r2, [pc, #412]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd fe36 	bl	8001124 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fd fe32 	bl	8001124 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e200      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0xe4>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fd fe22 	bl	8001124 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fd fe1e 	bl	8001124 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e1ec      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x10c>
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d063      	beq.n	80035da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d11c      	bne.n	8003564 <HAL_RCC_OscConfig+0x18c>
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x176>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1c0      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4939      	ldr	r1, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	e03a      	b.n	80035da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d020      	beq.n	80035ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fd fdd7 	bl	8001124 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357a:	f7fd fdd3 	bl	8001124 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1a1      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4927      	ldr	r1, [pc, #156]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]
 80035ac:	e015      	b.n	80035da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fd fdb6 	bl	8001124 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035bc:	f7fd fdb2 	bl	8001124 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e180      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03a      	beq.n	800365c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x274>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fd fd96 	bl	8001124 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fd fd92 	bl	8001124 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e160      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800361a:	2001      	movs	r0, #1
 800361c:	f000 fad8 	bl	8003bd0 <RCC_Delay>
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x274>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fd fd7c 	bl	8001124 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362e:	e00f      	b.n	8003650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fd78 	bl	8001124 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d908      	bls.n	8003650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e146      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	42420000 	.word	0x42420000
 800364c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b92      	ldr	r3, [pc, #584]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e9      	bne.n	8003630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366e:	4b8b      	ldr	r3, [pc, #556]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a87      	ldr	r2, [pc, #540]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	61d3      	str	r3, [r2, #28]
 8003686:	4b85      	ldr	r3, [pc, #532]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <HAL_RCC_OscConfig+0x4c8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x4c8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x4c8>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fd fd39 	bl	8001124 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fd fd35 	bl	8001124 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e103      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x4c8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x312>
 80036dc:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a6e      	ldr	r2, [pc, #440]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	e02d      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x334>
 80036f2:	4b6a      	ldr	r3, [pc, #424]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4a69      	ldr	r2, [pc, #420]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6213      	str	r3, [r2, #32]
 80036fe:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a66      	ldr	r2, [pc, #408]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6213      	str	r3, [r2, #32]
 800370a:	e01c      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d10c      	bne.n	800372e <HAL_RCC_OscConfig+0x356>
 8003714:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4a60      	ldr	r2, [pc, #384]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	6213      	str	r3, [r2, #32]
 8003720:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4a5d      	ldr	r2, [pc, #372]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6213      	str	r3, [r2, #32]
 800372c:	e00b      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 800372e:	4b5b      	ldr	r3, [pc, #364]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a5a      	ldr	r2, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	4b58      	ldr	r3, [pc, #352]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4a57      	ldr	r2, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d015      	beq.n	800377a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fd fce9 	bl	8001124 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fd fce5 	bl	8001124 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0b1      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ee      	beq.n	8003756 <HAL_RCC_OscConfig+0x37e>
 8003778:	e014      	b.n	80037a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7fd fcd3 	bl	8001124 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fd fccf 	bl	8001124 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e09b      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ee      	bne.n	8003782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b3c      	ldr	r3, [pc, #240]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4a3b      	ldr	r2, [pc, #236]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d061      	beq.n	8003890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d146      	bne.n	8003862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_RCC_OscConfig+0x4cc>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fd fca3 	bl	8001124 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fc9f 	bl	8001124 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e06d      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f4:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d108      	bne.n	800381c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4921      	ldr	r1, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a19      	ldr	r1, [r3, #32]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	430b      	orrs	r3, r1
 800382e:	491b      	ldr	r1, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fc73 	bl	8001124 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fc6f 	bl	8001124 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e03d      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x46a>
 8003860:	e035      	b.n	80038ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x4cc>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fd fc5c 	bl	8001124 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fd fc58 	bl	8001124 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e026      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_OscConfig+0x4c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x498>
 800388e:	e01e      	b.n	80038ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e019      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x500>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0d0      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d910      	bls.n	8003920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	4965      	ldr	r1, [pc, #404]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a58      	ldr	r2, [pc, #352]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800395a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d040      	beq.n	80039fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d115      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e073      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06b      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4936      	ldr	r1, [pc, #216]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fd fbaa 	bl	8001124 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fba6 	bl	8001124 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e053      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d210      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4922      	ldr	r1, [pc, #136]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd fb08 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40022000 	.word	0x40022000
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800b374 	.word	0x0800b374
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	b490      	push	{r4, r7}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xac>)
 8003ab8:	1d3c      	adds	r4, r7, #4
 8003aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ac0:	f240 2301 	movw	r3, #513	; 0x201
 8003ac4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ada:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x46>
 8003aee:	e02b      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003af2:	623b      	str	r3, [r7, #32]
      break;
 8003af4:	e02b      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	0c9b      	lsrs	r3, r3, #18
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	3328      	adds	r3, #40	; 0x28
 8003b00:	443b      	add	r3, r7
 8003b02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b06:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	0c5b      	lsrs	r3, r3, #17
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	3328      	adds	r3, #40	; 0x28
 8003b1e:	443b      	add	r3, r7
 8003b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b2a:	fb03 f202 	mul.w	r2, r3, r2
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e004      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	623b      	str	r3, [r7, #32]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b4a:	623b      	str	r3, [r7, #32]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc90      	pop	{r4, r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	0800b310 	.word	0x0800b310
 8003b60:	40021000 	.word	0x40021000
 8003b64:	007a1200 	.word	0x007a1200
 8003b68:	003d0900 	.word	0x003d0900

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	20000008 	.word	0x20000008

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff2 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	0800b384 	.word	0x0800b384

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffde 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	0800b384 	.word	0x0800b384

08003bd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCC_Delay+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <RCC_Delay+0x38>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0a5b      	lsrs	r3, r3, #9
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bec:	bf00      	nop
  }
  while (Delay --);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f9      	bne.n	8003bec <RCC_Delay+0x1c>
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	20000008 	.word	0x20000008
 8003c08:	10624dd3 	.word	0x10624dd3

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d07d      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10d      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c38:	4b4c      	ldr	r3, [pc, #304]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c42:	61d3      	str	r3, [r2, #28]
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d118      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a42      	ldr	r2, [pc, #264]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fa5a 	bl	8001124 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fd fa56 	bl	8001124 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e06d      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02e      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d027      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cba:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cc6:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fa25 	bl	8001124 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fd fa21 	bl	8001124 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e036      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ee      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4917      	ldr	r1, [pc, #92]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	490b      	ldr	r1, [pc, #44]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42420440 	.word	0x42420440

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e041      	b.n	8003e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fc fe82 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fae8 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e032      	b.n	8003e96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_TIM_Base_Start+0x88>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_Base_Start+0x48>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_Base_Start+0x48>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIM_Base_Start+0x8c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_Base_Start+0x48>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <HAL_TIM_Base_Start+0x90>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d010      	beq.n	8003e94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e007      	b.n	8003e94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800

08003eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e03a      	b.n	8003f3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_TIM_Base_Start_IT+0x98>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <HAL_TIM_Base_Start_IT+0xa0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d010      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800

08003f50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <HAL_TIM_Base_Stop_IT+0x48>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_Base_Stop_IT+0x48>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0202 	mvn.w	r2, #2
 8003fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f9b1 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9a4 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f9b3 	bl	8004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b04      	cmp	r3, #4
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b04      	cmp	r3, #4
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0204 	mvn.w	r2, #4
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f987 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f97a 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f989 	bl	8004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b08      	cmp	r3, #8
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0208 	mvn.w	r2, #8
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2204      	movs	r2, #4
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f95d 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f950 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f95f 	bl	8004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0210 	mvn.w	r2, #16
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2208      	movs	r2, #8
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f933 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f926 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f935 	bl	8004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10e      	bne.n	8004130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0201 	mvn.w	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fb16 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b80      	cmp	r3, #128	; 0x80
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa77 	bl	800464a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d107      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8f9 	bl	800437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b20      	cmp	r3, #32
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0220 	mvn.w	r2, #32
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa42 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0b3      	b.n	800433c <HAL_TIM_ConfigClockSource+0x180>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420c:	d03e      	beq.n	800428c <HAL_TIM_ConfigClockSource+0xd0>
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	f200 8087 	bhi.w	8004324 <HAL_TIM_ConfigClockSource+0x168>
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	f000 8085 	beq.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004222:	d87f      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 8004224:	2b70      	cmp	r3, #112	; 0x70
 8004226:	d01a      	beq.n	800425e <HAL_TIM_ConfigClockSource+0xa2>
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d87b      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 800422c:	2b60      	cmp	r3, #96	; 0x60
 800422e:	d050      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x116>
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d877      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d03c      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xf6>
 8004238:	2b50      	cmp	r3, #80	; 0x50
 800423a:	d873      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d058      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x136>
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d86f      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d064      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x156>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d86b      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d060      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x156>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d867      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05c      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x156>
 8004258:	2b10      	cmp	r3, #16
 800425a:	d05a      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800425c:	e062      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f000 f966 	bl	800453e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004280:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	609a      	str	r2, [r3, #8]
      break;
 800428a:	e04e      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f000 f94f 	bl	800453e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ae:	609a      	str	r2, [r3, #8]
      break;
 80042b0:	e03b      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	461a      	mov	r2, r3
 80042c0:	f000 f8c6 	bl	8004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2150      	movs	r1, #80	; 0x50
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f91d 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 80042d0:	e02b      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	461a      	mov	r2, r3
 80042e0:	f000 f8e4 	bl	80044ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2160      	movs	r1, #96	; 0x60
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f90d 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 80042f0:	e01b      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	f000 f8a6 	bl	8004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2140      	movs	r1, #64	; 0x40
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8fd 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 8004310:	e00b      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f000 f8f4 	bl	800450a <TIM_ITRx_SetConfig>
        break;
 8004322:	e002      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004328:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800

08004450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0201 	bic.w	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 030a 	bic.w	r3, r3, #10
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f023 0210 	bic.w	r2, r3, #16
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	031b      	lsls	r3, r3, #12
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	f043 0307 	orr.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	021a      	lsls	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	431a      	orrs	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e046      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d009      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a10      	ldr	r2, [pc, #64]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fa48 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f829 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004732:	f023 030c 	bic.w	r3, r3, #12
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	430b      	orrs	r3, r1
 800473e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2c      	ldr	r2, [pc, #176]	; (800480c <UART_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7ff fa22 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	e002      	b.n	800476e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7ff fa0a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800476c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <UART_SetConfig+0x118>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	0119      	lsls	r1, r3, #4
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009a      	lsls	r2, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <UART_SetConfig+0x118>)
 80047a6:	fba3 0302 	umull	r0, r3, r3, r2
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2064      	movs	r0, #100	; 0x64
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	3332      	adds	r3, #50	; 0x32
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <UART_SetConfig+0x118>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c4:	4419      	add	r1, r3
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <UART_SetConfig+0x118>)
 80047de:	fba3 0302 	umull	r0, r3, r3, r2
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2064      	movs	r0, #100	; 0x64
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	3332      	adds	r3, #50	; 0x32
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <UART_SetConfig+0x118>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	440a      	add	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40013800 	.word	0x40013800
 8004810:	51eb851f 	.word	0x51eb851f

08004814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004814:	b084      	sub	sp, #16
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	f107 0014 	add.w	r0, r7, #20
 8004822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	b004      	add	sp, #16
 8004832:	4770      	bx	lr

08004834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004844:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004848:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004868:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800486c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	b29b      	uxth	r3, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	b29b      	uxth	r3, r3
 800487e:	4013      	ands	r3, r2
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048ac:	b084      	sub	sp, #16
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	f107 0014 	add.w	r0, r7, #20
 80048ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr

080048ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b09b      	sub	sp, #108	; 0x6c
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d81f      	bhi.n	800495e <USB_ActivateEndpoint+0x72>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <USB_ActivateEndpoint+0x38>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004935 	.word	0x08004935
 8004928:	08004951 	.word	0x08004951
 800492c:	08004967 	.word	0x08004967
 8004930:	08004943 	.word	0x08004943
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004934:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004940:	e012      	b.n	8004968 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004942:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004946:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800494a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800494e:	e00b      	b.n	8004968 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004950:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004958:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800495c:	e004      	b.n	8004968 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004964:	e000      	b.n	8004968 <USB_ActivateEndpoint+0x7c>
      break;
 8004966:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	7b1b      	ldrb	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 8149 	bne.w	8004c6c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8084 	beq.w	8004aec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4413      	add	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	88db      	ldrh	r3, [r3, #6]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	81fb      	strh	r3, [r7, #14]
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <USB_ActivateEndpoint+0x17c>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	81bb      	strh	r3, [r7, #12]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	89bb      	ldrh	r3, [r7, #12]
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	78db      	ldrb	r3, [r3, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d020      	beq.n	8004ab2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	813b      	strh	r3, [r7, #8]
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	f083 0320 	eor.w	r3, r3, #32
 8004a8e:	813b      	strh	r3, [r7, #8]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	893b      	ldrh	r3, [r7, #8]
 8004a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8013      	strh	r3, [r2, #0]
 8004ab0:	e27f      	b.n	8004fb2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	817b      	strh	r3, [r7, #10]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]
 8004aea:	e262      	b.n	8004fb2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	4413      	add	r3, r2
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	88db      	ldrh	r3, [r3, #6]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	4413      	add	r3, r2
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	011a      	lsls	r2, r3, #4
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d112      	bne.n	8004b72 <USB_ActivateEndpoint+0x286>
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e02f      	b.n	8004bd2 <USB_ActivateEndpoint+0x2e6>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d813      	bhi.n	8004ba2 <USB_ActivateEndpoint+0x2b6>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	663b      	str	r3, [r7, #96]	; 0x60
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <USB_ActivateEndpoint+0x2a8>
 8004b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b90:	3301      	adds	r3, #1
 8004b92:	663b      	str	r3, [r7, #96]	; 0x60
 8004b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e017      	b.n	8004bd2 <USB_ActivateEndpoint+0x2e6>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <USB_ActivateEndpoint+0x2d0>
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	663b      	str	r3, [r7, #96]	; 0x60
 8004bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	83fb      	strh	r3, [r7, #30]
 8004be0:	8bfb      	ldrh	r3, [r7, #30]
 8004be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01b      	beq.n	8004c22 <USB_ActivateEndpoint+0x336>
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	83bb      	strh	r3, [r7, #28]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8bbb      	ldrh	r3, [r7, #28]
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c38:	837b      	strh	r3, [r7, #26]
 8004c3a:	8b7b      	ldrh	r3, [r7, #26]
 8004c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c40:	837b      	strh	r3, [r7, #26]
 8004c42:	8b7b      	ldrh	r3, [r7, #26]
 8004c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c48:	837b      	strh	r3, [r7, #26]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8b7b      	ldrh	r3, [r7, #26]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e1a2      	b.n	8004fb2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb8:	4413      	add	r3, r2
 8004cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	011a      	lsls	r2, r3, #4
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	891b      	ldrh	r3, [r3, #8]
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	4413      	add	r3, r2
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	011a      	lsls	r2, r3, #4
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	895b      	ldrh	r3, [r3, #10]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8091 	bne.w	8004e3c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01b      	beq.n	8004d6a <USB_ActivateEndpoint+0x47e>
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01b      	beq.n	8004dba <USB_ActivateEndpoint+0x4ce>
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d98:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ddc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004de0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	441a      	add	r2, r3
 8004dec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e18:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]
 8004e3a:	e0ba      	b.n	8004fb2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01d      	beq.n	8004e94 <USB_ActivateEndpoint+0x5a8>
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01d      	beq.n	8004eec <USB_ActivateEndpoint+0x600>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	78db      	ldrb	r3, [r3, #3]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d024      	beq.n	8004f3e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f12:	f083 0320 	eor.w	r3, r3, #32
 8004f16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
 8004f3c:	e01d      	b.n	8004f7a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004fb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	376c      	adds	r7, #108	; 0x6c
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b08d      	sub	sp, #52	; 0x34
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	7b1b      	ldrb	r3, [r3, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 808e 	bne.w	80050f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d044      	beq.n	8005066 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	81bb      	strh	r3, [r7, #12]
 8004fea:	89bb      	ldrh	r3, [r7, #12]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <USB_DeactivateEndpoint+0x6c>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005042:	813b      	strh	r3, [r7, #8]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
 8005064:	e192      	b.n	800538c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	827b      	strh	r3, [r7, #18]
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01b      	beq.n	80050b6 <USB_DeactivateEndpoint+0xf6>
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	823b      	strh	r3, [r7, #16]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	8a3b      	ldrh	r3, [r7, #16]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050cc:	81fb      	strh	r3, [r7, #14]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
 80050ee:	e14d      	b.n	800538c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 80a5 	bne.w	8005244 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	843b      	strh	r3, [r7, #32]
 8005108:	8c3b      	ldrh	r3, [r7, #32]
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01b      	beq.n	800514a <USB_DeactivateEndpoint+0x18a>
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	83fb      	strh	r3, [r7, #30]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8bfb      	ldrh	r3, [r7, #30]
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	83bb      	strh	r3, [r7, #28]
 8005158:	8bbb      	ldrh	r3, [r7, #28]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <USB_DeactivateEndpoint+0x1da>
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	837b      	strh	r3, [r7, #26]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	8b7b      	ldrh	r3, [r7, #26]
 8005186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005196:	b29b      	uxth	r3, r3
 8005198:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	833b      	strh	r3, [r7, #24]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8b3b      	ldrh	r3, [r7, #24]
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	82fb      	strh	r3, [r7, #22]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	82bb      	strh	r3, [r7, #20]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	8abb      	ldrh	r3, [r7, #20]
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]
 8005242:	e0a3      	b.n	800538c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005252:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <USB_DeactivateEndpoint+0x2d4>
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800528c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005290:	b29b      	uxth	r3, r3
 8005292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80052a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <USB_DeactivateEndpoint+0x324>
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005332:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	847b      	strh	r3, [r7, #34]	; 0x22
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3734      	adds	r7, #52	; 0x34
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b0cc      	sub	sp, #304	; 0x130
 800539c:	af00      	add	r7, sp, #0
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053a6:	6018      	str	r0, [r3, #0]
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	f041 817d 	bne.w	80066be <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d908      	bls.n	80053f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053f0:	e007      	b.n	8005402 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	7b1b      	ldrb	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d152      	bne.n	80054b8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6959      	ldr	r1, [r3, #20]
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	88da      	ldrh	r2, [r3, #6]
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	b29b      	uxth	r3, r3
 8005430:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005434:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005438:	6800      	ldr	r0, [r0, #0]
 800543a:	f001 ff23 	bl	8007284 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005446:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800544a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005460:	b29b      	uxth	r3, r3
 8005462:	4619      	mov	r1, r3
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800546c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005470:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	440a      	add	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4413      	add	r3, r2
 8005494:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	f001 b8b5 	b.w	8006622 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	78db      	ldrb	r3, [r3, #3]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f040 84c6 	bne.w	8005e56 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	f240 8443 	bls.w	8005d6e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 823e 	beq.w	8005a06 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005592:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005596:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 809a 	bne.w	80056e4 <USB_EPStartXfer+0x34c>
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	440a      	add	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4413      	add	r3, r2
 8005606:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d122      	bne.n	8005662 <USB_EPStartXfer+0x2ca>
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800562e:	b29a      	uxth	r2, r3
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e079      	b.n	8005756 <USB_EPStartXfer+0x3be>
 8005662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005666:	2b3e      	cmp	r3, #62	; 0x3e
 8005668:	d81b      	bhi.n	80056a2 <USB_EPStartXfer+0x30a>
 800566a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <USB_EPStartXfer+0x2f2>
 8005680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005684:	3301      	adds	r3, #1
 8005686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800568a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800568e:	b29b      	uxth	r3, r3
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	b29a      	uxth	r2, r3
 8005694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e059      	b.n	8005756 <USB_EPStartXfer+0x3be>
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <USB_EPStartXfer+0x32a>
 80056b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056bc:	3b01      	subs	r3, #1
 80056be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e038      	b.n	8005756 <USB_EPStartXfer+0x3be>
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d130      	bne.n	8005756 <USB_EPStartXfer+0x3be>
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800570e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005712:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	440a      	add	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	011a      	lsls	r2, r3, #4
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4413      	add	r3, r2
 8005736:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005748:	b29a      	uxth	r2, r3
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6959      	ldr	r1, [r3, #20]
 8005772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005776:	b29b      	uxth	r3, r3
 8005778:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800577c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005780:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005784:	6800      	ldr	r0, [r0, #0]
 8005786:	f001 fd7d 	bl	8007284 <USB_WritePMA>
            ep->xfer_buff += len;
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579a:	441a      	add	r2, r3
 800579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d90f      	bls.n	80057e4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80057c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	621a      	str	r2, [r3, #32]
 80057e2:	e00e      	b.n	8005802 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80057e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 809a 	bne.w	8005948 <USB_EPStartXfer+0x5b0>
 8005814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800581c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005820:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005846:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	440a      	add	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4413      	add	r3, r2
 800586a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d122      	bne.n	80058c6 <USB_EPStartXfer+0x52e>
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005892:	b29a      	uxth	r2, r3
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e083      	b.n	80059ce <USB_EPStartXfer+0x636>
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	2b3e      	cmp	r3, #62	; 0x3e
 80058cc:	d81b      	bhi.n	8005906 <USB_EPStartXfer+0x56e>
 80058ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <USB_EPStartXfer+0x556>
 80058e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058e8:	3301      	adds	r3, #1
 80058ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	029b      	lsls	r3, r3, #10
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e063      	b.n	80059ce <USB_EPStartXfer+0x636>
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <USB_EPStartXfer+0x58e>
 800591c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005920:	3b01      	subs	r3, #1
 8005922:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005926:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29a      	uxth	r2, r3
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e042      	b.n	80059ce <USB_EPStartXfer+0x636>
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d13a      	bne.n	80059ce <USB_EPStartXfer+0x636>
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005960:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005964:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005986:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800598a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	440a      	add	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	011a      	lsls	r2, r3, #4
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4413      	add	r3, r2
 80059ae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	891b      	ldrh	r3, [r3, #8]
 80059da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6959      	ldr	r1, [r3, #20]
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f001 fc41 	bl	8007284 <USB_WritePMA>
 8005a02:	f000 be0e 	b.w	8006622 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d16d      	bne.n	8005af2 <USB_EPStartXfer+0x75a>
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a36:	4413      	add	r3, r2
 8005a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	011a      	lsls	r2, r3, #4
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
 8005a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d112      	bne.n	8005a80 <USB_EPStartXfer+0x6e8>
 8005a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e063      	b.n	8005b48 <USB_EPStartXfer+0x7b0>
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a84:	2b3e      	cmp	r3, #62	; 0x3e
 8005a86:	d817      	bhi.n	8005ab8 <USB_EPStartXfer+0x720>
 8005a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <USB_EPStartXfer+0x710>
 8005a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e047      	b.n	8005b48 <USB_EPStartXfer+0x7b0>
 8005ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <USB_EPStartXfer+0x740>
 8005ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e02a      	b.n	8005b48 <USB_EPStartXfer+0x7b0>
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d122      	bne.n	8005b48 <USB_EPStartXfer+0x7b0>
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b22:	4413      	add	r3, r2
 8005b24:	653b      	str	r3, [r7, #80]	; 0x50
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	891b      	ldrh	r3, [r3, #8]
 8005b54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6959      	ldr	r1, [r3, #20]
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	f001 fb84 	bl	8007284 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8c:	441a      	add	r2, r3
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a1a      	ldr	r2, [r3, #32]
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d90f      	bls.n	8005bd6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a1a      	ldr	r2, [r3, #32]
 8005bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	e00e      	b.n	8005bf4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d16d      	bne.n	8005cec <USB_EPStartXfer+0x954>
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	4413      	add	r3, r2
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	011a      	lsls	r2, r3, #4
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d112      	bne.n	8005c7a <USB_EPStartXfer+0x8e2>
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e05d      	b.n	8005d36 <USB_EPStartXfer+0x99e>
 8005c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c80:	d817      	bhi.n	8005cb2 <USB_EPStartXfer+0x91a>
 8005c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <USB_EPStartXfer+0x90a>
 8005c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e041      	b.n	8005d36 <USB_EPStartXfer+0x99e>
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <USB_EPStartXfer+0x93a>
 8005cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e024      	b.n	8005d36 <USB_EPStartXfer+0x99e>
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11c      	bne.n	8005d36 <USB_EPStartXfer+0x99e>
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d10:	4413      	add	r3, r2
 8005d12:	643b      	str	r3, [r7, #64]	; 0x40
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	895b      	ldrh	r3, [r3, #10]
 8005d42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6959      	ldr	r1, [r3, #20]
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d64:	6800      	ldr	r0, [r0, #0]
 8005d66:	f001 fa8d 	bl	8007284 <USB_WritePMA>
 8005d6a:	f000 bc5a 	b.w	8006622 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	441a      	add	r2, r3
 8005dc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dfa:	4413      	add	r3, r2
 8005dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	011a      	lsls	r2, r3, #4
 8005e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0e:	4413      	add	r3, r2
 8005e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	891b      	ldrh	r3, [r3, #8]
 8005e2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6959      	ldr	r1, [r3, #20]
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e46:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e4a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e4e:	6800      	ldr	r0, [r0, #0]
 8005e50:	f001 fa18 	bl	8007284 <USB_WritePMA>
 8005e54:	e3e5      	b.n	8006622 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 81bc 	beq.w	8006270 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d16d      	bne.n	8005ff2 <USB_EPStartXfer+0xc5a>
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f36:	4413      	add	r3, r2
 8005f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f50:	677b      	str	r3, [r7, #116]	; 0x74
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d112      	bne.n	8005f80 <USB_EPStartXfer+0xbe8>
 8005f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e060      	b.n	8006042 <USB_EPStartXfer+0xcaa>
 8005f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d817      	bhi.n	8005fb8 <USB_EPStartXfer+0xc20>
 8005f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <USB_EPStartXfer+0xc10>
 8005f9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e044      	b.n	8006042 <USB_EPStartXfer+0xcaa>
 8005fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <USB_EPStartXfer+0xc40>
 8005fce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fd8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e027      	b.n	8006042 <USB_EPStartXfer+0xcaa>
 8005ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d11f      	bne.n	8006042 <USB_EPStartXfer+0xcaa>
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006018:	4413      	add	r3, r2
 800601a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	011a      	lsls	r2, r3, #4
 800602c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006030:	4413      	add	r3, r2
 8006032:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	b29a      	uxth	r2, r3
 800603e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006040:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6959      	ldr	r1, [r3, #20]
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	b29b      	uxth	r3, r3
 8006064:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006068:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800606c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f001 f907 	bl	8007284 <USB_WritePMA>
          ep->xfer_buff += len;
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006086:	441a      	add	r2, r3
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d90f      	bls.n	80060d0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	1ad2      	subs	r2, r2, r3
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	621a      	str	r2, [r3, #32]
 80060ce:	e00e      	b.n	80060ee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80060ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8295 	beq.w	8006622 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d16d      	bne.n	80061e4 <USB_EPStartXfer+0xe4c>
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	66bb      	str	r3, [r7, #104]	; 0x68
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006128:	4413      	add	r3, r2
 800612a:	66bb      	str	r3, [r7, #104]	; 0x68
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613c:	4413      	add	r3, r2
 800613e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006142:	667b      	str	r3, [r7, #100]	; 0x64
 8006144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d112      	bne.n	8006172 <USB_EPStartXfer+0xdda>
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006156:	b29a      	uxth	r2, r3
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616a:	b29a      	uxth	r2, r3
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e063      	b.n	800623a <USB_EPStartXfer+0xea2>
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	2b3e      	cmp	r3, #62	; 0x3e
 8006178:	d817      	bhi.n	80061aa <USB_EPStartXfer+0xe12>
 800617a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <USB_EPStartXfer+0xe02>
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006194:	3301      	adds	r3, #1
 8006196:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	b29b      	uxth	r3, r3
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e047      	b.n	800623a <USB_EPStartXfer+0xea2>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_EPStartXfer+0xe32>
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e02a      	b.n	800623a <USB_EPStartXfer+0xea2>
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d122      	bne.n	800623a <USB_EPStartXfer+0xea2>
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006214:	4413      	add	r3, r2
 8006216:	673b      	str	r3, [r7, #112]	; 0x70
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	011a      	lsls	r2, r3, #4
 8006226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006228:	4413      	add	r3, r2
 800622a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800622e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006234:	b29a      	uxth	r2, r3
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	891b      	ldrh	r3, [r3, #8]
 8006246:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6959      	ldr	r1, [r3, #20]
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	b29b      	uxth	r3, r3
 800625c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006260:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006264:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006268:	6800      	ldr	r0, [r0, #0]
 800626a:	f001 f80b 	bl	8007284 <USB_WritePMA>
 800626e:	e1d8      	b.n	8006622 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d178      	bne.n	8006372 <USB_EPStartXfer+0xfda>
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <USB_EPStartXfer+0xf64>
 80062ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e06b      	b.n	80063d4 <USB_EPStartXfer+0x103c>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	2b3e      	cmp	r3, #62	; 0x3e
 8006302:	d818      	bhi.n	8006336 <USB_EPStartXfer+0xf9e>
 8006304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USB_EPStartXfer+0xf8c>
 800631a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006324:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e04e      	b.n	80063d4 <USB_EPStartXfer+0x103c>
 8006336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0xfbe>
 800634c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006356:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e030      	b.n	80063d4 <USB_EPStartXfer+0x103c>
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d128      	bne.n	80063d4 <USB_EPStartXfer+0x103c>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063a6:	4413      	add	r3, r2
 80063a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	011a      	lsls	r2, r3, #4
 80063ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063be:	4413      	add	r3, r2
 80063c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	891b      	ldrh	r3, [r3, #8]
 80063e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6959      	ldr	r1, [r3, #20]
 80063f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006402:	6800      	ldr	r0, [r0, #0]
 8006404:	f000 ff3e 	bl	8007284 <USB_WritePMA>
          ep->xfer_buff += len;
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006418:	441a      	add	r2, r3
 800641a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d90f      	bls.n	8006462 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	621a      	str	r2, [r3, #32]
 8006460:	e00e      	b.n	8006480 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2200      	movs	r2, #0
 800647e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80cc 	beq.w	8006622 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d178      	bne.n	800659a <USB_EPStartXfer+0x1202>
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064cc:	4413      	add	r3, r2
 80064ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	011a      	lsls	r2, r3, #4
 80064e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064e4:	4413      	add	r3, r2
 80064e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d116      	bne.n	8006524 <USB_EPStartXfer+0x118c>
 80064f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006502:	b29a      	uxth	r2, r3
 8006504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e064      	b.n	80065ee <USB_EPStartXfer+0x1256>
 8006524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006528:	2b3e      	cmp	r3, #62	; 0x3e
 800652a:	d818      	bhi.n	800655e <USB_EPStartXfer+0x11c6>
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <USB_EPStartXfer+0x11b4>
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800654c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e047      	b.n	80065ee <USB_EPStartXfer+0x1256>
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_EPStartXfer+0x11e6>
 8006574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006578:	3b01      	subs	r3, #1
 800657a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800657e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e029      	b.n	80065ee <USB_EPStartXfer+0x1256>
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d121      	bne.n	80065ee <USB_EPStartXfer+0x1256>
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065c0:	4413      	add	r3, r2
 80065c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	011a      	lsls	r2, r3, #4
 80065d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065d8:	4413      	add	r3, r2
 80065da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	895b      	ldrh	r3, [r3, #10]
 80065fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6959      	ldr	r1, [r3, #20]
 800660a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660e:	b29b      	uxth	r3, r3
 8006610:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006614:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006618:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f000 fe31 	bl	8007284 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006644:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006650:	8013      	strh	r3, [r2, #0]
 8006652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006656:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800665a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800665e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006662:	8812      	ldrh	r2, [r2, #0]
 8006664:	f082 0210 	eor.w	r2, r2, #16
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006676:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	f082 0220 	eor.w	r2, r2, #32
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	441a      	add	r2, r3
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]
 80066ba:	f000 bc9f 	b.w	8006ffc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 80ae 	bne.w	800682c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d917      	bls.n	800671c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670c:	1ad2      	subs	r2, r2, r3
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	619a      	str	r2, [r3, #24]
 800671a:	e00e      	b.n	800673a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800671c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800675e:	4413      	add	r3, r2
 8006760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006776:	4413      	add	r3, r2
 8006778:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800677c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <USB_EPStartXfer+0x141e>
 8006788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e3e8      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ba:	2b3e      	cmp	r3, #62	; 0x3e
 80067bc:	d818      	bhi.n	80067f0 <USB_EPStartXfer+0x1458>
 80067be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <USB_EPStartXfer+0x1446>
 80067d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e3cb      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <USB_EPStartXfer+0x1478>
 8006806:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680a:	3b01      	subs	r3, #1
 800680c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006810:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006814:	b29b      	uxth	r3, r3
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e3ad      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	78db      	ldrb	r3, [r3, #3]
 8006838:	2b02      	cmp	r3, #2
 800683a:	f040 8200 	bne.w	8006c3e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 8091 	bne.w	8006972 <USB_EPStartXfer+0x15da>
 8006850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800685e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006874:	4413      	add	r3, r2
 8006876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	011a      	lsls	r2, r3, #4
 8006888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800688c:	4413      	add	r3, r2
 800688e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d116      	bne.n	80068d4 <USB_EPStartXfer+0x153c>
 80068a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e083      	b.n	80069dc <USB_EPStartXfer+0x1644>
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b3e      	cmp	r3, #62	; 0x3e
 80068e2:	d820      	bhi.n	8006926 <USB_EPStartXfer+0x158e>
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <USB_EPStartXfer+0x157c>
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	3301      	adds	r3, #1
 8006910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e05a      	b.n	80069dc <USB_EPStartXfer+0x1644>
 8006926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <USB_EPStartXfer+0x15be>
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006950:	3b01      	subs	r3, #1
 8006952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	b29b      	uxth	r3, r3
 800695c:	029b      	lsls	r3, r3, #10
 800695e:	b29b      	uxth	r3, r3
 8006960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e034      	b.n	80069dc <USB_EPStartXfer+0x1644>
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d12c      	bne.n	80069dc <USB_EPStartXfer+0x1644>
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069a6:	4413      	add	r3, r2
 80069a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011a      	lsls	r2, r3, #4
 80069ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069be:	4413      	add	r3, r2
 80069c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 8091 	bne.w	8006b1e <USB_EPStartXfer+0x1786>
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a20:	4413      	add	r3, r2
 8006a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	011a      	lsls	r2, r3, #4
 8006a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d116      	bne.n	8006a80 <USB_EPStartXfer+0x16e8>
 8006a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e07c      	b.n	8006b7a <USB_EPStartXfer+0x17e2>
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a8e:	d820      	bhi.n	8006ad2 <USB_EPStartXfer+0x173a>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <USB_EPStartXfer+0x1728>
 8006ab6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aba:	3301      	adds	r3, #1
 8006abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ac0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e053      	b.n	8006b7a <USB_EPStartXfer+0x17e2>
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <USB_EPStartXfer+0x176a>
 8006af8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006afc:	3b01      	subs	r3, #1
 8006afe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e02d      	b.n	8006b7a <USB_EPStartXfer+0x17e2>
 8006b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d125      	bne.n	8006b7a <USB_EPStartXfer+0x17e2>
 8006b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b44:	4413      	add	r3, r2
 8006b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	011a      	lsls	r2, r3, #4
 8006b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 81fe 	beq.w	8006f88 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <USB_EPStartXfer+0x182c>
 8006bb8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bc4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 81db 	bne.w	8006f88 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f040 81d4 	bne.w	8006f88 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	441a      	add	r2, r3
 8006c24:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	8013      	strh	r3, [r2, #0]
 8006c3c:	e1a4      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	78db      	ldrb	r3, [r3, #3]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	f040 819a 	bne.w	8006f84 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699a      	ldr	r2, [r3, #24]
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d917      	bls.n	8006c9c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	619a      	str	r2, [r3, #24]
 8006c9a:	e00e      	b.n	8006cba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d178      	bne.n	8006dbc <USB_EPStartXfer+0x1a24>
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cee:	4413      	add	r3, r2
 8006cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d06:	4413      	add	r3, r2
 8006d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d116      	bne.n	8006d46 <USB_EPStartXfer+0x19ae>
 8006d18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e06b      	b.n	8006e1e <USB_EPStartXfer+0x1a86>
 8006d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4c:	d818      	bhi.n	8006d80 <USB_EPStartXfer+0x19e8>
 8006d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <USB_EPStartXfer+0x19d6>
 8006d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d68:	3301      	adds	r3, #1
 8006d6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e04e      	b.n	8006e1e <USB_EPStartXfer+0x1a86>
 8006d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <USB_EPStartXfer+0x1a08>
 8006d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	e030      	b.n	8006e1e <USB_EPStartXfer+0x1a86>
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d128      	bne.n	8006e1e <USB_EPStartXfer+0x1a86>
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	4413      	add	r3, r2
 8006df2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	011a      	lsls	r2, r3, #4
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e08:	4413      	add	r3, r2
 8006e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d178      	bne.n	8006f2e <USB_EPStartXfer+0x1b96>
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e60:	4413      	add	r3, r2
 8006e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	011a      	lsls	r2, r3, #4
 8006e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d116      	bne.n	8006eb8 <USB_EPStartXfer+0x1b20>
 8006e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e067      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebe:	d818      	bhi.n	8006ef2 <USB_EPStartXfer+0x1b5a>
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <USB_EPStartXfer+0x1b48>
 8006ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eda:	3301      	adds	r3, #1
 8006edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ee0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e04a      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
 8006ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <USB_EPStartXfer+0x1b7a>
 8006f08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	e02c      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
 8006f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d124      	bne.n	8006f88 <USB_EPStartXfer+0x1bf0>
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f54:	4413      	add	r3, r2
 8006f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	011a      	lsls	r2, r3, #4
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e001      	b.n	8006f88 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e03a      	b.n	8006ffe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fb2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fbe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d020      	beq.n	800705c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007030:	81bb      	strh	r3, [r7, #12]
 8007032:	89bb      	ldrh	r3, [r7, #12]
 8007034:	f083 0310 	eor.w	r3, r3, #16
 8007038:	81bb      	strh	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	89bb      	ldrh	r3, [r7, #12]
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
 800705a:	e01f      	b.n	800709c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	81fb      	strh	r3, [r7, #14]
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800707a:	81fb      	strh	r3, [r7, #14]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	89fb      	ldrh	r3, [r7, #14]
 8007088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	b29b      	uxth	r3, r3
 800709a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 809d 	bne.w	80071f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d04c      	beq.n	800715e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	823b      	strh	r3, [r7, #16]
 80070d2:	8a3b      	ldrh	r3, [r7, #16]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01b      	beq.n	8007114 <USB_EPClearStall+0x6c>
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	441a      	add	r2, r3
 80070fe:	89fb      	ldrh	r3, [r7, #14]
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	78db      	ldrb	r3, [r3, #3]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d06c      	beq.n	80071f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007132:	81bb      	strh	r3, [r7, #12]
 8007134:	89bb      	ldrh	r3, [r7, #12]
 8007136:	f083 0320 	eor.w	r3, r3, #32
 800713a:	81bb      	strh	r3, [r7, #12]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	89bb      	ldrh	r3, [r7, #12]
 8007148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]
 800715c:	e04b      	b.n	80071f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	82fb      	strh	r3, [r7, #22]
 800716c:	8afb      	ldrh	r3, [r7, #22]
 800716e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01b      	beq.n	80071ae <USB_EPClearStall+0x106>
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	82bb      	strh	r3, [r7, #20]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	8abb      	ldrh	r3, [r7, #20]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	827b      	strh	r3, [r7, #18]
 80071c6:	8a7b      	ldrh	r3, [r7, #18]
 80071c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071cc:	827b      	strh	r3, [r7, #18]
 80071ce:	8a7b      	ldrh	r3, [r7, #18]
 80071d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071d4:	827b      	strh	r3, [r7, #18]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	8a7b      	ldrh	r3, [r7, #18]
 80071e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2280      	movs	r2, #128	; 0x80
 8007218:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800725e:	b29b      	uxth	r3, r3
 8007260:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007262:	68fb      	ldr	r3, [r7, #12]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007284:	b480      	push	{r7}
 8007286:	b08d      	sub	sp, #52	; 0x34
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4611      	mov	r1, r2
 8007290:	461a      	mov	r2, r3
 8007292:	460b      	mov	r3, r1
 8007294:	80fb      	strh	r3, [r7, #6]
 8007296:	4613      	mov	r3, r2
 8007298:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800729a:	88bb      	ldrh	r3, [r7, #4]
 800729c:	3301      	adds	r3, #1
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	005a      	lsls	r2, r3, #1
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072bc:	e01e      	b.n	80072fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	3301      	adds	r3, #1
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	3302      	adds	r3, #2
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	3302      	adds	r3, #2
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	3301      	adds	r3, #1
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	3b01      	subs	r3, #1
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1dd      	bne.n	80072be <USB_WritePMA+0x3a>
  }
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	3734      	adds	r7, #52	; 0x34
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800730e:	b480      	push	{r7}
 8007310:	b08b      	sub	sp, #44	; 0x2c
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	4611      	mov	r1, r2
 800731a:	461a      	mov	r2, r3
 800731c:	460b      	mov	r3, r1
 800731e:	80fb      	strh	r3, [r7, #6]
 8007320:	4613      	mov	r3, r2
 8007322:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007324:	88bb      	ldrh	r3, [r7, #4]
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	b29b      	uxth	r3, r3
 800732a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007334:	88fb      	ldrh	r3, [r7, #6]
 8007336:	005a      	lsls	r2, r3, #1
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007340:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
 8007346:	e01b      	b.n	8007380 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	3302      	adds	r3, #2
 8007354:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3301      	adds	r3, #1
 8007362:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	b2da      	uxtb	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	3302      	adds	r3, #2
 8007378:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	3b01      	subs	r3, #1
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e0      	bne.n	8007348 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007386:	88bb      	ldrh	r3, [r7, #4]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	701a      	strb	r2, [r3, #0]
  }
}
 80073a2:	bf00      	nop
 80073a4:	372c      	adds	r7, #44	; 0x2c
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7c1b      	ldrb	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d115      	bne.n	80073f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c8:	2202      	movs	r2, #2
 80073ca:	2181      	movs	r1, #129	; 0x81
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fe98 	bl	8009102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073dc:	2202      	movs	r2, #2
 80073de:	2101      	movs	r1, #1
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fe8e 	bl	8009102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80073ee:	e012      	b.n	8007416 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	2202      	movs	r2, #2
 80073f4:	2181      	movs	r1, #129	; 0x81
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe83 	bl	8009102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	2202      	movs	r2, #2
 8007406:	2101      	movs	r1, #1
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fe7a 	bl	8009102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007416:	2308      	movs	r3, #8
 8007418:	2203      	movs	r2, #3
 800741a:	2182      	movs	r1, #130	; 0x82
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fe70 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007428:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800742c:	f001 ff90 	bl	8009350 <USBD_static_malloc>
 8007430:	4602      	mov	r2, r0
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007442:	2301      	movs	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	e026      	b.n	8007496 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 ff30 	bl	80092e4 <USBD_LL_PrepareReceive>
 8007484:	e007      	b.n	8007496 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	2101      	movs	r1, #1
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 ff27 	bl	80092e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074b0:	2181      	movs	r1, #129	; 0x81
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fe4b 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074be:	2101      	movs	r1, #1
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fe44 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074ce:	2182      	movs	r1, #130	; 0x82
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fe3c 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 ff36 	bl	8009368 <USBD_static_free>
    pdev->pClassData = NULL;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007534:	2b00      	cmp	r3, #0
 8007536:	d039      	beq.n	80075ac <USBD_CDC_Setup+0x9e>
 8007538:	2b20      	cmp	r3, #32
 800753a:	d17f      	bne.n	800763c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	88db      	ldrh	r3, [r3, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d029      	beq.n	8007598 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b25b      	sxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	da11      	bge.n	8007572 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800755a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	88d2      	ldrh	r2, [r2, #6]
 8007560:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007562:	6939      	ldr	r1, [r7, #16]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	88db      	ldrh	r3, [r3, #6]
 8007568:	461a      	mov	r2, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fa09 	bl	8008982 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007570:	e06b      	b.n	800764a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785a      	ldrb	r2, [r3, #1]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	88db      	ldrh	r3, [r3, #6]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007588:	6939      	ldr	r1, [r7, #16]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	461a      	mov	r2, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fa24 	bl	80089de <USBD_CtlPrepareRx>
      break;
 8007596:	e058      	b.n	800764a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	7850      	ldrb	r0, [r2, #1]
 80075a4:	2200      	movs	r2, #0
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	4798      	blx	r3
      break;
 80075aa:	e04e      	b.n	800764a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	d02e      	beq.n	8007612 <USBD_CDC_Setup+0x104>
 80075b4:	2b0b      	cmp	r3, #11
 80075b6:	dc38      	bgt.n	800762a <USBD_CDC_Setup+0x11c>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <USBD_CDC_Setup+0xb4>
 80075bc:	2b0a      	cmp	r3, #10
 80075be:	d014      	beq.n	80075ea <USBD_CDC_Setup+0xdc>
 80075c0:	e033      	b.n	800762a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d107      	bne.n	80075dc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	2202      	movs	r2, #2
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f9d4 	bl	8008982 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075da:	e02e      	b.n	800763a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f965 	bl	80088ae <USBD_CtlError>
            ret = USBD_FAIL;
 80075e4:	2302      	movs	r3, #2
 80075e6:	75fb      	strb	r3, [r7, #23]
          break;
 80075e8:	e027      	b.n	800763a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d107      	bne.n	8007604 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80075f4:	f107 030f 	add.w	r3, r7, #15
 80075f8:	2201      	movs	r2, #1
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f9c0 	bl	8008982 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007602:	e01a      	b.n	800763a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 f951 	bl	80088ae <USBD_CtlError>
            ret = USBD_FAIL;
 800760c:	2302      	movs	r3, #2
 800760e:	75fb      	strb	r3, [r7, #23]
          break;
 8007610:	e013      	b.n	800763a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	2b03      	cmp	r3, #3
 800761a:	d00d      	beq.n	8007638 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 f945 	bl	80088ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007624:	2302      	movs	r3, #2
 8007626:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007628:	e006      	b.n	8007638 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f93e 	bl	80088ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007632:	2302      	movs	r3, #2
 8007634:	75fb      	strb	r3, [r7, #23]
          break;
 8007636:	e000      	b.n	800763a <USBD_CDC_Setup+0x12c>
          break;
 8007638:	bf00      	nop
      }
      break;
 800763a:	e006      	b.n	800764a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f935 	bl	80088ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	bf00      	nop
  }

  return ret;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007666:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d03a      	beq.n	80076f0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	331c      	adds	r3, #28
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d029      	beq.n	80076e4 <USBD_CDC_DataIn+0x90>
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	331c      	adds	r3, #28
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	78f9      	ldrb	r1, [r7, #3]
 80076a4:	68b8      	ldr	r0, [r7, #8]
 80076a6:	460b      	mov	r3, r1
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	440b      	add	r3, r1
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	4403      	add	r3, r0
 80076b0:	3338      	adds	r3, #56	; 0x38
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d110      	bne.n	80076e4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	331c      	adds	r3, #28
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076d6:	78f9      	ldrb	r1, [r7, #3]
 80076d8:	2300      	movs	r3, #0
 80076da:	2200      	movs	r2, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fdde 	bl	800929e <USBD_LL_Transmit>
 80076e2:	e003      	b.n	80076ec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e000      	b.n	80076f2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076f0:	2302      	movs	r3, #2
  }
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fe09 	bl	800932a <USBD_LL_GetRxDataSize>
 8007718:	4602      	mov	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00d      	beq.n	8007746 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800773e:	4611      	mov	r1, r2
 8007740:	4798      	blx	r3

    return USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007746:	2302      	movs	r3, #2
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007766:	2b00      	cmp	r3, #0
 8007768:	d015      	beq.n	8007796 <USBD_CDC_EP0_RxReady+0x46>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007770:	2bff      	cmp	r3, #255	; 0xff
 8007772:	d010      	beq.n	8007796 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007782:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800778a:	b292      	uxth	r2, r2
 800778c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	22ff      	movs	r2, #255	; 0xff
 8007792:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2243      	movs	r2, #67	; 0x43
 80077ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80077ae:	4b03      	ldr	r3, [pc, #12]	; (80077bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	2000009c 	.word	0x2000009c

080077c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2243      	movs	r2, #67	; 0x43
 80077cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077ce:	4b03      	ldr	r3, [pc, #12]	; (80077dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000058 	.word	0x20000058

080077e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2243      	movs	r2, #67	; 0x43
 80077ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	200000e0 	.word	0x200000e0

08007800 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	220a      	movs	r2, #10
 800780c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	20000014 	.word	0x20000014

08007820 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800782a:	2302      	movs	r3, #2
 800782c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800786a:	88fa      	ldrh	r2, [r7, #6]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr

0800787e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01c      	beq.n	80078f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d115      	bne.n	80078f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2181      	movs	r1, #129	; 0x81
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fcd7 	bl	800929e <USBD_LL_Transmit>

      return USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e002      	b.n	80078fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d017      	beq.n	800794c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7c1b      	ldrb	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	2101      	movs	r1, #1
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fcd7 	bl	80092e4 <USBD_LL_PrepareReceive>
 8007936:	e007      	b.n	8007948 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793e:	2340      	movs	r3, #64	; 0x40
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fcce 	bl	80092e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e000      	b.n	800794e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800794c:	2302      	movs	r3, #2
  }
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800796a:	2302      	movs	r3, #2
 800796c:	e01a      	b.n	80079a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	79fa      	ldrb	r2, [r7, #7]
 800799a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 fb3b 	bl	8009018 <USBD_LL_Init>

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
 80079cc:	e001      	b.n	80079d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079ce:	2302      	movs	r3, #2
 80079d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr

080079de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fb70 	bl	80090cc <USBD_LL_Start>

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a16:	2302      	movs	r3, #2
 8007a18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00c      	beq.n	8007a3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	4611      	mov	r1, r2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fed8 	bl	8008836 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d016      	beq.n	8007ad8 <USBD_LL_SetupStage+0x6a>
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d81c      	bhi.n	8007ae8 <USBD_LL_SetupStage+0x7a>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <USBD_LL_SetupStage+0x4a>
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d008      	beq.n	8007ac8 <USBD_LL_SetupStage+0x5a>
 8007ab6:	e017      	b.n	8007ae8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9cb 	bl	8007e5c <USBD_StdDevReq>
      break;
 8007ac6:	e01a      	b.n	8007afe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa2d 	bl	8007f30 <USBD_StdItfReq>
      break;
 8007ad6:	e012      	b.n	8007afe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa6d 	bl	8007fc0 <USBD_StdEPReq>
      break;
 8007ae6:	e00a      	b.n	8007afe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fb48 	bl	800918c <USBD_LL_StallEP>
      break;
 8007afc:	bf00      	nop
  }

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	460b      	mov	r3, r1
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d14b      	bne.n	8007bb4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d134      	bne.n	8007b98 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d919      	bls.n	8007b6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d203      	bcs.n	8007b5c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	e002      	b.n	8007b62 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 ff57 	bl	8008a1a <USBD_CtlContinueRx>
 8007b6c:	e038      	b.n	8007be0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d105      	bne.n	8007b90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 ff54 	bl	8008a3e <USBD_CtlSendStatus>
 8007b96:	e023      	b.n	8007be0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d11e      	bne.n	8007be0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007baa:	2100      	movs	r1, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 faed 	bl	800918c <USBD_LL_StallEP>
 8007bb2:	e015      	b.n	8007be0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d108      	bne.n	8007bdc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	7afa      	ldrb	r2, [r7, #11]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	4798      	blx	r3
 8007bda:	e001      	b.n	8007be0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e000      	b.n	8007be2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d17f      	bne.n	8007cfe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3314      	adds	r3, #20
 8007c02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d15c      	bne.n	8007cc8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d915      	bls.n	8007c46 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fec1 	bl	80089ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f001 fb50 	bl	80092e4 <USBD_LL_PrepareReceive>
 8007c44:	e04e      	b.n	8007ce4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	6912      	ldr	r2, [r2, #16]
 8007c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c52:	fb01 f202 	mul.w	r2, r1, r2
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11c      	bne.n	8007c96 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d316      	bcc.n	8007c96 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d20f      	bcs.n	8007c96 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fe9d 	bl	80089ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 fb28 	bl	80092e4 <USBD_LL_PrepareReceive>
 8007c94:	e026      	b.n	8007ce4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d105      	bne.n	8007cb8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f001 fa66 	bl	800918c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fecf 	bl	8008a64 <USBD_CtlReceiveStatus>
 8007cc6:	e00d      	b.n	8007ce4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d004      	beq.n	8007cdc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cdc:	2180      	movs	r1, #128	; 0x80
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f001 fa54 	bl	800918c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d11d      	bne.n	8007d2a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fe81 	bl	80079f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cfc:	e015      	b.n	8007d2a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d108      	bne.n	8007d26 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	7afa      	ldrb	r2, [r7, #11]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	4798      	blx	r3
 8007d24:	e001      	b.n	8007d2a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d26:	2302      	movs	r3, #2
 8007d28:	e000      	b.n	8007d2c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d3c:	2340      	movs	r3, #64	; 0x40
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 f9dd 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2240      	movs	r2, #64	; 0x40
 8007d54:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2180      	movs	r1, #128	; 0x80
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f9cf 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2240      	movs	r2, #64	; 0x40
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6852      	ldr	r2, [r2, #4]
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	4611      	mov	r1, r2
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2204      	movs	r2, #4
 8007dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d105      	bne.n	8007e1a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr

08007e26 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d10b      	bne.n	8007e50 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d005      	beq.n	8007e82 <USBD_StdDevReq+0x26>
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d84f      	bhi.n	8007f1a <USBD_StdDevReq+0xbe>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <USBD_StdDevReq+0x36>
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d14b      	bne.n	8007f1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
      break;
 8007e90:	e048      	b.n	8007f24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d839      	bhi.n	8007f0e <USBD_StdDevReq+0xb2>
 8007e9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <USBD_StdDevReq+0x44>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007f05 	.word	0x08007f05
 8007ea8:	08007f0f 	.word	0x08007f0f
 8007eac:	08007efb 	.word	0x08007efb
 8007eb0:	08007f0f 	.word	0x08007f0f
 8007eb4:	08007ed3 	.word	0x08007ed3
 8007eb8:	08007ec9 	.word	0x08007ec9
 8007ebc:	08007f0f 	.word	0x08007f0f
 8007ec0:	08007ee7 	.word	0x08007ee7
 8007ec4:	08007edd 	.word	0x08007edd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9dc 	bl	8008288 <USBD_GetDescriptor>
          break;
 8007ed0:	e022      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fb3f 	bl	8008558 <USBD_SetAddress>
          break;
 8007eda:	e01d      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb7e 	bl	80085e0 <USBD_SetConfig>
          break;
 8007ee4:	e018      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc07 	bl	80086fc <USBD_GetConfig>
          break;
 8007eee:	e013      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc37 	bl	8008766 <USBD_GetStatus>
          break;
 8007ef8:	e00e      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fc65 	bl	80087cc <USBD_SetFeature>
          break;
 8007f02:	e009      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fc74 	bl	80087f4 <USBD_ClrFeature>
          break;
 8007f0c:	e004      	b.n	8007f18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fccc 	bl	80088ae <USBD_CtlError>
          break;
 8007f16:	bf00      	nop
      }
      break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fcc6 	bl	80088ae <USBD_CtlError>
      break;
 8007f22:	bf00      	nop
  }

  return ret;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d005      	beq.n	8007f56 <USBD_StdItfReq+0x26>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d82e      	bhi.n	8007fac <USBD_StdItfReq+0x7c>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <USBD_StdItfReq+0x26>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d12a      	bne.n	8007fac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d81d      	bhi.n	8007f9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	889b      	ldrh	r3, [r3, #4]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d813      	bhi.n	8007f94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	88db      	ldrh	r3, [r3, #6]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d110      	bne.n	8007fa8 <USBD_StdItfReq+0x78>
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fd56 	bl	8008a3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f92:	e009      	b.n	8007fa8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fc89 	bl	80088ae <USBD_CtlError>
          break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc84 	bl	80088ae <USBD_CtlError>
          break;
 8007fa6:	e000      	b.n	8007faa <USBD_StdItfReq+0x7a>
          break;
 8007fa8:	bf00      	nop
      }
      break;
 8007faa:	e004      	b.n	8007fb6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fc7d 	bl	80088ae <USBD_CtlError>
      break;
 8007fb4:	bf00      	nop
  }

  return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d007      	beq.n	8007ff0 <USBD_StdEPReq+0x30>
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	f200 8146 	bhi.w	8008272 <USBD_StdEPReq+0x2b2>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <USBD_StdEPReq+0x40>
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	f040 8141 	bne.w	8008272 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
      break;
 8007ffe:	e13d      	b.n	800827c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008008:	2b20      	cmp	r3, #32
 800800a:	d10a      	bne.n	8008022 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	e12d      	b.n	800827e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b03      	cmp	r3, #3
 8008028:	d007      	beq.n	800803a <USBD_StdEPReq+0x7a>
 800802a:	2b03      	cmp	r3, #3
 800802c:	f300 811b 	bgt.w	8008266 <USBD_StdEPReq+0x2a6>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d072      	beq.n	800811a <USBD_StdEPReq+0x15a>
 8008034:	2b01      	cmp	r3, #1
 8008036:	d03a      	beq.n	80080ae <USBD_StdEPReq+0xee>
 8008038:	e115      	b.n	8008266 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	2b02      	cmp	r3, #2
 8008042:	d002      	beq.n	800804a <USBD_StdEPReq+0x8a>
 8008044:	2b03      	cmp	r3, #3
 8008046:	d015      	beq.n	8008074 <USBD_StdEPReq+0xb4>
 8008048:	e02b      	b.n	80080a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <USBD_StdEPReq+0xaa>
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d009      	beq.n	800806a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f896 	bl	800918c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f892 	bl	800918c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008068:	e020      	b.n	80080ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc1e 	bl	80088ae <USBD_CtlError>
              break;
 8008072:	e01b      	b.n	80080ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10e      	bne.n	800809a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <USBD_StdEPReq+0xda>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b80      	cmp	r3, #128	; 0x80
 8008086:	d008      	beq.n	800809a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	88db      	ldrh	r3, [r3, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f879 	bl	800918c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fccf 	bl	8008a3e <USBD_CtlSendStatus>

              break;
 80080a0:	e004      	b.n	80080ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fc02 	bl	80088ae <USBD_CtlError>
              break;
 80080aa:	bf00      	nop
          }
          break;
 80080ac:	e0e0      	b.n	8008270 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d002      	beq.n	80080be <USBD_StdEPReq+0xfe>
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d015      	beq.n	80080e8 <USBD_StdEPReq+0x128>
 80080bc:	e026      	b.n	800810c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00c      	beq.n	80080de <USBD_StdEPReq+0x11e>
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	d009      	beq.n	80080de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 f85c 	bl	800918c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080d4:	2180      	movs	r1, #128	; 0x80
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 f858 	bl	800918c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080dc:	e01c      	b.n	8008118 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fbe4 	bl	80088ae <USBD_CtlError>
              break;
 80080e6:	e017      	b.n	8008118 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	885b      	ldrh	r3, [r3, #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f863 	bl	80091ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc9a 	bl	8008a3e <USBD_CtlSendStatus>
              }
              break;
 800810a:	e004      	b.n	8008116 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fbcd 	bl	80088ae <USBD_CtlError>
              break;
 8008114:	e000      	b.n	8008118 <USBD_StdEPReq+0x158>
              break;
 8008116:	bf00      	nop
          }
          break;
 8008118:	e0aa      	b.n	8008270 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	2b02      	cmp	r3, #2
 8008122:	d002      	beq.n	800812a <USBD_StdEPReq+0x16a>
 8008124:	2b03      	cmp	r3, #3
 8008126:	d032      	beq.n	800818e <USBD_StdEPReq+0x1ce>
 8008128:	e097      	b.n	800825a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <USBD_StdEPReq+0x180>
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d004      	beq.n	8008140 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fbb8 	bl	80088ae <USBD_CtlError>
                break;
 800813e:	e091      	b.n	8008264 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da0b      	bge.n	8008160 <USBD_StdEPReq+0x1a0>
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	3310      	adds	r3, #16
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	3304      	adds	r3, #4
 800815e:	e00b      	b.n	8008178 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2202      	movs	r2, #2
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fbfb 	bl	8008982 <USBD_CtlSendData>
              break;
 800818c:	e06a      	b.n	8008264 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800818e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da11      	bge.n	80081ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3318      	adds	r3, #24
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d117      	bne.n	80081e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb7b 	bl	80088ae <USBD_CtlError>
                  break;
 80081b8:	e054      	b.n	8008264 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fb68 	bl	80088ae <USBD_CtlError>
                  break;
 80081de:	e041      	b.n	8008264 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da0b      	bge.n	8008200 <USBD_StdEPReq+0x240>
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	3310      	adds	r3, #16
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	e00b      	b.n	8008218 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	3304      	adds	r3, #4
 8008218:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <USBD_StdEPReq+0x266>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	d103      	bne.n	800822e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e00e      	b.n	800824c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 ffe8 	bl	8009208 <USBD_LL_IsStallEP>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e002      	b.n	800824c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fb95 	bl	8008982 <USBD_CtlSendData>
              break;
 8008258:	e004      	b.n	8008264 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb26 	bl	80088ae <USBD_CtlError>
              break;
 8008262:	bf00      	nop
          }
          break;
 8008264:	e004      	b.n	8008270 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb20 	bl	80088ae <USBD_CtlError>
          break;
 800826e:	bf00      	nop
      }
      break;
 8008270:	e004      	b.n	800827c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fb1a 	bl	80088ae <USBD_CtlError>
      break;
 800827a:	bf00      	nop
  }

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	f200 8128 	bhi.w	80084fe <USBD_GetDescriptor+0x276>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBD_GetDescriptor+0x2c>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082d1 	.word	0x080082d1
 80082b8:	080082e9 	.word	0x080082e9
 80082bc:	08008329 	.word	0x08008329
 80082c0:	080084ff 	.word	0x080084ff
 80082c4:	080084ff 	.word	0x080084ff
 80082c8:	0800849f 	.word	0x0800849f
 80082cc:	080084cb 	.word	0x080084cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
      break;
 80082e6:	e112      	b.n	800850e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7c1b      	ldrb	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10d      	bne.n	800830c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f107 0208 	add.w	r2, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	2202      	movs	r2, #2
 8008308:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800830a:	e100      	b.n	800850e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	f107 0208 	add.w	r2, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	2202      	movs	r2, #2
 8008324:	701a      	strb	r2, [r3, #0]
      break;
 8008326:	e0f2      	b.n	800850e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	885b      	ldrh	r3, [r3, #2]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b05      	cmp	r3, #5
 8008330:	f200 80ac 	bhi.w	800848c <USBD_GetDescriptor+0x204>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USBD_GetDescriptor+0xb4>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008355 	.word	0x08008355
 8008340:	08008389 	.word	0x08008389
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083f1 	.word	0x080083f1
 800834c:	08008425 	.word	0x08008425
 8008350:	08008459 	.word	0x08008459
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008376:	e091      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa97 	bl	80088ae <USBD_CtlError>
            err++;
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	3301      	adds	r3, #1
 8008384:	72fb      	strb	r3, [r7, #11]
          break;
 8008386:	e089      	b.n	800849c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7c12      	ldrb	r2, [r2, #16]
 80083a0:	f107 0108 	add.w	r1, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083aa:	e077      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa7d 	bl	80088ae <USBD_CtlError>
            err++;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	3301      	adds	r3, #1
 80083b8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ba:	e06f      	b.n	800849c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7c12      	ldrb	r2, [r2, #16]
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083de:	e05d      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa63 	bl	80088ae <USBD_CtlError>
            err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
          break;
 80083ee:	e055      	b.n	800849c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	7c12      	ldrb	r2, [r2, #16]
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008412:	e043      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa49 	bl	80088ae <USBD_CtlError>
            err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
          break;
 8008422:	e03b      	b.n	800849c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008446:	e029      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa2f 	bl	80088ae <USBD_CtlError>
            err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
          break;
 8008456:	e021      	b.n	800849c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	7c12      	ldrb	r2, [r2, #16]
 8008470:	f107 0108 	add.w	r1, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847a:	e00f      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa15 	bl	80088ae <USBD_CtlError>
            err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
          break;
 800848a:	e007      	b.n	800849c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa0d 	bl	80088ae <USBD_CtlError>
          err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800849a:	e038      	b.n	800850e <USBD_GetDescriptor+0x286>
 800849c:	e037      	b.n	800850e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	7c1b      	ldrb	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	f107 0208 	add.w	r2, r7, #8
 80084b2:	4610      	mov	r0, r2
 80084b4:	4798      	blx	r3
 80084b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084b8:	e029      	b.n	800850e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f9f6 	bl	80088ae <USBD_CtlError>
        err++;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	3301      	adds	r3, #1
 80084c6:	72fb      	strb	r3, [r7, #11]
      break;
 80084c8:	e021      	b.n	800850e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7c1b      	ldrb	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10d      	bne.n	80084ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f107 0208 	add.w	r2, r7, #8
 80084de:	4610      	mov	r0, r2
 80084e0:	4798      	blx	r3
 80084e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3301      	adds	r3, #1
 80084e8:	2207      	movs	r2, #7
 80084ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084ec:	e00f      	b.n	800850e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9dc 	bl	80088ae <USBD_CtlError>
        err++;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3301      	adds	r3, #1
 80084fa:	72fb      	strb	r3, [r7, #11]
      break;
 80084fc:	e007      	b.n	800850e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f9d4 	bl	80088ae <USBD_CtlError>
      err++;
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	3301      	adds	r3, #1
 800850a:	72fb      	strb	r3, [r7, #11]
      break;
 800850c:	bf00      	nop
  }

  if (err != 0U)
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11c      	bne.n	800854e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008514:	893b      	ldrh	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d011      	beq.n	800853e <USBD_GetDescriptor+0x2b6>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	88db      	ldrh	r3, [r3, #6]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00d      	beq.n	800853e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88da      	ldrh	r2, [r3, #6]
 8008526:	893b      	ldrh	r3, [r7, #8]
 8008528:	4293      	cmp	r3, r2
 800852a:	bf28      	it	cs
 800852c:	4613      	movcs	r3, r2
 800852e:	b29b      	uxth	r3, r3
 8008530:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008532:	893b      	ldrh	r3, [r7, #8]
 8008534:	461a      	mov	r2, r3
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa22 	bl	8008982 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa79 	bl	8008a3e <USBD_CtlSendStatus>
 800854c:	e000      	b.n	8008550 <USBD_GetDescriptor+0x2c8>
    return;
 800854e:	bf00      	nop
    }
  }
}
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	889b      	ldrh	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d130      	bne.n	80085cc <USBD_SetAddress+0x74>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12c      	bne.n	80085cc <USBD_SetAddress+0x74>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	2b7f      	cmp	r3, #127	; 0x7f
 8008578:	d828      	bhi.n	80085cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008584:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858c:	2b03      	cmp	r3, #3
 800858e:	d104      	bne.n	800859a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f98b 	bl	80088ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008598:	e01d      	b.n	80085d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7bfa      	ldrb	r2, [r7, #15]
 800859e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fe5a 	bl	8009260 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa46 	bl	8008a3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	e009      	b.n	80085d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ca:	e004      	b.n	80085d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f96d 	bl	80088ae <USBD_CtlError>
  }
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	885b      	ldrh	r3, [r3, #2]
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	4b41      	ldr	r3, [pc, #260]	; (80086f8 <USBD_SetConfig+0x118>)
 80085f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085f4:	4b40      	ldr	r3, [pc, #256]	; (80086f8 <USBD_SetConfig+0x118>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d904      	bls.n	8008606 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f955 	bl	80088ae <USBD_CtlError>
 8008604:	e075      	b.n	80086f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	2b02      	cmp	r3, #2
 800860e:	d002      	beq.n	8008616 <USBD_SetConfig+0x36>
 8008610:	2b03      	cmp	r3, #3
 8008612:	d023      	beq.n	800865c <USBD_SetConfig+0x7c>
 8008614:	e062      	b.n	80086dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008616:	4b38      	ldr	r3, [pc, #224]	; (80086f8 <USBD_SetConfig+0x118>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01a      	beq.n	8008654 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800861e:	4b36      	ldr	r3, [pc, #216]	; (80086f8 <USBD_SetConfig+0x118>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2203      	movs	r2, #3
 800862c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008630:	4b31      	ldr	r3, [pc, #196]	; (80086f8 <USBD_SetConfig+0x118>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff f9e7 	bl	8007a0a <USBD_SetClassConfig>
 800863c:	4603      	mov	r3, r0
 800863e:	2b02      	cmp	r3, #2
 8008640:	d104      	bne.n	800864c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f932 	bl	80088ae <USBD_CtlError>
            return;
 800864a:	e052      	b.n	80086f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9f6 	bl	8008a3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008652:	e04e      	b.n	80086f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f9f2 	bl	8008a3e <USBD_CtlSendStatus>
        break;
 800865a:	e04a      	b.n	80086f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800865c:	4b26      	ldr	r3, [pc, #152]	; (80086f8 <USBD_SetConfig+0x118>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d112      	bne.n	800868a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <USBD_SetConfig+0x118>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <USBD_SetConfig+0x118>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff f9e3 	bl	8007a48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9db 	bl	8008a3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008688:	e033      	b.n	80086f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800868a:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <USBD_SetConfig+0x118>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d01d      	beq.n	80086d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff f9d1 	bl	8007a48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <USBD_SetConfig+0x118>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086b0:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <USBD_SetConfig+0x118>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f9a7 	bl	8007a0a <USBD_SetClassConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d104      	bne.n	80086cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f8f2 	bl	80088ae <USBD_CtlError>
            return;
 80086ca:	e012      	b.n	80086f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f9b6 	bl	8008a3e <USBD_CtlSendStatus>
        break;
 80086d2:	e00e      	b.n	80086f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f9b2 	bl	8008a3e <USBD_CtlSendStatus>
        break;
 80086da:	e00a      	b.n	80086f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f8e5 	bl	80088ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086e4:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <USBD_SetConfig+0x118>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff f9ac 	bl	8007a48 <USBD_ClrClassConfig>
        break;
 80086f0:	bf00      	nop
    }
  }
}
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	2000038c 	.word	0x2000038c

080086fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	88db      	ldrh	r3, [r3, #6]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d004      	beq.n	8008718 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f8cc 	bl	80088ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008716:	e022      	b.n	800875e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871e:	2b02      	cmp	r3, #2
 8008720:	dc02      	bgt.n	8008728 <USBD_GetConfig+0x2c>
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc03      	bgt.n	800872e <USBD_GetConfig+0x32>
 8008726:	e015      	b.n	8008754 <USBD_GetConfig+0x58>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d00b      	beq.n	8008744 <USBD_GetConfig+0x48>
 800872c:	e012      	b.n	8008754 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3308      	adds	r3, #8
 8008738:	2201      	movs	r2, #1
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f920 	bl	8008982 <USBD_CtlSendData>
        break;
 8008742:	e00c      	b.n	800875e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	2201      	movs	r2, #1
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f918 	bl	8008982 <USBD_CtlSendData>
        break;
 8008752:	e004      	b.n	800875e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8a9 	bl	80088ae <USBD_CtlError>
        break;
 800875c:	bf00      	nop
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008776:	3b01      	subs	r3, #1
 8008778:	2b02      	cmp	r3, #2
 800877a:	d81e      	bhi.n	80087ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	88db      	ldrh	r3, [r3, #6]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d004      	beq.n	800878e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f891 	bl	80088ae <USBD_CtlError>
        break;
 800878c:	e01a      	b.n	80087c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f043 0202 	orr.w	r2, r3, #2
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	330c      	adds	r3, #12
 80087ae:	2202      	movs	r2, #2
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8e5 	bl	8008982 <USBD_CtlSendData>
      break;
 80087b8:	e004      	b.n	80087c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f876 	bl	80088ae <USBD_CtlError>
      break;
 80087c2:	bf00      	nop
  }
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d106      	bne.n	80087ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f929 	bl	8008a3e <USBD_CtlSendStatus>
  }
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	3b01      	subs	r3, #1
 8008806:	2b02      	cmp	r3, #2
 8008808:	d80b      	bhi.n	8008822 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10c      	bne.n	800882c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f90f 	bl	8008a3e <USBD_CtlSendStatus>
      }
      break;
 8008820:	e004      	b.n	800882c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f842 	bl	80088ae <USBD_CtlError>
      break;
 800882a:	e000      	b.n	800882e <USBD_ClrFeature+0x3a>
      break;
 800882c:	bf00      	nop
  }
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	785a      	ldrb	r2, [r3, #1]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	3302      	adds	r3, #2
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b29a      	uxth	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	3303      	adds	r3, #3
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	b29b      	uxth	r3, r3
 8008864:	4413      	add	r3, r2
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	3304      	adds	r3, #4
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b29a      	uxth	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	3305      	adds	r3, #5
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	b29b      	uxth	r3, r3
 8008880:	4413      	add	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	3306      	adds	r3, #6
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	3307      	adds	r3, #7
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	b29b      	uxth	r3, r3
 800889c:	4413      	add	r3, r2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	80da      	strh	r2, [r3, #6]

}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088b8:	2180      	movs	r1, #128	; 0x80
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc66 	bl	800918c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088c0:	2100      	movs	r1, #0
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fc62 	bl	800918c <USBD_LL_StallEP>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d032      	beq.n	800894c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f834 	bl	8008954 <USBD_GetLen>
 80088ec:	4603      	mov	r3, r0
 80088ee:	3301      	adds	r3, #1
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	75fa      	strb	r2, [r7, #23]
 8008900:	461a      	mov	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	75fa      	strb	r2, [r7, #23]
 8008912:	461a      	mov	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4413      	add	r3, r2
 8008918:	2203      	movs	r2, #3
 800891a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800891c:	e012      	b.n	8008944 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	60fa      	str	r2, [r7, #12]
 8008924:	7dfa      	ldrb	r2, [r7, #23]
 8008926:	1c51      	adds	r1, r2, #1
 8008928:	75f9      	strb	r1, [r7, #23]
 800892a:	4611      	mov	r1, r2
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	440a      	add	r2, r1
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	75fa      	strb	r2, [r7, #23]
 800893a:	461a      	mov	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4413      	add	r3, r2
 8008940:	2200      	movs	r2, #0
 8008942:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e8      	bne.n	800891e <USBD_GetString+0x4e>
    }
  }
}
 800894c:	bf00      	nop
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008960:	e005      	b.n	800896e <USBD_GetLen+0x1a>
  {
    len++;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	3301      	adds	r3, #1
 8008966:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3301      	adds	r3, #1
 800896c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1f5      	bne.n	8008962 <USBD_GetLen+0xe>
  }

  return len;
 8008976:	7bfb      	ldrb	r3, [r7, #15]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr

08008982 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	4613      	mov	r3, r2
 800898e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2202      	movs	r2, #2
 8008994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008998:	88fa      	ldrh	r2, [r7, #6]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fc77 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	2100      	movs	r1, #0
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fc65 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2203      	movs	r2, #3
 80089f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fc6a 	bl	80092e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	4613      	mov	r3, r2
 8008a26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fc58 	bl	80092e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2200      	movs	r2, #0
 8008a52:	2100      	movs	r1, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc22 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2205      	movs	r2, #5
 8008a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc32 	bl	80092e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a90:	2200      	movs	r2, #0
 8008a92:	4912      	ldr	r1, [pc, #72]	; (8008adc <MX_USB_DEVICE_Init+0x50>)
 8008a94:	4812      	ldr	r0, [pc, #72]	; (8008ae0 <MX_USB_DEVICE_Init+0x54>)
 8008a96:	f7fe ff5e 	bl	8007956 <USBD_Init>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008aa0:	f7f7 ff8c 	bl	80009bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008aa4:	490f      	ldr	r1, [pc, #60]	; (8008ae4 <MX_USB_DEVICE_Init+0x58>)
 8008aa6:	480e      	ldr	r0, [pc, #56]	; (8008ae0 <MX_USB_DEVICE_Init+0x54>)
 8008aa8:	f7fe ff80 	bl	80079ac <USBD_RegisterClass>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ab2:	f7f7 ff83 	bl	80009bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ab6:	490c      	ldr	r1, [pc, #48]	; (8008ae8 <MX_USB_DEVICE_Init+0x5c>)
 8008ab8:	4809      	ldr	r0, [pc, #36]	; (8008ae0 <MX_USB_DEVICE_Init+0x54>)
 8008aba:	f7fe feb1 	bl	8007820 <USBD_CDC_RegisterInterface>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ac4:	f7f7 ff7a 	bl	80009bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ac8:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <MX_USB_DEVICE_Init+0x54>)
 8008aca:	f7fe ff88 	bl	80079de <USBD_Start>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ad4:	f7f7 ff72 	bl	80009bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ad8:	bf00      	nop
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20000134 	.word	0x20000134
 8008ae0:	20000390 	.word	0x20000390
 8008ae4:	20000020 	.word	0x20000020
 8008ae8:	20000124 	.word	0x20000124

08008aec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008af0:	2200      	movs	r2, #0
 8008af2:	4905      	ldr	r1, [pc, #20]	; (8008b08 <CDC_Init_FS+0x1c>)
 8008af4:	4805      	ldr	r0, [pc, #20]	; (8008b0c <CDC_Init_FS+0x20>)
 8008af6:	f7fe fea9 	bl	800784c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008afa:	4905      	ldr	r1, [pc, #20]	; (8008b10 <CDC_Init_FS+0x24>)
 8008afc:	4803      	ldr	r0, [pc, #12]	; (8008b0c <CDC_Init_FS+0x20>)
 8008afe:	f7fe febe 	bl	800787e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000a3c 	.word	0x20000a3c
 8008b0c:	20000390 	.word	0x20000390
 8008b10:	20000654 	.word	0x20000654

08008b14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr
	...

08008b24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
 8008b30:	4613      	mov	r3, r2
 8008b32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b23      	cmp	r3, #35	; 0x23
 8008b38:	d84a      	bhi.n	8008bd0 <CDC_Control_FS+0xac>
 8008b3a:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <CDC_Control_FS+0x1c>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008bd1 	.word	0x08008bd1
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bd1 	.word	0x08008bd1
 8008b4c:	08008bd1 	.word	0x08008bd1
 8008b50:	08008bd1 	.word	0x08008bd1
 8008b54:	08008bd1 	.word	0x08008bd1
 8008b58:	08008bd1 	.word	0x08008bd1
 8008b5c:	08008bd1 	.word	0x08008bd1
 8008b60:	08008bd1 	.word	0x08008bd1
 8008b64:	08008bd1 	.word	0x08008bd1
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008bd1 	.word	0x08008bd1
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008bd1 	.word	0x08008bd1
 8008b80:	08008bd1 	.word	0x08008bd1
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bd1 	.word	0x08008bd1
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008bd1 	.word	0x08008bd1
 8008b94:	08008bd1 	.word	0x08008bd1
 8008b98:	08008bd1 	.word	0x08008bd1
 8008b9c:	08008bd1 	.word	0x08008bd1
 8008ba0:	08008bd1 	.word	0x08008bd1
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	08008bd1 	.word	0x08008bd1
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bd1 	.word	0x08008bd1
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008bd1 	.word	0x08008bd1
 8008bc0:	08008bd1 	.word	0x08008bd1
 8008bc4:	08008bd1 	.word	0x08008bd1
 8008bc8:	08008bd1 	.word	0x08008bd1
 8008bcc:	08008bd1 	.word	0x08008bd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bd0:	bf00      	nop
  }

  return (USBD_OK);
 8008bd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop

08008be0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	480d      	ldr	r0, [pc, #52]	; (8008c24 <CDC_Receive_FS+0x44>)
 8008bee:	f7fe fe46 	bl	800787e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bf2:	480c      	ldr	r0, [pc, #48]	; (8008c24 <CDC_Receive_FS+0x44>)
 8008bf4:	f7fe fe85 	bl	8007902 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8008bfe:	2240      	movs	r2, #64	; 0x40
 8008c00:	2100      	movs	r1, #0
 8008c02:	4809      	ldr	r0, [pc, #36]	; (8008c28 <CDC_Receive_FS+0x48>)
 8008c04:	f000 fc28 	bl	8009458 <memset>
  memcpy(buffer, Buf, len);
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4806      	ldr	r0, [pc, #24]	; (8008c28 <CDC_Receive_FS+0x48>)
 8008c10:	f000 fc14 	bl	800943c <memcpy>
  terminal_proses(buffer);
 8008c14:	4804      	ldr	r0, [pc, #16]	; (8008c28 <CDC_Receive_FS+0x48>)
 8008c16:	f7f8 f90d 	bl	8000e34 <terminal_proses>
  return (USBD_OK);
 8008c1a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000390 	.word	0x20000390
 8008c28:	20000214 	.word	0x20000214

08008c2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00b      	b.n	8008c6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c5a:	f7fe fdf7 	bl	800784c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c60:	f7fe fe20 	bl	80078a4 <USBD_CDC_TransmitPacket>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000390 	.word	0x20000390

08008c78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2212      	movs	r2, #18
 8008c88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c8a:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000150 	.word	0x20000150

08008c9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2204      	movs	r2, #4
 8008cac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000164 	.word	0x20000164

08008cc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4907      	ldr	r1, [pc, #28]	; (8008cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cd6:	4808      	ldr	r0, [pc, #32]	; (8008cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cd8:	f7ff fdfa 	bl	80088d0 <USBD_GetString>
 8008cdc:	e004      	b.n	8008ce8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ce2:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ce4:	f7ff fdf4 	bl	80088d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ce8:	4b02      	ldr	r3, [pc, #8]	; (8008cf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000e24 	.word	0x20000e24
 8008cf8:	0800b320 	.word	0x0800b320

08008cfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	4904      	ldr	r1, [pc, #16]	; (8008d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d0c:	4804      	ldr	r0, [pc, #16]	; (8008d20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d0e:	f7ff fddf 	bl	80088d0 <USBD_GetString>
  return USBD_StrDesc;
 8008d12:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000e24 	.word	0x20000e24
 8008d20:	0800b338 	.word	0x0800b338

08008d24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	221a      	movs	r2, #26
 8008d34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d36:	f000 f843 	bl	8008dc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d3a:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000168 	.word	0x20000168

08008d48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4907      	ldr	r1, [pc, #28]	; (8008d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d5e:	4808      	ldr	r0, [pc, #32]	; (8008d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d60:	f7ff fdb6 	bl	80088d0 <USBD_GetString>
 8008d64:	e004      	b.n	8008d70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	4904      	ldr	r1, [pc, #16]	; (8008d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d6a:	4805      	ldr	r0, [pc, #20]	; (8008d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d6c:	f7ff fdb0 	bl	80088d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d70:	4b02      	ldr	r3, [pc, #8]	; (8008d7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000e24 	.word	0x20000e24
 8008d80:	0800b34c 	.word	0x0800b34c

08008d84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d9c:	f7ff fd98 	bl	80088d0 <USBD_GetString>
 8008da0:	e004      	b.n	8008dac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4904      	ldr	r1, [pc, #16]	; (8008db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008da6:	4805      	ldr	r0, [pc, #20]	; (8008dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008da8:	f7ff fd92 	bl	80088d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000e24 	.word	0x20000e24
 8008dbc:	0800b358 	.word	0x0800b358

08008dc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <Get_SerialNum+0x44>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dcc:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <Get_SerialNum+0x48>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dd2:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <Get_SerialNum+0x4c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008de6:	2208      	movs	r2, #8
 8008de8:	4909      	ldr	r1, [pc, #36]	; (8008e10 <Get_SerialNum+0x50>)
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f814 	bl	8008e18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008df0:	2204      	movs	r2, #4
 8008df2:	4908      	ldr	r1, [pc, #32]	; (8008e14 <Get_SerialNum+0x54>)
 8008df4:	68b8      	ldr	r0, [r7, #8]
 8008df6:	f000 f80f 	bl	8008e18 <IntToUnicode>
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	1ffff7e8 	.word	0x1ffff7e8
 8008e08:	1ffff7ec 	.word	0x1ffff7ec
 8008e0c:	1ffff7f0 	.word	0x1ffff7f0
 8008e10:	2000016a 	.word	0x2000016a
 8008e14:	2000017a 	.word	0x2000017a

08008e18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
 8008e2e:	e027      	b.n	8008e80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	0f1b      	lsrs	r3, r3, #28
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	d80b      	bhi.n	8008e50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	0f1b      	lsrs	r3, r3, #28
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4619      	mov	r1, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	440b      	add	r3, r1
 8008e48:	3230      	adds	r2, #48	; 0x30
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	e00a      	b.n	8008e66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	0f1b      	lsrs	r3, r3, #28
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	440b      	add	r3, r1
 8008e60:	3237      	adds	r2, #55	; 0x37
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	3301      	adds	r3, #1
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	4413      	add	r3, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	75fb      	strb	r3, [r7, #23]
 8008e80:	7dfa      	ldrb	r2, [r7, #23]
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3d3      	bcc.n	8008e30 <IntToUnicode+0x18>
  }
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr

08008e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0d      	ldr	r2, [pc, #52]	; (8008ed8 <HAL_PCD_MspInit+0x44>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d113      	bne.n	8008ece <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <HAL_PCD_MspInit+0x48>)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	4a0c      	ldr	r2, [pc, #48]	; (8008edc <HAL_PCD_MspInit+0x48>)
 8008eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008eb0:	61d3      	str	r3, [r2, #28]
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <HAL_PCD_MspInit+0x48>)
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	2014      	movs	r0, #20
 8008ec4:	f7f8 fa57 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ec8:	2014      	movs	r0, #20
 8008eca:	f7f8 fa70 	bl	80013ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40005c00 	.word	0x40005c00
 8008edc:	40021000 	.word	0x40021000

08008ee0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fdb9 	bl	8007a6e <USBD_LL_SetupStage>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	440b      	add	r3, r1
 8008f24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7fe fdeb 	bl	8007b08 <USBD_LL_DataOutStage>
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	440b      	add	r3, r1
 8008f5a:	333c      	adds	r3, #60	; 0x3c
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f7fe fe42 	bl	8007bea <USBD_LL_DataInStage>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe ff52 	bl	8007e26 <USBD_LL_SOF>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f92:	2301      	movs	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d001      	beq.n	8008fa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f9e:	f7f7 fd0d 	bl	80009bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fa8:	7bfa      	ldrb	r2, [r7, #15]
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe ff02 	bl	8007db6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe febb 	bl	8007d34 <USBD_LL_Reset>
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fefc 	bl	8007dd4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <HAL_PCD_SuspendCallback+0x30>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	4a03      	ldr	r2, [pc, #12]	; (8008ff8 <HAL_PCD_SuspendCallback+0x30>)
 8008fea:	f043 0306 	orr.w	r3, r3, #6
 8008fee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000ed00 	.word	0xe000ed00

08008ffc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fef6 	bl	8007dfc <USBD_LL_Resume>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009020:	4a28      	ldr	r2, [pc, #160]	; (80090c4 <USBD_LL_Init+0xac>)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a26      	ldr	r2, [pc, #152]	; (80090c4 <USBD_LL_Init+0xac>)
 800902c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009030:	4b24      	ldr	r3, [pc, #144]	; (80090c4 <USBD_LL_Init+0xac>)
 8009032:	4a25      	ldr	r2, [pc, #148]	; (80090c8 <USBD_LL_Init+0xb0>)
 8009034:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009036:	4b23      	ldr	r3, [pc, #140]	; (80090c4 <USBD_LL_Init+0xac>)
 8009038:	2208      	movs	r2, #8
 800903a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800903c:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <USBD_LL_Init+0xac>)
 800903e:	2202      	movs	r2, #2
 8009040:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009042:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <USBD_LL_Init+0xac>)
 8009044:	2200      	movs	r2, #0
 8009046:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009048:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <USBD_LL_Init+0xac>)
 800904a:	2200      	movs	r2, #0
 800904c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800904e:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <USBD_LL_Init+0xac>)
 8009050:	2200      	movs	r2, #0
 8009052:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009054:	481b      	ldr	r0, [pc, #108]	; (80090c4 <USBD_LL_Init+0xac>)
 8009056:	f7f8 fcfb 	bl	8001a50 <HAL_PCD_Init>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009060:	f7f7 fcac 	bl	80009bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800906a:	2318      	movs	r3, #24
 800906c:	2200      	movs	r2, #0
 800906e:	2100      	movs	r1, #0
 8009070:	f7fa f96f 	bl	8003352 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800907a:	2358      	movs	r3, #88	; 0x58
 800907c:	2200      	movs	r2, #0
 800907e:	2180      	movs	r1, #128	; 0x80
 8009080:	f7fa f967 	bl	8003352 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800908a:	23c0      	movs	r3, #192	; 0xc0
 800908c:	2200      	movs	r2, #0
 800908e:	2181      	movs	r1, #129	; 0x81
 8009090:	f7fa f95f 	bl	8003352 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800909a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800909e:	2200      	movs	r2, #0
 80090a0:	2101      	movs	r1, #1
 80090a2:	f7fa f956 	bl	8003352 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090b0:	2200      	movs	r2, #0
 80090b2:	2182      	movs	r1, #130	; 0x82
 80090b4:	f7fa f94d 	bl	8003352 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20001024 	.word	0x20001024
 80090c8:	40005c00 	.word	0x40005c00

080090cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f8 fdbf 	bl	8001c66 <HAL_PCD_Start>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f94e 	bl	8009390 <USBD_Get_USB_Status>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	461a      	mov	r2, r3
 8009110:	4603      	mov	r3, r0
 8009112:	70fb      	strb	r3, [r7, #3]
 8009114:	460b      	mov	r3, r1
 8009116:	70bb      	strb	r3, [r7, #2]
 8009118:	4613      	mov	r3, r2
 800911a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800912a:	78bb      	ldrb	r3, [r7, #2]
 800912c:	883a      	ldrh	r2, [r7, #0]
 800912e:	78f9      	ldrb	r1, [r7, #3]
 8009130:	f7f8 ff37 	bl	8001fa2 <HAL_PCD_EP_Open>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f928 	bl	8009390 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7f8 ff7e 	bl	800206e <HAL_PCD_EP_Close>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 f909 	bl	8009390 <USBD_Get_USB_Status>
 800917e:	4603      	mov	r3, r0
 8009180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009182:	7bbb      	ldrb	r3, [r7, #14]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f9 f83e 	bl	800222c <HAL_PCD_EP_SetStall>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f8ea 	bl	8009390 <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f9 f87f 	bl	80022ec <HAL_PCD_EP_ClrStall>
 80091ee:	4603      	mov	r3, r0
 80091f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f8cb 	bl	8009390 <USBD_Get_USB_Status>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800921a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800921c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da0c      	bge.n	800923e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	440b      	add	r3, r1
 8009238:	3302      	adds	r3, #2
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	e00b      	b.n	8009256 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009244:	68f9      	ldr	r1, [r7, #12]
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	440b      	add	r3, r1
 8009250:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009254:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7f8 fe6a 	bl	8001f58 <HAL_PCD_SetAddress>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f880 	bl	8009390 <USBD_Get_USB_Status>
 8009290:	4603      	mov	r3, r0
 8009292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009294:	7bbb      	ldrb	r3, [r7, #14]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b086      	sub	sp, #24
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	461a      	mov	r2, r3
 80092aa:	460b      	mov	r3, r1
 80092ac:	72fb      	strb	r3, [r7, #11]
 80092ae:	4613      	mov	r3, r2
 80092b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092c0:	893b      	ldrh	r3, [r7, #8]
 80092c2:	7af9      	ldrb	r1, [r7, #11]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	f7f8 ff6e 	bl	80021a6 <HAL_PCD_EP_Transmit>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f85d 	bl	8009390 <USBD_Get_USB_Status>
 80092d6:	4603      	mov	r3, r0
 80092d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092da:	7dbb      	ldrb	r3, [r7, #22]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	461a      	mov	r2, r3
 80092f0:	460b      	mov	r3, r1
 80092f2:	72fb      	strb	r3, [r7, #11]
 80092f4:	4613      	mov	r3, r2
 80092f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009306:	893b      	ldrh	r3, [r7, #8]
 8009308:	7af9      	ldrb	r1, [r7, #11]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f7f8 fef7 	bl	80020fe <HAL_PCD_EP_Receive>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f83a 	bl	8009390 <USBD_Get_USB_Status>
 800931c:	4603      	mov	r3, r0
 800931e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009320:	7dbb      	ldrb	r3, [r7, #22]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	4611      	mov	r1, r2
 8009340:	4618      	mov	r0, r3
 8009342:	f7f8 ff19 	bl	8002178 <HAL_PCD_EP_GetRxCount>
 8009346:	4603      	mov	r3, r0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009358:	4b02      	ldr	r3, [pc, #8]	; (8009364 <USBD_static_malloc+0x14>)
}
 800935a:	4618      	mov	r0, r3
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr
 8009364:	20001310 	.word	0x20001310

08009368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr

0800937a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d817      	bhi.n	80093d4 <USBD_Get_USB_Status+0x44>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <USBD_Get_USB_Status+0x1c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093c3 	.word	0x080093c3
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093cf 	.word	0x080093cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e00b      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e008      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e005      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e002      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093d4:	2302      	movs	r3, #2
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	bf00      	nop
  }
  return usb_status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop

080093e8 <__errno>:
 80093e8:	4b01      	ldr	r3, [pc, #4]	; (80093f0 <__errno+0x8>)
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	20000184 	.word	0x20000184

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	2600      	movs	r6, #0
 80093f8:	4d0c      	ldr	r5, [pc, #48]	; (800942c <__libc_init_array+0x38>)
 80093fa:	4c0d      	ldr	r4, [pc, #52]	; (8009430 <__libc_init_array+0x3c>)
 80093fc:	1b64      	subs	r4, r4, r5
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	42a6      	cmp	r6, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	f001 ff28 	bl	800b258 <_init>
 8009408:	2600      	movs	r6, #0
 800940a:	4d0a      	ldr	r5, [pc, #40]	; (8009434 <__libc_init_array+0x40>)
 800940c:	4c0a      	ldr	r4, [pc, #40]	; (8009438 <__libc_init_array+0x44>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	42a6      	cmp	r6, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	f855 3b04 	ldr.w	r3, [r5], #4
 800941c:	4798      	blx	r3
 800941e:	3601      	adds	r6, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	f855 3b04 	ldr.w	r3, [r5], #4
 8009426:	4798      	blx	r3
 8009428:	3601      	adds	r6, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	0800b5f0 	.word	0x0800b5f0
 8009430:	0800b5f0 	.word	0x0800b5f0
 8009434:	0800b5f0 	.word	0x0800b5f0
 8009438:	0800b5f4 	.word	0x0800b5f4

0800943c <memcpy>:
 800943c:	440a      	add	r2, r1
 800943e:	4291      	cmp	r1, r2
 8009440:	f100 33ff 	add.w	r3, r0, #4294967295
 8009444:	d100      	bne.n	8009448 <memcpy+0xc>
 8009446:	4770      	bx	lr
 8009448:	b510      	push	{r4, lr}
 800944a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944e:	4291      	cmp	r1, r2
 8009450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009454:	d1f9      	bne.n	800944a <memcpy+0xe>
 8009456:	bd10      	pop	{r4, pc}

08009458 <memset>:
 8009458:	4603      	mov	r3, r0
 800945a:	4402      	add	r2, r0
 800945c:	4293      	cmp	r3, r2
 800945e:	d100      	bne.n	8009462 <memset+0xa>
 8009460:	4770      	bx	lr
 8009462:	f803 1b01 	strb.w	r1, [r3], #1
 8009466:	e7f9      	b.n	800945c <memset+0x4>

08009468 <siscanf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800946e:	b530      	push	{r4, r5, lr}
 8009470:	b09c      	sub	sp, #112	; 0x70
 8009472:	ac1f      	add	r4, sp, #124	; 0x7c
 8009474:	f854 5b04 	ldr.w	r5, [r4], #4
 8009478:	f8ad 2014 	strh.w	r2, [sp, #20]
 800947c:	9002      	str	r0, [sp, #8]
 800947e:	9006      	str	r0, [sp, #24]
 8009480:	f7f6 fe6e 	bl	8000160 <strlen>
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <siscanf+0x4c>)
 8009486:	9003      	str	r0, [sp, #12]
 8009488:	930b      	str	r3, [sp, #44]	; 0x2c
 800948a:	2300      	movs	r3, #0
 800948c:	930f      	str	r3, [sp, #60]	; 0x3c
 800948e:	9314      	str	r3, [sp, #80]	; 0x50
 8009490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009494:	9007      	str	r0, [sp, #28]
 8009496:	4808      	ldr	r0, [pc, #32]	; (80094b8 <siscanf+0x50>)
 8009498:	f8ad 3016 	strh.w	r3, [sp, #22]
 800949c:	462a      	mov	r2, r5
 800949e:	4623      	mov	r3, r4
 80094a0:	a902      	add	r1, sp, #8
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	9401      	str	r4, [sp, #4]
 80094a6:	f000 fbe3 	bl	8009c70 <__ssvfiscanf_r>
 80094aa:	b01c      	add	sp, #112	; 0x70
 80094ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094b0:	b003      	add	sp, #12
 80094b2:	4770      	bx	lr
 80094b4:	080094df 	.word	0x080094df
 80094b8:	20000184 	.word	0x20000184

080094bc <__sread>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	460c      	mov	r4, r1
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	f001 f98e 	bl	800a7e4 <_read_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	bfab      	itete	ge
 80094cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ce:	89a3      	ldrhlt	r3, [r4, #12]
 80094d0:	181b      	addge	r3, r3, r0
 80094d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094d6:	bfac      	ite	ge
 80094d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094da:	81a3      	strhlt	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__seofread>:
 80094de:	2000      	movs	r0, #0
 80094e0:	4770      	bx	lr

080094e2 <__swrite>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	4605      	mov	r5, r0
 80094ec:	05db      	lsls	r3, r3, #23
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d505      	bpl.n	8009500 <__swrite+0x1e>
 80094f4:	2302      	movs	r3, #2
 80094f6:	2200      	movs	r2, #0
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f90c 	bl	8009718 <_lseek_r>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	4632      	mov	r2, r6
 8009504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	4628      	mov	r0, r5
 800950c:	463b      	mov	r3, r7
 800950e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b8ad 	b.w	8009674 <_write_r>

0800951a <__sseek>:
 800951a:	b510      	push	{r4, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 f8f9 	bl	8009718 <_lseek_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	bf15      	itete	ne
 800952c:	6560      	strne	r0, [r4, #84]	; 0x54
 800952e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strheq	r3, [r4, #12]
 8009538:	bf18      	it	ne
 800953a:	81a3      	strhne	r3, [r4, #12]
 800953c:	bd10      	pop	{r4, pc}

0800953e <__sclose>:
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 b8c7 	b.w	80096d4 <_close_r>
	...

08009548 <strtok>:
 8009548:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <strtok+0x5c>)
 800954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954e:	681f      	ldr	r7, [r3, #0]
 8009550:	4605      	mov	r5, r0
 8009552:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009554:	460e      	mov	r6, r1
 8009556:	b9ec      	cbnz	r4, 8009594 <strtok+0x4c>
 8009558:	2050      	movs	r0, #80	; 0x50
 800955a:	f000 f8ef 	bl	800973c <malloc>
 800955e:	4602      	mov	r2, r0
 8009560:	65b8      	str	r0, [r7, #88]	; 0x58
 8009562:	b920      	cbnz	r0, 800956e <strtok+0x26>
 8009564:	2157      	movs	r1, #87	; 0x57
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <strtok+0x60>)
 8009568:	4810      	ldr	r0, [pc, #64]	; (80095ac <strtok+0x64>)
 800956a:	f000 f895 	bl	8009698 <__assert_func>
 800956e:	e9c0 4400 	strd	r4, r4, [r0]
 8009572:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009576:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800957a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800957e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009582:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009586:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800958a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800958e:	6184      	str	r4, [r0, #24]
 8009590:	7704      	strb	r4, [r0, #28]
 8009592:	6244      	str	r4, [r0, #36]	; 0x24
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800959a:	2301      	movs	r3, #1
 800959c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	f000 b806 	b.w	80095b0 <__strtok_r>
 80095a4:	20000184 	.word	0x20000184
 80095a8:	0800b390 	.word	0x0800b390
 80095ac:	0800b3a7 	.word	0x0800b3a7

080095b0 <__strtok_r>:
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b2:	b908      	cbnz	r0, 80095b8 <__strtok_r+0x8>
 80095b4:	6810      	ldr	r0, [r2, #0]
 80095b6:	b188      	cbz	r0, 80095dc <__strtok_r+0x2c>
 80095b8:	4604      	mov	r4, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	4620      	mov	r0, r4
 80095be:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095c6:	b91e      	cbnz	r6, 80095d0 <__strtok_r+0x20>
 80095c8:	b965      	cbnz	r5, 80095e4 <__strtok_r+0x34>
 80095ca:	4628      	mov	r0, r5
 80095cc:	6015      	str	r5, [r2, #0]
 80095ce:	e005      	b.n	80095dc <__strtok_r+0x2c>
 80095d0:	42b5      	cmp	r5, r6
 80095d2:	d1f6      	bne.n	80095c2 <__strtok_r+0x12>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1f0      	bne.n	80095ba <__strtok_r+0xa>
 80095d8:	6014      	str	r4, [r2, #0]
 80095da:	7003      	strb	r3, [r0, #0]
 80095dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095de:	461c      	mov	r4, r3
 80095e0:	e00c      	b.n	80095fc <__strtok_r+0x4c>
 80095e2:	b915      	cbnz	r5, 80095ea <__strtok_r+0x3a>
 80095e4:	460e      	mov	r6, r1
 80095e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095ee:	42ab      	cmp	r3, r5
 80095f0:	d1f7      	bne.n	80095e2 <__strtok_r+0x32>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0f3      	beq.n	80095de <__strtok_r+0x2e>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80095fc:	6014      	str	r4, [r2, #0]
 80095fe:	e7ed      	b.n	80095dc <__strtok_r+0x2c>

08009600 <_vsniprintf_r>:
 8009600:	b530      	push	{r4, r5, lr}
 8009602:	4614      	mov	r4, r2
 8009604:	2c00      	cmp	r4, #0
 8009606:	4605      	mov	r5, r0
 8009608:	461a      	mov	r2, r3
 800960a:	b09b      	sub	sp, #108	; 0x6c
 800960c:	da05      	bge.n	800961a <_vsniprintf_r+0x1a>
 800960e:	238b      	movs	r3, #139	; 0x8b
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	b01b      	add	sp, #108	; 0x6c
 8009618:	bd30      	pop	{r4, r5, pc}
 800961a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800961e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009622:	bf0c      	ite	eq
 8009624:	4623      	moveq	r3, r4
 8009626:	f104 33ff 	addne.w	r3, r4, #4294967295
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	9305      	str	r3, [sp, #20]
 800962e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009632:	9100      	str	r1, [sp, #0]
 8009634:	9104      	str	r1, [sp, #16]
 8009636:	f8ad 300e 	strh.w	r3, [sp, #14]
 800963a:	4669      	mov	r1, sp
 800963c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800963e:	f000 f9bd 	bl	80099bc <_svfiprintf_r>
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	bfbc      	itt	lt
 8009646:	238b      	movlt	r3, #139	; 0x8b
 8009648:	602b      	strlt	r3, [r5, #0]
 800964a:	2c00      	cmp	r4, #0
 800964c:	d0e3      	beq.n	8009616 <_vsniprintf_r+0x16>
 800964e:	2200      	movs	r2, #0
 8009650:	9b00      	ldr	r3, [sp, #0]
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	e7df      	b.n	8009616 <_vsniprintf_r+0x16>
	...

08009658 <vsniprintf>:
 8009658:	b507      	push	{r0, r1, r2, lr}
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	4613      	mov	r3, r2
 800965e:	460a      	mov	r2, r1
 8009660:	4601      	mov	r1, r0
 8009662:	4803      	ldr	r0, [pc, #12]	; (8009670 <vsniprintf+0x18>)
 8009664:	6800      	ldr	r0, [r0, #0]
 8009666:	f7ff ffcb 	bl	8009600 <_vsniprintf_r>
 800966a:	b003      	add	sp, #12
 800966c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009670:	20000184 	.word	0x20000184

08009674 <_write_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	2200      	movs	r2, #0
 800967e:	4d05      	ldr	r5, [pc, #20]	; (8009694 <_write_r+0x20>)
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	f7f7 fb22 	bl	8000ccc <_write>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_write_r+0x1e>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_write_r+0x1e>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20001538 	.word	0x20001538

08009698 <__assert_func>:
 8009698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969a:	4614      	mov	r4, r2
 800969c:	461a      	mov	r2, r3
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <__assert_func+0x2c>)
 80096a0:	4605      	mov	r5, r0
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68d8      	ldr	r0, [r3, #12]
 80096a6:	b14c      	cbz	r4, 80096bc <__assert_func+0x24>
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <__assert_func+0x30>)
 80096aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096ae:	9100      	str	r1, [sp, #0]
 80096b0:	462b      	mov	r3, r5
 80096b2:	4906      	ldr	r1, [pc, #24]	; (80096cc <__assert_func+0x34>)
 80096b4:	f000 f81e 	bl	80096f4 <fiprintf>
 80096b8:	f001 fad8 	bl	800ac6c <abort>
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <__assert_func+0x38>)
 80096be:	461c      	mov	r4, r3
 80096c0:	e7f3      	b.n	80096aa <__assert_func+0x12>
 80096c2:	bf00      	nop
 80096c4:	20000184 	.word	0x20000184
 80096c8:	0800b404 	.word	0x0800b404
 80096cc:	0800b411 	.word	0x0800b411
 80096d0:	0800b43f 	.word	0x0800b43f

080096d4 <_close_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	2300      	movs	r3, #0
 80096d8:	4d05      	ldr	r5, [pc, #20]	; (80096f0 <_close_r+0x1c>)
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f7 fb10 	bl	8000d04 <_close>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_close_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_close_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20001538 	.word	0x20001538

080096f4 <fiprintf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	b503      	push	{r0, r1, lr}
 80096f8:	4601      	mov	r1, r0
 80096fa:	ab03      	add	r3, sp, #12
 80096fc:	4805      	ldr	r0, [pc, #20]	; (8009714 <fiprintf+0x20>)
 80096fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009702:	6800      	ldr	r0, [r0, #0]
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	f000 fc55 	bl	8009fb4 <_vfiprintf_r>
 800970a:	b002      	add	sp, #8
 800970c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009710:	b003      	add	sp, #12
 8009712:	4770      	bx	lr
 8009714:	20000184 	.word	0x20000184

08009718 <_lseek_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	2200      	movs	r2, #0
 8009722:	4d05      	ldr	r5, [pc, #20]	; (8009738 <_lseek_r+0x20>)
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7f7 fb10 	bl	8000d4c <_lseek>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_lseek_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_lseek_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20001538 	.word	0x20001538

0800973c <malloc>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <malloc+0xc>)
 800973e:	4601      	mov	r1, r0
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	f000 b86b 	b.w	800981c <_malloc_r>
 8009746:	bf00      	nop
 8009748:	20000184 	.word	0x20000184

0800974c <_free_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4605      	mov	r5, r0
 8009750:	2900      	cmp	r1, #0
 8009752:	d040      	beq.n	80097d6 <_free_r+0x8a>
 8009754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009758:	1f0c      	subs	r4, r1, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfb8      	it	lt
 800975e:	18e4      	addlt	r4, r4, r3
 8009760:	f001 fcd0 	bl	800b104 <__malloc_lock>
 8009764:	4a1c      	ldr	r2, [pc, #112]	; (80097d8 <_free_r+0x8c>)
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	b933      	cbnz	r3, 8009778 <_free_r+0x2c>
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6014      	str	r4, [r2, #0]
 800976e:	4628      	mov	r0, r5
 8009770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009774:	f001 bccc 	b.w	800b110 <__malloc_unlock>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d908      	bls.n	800978e <_free_r+0x42>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	1821      	adds	r1, r4, r0
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1809      	addeq	r1, r1, r0
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	e7ed      	b.n	800976a <_free_r+0x1e>
 800978e:	461a      	mov	r2, r3
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b10b      	cbz	r3, 8009798 <_free_r+0x4c>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d9fa      	bls.n	800978e <_free_r+0x42>
 8009798:	6811      	ldr	r1, [r2, #0]
 800979a:	1850      	adds	r0, r2, r1
 800979c:	42a0      	cmp	r0, r4
 800979e:	d10b      	bne.n	80097b8 <_free_r+0x6c>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	4401      	add	r1, r0
 80097a4:	1850      	adds	r0, r2, r1
 80097a6:	4283      	cmp	r3, r0
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	d1e0      	bne.n	800976e <_free_r+0x22>
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4401      	add	r1, r0
 80097b2:	6011      	str	r1, [r2, #0]
 80097b4:	6053      	str	r3, [r2, #4]
 80097b6:	e7da      	b.n	800976e <_free_r+0x22>
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x74>
 80097ba:	230c      	movs	r3, #12
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	e7d6      	b.n	800976e <_free_r+0x22>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	1821      	adds	r1, r4, r0
 80097c4:	428b      	cmp	r3, r1
 80097c6:	bf01      	itttt	eq
 80097c8:	6819      	ldreq	r1, [r3, #0]
 80097ca:	685b      	ldreq	r3, [r3, #4]
 80097cc:	1809      	addeq	r1, r1, r0
 80097ce:	6021      	streq	r1, [r4, #0]
 80097d0:	6063      	str	r3, [r4, #4]
 80097d2:	6054      	str	r4, [r2, #4]
 80097d4:	e7cb      	b.n	800976e <_free_r+0x22>
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	20001530 	.word	0x20001530

080097dc <sbrk_aligned>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	4e0e      	ldr	r6, [pc, #56]	; (8009818 <sbrk_aligned+0x3c>)
 80097e0:	460c      	mov	r4, r1
 80097e2:	6831      	ldr	r1, [r6, #0]
 80097e4:	4605      	mov	r5, r0
 80097e6:	b911      	cbnz	r1, 80097ee <sbrk_aligned+0x12>
 80097e8:	f001 f80e 	bl	800a808 <_sbrk_r>
 80097ec:	6030      	str	r0, [r6, #0]
 80097ee:	4621      	mov	r1, r4
 80097f0:	4628      	mov	r0, r5
 80097f2:	f001 f809 	bl	800a808 <_sbrk_r>
 80097f6:	1c43      	adds	r3, r0, #1
 80097f8:	d00a      	beq.n	8009810 <sbrk_aligned+0x34>
 80097fa:	1cc4      	adds	r4, r0, #3
 80097fc:	f024 0403 	bic.w	r4, r4, #3
 8009800:	42a0      	cmp	r0, r4
 8009802:	d007      	beq.n	8009814 <sbrk_aligned+0x38>
 8009804:	1a21      	subs	r1, r4, r0
 8009806:	4628      	mov	r0, r5
 8009808:	f000 fffe 	bl	800a808 <_sbrk_r>
 800980c:	3001      	adds	r0, #1
 800980e:	d101      	bne.n	8009814 <sbrk_aligned+0x38>
 8009810:	f04f 34ff 	mov.w	r4, #4294967295
 8009814:	4620      	mov	r0, r4
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	20001534 	.word	0x20001534

0800981c <_malloc_r>:
 800981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009820:	1ccd      	adds	r5, r1, #3
 8009822:	f025 0503 	bic.w	r5, r5, #3
 8009826:	3508      	adds	r5, #8
 8009828:	2d0c      	cmp	r5, #12
 800982a:	bf38      	it	cc
 800982c:	250c      	movcc	r5, #12
 800982e:	2d00      	cmp	r5, #0
 8009830:	4607      	mov	r7, r0
 8009832:	db01      	blt.n	8009838 <_malloc_r+0x1c>
 8009834:	42a9      	cmp	r1, r5
 8009836:	d905      	bls.n	8009844 <_malloc_r+0x28>
 8009838:	230c      	movs	r3, #12
 800983a:	2600      	movs	r6, #0
 800983c:	603b      	str	r3, [r7, #0]
 800983e:	4630      	mov	r0, r6
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	4e2e      	ldr	r6, [pc, #184]	; (8009900 <_malloc_r+0xe4>)
 8009846:	f001 fc5d 	bl	800b104 <__malloc_lock>
 800984a:	6833      	ldr	r3, [r6, #0]
 800984c:	461c      	mov	r4, r3
 800984e:	bb34      	cbnz	r4, 800989e <_malloc_r+0x82>
 8009850:	4629      	mov	r1, r5
 8009852:	4638      	mov	r0, r7
 8009854:	f7ff ffc2 	bl	80097dc <sbrk_aligned>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	4604      	mov	r4, r0
 800985c:	d14d      	bne.n	80098fa <_malloc_r+0xde>
 800985e:	6834      	ldr	r4, [r6, #0]
 8009860:	4626      	mov	r6, r4
 8009862:	2e00      	cmp	r6, #0
 8009864:	d140      	bne.n	80098e8 <_malloc_r+0xcc>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	4631      	mov	r1, r6
 800986a:	4638      	mov	r0, r7
 800986c:	eb04 0803 	add.w	r8, r4, r3
 8009870:	f000 ffca 	bl	800a808 <_sbrk_r>
 8009874:	4580      	cmp	r8, r0
 8009876:	d13a      	bne.n	80098ee <_malloc_r+0xd2>
 8009878:	6821      	ldr	r1, [r4, #0]
 800987a:	3503      	adds	r5, #3
 800987c:	1a6d      	subs	r5, r5, r1
 800987e:	f025 0503 	bic.w	r5, r5, #3
 8009882:	3508      	adds	r5, #8
 8009884:	2d0c      	cmp	r5, #12
 8009886:	bf38      	it	cc
 8009888:	250c      	movcc	r5, #12
 800988a:	4638      	mov	r0, r7
 800988c:	4629      	mov	r1, r5
 800988e:	f7ff ffa5 	bl	80097dc <sbrk_aligned>
 8009892:	3001      	adds	r0, #1
 8009894:	d02b      	beq.n	80098ee <_malloc_r+0xd2>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	442b      	add	r3, r5
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	e00e      	b.n	80098bc <_malloc_r+0xa0>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	1b52      	subs	r2, r2, r5
 80098a2:	d41e      	bmi.n	80098e2 <_malloc_r+0xc6>
 80098a4:	2a0b      	cmp	r2, #11
 80098a6:	d916      	bls.n	80098d6 <_malloc_r+0xba>
 80098a8:	1961      	adds	r1, r4, r5
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	6025      	str	r5, [r4, #0]
 80098ae:	bf18      	it	ne
 80098b0:	6059      	strne	r1, [r3, #4]
 80098b2:	6863      	ldr	r3, [r4, #4]
 80098b4:	bf08      	it	eq
 80098b6:	6031      	streq	r1, [r6, #0]
 80098b8:	5162      	str	r2, [r4, r5]
 80098ba:	604b      	str	r3, [r1, #4]
 80098bc:	4638      	mov	r0, r7
 80098be:	f104 060b 	add.w	r6, r4, #11
 80098c2:	f001 fc25 	bl	800b110 <__malloc_unlock>
 80098c6:	f026 0607 	bic.w	r6, r6, #7
 80098ca:	1d23      	adds	r3, r4, #4
 80098cc:	1af2      	subs	r2, r6, r3
 80098ce:	d0b6      	beq.n	800983e <_malloc_r+0x22>
 80098d0:	1b9b      	subs	r3, r3, r6
 80098d2:	50a3      	str	r3, [r4, r2]
 80098d4:	e7b3      	b.n	800983e <_malloc_r+0x22>
 80098d6:	6862      	ldr	r2, [r4, #4]
 80098d8:	42a3      	cmp	r3, r4
 80098da:	bf0c      	ite	eq
 80098dc:	6032      	streq	r2, [r6, #0]
 80098de:	605a      	strne	r2, [r3, #4]
 80098e0:	e7ec      	b.n	80098bc <_malloc_r+0xa0>
 80098e2:	4623      	mov	r3, r4
 80098e4:	6864      	ldr	r4, [r4, #4]
 80098e6:	e7b2      	b.n	800984e <_malloc_r+0x32>
 80098e8:	4634      	mov	r4, r6
 80098ea:	6876      	ldr	r6, [r6, #4]
 80098ec:	e7b9      	b.n	8009862 <_malloc_r+0x46>
 80098ee:	230c      	movs	r3, #12
 80098f0:	4638      	mov	r0, r7
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f001 fc0c 	bl	800b110 <__malloc_unlock>
 80098f8:	e7a1      	b.n	800983e <_malloc_r+0x22>
 80098fa:	6025      	str	r5, [r4, #0]
 80098fc:	e7de      	b.n	80098bc <_malloc_r+0xa0>
 80098fe:	bf00      	nop
 8009900:	20001530 	.word	0x20001530

08009904 <__ssputs_r>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	688e      	ldr	r6, [r1, #8]
 800990a:	4682      	mov	sl, r0
 800990c:	429e      	cmp	r6, r3
 800990e:	460c      	mov	r4, r1
 8009910:	4690      	mov	r8, r2
 8009912:	461f      	mov	r7, r3
 8009914:	d838      	bhi.n	8009988 <__ssputs_r+0x84>
 8009916:	898a      	ldrh	r2, [r1, #12]
 8009918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800991c:	d032      	beq.n	8009984 <__ssputs_r+0x80>
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	6909      	ldr	r1, [r1, #16]
 8009922:	3301      	adds	r3, #1
 8009924:	eba5 0901 	sub.w	r9, r5, r1
 8009928:	6965      	ldr	r5, [r4, #20]
 800992a:	444b      	add	r3, r9
 800992c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009934:	106d      	asrs	r5, r5, #1
 8009936:	429d      	cmp	r5, r3
 8009938:	bf38      	it	cc
 800993a:	461d      	movcc	r5, r3
 800993c:	0553      	lsls	r3, r2, #21
 800993e:	d531      	bpl.n	80099a4 <__ssputs_r+0xa0>
 8009940:	4629      	mov	r1, r5
 8009942:	f7ff ff6b 	bl	800981c <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b950      	cbnz	r0, 8009960 <__ssputs_r+0x5c>
 800994a:	230c      	movs	r3, #12
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	f8ca 3000 	str.w	r3, [sl]
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009960:	464a      	mov	r2, r9
 8009962:	6921      	ldr	r1, [r4, #16]
 8009964:	f7ff fd6a 	bl	800943c <memcpy>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800996e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	6126      	str	r6, [r4, #16]
 8009976:	444e      	add	r6, r9
 8009978:	6026      	str	r6, [r4, #0]
 800997a:	463e      	mov	r6, r7
 800997c:	6165      	str	r5, [r4, #20]
 800997e:	eba5 0509 	sub.w	r5, r5, r9
 8009982:	60a5      	str	r5, [r4, #8]
 8009984:	42be      	cmp	r6, r7
 8009986:	d900      	bls.n	800998a <__ssputs_r+0x86>
 8009988:	463e      	mov	r6, r7
 800998a:	4632      	mov	r2, r6
 800998c:	4641      	mov	r1, r8
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	f001 fb9e 	bl	800b0d0 <memmove>
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	2000      	movs	r0, #0
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	60a3      	str	r3, [r4, #8]
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	4433      	add	r3, r6
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	e7db      	b.n	800995c <__ssputs_r+0x58>
 80099a4:	462a      	mov	r2, r5
 80099a6:	f001 fbb9 	bl	800b11c <_realloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d1e1      	bne.n	8009974 <__ssputs_r+0x70>
 80099b0:	4650      	mov	r0, sl
 80099b2:	6921      	ldr	r1, [r4, #16]
 80099b4:	f7ff feca 	bl	800974c <_free_r>
 80099b8:	e7c7      	b.n	800994a <__ssputs_r+0x46>
	...

080099bc <_svfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	4698      	mov	r8, r3
 80099c2:	898b      	ldrh	r3, [r1, #12]
 80099c4:	4607      	mov	r7, r0
 80099c6:	061b      	lsls	r3, r3, #24
 80099c8:	460d      	mov	r5, r1
 80099ca:	4614      	mov	r4, r2
 80099cc:	b09d      	sub	sp, #116	; 0x74
 80099ce:	d50e      	bpl.n	80099ee <_svfiprintf_r+0x32>
 80099d0:	690b      	ldr	r3, [r1, #16]
 80099d2:	b963      	cbnz	r3, 80099ee <_svfiprintf_r+0x32>
 80099d4:	2140      	movs	r1, #64	; 0x40
 80099d6:	f7ff ff21 	bl	800981c <_malloc_r>
 80099da:	6028      	str	r0, [r5, #0]
 80099dc:	6128      	str	r0, [r5, #16]
 80099de:	b920      	cbnz	r0, 80099ea <_svfiprintf_r+0x2e>
 80099e0:	230c      	movs	r3, #12
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	e0d1      	b.n	8009b8e <_svfiprintf_r+0x1d2>
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	616b      	str	r3, [r5, #20]
 80099ee:	2300      	movs	r3, #0
 80099f0:	9309      	str	r3, [sp, #36]	; 0x24
 80099f2:	2320      	movs	r3, #32
 80099f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099f8:	2330      	movs	r3, #48	; 0x30
 80099fa:	f04f 0901 	mov.w	r9, #1
 80099fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ba8 <_svfiprintf_r+0x1ec>
 8009a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	469a      	mov	sl, r3
 8009a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a12:	b10a      	cbz	r2, 8009a18 <_svfiprintf_r+0x5c>
 8009a14:	2a25      	cmp	r2, #37	; 0x25
 8009a16:	d1f9      	bne.n	8009a0c <_svfiprintf_r+0x50>
 8009a18:	ebba 0b04 	subs.w	fp, sl, r4
 8009a1c:	d00b      	beq.n	8009a36 <_svfiprintf_r+0x7a>
 8009a1e:	465b      	mov	r3, fp
 8009a20:	4622      	mov	r2, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff ff6d 	bl	8009904 <__ssputs_r>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f000 80aa 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a32:	445a      	add	r2, fp
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 80a2 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f04f 32ff 	mov.w	r2, #4294967295
 8009a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a4a:	f10a 0a01 	add.w	sl, sl, #1
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a56:	931a      	str	r3, [sp, #104]	; 0x68
 8009a58:	4654      	mov	r4, sl
 8009a5a:	2205      	movs	r2, #5
 8009a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a60:	4851      	ldr	r0, [pc, #324]	; (8009ba8 <_svfiprintf_r+0x1ec>)
 8009a62:	f001 fb27 	bl	800b0b4 <memchr>
 8009a66:	9a04      	ldr	r2, [sp, #16]
 8009a68:	b9d8      	cbnz	r0, 8009aa2 <_svfiprintf_r+0xe6>
 8009a6a:	06d0      	lsls	r0, r2, #27
 8009a6c:	bf44      	itt	mi
 8009a6e:	2320      	movmi	r3, #32
 8009a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a74:	0711      	lsls	r1, r2, #28
 8009a76:	bf44      	itt	mi
 8009a78:	232b      	movmi	r3, #43	; 0x2b
 8009a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a82:	2b2a      	cmp	r3, #42	; 0x2a
 8009a84:	d015      	beq.n	8009ab2 <_svfiprintf_r+0xf6>
 8009a86:	4654      	mov	r4, sl
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f04f 0c0a 	mov.w	ip, #10
 8009a8e:	9a07      	ldr	r2, [sp, #28]
 8009a90:	4621      	mov	r1, r4
 8009a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a96:	3b30      	subs	r3, #48	; 0x30
 8009a98:	2b09      	cmp	r3, #9
 8009a9a:	d94e      	bls.n	8009b3a <_svfiprintf_r+0x17e>
 8009a9c:	b1b0      	cbz	r0, 8009acc <_svfiprintf_r+0x110>
 8009a9e:	9207      	str	r2, [sp, #28]
 8009aa0:	e014      	b.n	8009acc <_svfiprintf_r+0x110>
 8009aa2:	eba0 0308 	sub.w	r3, r0, r8
 8009aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	46a2      	mov	sl, r4
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	e7d2      	b.n	8009a58 <_svfiprintf_r+0x9c>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	1d19      	adds	r1, r3, #4
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	9103      	str	r1, [sp, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	bfbb      	ittet	lt
 8009abe:	425b      	neglt	r3, r3
 8009ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac4:	9307      	strge	r3, [sp, #28]
 8009ac6:	9307      	strlt	r3, [sp, #28]
 8009ac8:	bfb8      	it	lt
 8009aca:	9204      	strlt	r2, [sp, #16]
 8009acc:	7823      	ldrb	r3, [r4, #0]
 8009ace:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad0:	d10c      	bne.n	8009aec <_svfiprintf_r+0x130>
 8009ad2:	7863      	ldrb	r3, [r4, #1]
 8009ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad6:	d135      	bne.n	8009b44 <_svfiprintf_r+0x188>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	3402      	adds	r4, #2
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9203      	str	r2, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfb8      	it	lt
 8009ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009bac <_svfiprintf_r+0x1f0>
 8009af0:	2203      	movs	r2, #3
 8009af2:	4650      	mov	r0, sl
 8009af4:	7821      	ldrb	r1, [r4, #0]
 8009af6:	f001 fadd 	bl	800b0b4 <memchr>
 8009afa:	b140      	cbz	r0, 8009b0e <_svfiprintf_r+0x152>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	eba0 000a 	sub.w	r0, r0, sl
 8009b02:	fa03 f000 	lsl.w	r0, r3, r0
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	3401      	adds	r4, #1
 8009b0a:	4303      	orrs	r3, r0
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	2206      	movs	r2, #6
 8009b14:	4826      	ldr	r0, [pc, #152]	; (8009bb0 <_svfiprintf_r+0x1f4>)
 8009b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1a:	f001 facb 	bl	800b0b4 <memchr>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d038      	beq.n	8009b94 <_svfiprintf_r+0x1d8>
 8009b22:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <_svfiprintf_r+0x1f8>)
 8009b24:	bb1b      	cbnz	r3, 8009b6e <_svfiprintf_r+0x1b2>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	3307      	adds	r3, #7
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	3308      	adds	r3, #8
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b34:	4433      	add	r3, r6
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	e767      	b.n	8009a0a <_svfiprintf_r+0x4e>
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b42:	e7a5      	b.n	8009a90 <_svfiprintf_r+0xd4>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f04f 0c0a 	mov.w	ip, #10
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	3401      	adds	r4, #1
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b56:	3a30      	subs	r2, #48	; 0x30
 8009b58:	2a09      	cmp	r2, #9
 8009b5a:	d903      	bls.n	8009b64 <_svfiprintf_r+0x1a8>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0c5      	beq.n	8009aec <_svfiprintf_r+0x130>
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	e7c3      	b.n	8009aec <_svfiprintf_r+0x130>
 8009b64:	4604      	mov	r4, r0
 8009b66:	2301      	movs	r3, #1
 8009b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6c:	e7f0      	b.n	8009b50 <_svfiprintf_r+0x194>
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4638      	mov	r0, r7
 8009b76:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <_svfiprintf_r+0x1fc>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	f3af 8000 	nop.w
 8009b7e:	1c42      	adds	r2, r0, #1
 8009b80:	4606      	mov	r6, r0
 8009b82:	d1d6      	bne.n	8009b32 <_svfiprintf_r+0x176>
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	065b      	lsls	r3, r3, #25
 8009b88:	f53f af2c 	bmi.w	80099e4 <_svfiprintf_r+0x28>
 8009b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8e:	b01d      	add	sp, #116	; 0x74
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <_svfiprintf_r+0x1fc>)
 8009b9e:	a904      	add	r1, sp, #16
 8009ba0:	f000 fba8 	bl	800a2f4 <_printf_i>
 8009ba4:	e7eb      	b.n	8009b7e <_svfiprintf_r+0x1c2>
 8009ba6:	bf00      	nop
 8009ba8:	0800b440 	.word	0x0800b440
 8009bac:	0800b446 	.word	0x0800b446
 8009bb0:	0800b44a 	.word	0x0800b44a
 8009bb4:	00000000 	.word	0x00000000
 8009bb8:	08009905 	.word	0x08009905

08009bbc <_sungetc_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	1c4b      	adds	r3, r1, #1
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	d103      	bne.n	8009bcc <_sungetc_r+0x10>
 8009bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009bc8:	4628      	mov	r0, r5
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	8993      	ldrh	r3, [r2, #12]
 8009bce:	b2cd      	uxtb	r5, r1
 8009bd0:	f023 0320 	bic.w	r3, r3, #32
 8009bd4:	8193      	strh	r3, [r2, #12]
 8009bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bd8:	6852      	ldr	r2, [r2, #4]
 8009bda:	b18b      	cbz	r3, 8009c00 <_sungetc_r+0x44>
 8009bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bde:	4293      	cmp	r3, r2
 8009be0:	dd08      	ble.n	8009bf4 <_sungetc_r+0x38>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	1e5a      	subs	r2, r3, #1
 8009be6:	6022      	str	r2, [r4, #0]
 8009be8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009bec:	6863      	ldr	r3, [r4, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	e7e9      	b.n	8009bc8 <_sungetc_r+0xc>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f000 ff41 	bl	800aa7c <__submore>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0f1      	beq.n	8009be2 <_sungetc_r+0x26>
 8009bfe:	e7e1      	b.n	8009bc4 <_sungetc_r+0x8>
 8009c00:	6921      	ldr	r1, [r4, #16]
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	b151      	cbz	r1, 8009c1c <_sungetc_r+0x60>
 8009c06:	4299      	cmp	r1, r3
 8009c08:	d208      	bcs.n	8009c1c <_sungetc_r+0x60>
 8009c0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009c0e:	42a9      	cmp	r1, r5
 8009c10:	d104      	bne.n	8009c1c <_sungetc_r+0x60>
 8009c12:	3b01      	subs	r3, #1
 8009c14:	3201      	adds	r2, #1
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	6062      	str	r2, [r4, #4]
 8009c1a:	e7d5      	b.n	8009bc8 <_sungetc_r+0xc>
 8009c1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c24:	6363      	str	r3, [r4, #52]	; 0x34
 8009c26:	2303      	movs	r3, #3
 8009c28:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	2301      	movs	r3, #1
 8009c34:	e7dc      	b.n	8009bf0 <_sungetc_r+0x34>

08009c36 <__ssrefill_r>:
 8009c36:	b510      	push	{r4, lr}
 8009c38:	460c      	mov	r4, r1
 8009c3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c3c:	b169      	cbz	r1, 8009c5a <__ssrefill_r+0x24>
 8009c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c42:	4299      	cmp	r1, r3
 8009c44:	d001      	beq.n	8009c4a <__ssrefill_r+0x14>
 8009c46:	f7ff fd81 	bl	800974c <_free_r>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c4e:	6360      	str	r0, [r4, #52]	; 0x34
 8009c50:	6063      	str	r3, [r4, #4]
 8009c52:	b113      	cbz	r3, 8009c5a <__ssrefill_r+0x24>
 8009c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	2300      	movs	r3, #0
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	f043 0320 	orr.w	r3, r3, #32
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	e7f3      	b.n	8009c58 <__ssrefill_r+0x22>

08009c70 <__ssvfiscanf_r>:
 8009c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	460c      	mov	r4, r1
 8009c76:	2100      	movs	r1, #0
 8009c78:	4606      	mov	r6, r0
 8009c7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c7e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c82:	49a7      	ldr	r1, [pc, #668]	; (8009f20 <__ssvfiscanf_r+0x2b0>)
 8009c84:	f10d 0804 	add.w	r8, sp, #4
 8009c88:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c8a:	49a6      	ldr	r1, [pc, #664]	; (8009f24 <__ssvfiscanf_r+0x2b4>)
 8009c8c:	4fa6      	ldr	r7, [pc, #664]	; (8009f28 <__ssvfiscanf_r+0x2b8>)
 8009c8e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009f2c <__ssvfiscanf_r+0x2bc>
 8009c92:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c96:	91a1      	str	r1, [sp, #644]	; 0x284
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	7813      	ldrb	r3, [r2, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 815c 	beq.w	8009f5a <__ssvfiscanf_r+0x2ea>
 8009ca2:	5dd9      	ldrb	r1, [r3, r7]
 8009ca4:	1c55      	adds	r5, r2, #1
 8009ca6:	f011 0108 	ands.w	r1, r1, #8
 8009caa:	d019      	beq.n	8009ce0 <__ssvfiscanf_r+0x70>
 8009cac:	6863      	ldr	r3, [r4, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dd0f      	ble.n	8009cd2 <__ssvfiscanf_r+0x62>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	781a      	ldrb	r2, [r3, #0]
 8009cb6:	5cba      	ldrb	r2, [r7, r2]
 8009cb8:	0712      	lsls	r2, r2, #28
 8009cba:	d401      	bmi.n	8009cc0 <__ssvfiscanf_r+0x50>
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	e7ec      	b.n	8009c9a <__ssvfiscanf_r+0x2a>
 8009cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	3201      	adds	r2, #1
 8009cc6:	9245      	str	r2, [sp, #276]	; 0x114
 8009cc8:	6862      	ldr	r2, [r4, #4]
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	3a01      	subs	r2, #1
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	e7ec      	b.n	8009cac <__ssvfiscanf_r+0x3c>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cd8:	4798      	blx	r3
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0e9      	beq.n	8009cb2 <__ssvfiscanf_r+0x42>
 8009cde:	e7ed      	b.n	8009cbc <__ssvfiscanf_r+0x4c>
 8009ce0:	2b25      	cmp	r3, #37	; 0x25
 8009ce2:	d012      	beq.n	8009d0a <__ssvfiscanf_r+0x9a>
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f340 8094 	ble.w	8009e16 <__ssvfiscanf_r+0x1a6>
 8009cee:	6822      	ldr	r2, [r4, #0]
 8009cf0:	7813      	ldrb	r3, [r2, #0]
 8009cf2:	4553      	cmp	r3, sl
 8009cf4:	f040 8131 	bne.w	8009f5a <__ssvfiscanf_r+0x2ea>
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	3201      	adds	r2, #1
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009d02:	6022      	str	r2, [r4, #0]
 8009d04:	3301      	adds	r3, #1
 8009d06:	9345      	str	r3, [sp, #276]	; 0x114
 8009d08:	e7d8      	b.n	8009cbc <__ssvfiscanf_r+0x4c>
 8009d0a:	9141      	str	r1, [sp, #260]	; 0x104
 8009d0c:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d0e:	7853      	ldrb	r3, [r2, #1]
 8009d10:	2b2a      	cmp	r3, #42	; 0x2a
 8009d12:	bf04      	itt	eq
 8009d14:	2310      	moveq	r3, #16
 8009d16:	1c95      	addeq	r5, r2, #2
 8009d18:	f04f 020a 	mov.w	r2, #10
 8009d1c:	bf08      	it	eq
 8009d1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009d20:	46aa      	mov	sl, r5
 8009d22:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009d26:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d91d      	bls.n	8009d6a <__ssvfiscanf_r+0xfa>
 8009d2e:	2203      	movs	r2, #3
 8009d30:	487e      	ldr	r0, [pc, #504]	; (8009f2c <__ssvfiscanf_r+0x2bc>)
 8009d32:	f001 f9bf 	bl	800b0b4 <memchr>
 8009d36:	b140      	cbz	r0, 8009d4a <__ssvfiscanf_r+0xda>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4655      	mov	r5, sl
 8009d3c:	eba0 0009 	sub.w	r0, r0, r9
 8009d40:	fa03 f000 	lsl.w	r0, r3, r0
 8009d44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d46:	4318      	orrs	r0, r3
 8009d48:	9041      	str	r0, [sp, #260]	; 0x104
 8009d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d4e:	2b78      	cmp	r3, #120	; 0x78
 8009d50:	d806      	bhi.n	8009d60 <__ssvfiscanf_r+0xf0>
 8009d52:	2b57      	cmp	r3, #87	; 0x57
 8009d54:	d810      	bhi.n	8009d78 <__ssvfiscanf_r+0x108>
 8009d56:	2b25      	cmp	r3, #37	; 0x25
 8009d58:	d0c4      	beq.n	8009ce4 <__ssvfiscanf_r+0x74>
 8009d5a:	d857      	bhi.n	8009e0c <__ssvfiscanf_r+0x19c>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d065      	beq.n	8009e2c <__ssvfiscanf_r+0x1bc>
 8009d60:	2303      	movs	r3, #3
 8009d62:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d64:	230a      	movs	r3, #10
 8009d66:	9342      	str	r3, [sp, #264]	; 0x108
 8009d68:	e072      	b.n	8009e50 <__ssvfiscanf_r+0x1e0>
 8009d6a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d6c:	4655      	mov	r5, sl
 8009d6e:	fb02 1103 	mla	r1, r2, r3, r1
 8009d72:	3930      	subs	r1, #48	; 0x30
 8009d74:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d76:	e7d3      	b.n	8009d20 <__ssvfiscanf_r+0xb0>
 8009d78:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d7c:	2a20      	cmp	r2, #32
 8009d7e:	d8ef      	bhi.n	8009d60 <__ssvfiscanf_r+0xf0>
 8009d80:	a101      	add	r1, pc, #4	; (adr r1, 8009d88 <__ssvfiscanf_r+0x118>)
 8009d82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009e3b 	.word	0x08009e3b
 8009d8c:	08009d61 	.word	0x08009d61
 8009d90:	08009d61 	.word	0x08009d61
 8009d94:	08009e99 	.word	0x08009e99
 8009d98:	08009d61 	.word	0x08009d61
 8009d9c:	08009d61 	.word	0x08009d61
 8009da0:	08009d61 	.word	0x08009d61
 8009da4:	08009d61 	.word	0x08009d61
 8009da8:	08009d61 	.word	0x08009d61
 8009dac:	08009d61 	.word	0x08009d61
 8009db0:	08009d61 	.word	0x08009d61
 8009db4:	08009eaf 	.word	0x08009eaf
 8009db8:	08009e85 	.word	0x08009e85
 8009dbc:	08009e13 	.word	0x08009e13
 8009dc0:	08009e13 	.word	0x08009e13
 8009dc4:	08009e13 	.word	0x08009e13
 8009dc8:	08009d61 	.word	0x08009d61
 8009dcc:	08009e89 	.word	0x08009e89
 8009dd0:	08009d61 	.word	0x08009d61
 8009dd4:	08009d61 	.word	0x08009d61
 8009dd8:	08009d61 	.word	0x08009d61
 8009ddc:	08009d61 	.word	0x08009d61
 8009de0:	08009ebf 	.word	0x08009ebf
 8009de4:	08009e91 	.word	0x08009e91
 8009de8:	08009e33 	.word	0x08009e33
 8009dec:	08009d61 	.word	0x08009d61
 8009df0:	08009d61 	.word	0x08009d61
 8009df4:	08009ebb 	.word	0x08009ebb
 8009df8:	08009d61 	.word	0x08009d61
 8009dfc:	08009e85 	.word	0x08009e85
 8009e00:	08009d61 	.word	0x08009d61
 8009e04:	08009d61 	.word	0x08009d61
 8009e08:	08009e3b 	.word	0x08009e3b
 8009e0c:	3b45      	subs	r3, #69	; 0x45
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d8a6      	bhi.n	8009d60 <__ssvfiscanf_r+0xf0>
 8009e12:	2305      	movs	r3, #5
 8009e14:	e01b      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4630      	mov	r0, r6
 8009e1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e1c:	4798      	blx	r3
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f43f af65 	beq.w	8009cee <__ssvfiscanf_r+0x7e>
 8009e24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f040 808d 	bne.w	8009f46 <__ssvfiscanf_r+0x2d6>
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	e08f      	b.n	8009f52 <__ssvfiscanf_r+0x2e2>
 8009e32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e34:	f042 0220 	orr.w	r2, r2, #32
 8009e38:	9241      	str	r2, [sp, #260]	; 0x104
 8009e3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e40:	9241      	str	r2, [sp, #260]	; 0x104
 8009e42:	2210      	movs	r2, #16
 8009e44:	2b6f      	cmp	r3, #111	; 0x6f
 8009e46:	bf34      	ite	cc
 8009e48:	2303      	movcc	r3, #3
 8009e4a:	2304      	movcs	r3, #4
 8009e4c:	9242      	str	r2, [sp, #264]	; 0x108
 8009e4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd42      	ble.n	8009edc <__ssvfiscanf_r+0x26c>
 8009e56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e58:	0659      	lsls	r1, r3, #25
 8009e5a:	d404      	bmi.n	8009e66 <__ssvfiscanf_r+0x1f6>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	5cba      	ldrb	r2, [r7, r2]
 8009e62:	0712      	lsls	r2, r2, #28
 8009e64:	d441      	bmi.n	8009eea <__ssvfiscanf_r+0x27a>
 8009e66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	dc50      	bgt.n	8009f0e <__ssvfiscanf_r+0x29e>
 8009e6c:	466b      	mov	r3, sp
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4630      	mov	r0, r6
 8009e72:	a941      	add	r1, sp, #260	; 0x104
 8009e74:	f000 fb64 	bl	800a540 <_scanf_chars>
 8009e78:	2801      	cmp	r0, #1
 8009e7a:	d06e      	beq.n	8009f5a <__ssvfiscanf_r+0x2ea>
 8009e7c:	2802      	cmp	r0, #2
 8009e7e:	f47f af1d 	bne.w	8009cbc <__ssvfiscanf_r+0x4c>
 8009e82:	e7cf      	b.n	8009e24 <__ssvfiscanf_r+0x1b4>
 8009e84:	220a      	movs	r2, #10
 8009e86:	e7dd      	b.n	8009e44 <__ssvfiscanf_r+0x1d4>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9342      	str	r3, [sp, #264]	; 0x108
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e7de      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009e90:	2308      	movs	r3, #8
 8009e92:	9342      	str	r3, [sp, #264]	; 0x108
 8009e94:	2304      	movs	r3, #4
 8009e96:	e7da      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f000 fcc4 	bl	800a828 <__sccl>
 8009ea0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea8:	9341      	str	r3, [sp, #260]	; 0x104
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7cf      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009eae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb4:	9341      	str	r3, [sp, #260]	; 0x104
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e7c9      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e7c7      	b.n	8009e4e <__ssvfiscanf_r+0x1de>
 8009ebe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009ec0:	06c3      	lsls	r3, r0, #27
 8009ec2:	f53f aefb 	bmi.w	8009cbc <__ssvfiscanf_r+0x4c>
 8009ec6:	9b00      	ldr	r3, [sp, #0]
 8009ec8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009eca:	1d19      	adds	r1, r3, #4
 8009ecc:	9100      	str	r1, [sp, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f010 0f01 	tst.w	r0, #1
 8009ed4:	bf14      	ite	ne
 8009ed6:	801a      	strhne	r2, [r3, #0]
 8009ed8:	601a      	streq	r2, [r3, #0]
 8009eda:	e6ef      	b.n	8009cbc <__ssvfiscanf_r+0x4c>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ee2:	4798      	blx	r3
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0b6      	beq.n	8009e56 <__ssvfiscanf_r+0x1e6>
 8009ee8:	e79c      	b.n	8009e24 <__ssvfiscanf_r+0x1b4>
 8009eea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009eec:	3201      	adds	r2, #1
 8009eee:	9245      	str	r2, [sp, #276]	; 0x114
 8009ef0:	6862      	ldr	r2, [r4, #4]
 8009ef2:	3a01      	subs	r2, #1
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	6062      	str	r2, [r4, #4]
 8009ef8:	dd02      	ble.n	8009f00 <__ssvfiscanf_r+0x290>
 8009efa:	3301      	adds	r3, #1
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	e7ad      	b.n	8009e5c <__ssvfiscanf_r+0x1ec>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4630      	mov	r0, r6
 8009f04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f06:	4798      	blx	r3
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0a7      	beq.n	8009e5c <__ssvfiscanf_r+0x1ec>
 8009f0c:	e78a      	b.n	8009e24 <__ssvfiscanf_r+0x1b4>
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	dc0e      	bgt.n	8009f30 <__ssvfiscanf_r+0x2c0>
 8009f12:	466b      	mov	r3, sp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4630      	mov	r0, r6
 8009f18:	a941      	add	r1, sp, #260	; 0x104
 8009f1a:	f000 fb6b 	bl	800a5f4 <_scanf_i>
 8009f1e:	e7ab      	b.n	8009e78 <__ssvfiscanf_r+0x208>
 8009f20:	08009bbd 	.word	0x08009bbd
 8009f24:	08009c37 	.word	0x08009c37
 8009f28:	0800b48f 	.word	0x0800b48f
 8009f2c:	0800b446 	.word	0x0800b446
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <__ssvfiscanf_r+0x2f0>)
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f43f aec2 	beq.w	8009cbc <__ssvfiscanf_r+0x4c>
 8009f38:	466b      	mov	r3, sp
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	a941      	add	r1, sp, #260	; 0x104
 8009f40:	f3af 8000 	nop.w
 8009f44:	e798      	b.n	8009e78 <__ssvfiscanf_r+0x208>
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f4c:	bf18      	it	ne
 8009f4e:	f04f 30ff 	movne.w	r0, #4294967295
 8009f52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f5c:	e7f9      	b.n	8009f52 <__ssvfiscanf_r+0x2e2>
 8009f5e:	bf00      	nop
 8009f60:	00000000 	.word	0x00000000

08009f64 <__sfputc_r>:
 8009f64:	6893      	ldr	r3, [r2, #8]
 8009f66:	b410      	push	{r4}
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	6093      	str	r3, [r2, #8]
 8009f6e:	da07      	bge.n	8009f80 <__sfputc_r+0x1c>
 8009f70:	6994      	ldr	r4, [r2, #24]
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	db01      	blt.n	8009f7a <__sfputc_r+0x16>
 8009f76:	290a      	cmp	r1, #10
 8009f78:	d102      	bne.n	8009f80 <__sfputc_r+0x1c>
 8009f7a:	bc10      	pop	{r4}
 8009f7c:	f000 bdb6 	b.w	800aaec <__swbuf_r>
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	1c58      	adds	r0, r3, #1
 8009f84:	6010      	str	r0, [r2, #0]
 8009f86:	7019      	strb	r1, [r3, #0]
 8009f88:	4608      	mov	r0, r1
 8009f8a:	bc10      	pop	{r4}
 8009f8c:	4770      	bx	lr

08009f8e <__sfputs_r>:
 8009f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f90:	4606      	mov	r6, r0
 8009f92:	460f      	mov	r7, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	18d5      	adds	r5, r2, r3
 8009f98:	42ac      	cmp	r4, r5
 8009f9a:	d101      	bne.n	8009fa0 <__sfputs_r+0x12>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e007      	b.n	8009fb0 <__sfputs_r+0x22>
 8009fa0:	463a      	mov	r2, r7
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	f7ff ffdc 	bl	8009f64 <__sfputc_r>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d1f3      	bne.n	8009f98 <__sfputs_r+0xa>
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fb4 <_vfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	460d      	mov	r5, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	4698      	mov	r8, r3
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	b09d      	sub	sp, #116	; 0x74
 8009fc2:	b118      	cbz	r0, 8009fcc <_vfiprintf_r+0x18>
 8009fc4:	6983      	ldr	r3, [r0, #24]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x18>
 8009fc8:	f000 ff6e 	bl	800aea8 <__sinit>
 8009fcc:	4b89      	ldr	r3, [pc, #548]	; (800a1f4 <_vfiprintf_r+0x240>)
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	d11b      	bne.n	800a00a <_vfiprintf_r+0x56>
 8009fd2:	6875      	ldr	r5, [r6, #4]
 8009fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fd6:	07d9      	lsls	r1, r3, #31
 8009fd8:	d405      	bmi.n	8009fe6 <_vfiprintf_r+0x32>
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	059a      	lsls	r2, r3, #22
 8009fde:	d402      	bmi.n	8009fe6 <_vfiprintf_r+0x32>
 8009fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fe2:	f000 ffff 	bl	800afe4 <__retarget_lock_acquire_recursive>
 8009fe6:	89ab      	ldrh	r3, [r5, #12]
 8009fe8:	071b      	lsls	r3, r3, #28
 8009fea:	d501      	bpl.n	8009ff0 <_vfiprintf_r+0x3c>
 8009fec:	692b      	ldr	r3, [r5, #16]
 8009fee:	b9eb      	cbnz	r3, 800a02c <_vfiprintf_r+0x78>
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 fdcc 	bl	800ab90 <__swsetup_r>
 8009ff8:	b1c0      	cbz	r0, 800a02c <_vfiprintf_r+0x78>
 8009ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ffc:	07dc      	lsls	r4, r3, #31
 8009ffe:	d50e      	bpl.n	800a01e <_vfiprintf_r+0x6a>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	b01d      	add	sp, #116	; 0x74
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	4b7b      	ldr	r3, [pc, #492]	; (800a1f8 <_vfiprintf_r+0x244>)
 800a00c:	429d      	cmp	r5, r3
 800a00e:	d101      	bne.n	800a014 <_vfiprintf_r+0x60>
 800a010:	68b5      	ldr	r5, [r6, #8]
 800a012:	e7df      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a014:	4b79      	ldr	r3, [pc, #484]	; (800a1fc <_vfiprintf_r+0x248>)
 800a016:	429d      	cmp	r5, r3
 800a018:	bf08      	it	eq
 800a01a:	68f5      	ldreq	r5, [r6, #12]
 800a01c:	e7da      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	0598      	lsls	r0, r3, #22
 800a022:	d4ed      	bmi.n	800a000 <_vfiprintf_r+0x4c>
 800a024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a026:	f000 ffde 	bl	800afe6 <__retarget_lock_release_recursive>
 800a02a:	e7e9      	b.n	800a000 <_vfiprintf_r+0x4c>
 800a02c:	2300      	movs	r3, #0
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	2320      	movs	r3, #32
 800a032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a036:	2330      	movs	r3, #48	; 0x30
 800a038:	f04f 0901 	mov.w	r9, #1
 800a03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a040:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a200 <_vfiprintf_r+0x24c>
 800a044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a048:	4623      	mov	r3, r4
 800a04a:	469a      	mov	sl, r3
 800a04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a050:	b10a      	cbz	r2, 800a056 <_vfiprintf_r+0xa2>
 800a052:	2a25      	cmp	r2, #37	; 0x25
 800a054:	d1f9      	bne.n	800a04a <_vfiprintf_r+0x96>
 800a056:	ebba 0b04 	subs.w	fp, sl, r4
 800a05a:	d00b      	beq.n	800a074 <_vfiprintf_r+0xc0>
 800a05c:	465b      	mov	r3, fp
 800a05e:	4622      	mov	r2, r4
 800a060:	4629      	mov	r1, r5
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff93 	bl	8009f8e <__sfputs_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	f000 80aa 	beq.w	800a1c2 <_vfiprintf_r+0x20e>
 800a06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a070:	445a      	add	r2, fp
 800a072:	9209      	str	r2, [sp, #36]	; 0x24
 800a074:	f89a 3000 	ldrb.w	r3, [sl]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 80a2 	beq.w	800a1c2 <_vfiprintf_r+0x20e>
 800a07e:	2300      	movs	r3, #0
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a088:	f10a 0a01 	add.w	sl, sl, #1
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a094:	931a      	str	r3, [sp, #104]	; 0x68
 800a096:	4654      	mov	r4, sl
 800a098:	2205      	movs	r2, #5
 800a09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09e:	4858      	ldr	r0, [pc, #352]	; (800a200 <_vfiprintf_r+0x24c>)
 800a0a0:	f001 f808 	bl	800b0b4 <memchr>
 800a0a4:	9a04      	ldr	r2, [sp, #16]
 800a0a6:	b9d8      	cbnz	r0, 800a0e0 <_vfiprintf_r+0x12c>
 800a0a8:	06d1      	lsls	r1, r2, #27
 800a0aa:	bf44      	itt	mi
 800a0ac:	2320      	movmi	r3, #32
 800a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b2:	0713      	lsls	r3, r2, #28
 800a0b4:	bf44      	itt	mi
 800a0b6:	232b      	movmi	r3, #43	; 0x2b
 800a0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c2:	d015      	beq.n	800a0f0 <_vfiprintf_r+0x13c>
 800a0c4:	4654      	mov	r4, sl
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	f04f 0c0a 	mov.w	ip, #10
 800a0cc:	9a07      	ldr	r2, [sp, #28]
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d4:	3b30      	subs	r3, #48	; 0x30
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d94e      	bls.n	800a178 <_vfiprintf_r+0x1c4>
 800a0da:	b1b0      	cbz	r0, 800a10a <_vfiprintf_r+0x156>
 800a0dc:	9207      	str	r2, [sp, #28]
 800a0de:	e014      	b.n	800a10a <_vfiprintf_r+0x156>
 800a0e0:	eba0 0308 	sub.w	r3, r0, r8
 800a0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	46a2      	mov	sl, r4
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	e7d2      	b.n	800a096 <_vfiprintf_r+0xe2>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	1d19      	adds	r1, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	9103      	str	r1, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfbb      	ittet	lt
 800a0fc:	425b      	neglt	r3, r3
 800a0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a102:	9307      	strge	r3, [sp, #28]
 800a104:	9307      	strlt	r3, [sp, #28]
 800a106:	bfb8      	it	lt
 800a108:	9204      	strlt	r2, [sp, #16]
 800a10a:	7823      	ldrb	r3, [r4, #0]
 800a10c:	2b2e      	cmp	r3, #46	; 0x2e
 800a10e:	d10c      	bne.n	800a12a <_vfiprintf_r+0x176>
 800a110:	7863      	ldrb	r3, [r4, #1]
 800a112:	2b2a      	cmp	r3, #42	; 0x2a
 800a114:	d135      	bne.n	800a182 <_vfiprintf_r+0x1ce>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	3402      	adds	r4, #2
 800a11a:	1d1a      	adds	r2, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	9203      	str	r2, [sp, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfb8      	it	lt
 800a124:	f04f 33ff 	movlt.w	r3, #4294967295
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a204 <_vfiprintf_r+0x250>
 800a12e:	2203      	movs	r2, #3
 800a130:	4650      	mov	r0, sl
 800a132:	7821      	ldrb	r1, [r4, #0]
 800a134:	f000 ffbe 	bl	800b0b4 <memchr>
 800a138:	b140      	cbz	r0, 800a14c <_vfiprintf_r+0x198>
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	eba0 000a 	sub.w	r0, r0, sl
 800a140:	fa03 f000 	lsl.w	r0, r3, r0
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	3401      	adds	r4, #1
 800a148:	4303      	orrs	r3, r0
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a150:	2206      	movs	r2, #6
 800a152:	482d      	ldr	r0, [pc, #180]	; (800a208 <_vfiprintf_r+0x254>)
 800a154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a158:	f000 ffac 	bl	800b0b4 <memchr>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d03f      	beq.n	800a1e0 <_vfiprintf_r+0x22c>
 800a160:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <_vfiprintf_r+0x258>)
 800a162:	bb1b      	cbnz	r3, 800a1ac <_vfiprintf_r+0x1f8>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	3307      	adds	r3, #7
 800a168:	f023 0307 	bic.w	r3, r3, #7
 800a16c:	3308      	adds	r3, #8
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a172:	443b      	add	r3, r7
 800a174:	9309      	str	r3, [sp, #36]	; 0x24
 800a176:	e767      	b.n	800a048 <_vfiprintf_r+0x94>
 800a178:	460c      	mov	r4, r1
 800a17a:	2001      	movs	r0, #1
 800a17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a180:	e7a5      	b.n	800a0ce <_vfiprintf_r+0x11a>
 800a182:	2300      	movs	r3, #0
 800a184:	f04f 0c0a 	mov.w	ip, #10
 800a188:	4619      	mov	r1, r3
 800a18a:	3401      	adds	r4, #1
 800a18c:	9305      	str	r3, [sp, #20]
 800a18e:	4620      	mov	r0, r4
 800a190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a194:	3a30      	subs	r2, #48	; 0x30
 800a196:	2a09      	cmp	r2, #9
 800a198:	d903      	bls.n	800a1a2 <_vfiprintf_r+0x1ee>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0c5      	beq.n	800a12a <_vfiprintf_r+0x176>
 800a19e:	9105      	str	r1, [sp, #20]
 800a1a0:	e7c3      	b.n	800a12a <_vfiprintf_r+0x176>
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1aa:	e7f0      	b.n	800a18e <_vfiprintf_r+0x1da>
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4b16      	ldr	r3, [pc, #88]	; (800a210 <_vfiprintf_r+0x25c>)
 800a1b6:	a904      	add	r1, sp, #16
 800a1b8:	f3af 8000 	nop.w
 800a1bc:	4607      	mov	r7, r0
 800a1be:	1c78      	adds	r0, r7, #1
 800a1c0:	d1d6      	bne.n	800a170 <_vfiprintf_r+0x1bc>
 800a1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c4:	07d9      	lsls	r1, r3, #31
 800a1c6:	d405      	bmi.n	800a1d4 <_vfiprintf_r+0x220>
 800a1c8:	89ab      	ldrh	r3, [r5, #12]
 800a1ca:	059a      	lsls	r2, r3, #22
 800a1cc:	d402      	bmi.n	800a1d4 <_vfiprintf_r+0x220>
 800a1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d0:	f000 ff09 	bl	800afe6 <__retarget_lock_release_recursive>
 800a1d4:	89ab      	ldrh	r3, [r5, #12]
 800a1d6:	065b      	lsls	r3, r3, #25
 800a1d8:	f53f af12 	bmi.w	800a000 <_vfiprintf_r+0x4c>
 800a1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1de:	e711      	b.n	800a004 <_vfiprintf_r+0x50>
 800a1e0:	ab03      	add	r3, sp, #12
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4b09      	ldr	r3, [pc, #36]	; (800a210 <_vfiprintf_r+0x25c>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	f000 f882 	bl	800a2f4 <_printf_i>
 800a1f0:	e7e4      	b.n	800a1bc <_vfiprintf_r+0x208>
 800a1f2:	bf00      	nop
 800a1f4:	0800b5b0 	.word	0x0800b5b0
 800a1f8:	0800b5d0 	.word	0x0800b5d0
 800a1fc:	0800b590 	.word	0x0800b590
 800a200:	0800b440 	.word	0x0800b440
 800a204:	0800b446 	.word	0x0800b446
 800a208:	0800b44a 	.word	0x0800b44a
 800a20c:	00000000 	.word	0x00000000
 800a210:	08009f8f 	.word	0x08009f8f

0800a214 <_printf_common>:
 800a214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	4616      	mov	r6, r2
 800a21a:	4699      	mov	r9, r3
 800a21c:	688a      	ldr	r2, [r1, #8]
 800a21e:	690b      	ldr	r3, [r1, #16]
 800a220:	4607      	mov	r7, r0
 800a222:	4293      	cmp	r3, r2
 800a224:	bfb8      	it	lt
 800a226:	4613      	movlt	r3, r2
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a22e:	460c      	mov	r4, r1
 800a230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a234:	b10a      	cbz	r2, 800a23a <_printf_common+0x26>
 800a236:	3301      	adds	r3, #1
 800a238:	6033      	str	r3, [r6, #0]
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	0699      	lsls	r1, r3, #26
 800a23e:	bf42      	ittt	mi
 800a240:	6833      	ldrmi	r3, [r6, #0]
 800a242:	3302      	addmi	r3, #2
 800a244:	6033      	strmi	r3, [r6, #0]
 800a246:	6825      	ldr	r5, [r4, #0]
 800a248:	f015 0506 	ands.w	r5, r5, #6
 800a24c:	d106      	bne.n	800a25c <_printf_common+0x48>
 800a24e:	f104 0a19 	add.w	sl, r4, #25
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	6832      	ldr	r2, [r6, #0]
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	42ab      	cmp	r3, r5
 800a25a:	dc28      	bgt.n	800a2ae <_printf_common+0x9a>
 800a25c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a260:	1e13      	subs	r3, r2, #0
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	bf18      	it	ne
 800a266:	2301      	movne	r3, #1
 800a268:	0692      	lsls	r2, r2, #26
 800a26a:	d42d      	bmi.n	800a2c8 <_printf_common+0xb4>
 800a26c:	4649      	mov	r1, r9
 800a26e:	4638      	mov	r0, r7
 800a270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a274:	47c0      	blx	r8
 800a276:	3001      	adds	r0, #1
 800a278:	d020      	beq.n	800a2bc <_printf_common+0xa8>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	68e5      	ldr	r5, [r4, #12]
 800a27e:	f003 0306 	and.w	r3, r3, #6
 800a282:	2b04      	cmp	r3, #4
 800a284:	bf18      	it	ne
 800a286:	2500      	movne	r5, #0
 800a288:	6832      	ldr	r2, [r6, #0]
 800a28a:	f04f 0600 	mov.w	r6, #0
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	bf08      	it	eq
 800a292:	1aad      	subeq	r5, r5, r2
 800a294:	6922      	ldr	r2, [r4, #16]
 800a296:	bf08      	it	eq
 800a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a29c:	4293      	cmp	r3, r2
 800a29e:	bfc4      	itt	gt
 800a2a0:	1a9b      	subgt	r3, r3, r2
 800a2a2:	18ed      	addgt	r5, r5, r3
 800a2a4:	341a      	adds	r4, #26
 800a2a6:	42b5      	cmp	r5, r6
 800a2a8:	d11a      	bne.n	800a2e0 <_printf_common+0xcc>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e008      	b.n	800a2c0 <_printf_common+0xac>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	47c0      	blx	r8
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d103      	bne.n	800a2c4 <_printf_common+0xb0>
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	e7c4      	b.n	800a252 <_printf_common+0x3e>
 800a2c8:	2030      	movs	r0, #48	; 0x30
 800a2ca:	18e1      	adds	r1, r4, r3
 800a2cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2d6:	4422      	add	r2, r4
 800a2d8:	3302      	adds	r3, #2
 800a2da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2de:	e7c5      	b.n	800a26c <_printf_common+0x58>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	47c0      	blx	r8
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d0e6      	beq.n	800a2bc <_printf_common+0xa8>
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7d9      	b.n	800a2a6 <_printf_common+0x92>
	...

0800a2f4 <_printf_i>:
 800a2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	7e0f      	ldrb	r7, [r1, #24]
 800a2fa:	4691      	mov	r9, r2
 800a2fc:	2f78      	cmp	r7, #120	; 0x78
 800a2fe:	4680      	mov	r8, r0
 800a300:	460c      	mov	r4, r1
 800a302:	469a      	mov	sl, r3
 800a304:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a30a:	d807      	bhi.n	800a31c <_printf_i+0x28>
 800a30c:	2f62      	cmp	r7, #98	; 0x62
 800a30e:	d80a      	bhi.n	800a326 <_printf_i+0x32>
 800a310:	2f00      	cmp	r7, #0
 800a312:	f000 80d9 	beq.w	800a4c8 <_printf_i+0x1d4>
 800a316:	2f58      	cmp	r7, #88	; 0x58
 800a318:	f000 80a4 	beq.w	800a464 <_printf_i+0x170>
 800a31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a324:	e03a      	b.n	800a39c <_printf_i+0xa8>
 800a326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a32a:	2b15      	cmp	r3, #21
 800a32c:	d8f6      	bhi.n	800a31c <_printf_i+0x28>
 800a32e:	a101      	add	r1, pc, #4	; (adr r1, 800a334 <_printf_i+0x40>)
 800a330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a334:	0800a38d 	.word	0x0800a38d
 800a338:	0800a3a1 	.word	0x0800a3a1
 800a33c:	0800a31d 	.word	0x0800a31d
 800a340:	0800a31d 	.word	0x0800a31d
 800a344:	0800a31d 	.word	0x0800a31d
 800a348:	0800a31d 	.word	0x0800a31d
 800a34c:	0800a3a1 	.word	0x0800a3a1
 800a350:	0800a31d 	.word	0x0800a31d
 800a354:	0800a31d 	.word	0x0800a31d
 800a358:	0800a31d 	.word	0x0800a31d
 800a35c:	0800a31d 	.word	0x0800a31d
 800a360:	0800a4af 	.word	0x0800a4af
 800a364:	0800a3d1 	.word	0x0800a3d1
 800a368:	0800a491 	.word	0x0800a491
 800a36c:	0800a31d 	.word	0x0800a31d
 800a370:	0800a31d 	.word	0x0800a31d
 800a374:	0800a4d1 	.word	0x0800a4d1
 800a378:	0800a31d 	.word	0x0800a31d
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a31d 	.word	0x0800a31d
 800a384:	0800a31d 	.word	0x0800a31d
 800a388:	0800a499 	.word	0x0800a499
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	1d1a      	adds	r2, r3, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a39c:	2301      	movs	r3, #1
 800a39e:	e0a4      	b.n	800a4ea <_printf_i+0x1f6>
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	6829      	ldr	r1, [r5, #0]
 800a3a4:	0606      	lsls	r6, r0, #24
 800a3a6:	f101 0304 	add.w	r3, r1, #4
 800a3aa:	d50a      	bpl.n	800a3c2 <_printf_i+0xce>
 800a3ac:	680e      	ldr	r6, [r1, #0]
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	2e00      	cmp	r6, #0
 800a3b2:	da03      	bge.n	800a3bc <_printf_i+0xc8>
 800a3b4:	232d      	movs	r3, #45	; 0x2d
 800a3b6:	4276      	negs	r6, r6
 800a3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3bc:	230a      	movs	r3, #10
 800a3be:	485e      	ldr	r0, [pc, #376]	; (800a538 <_printf_i+0x244>)
 800a3c0:	e019      	b.n	800a3f6 <_printf_i+0x102>
 800a3c2:	680e      	ldr	r6, [r1, #0]
 800a3c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	bf18      	it	ne
 800a3cc:	b236      	sxthne	r6, r6
 800a3ce:	e7ef      	b.n	800a3b0 <_printf_i+0xbc>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	6029      	str	r1, [r5, #0]
 800a3d8:	0601      	lsls	r1, r0, #24
 800a3da:	d501      	bpl.n	800a3e0 <_printf_i+0xec>
 800a3dc:	681e      	ldr	r6, [r3, #0]
 800a3de:	e002      	b.n	800a3e6 <_printf_i+0xf2>
 800a3e0:	0646      	lsls	r6, r0, #25
 800a3e2:	d5fb      	bpl.n	800a3dc <_printf_i+0xe8>
 800a3e4:	881e      	ldrh	r6, [r3, #0]
 800a3e6:	2f6f      	cmp	r7, #111	; 0x6f
 800a3e8:	bf0c      	ite	eq
 800a3ea:	2308      	moveq	r3, #8
 800a3ec:	230a      	movne	r3, #10
 800a3ee:	4852      	ldr	r0, [pc, #328]	; (800a538 <_printf_i+0x244>)
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f6:	6865      	ldr	r5, [r4, #4]
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	bfa8      	it	ge
 800a3fc:	6821      	ldrge	r1, [r4, #0]
 800a3fe:	60a5      	str	r5, [r4, #8]
 800a400:	bfa4      	itt	ge
 800a402:	f021 0104 	bicge.w	r1, r1, #4
 800a406:	6021      	strge	r1, [r4, #0]
 800a408:	b90e      	cbnz	r6, 800a40e <_printf_i+0x11a>
 800a40a:	2d00      	cmp	r5, #0
 800a40c:	d04d      	beq.n	800a4aa <_printf_i+0x1b6>
 800a40e:	4615      	mov	r5, r2
 800a410:	fbb6 f1f3 	udiv	r1, r6, r3
 800a414:	fb03 6711 	mls	r7, r3, r1, r6
 800a418:	5dc7      	ldrb	r7, [r0, r7]
 800a41a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a41e:	4637      	mov	r7, r6
 800a420:	42bb      	cmp	r3, r7
 800a422:	460e      	mov	r6, r1
 800a424:	d9f4      	bls.n	800a410 <_printf_i+0x11c>
 800a426:	2b08      	cmp	r3, #8
 800a428:	d10b      	bne.n	800a442 <_printf_i+0x14e>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	07de      	lsls	r6, r3, #31
 800a42e:	d508      	bpl.n	800a442 <_printf_i+0x14e>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	6861      	ldr	r1, [r4, #4]
 800a434:	4299      	cmp	r1, r3
 800a436:	bfde      	ittt	le
 800a438:	2330      	movle	r3, #48	; 0x30
 800a43a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a442:	1b52      	subs	r2, r2, r5
 800a444:	6122      	str	r2, [r4, #16]
 800a446:	464b      	mov	r3, r9
 800a448:	4621      	mov	r1, r4
 800a44a:	4640      	mov	r0, r8
 800a44c:	f8cd a000 	str.w	sl, [sp]
 800a450:	aa03      	add	r2, sp, #12
 800a452:	f7ff fedf 	bl	800a214 <_printf_common>
 800a456:	3001      	adds	r0, #1
 800a458:	d14c      	bne.n	800a4f4 <_printf_i+0x200>
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	b004      	add	sp, #16
 800a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a464:	4834      	ldr	r0, [pc, #208]	; (800a538 <_printf_i+0x244>)
 800a466:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a46a:	6829      	ldr	r1, [r5, #0]
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a472:	6029      	str	r1, [r5, #0]
 800a474:	061d      	lsls	r5, r3, #24
 800a476:	d514      	bpl.n	800a4a2 <_printf_i+0x1ae>
 800a478:	07df      	lsls	r7, r3, #31
 800a47a:	bf44      	itt	mi
 800a47c:	f043 0320 	orrmi.w	r3, r3, #32
 800a480:	6023      	strmi	r3, [r4, #0]
 800a482:	b91e      	cbnz	r6, 800a48c <_printf_i+0x198>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	f023 0320 	bic.w	r3, r3, #32
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	2310      	movs	r3, #16
 800a48e:	e7af      	b.n	800a3f0 <_printf_i+0xfc>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	f043 0320 	orr.w	r3, r3, #32
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	2378      	movs	r3, #120	; 0x78
 800a49a:	4828      	ldr	r0, [pc, #160]	; (800a53c <_printf_i+0x248>)
 800a49c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4a0:	e7e3      	b.n	800a46a <_printf_i+0x176>
 800a4a2:	0659      	lsls	r1, r3, #25
 800a4a4:	bf48      	it	mi
 800a4a6:	b2b6      	uxthmi	r6, r6
 800a4a8:	e7e6      	b.n	800a478 <_printf_i+0x184>
 800a4aa:	4615      	mov	r5, r2
 800a4ac:	e7bb      	b.n	800a426 <_printf_i+0x132>
 800a4ae:	682b      	ldr	r3, [r5, #0]
 800a4b0:	6826      	ldr	r6, [r4, #0]
 800a4b2:	1d18      	adds	r0, r3, #4
 800a4b4:	6961      	ldr	r1, [r4, #20]
 800a4b6:	6028      	str	r0, [r5, #0]
 800a4b8:	0635      	lsls	r5, r6, #24
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	d501      	bpl.n	800a4c2 <_printf_i+0x1ce>
 800a4be:	6019      	str	r1, [r3, #0]
 800a4c0:	e002      	b.n	800a4c8 <_printf_i+0x1d4>
 800a4c2:	0670      	lsls	r0, r6, #25
 800a4c4:	d5fb      	bpl.n	800a4be <_printf_i+0x1ca>
 800a4c6:	8019      	strh	r1, [r3, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4615      	mov	r5, r2
 800a4cc:	6123      	str	r3, [r4, #16]
 800a4ce:	e7ba      	b.n	800a446 <_printf_i+0x152>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	1d1a      	adds	r2, r3, #4
 800a4d6:	602a      	str	r2, [r5, #0]
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f000 fde9 	bl	800b0b4 <memchr>
 800a4e2:	b108      	cbz	r0, 800a4e8 <_printf_i+0x1f4>
 800a4e4:	1b40      	subs	r0, r0, r5
 800a4e6:	6060      	str	r0, [r4, #4]
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f2:	e7a8      	b.n	800a446 <_printf_i+0x152>
 800a4f4:	462a      	mov	r2, r5
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	47d0      	blx	sl
 800a4fe:	3001      	adds	r0, #1
 800a500:	d0ab      	beq.n	800a45a <_printf_i+0x166>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	079b      	lsls	r3, r3, #30
 800a506:	d413      	bmi.n	800a530 <_printf_i+0x23c>
 800a508:	68e0      	ldr	r0, [r4, #12]
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	4298      	cmp	r0, r3
 800a50e:	bfb8      	it	lt
 800a510:	4618      	movlt	r0, r3
 800a512:	e7a4      	b.n	800a45e <_printf_i+0x16a>
 800a514:	2301      	movs	r3, #1
 800a516:	4632      	mov	r2, r6
 800a518:	4649      	mov	r1, r9
 800a51a:	4640      	mov	r0, r8
 800a51c:	47d0      	blx	sl
 800a51e:	3001      	adds	r0, #1
 800a520:	d09b      	beq.n	800a45a <_printf_i+0x166>
 800a522:	3501      	adds	r5, #1
 800a524:	68e3      	ldr	r3, [r4, #12]
 800a526:	9903      	ldr	r1, [sp, #12]
 800a528:	1a5b      	subs	r3, r3, r1
 800a52a:	42ab      	cmp	r3, r5
 800a52c:	dcf2      	bgt.n	800a514 <_printf_i+0x220>
 800a52e:	e7eb      	b.n	800a508 <_printf_i+0x214>
 800a530:	2500      	movs	r5, #0
 800a532:	f104 0619 	add.w	r6, r4, #25
 800a536:	e7f5      	b.n	800a524 <_printf_i+0x230>
 800a538:	0800b451 	.word	0x0800b451
 800a53c:	0800b462 	.word	0x0800b462

0800a540 <_scanf_chars>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4615      	mov	r5, r2
 800a546:	688a      	ldr	r2, [r1, #8]
 800a548:	4680      	mov	r8, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	b932      	cbnz	r2, 800a55c <_scanf_chars+0x1c>
 800a54e:	698a      	ldr	r2, [r1, #24]
 800a550:	2a00      	cmp	r2, #0
 800a552:	bf0c      	ite	eq
 800a554:	2201      	moveq	r2, #1
 800a556:	f04f 32ff 	movne.w	r2, #4294967295
 800a55a:	608a      	str	r2, [r1, #8]
 800a55c:	2700      	movs	r7, #0
 800a55e:	6822      	ldr	r2, [r4, #0]
 800a560:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a5f0 <_scanf_chars+0xb0>
 800a564:	06d1      	lsls	r1, r2, #27
 800a566:	bf5f      	itttt	pl
 800a568:	681a      	ldrpl	r2, [r3, #0]
 800a56a:	1d11      	addpl	r1, r2, #4
 800a56c:	6019      	strpl	r1, [r3, #0]
 800a56e:	6816      	ldrpl	r6, [r2, #0]
 800a570:	69a0      	ldr	r0, [r4, #24]
 800a572:	b188      	cbz	r0, 800a598 <_scanf_chars+0x58>
 800a574:	2801      	cmp	r0, #1
 800a576:	d107      	bne.n	800a588 <_scanf_chars+0x48>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	781a      	ldrb	r2, [r3, #0]
 800a57c:	6963      	ldr	r3, [r4, #20]
 800a57e:	5c9b      	ldrb	r3, [r3, r2]
 800a580:	b953      	cbnz	r3, 800a598 <_scanf_chars+0x58>
 800a582:	2f00      	cmp	r7, #0
 800a584:	d031      	beq.n	800a5ea <_scanf_chars+0xaa>
 800a586:	e022      	b.n	800a5ce <_scanf_chars+0x8e>
 800a588:	2802      	cmp	r0, #2
 800a58a:	d120      	bne.n	800a5ce <_scanf_chars+0x8e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a594:	071b      	lsls	r3, r3, #28
 800a596:	d41a      	bmi.n	800a5ce <_scanf_chars+0x8e>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	3701      	adds	r7, #1
 800a59c:	06da      	lsls	r2, r3, #27
 800a59e:	bf5e      	ittt	pl
 800a5a0:	682b      	ldrpl	r3, [r5, #0]
 800a5a2:	781b      	ldrbpl	r3, [r3, #0]
 800a5a4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5a8:	682a      	ldr	r2, [r5, #0]
 800a5aa:	686b      	ldr	r3, [r5, #4]
 800a5ac:	3201      	adds	r2, #1
 800a5ae:	602a      	str	r2, [r5, #0]
 800a5b0:	68a2      	ldr	r2, [r4, #8]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	3a01      	subs	r2, #1
 800a5b6:	606b      	str	r3, [r5, #4]
 800a5b8:	60a2      	str	r2, [r4, #8]
 800a5ba:	b142      	cbz	r2, 800a5ce <_scanf_chars+0x8e>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dcd7      	bgt.n	800a570 <_scanf_chars+0x30>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5c8:	4798      	blx	r3
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0d0      	beq.n	800a570 <_scanf_chars+0x30>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	f013 0310 	ands.w	r3, r3, #16
 800a5d4:	d105      	bne.n	800a5e2 <_scanf_chars+0xa2>
 800a5d6:	68e2      	ldr	r2, [r4, #12]
 800a5d8:	3201      	adds	r2, #1
 800a5da:	60e2      	str	r2, [r4, #12]
 800a5dc:	69a2      	ldr	r2, [r4, #24]
 800a5de:	b102      	cbz	r2, 800a5e2 <_scanf_chars+0xa2>
 800a5e0:	7033      	strb	r3, [r6, #0]
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	443b      	add	r3, r7
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800b48f 	.word	0x0800b48f

0800a5f4 <_scanf_i>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	4698      	mov	r8, r3
 800a5fc:	4b75      	ldr	r3, [pc, #468]	; (800a7d4 <_scanf_i+0x1e0>)
 800a5fe:	b087      	sub	sp, #28
 800a600:	4682      	mov	sl, r0
 800a602:	4616      	mov	r6, r2
 800a604:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a608:	ab03      	add	r3, sp, #12
 800a60a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a60e:	4b72      	ldr	r3, [pc, #456]	; (800a7d8 <_scanf_i+0x1e4>)
 800a610:	69a1      	ldr	r1, [r4, #24]
 800a612:	4a72      	ldr	r2, [pc, #456]	; (800a7dc <_scanf_i+0x1e8>)
 800a614:	4627      	mov	r7, r4
 800a616:	2903      	cmp	r1, #3
 800a618:	bf18      	it	ne
 800a61a:	461a      	movne	r2, r3
 800a61c:	68a3      	ldr	r3, [r4, #8]
 800a61e:	9201      	str	r2, [sp, #4]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a626:	bf81      	itttt	hi
 800a628:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a62c:	eb03 0905 	addhi.w	r9, r3, r5
 800a630:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a634:	60a3      	strhi	r3, [r4, #8]
 800a636:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a63a:	bf98      	it	ls
 800a63c:	f04f 0900 	movls.w	r9, #0
 800a640:	463d      	mov	r5, r7
 800a642:	f04f 0b00 	mov.w	fp, #0
 800a646:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	6831      	ldr	r1, [r6, #0]
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	2202      	movs	r2, #2
 800a652:	7809      	ldrb	r1, [r1, #0]
 800a654:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a658:	f000 fd2c 	bl	800b0b4 <memchr>
 800a65c:	b328      	cbz	r0, 800a6aa <_scanf_i+0xb6>
 800a65e:	f1bb 0f01 	cmp.w	fp, #1
 800a662:	d159      	bne.n	800a718 <_scanf_i+0x124>
 800a664:	6862      	ldr	r2, [r4, #4]
 800a666:	b92a      	cbnz	r2, 800a674 <_scanf_i+0x80>
 800a668:	2308      	movs	r3, #8
 800a66a:	6822      	ldr	r2, [r4, #0]
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	6822      	ldr	r2, [r4, #0]
 800a676:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	68a2      	ldr	r2, [r4, #8]
 800a67e:	1e51      	subs	r1, r2, #1
 800a680:	60a1      	str	r1, [r4, #8]
 800a682:	b192      	cbz	r2, 800a6aa <_scanf_i+0xb6>
 800a684:	6832      	ldr	r2, [r6, #0]
 800a686:	1c51      	adds	r1, r2, #1
 800a688:	6031      	str	r1, [r6, #0]
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	f805 2b01 	strb.w	r2, [r5], #1
 800a690:	6872      	ldr	r2, [r6, #4]
 800a692:	3a01      	subs	r2, #1
 800a694:	2a00      	cmp	r2, #0
 800a696:	6072      	str	r2, [r6, #4]
 800a698:	dc07      	bgt.n	800a6aa <_scanf_i+0xb6>
 800a69a:	4631      	mov	r1, r6
 800a69c:	4650      	mov	r0, sl
 800a69e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a6a2:	4790      	blx	r2
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f040 8085 	bne.w	800a7b4 <_scanf_i+0x1c0>
 800a6aa:	f10b 0b01 	add.w	fp, fp, #1
 800a6ae:	f1bb 0f03 	cmp.w	fp, #3
 800a6b2:	d1cb      	bne.n	800a64c <_scanf_i+0x58>
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	b90b      	cbnz	r3, 800a6bc <_scanf_i+0xc8>
 800a6b8:	230a      	movs	r3, #10
 800a6ba:	6063      	str	r3, [r4, #4]
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	4948      	ldr	r1, [pc, #288]	; (800a7e0 <_scanf_i+0x1ec>)
 800a6c0:	6960      	ldr	r0, [r4, #20]
 800a6c2:	1ac9      	subs	r1, r1, r3
 800a6c4:	f000 f8b0 	bl	800a828 <__sccl>
 800a6c8:	f04f 0b00 	mov.w	fp, #0
 800a6cc:	68a3      	ldr	r3, [r4, #8]
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d03d      	beq.n	800a750 <_scanf_i+0x15c>
 800a6d4:	6831      	ldr	r1, [r6, #0]
 800a6d6:	6960      	ldr	r0, [r4, #20]
 800a6d8:	f891 c000 	ldrb.w	ip, [r1]
 800a6dc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d035      	beq.n	800a750 <_scanf_i+0x15c>
 800a6e4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a6e8:	d124      	bne.n	800a734 <_scanf_i+0x140>
 800a6ea:	0510      	lsls	r0, r2, #20
 800a6ec:	d522      	bpl.n	800a734 <_scanf_i+0x140>
 800a6ee:	f10b 0b01 	add.w	fp, fp, #1
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	d003      	beq.n	800a700 <_scanf_i+0x10c>
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6fe:	60a3      	str	r3, [r4, #8]
 800a700:	6873      	ldr	r3, [r6, #4]
 800a702:	3b01      	subs	r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	6073      	str	r3, [r6, #4]
 800a708:	dd1b      	ble.n	800a742 <_scanf_i+0x14e>
 800a70a:	6833      	ldr	r3, [r6, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	68a3      	ldr	r3, [r4, #8]
 800a712:	3b01      	subs	r3, #1
 800a714:	60a3      	str	r3, [r4, #8]
 800a716:	e7d9      	b.n	800a6cc <_scanf_i+0xd8>
 800a718:	f1bb 0f02 	cmp.w	fp, #2
 800a71c:	d1ae      	bne.n	800a67c <_scanf_i+0x88>
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a724:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a728:	d1bf      	bne.n	800a6aa <_scanf_i+0xb6>
 800a72a:	2310      	movs	r3, #16
 800a72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	e7a2      	b.n	800a67a <_scanf_i+0x86>
 800a734:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	780b      	ldrb	r3, [r1, #0]
 800a73c:	f805 3b01 	strb.w	r3, [r5], #1
 800a740:	e7de      	b.n	800a700 <_scanf_i+0x10c>
 800a742:	4631      	mov	r1, r6
 800a744:	4650      	mov	r0, sl
 800a746:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a74a:	4798      	blx	r3
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d0df      	beq.n	800a710 <_scanf_i+0x11c>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	05db      	lsls	r3, r3, #23
 800a754:	d50d      	bpl.n	800a772 <_scanf_i+0x17e>
 800a756:	42bd      	cmp	r5, r7
 800a758:	d909      	bls.n	800a76e <_scanf_i+0x17a>
 800a75a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a75e:	4632      	mov	r2, r6
 800a760:	4650      	mov	r0, sl
 800a762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a766:	f105 39ff 	add.w	r9, r5, #4294967295
 800a76a:	4798      	blx	r3
 800a76c:	464d      	mov	r5, r9
 800a76e:	42bd      	cmp	r5, r7
 800a770:	d02d      	beq.n	800a7ce <_scanf_i+0x1da>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	f012 0210 	ands.w	r2, r2, #16
 800a778:	d113      	bne.n	800a7a2 <_scanf_i+0x1ae>
 800a77a:	702a      	strb	r2, [r5, #0]
 800a77c:	4639      	mov	r1, r7
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	4650      	mov	r0, sl
 800a782:	9e01      	ldr	r6, [sp, #4]
 800a784:	47b0      	blx	r6
 800a786:	6821      	ldr	r1, [r4, #0]
 800a788:	f8d8 3000 	ldr.w	r3, [r8]
 800a78c:	f011 0f20 	tst.w	r1, #32
 800a790:	d013      	beq.n	800a7ba <_scanf_i+0x1c6>
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	f8c8 2000 	str.w	r2, [r8]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6018      	str	r0, [r3, #0]
 800a79c:	68e3      	ldr	r3, [r4, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60e3      	str	r3, [r4, #12]
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	1bed      	subs	r5, r5, r7
 800a7a6:	44ab      	add	fp, r5
 800a7a8:	6925      	ldr	r5, [r4, #16]
 800a7aa:	445d      	add	r5, fp
 800a7ac:	6125      	str	r5, [r4, #16]
 800a7ae:	b007      	add	sp, #28
 800a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	f04f 0b00 	mov.w	fp, #0
 800a7b8:	e7ca      	b.n	800a750 <_scanf_i+0x15c>
 800a7ba:	1d1a      	adds	r2, r3, #4
 800a7bc:	f8c8 2000 	str.w	r2, [r8]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f011 0f01 	tst.w	r1, #1
 800a7c6:	bf14      	ite	ne
 800a7c8:	8018      	strhne	r0, [r3, #0]
 800a7ca:	6018      	streq	r0, [r3, #0]
 800a7cc:	e7e6      	b.n	800a79c <_scanf_i+0x1a8>
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	e7ed      	b.n	800a7ae <_scanf_i+0x1ba>
 800a7d2:	bf00      	nop
 800a7d4:	0800b368 	.word	0x0800b368
 800a7d8:	0800aa79 	.word	0x0800aa79
 800a7dc:	0800a991 	.word	0x0800a991
 800a7e0:	0800b48c 	.word	0x0800b48c

0800a7e4 <_read_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4d05      	ldr	r5, [pc, #20]	; (800a804 <_read_r+0x20>)
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f6 fa4d 	bl	8000c92 <_read>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_read_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_read_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20001538 	.word	0x20001538

0800a808 <_sbrk_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	2300      	movs	r3, #0
 800a80c:	4d05      	ldr	r5, [pc, #20]	; (800a824 <_sbrk_r+0x1c>)
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f6 faa6 	bl	8000d64 <_sbrk>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_sbrk_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_sbrk_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20001538 	.word	0x20001538

0800a828 <__sccl>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	780b      	ldrb	r3, [r1, #0]
 800a82c:	4604      	mov	r4, r0
 800a82e:	2b5e      	cmp	r3, #94	; 0x5e
 800a830:	bf13      	iteet	ne
 800a832:	2200      	movne	r2, #0
 800a834:	2201      	moveq	r2, #1
 800a836:	784b      	ldrbeq	r3, [r1, #1]
 800a838:	1c48      	addne	r0, r1, #1
 800a83a:	bf08      	it	eq
 800a83c:	1c88      	addeq	r0, r1, #2
 800a83e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a842:	1e61      	subs	r1, r4, #1
 800a844:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a848:	42a9      	cmp	r1, r5
 800a84a:	d1fb      	bne.n	800a844 <__sccl+0x1c>
 800a84c:	b90b      	cbnz	r3, 800a852 <__sccl+0x2a>
 800a84e:	3801      	subs	r0, #1
 800a850:	bd70      	pop	{r4, r5, r6, pc}
 800a852:	f082 0201 	eor.w	r2, r2, #1
 800a856:	4605      	mov	r5, r0
 800a858:	54e2      	strb	r2, [r4, r3]
 800a85a:	4628      	mov	r0, r5
 800a85c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a860:	292d      	cmp	r1, #45	; 0x2d
 800a862:	d006      	beq.n	800a872 <__sccl+0x4a>
 800a864:	295d      	cmp	r1, #93	; 0x5d
 800a866:	d0f3      	beq.n	800a850 <__sccl+0x28>
 800a868:	b909      	cbnz	r1, 800a86e <__sccl+0x46>
 800a86a:	4628      	mov	r0, r5
 800a86c:	e7f0      	b.n	800a850 <__sccl+0x28>
 800a86e:	460b      	mov	r3, r1
 800a870:	e7f1      	b.n	800a856 <__sccl+0x2e>
 800a872:	786e      	ldrb	r6, [r5, #1]
 800a874:	2e5d      	cmp	r6, #93	; 0x5d
 800a876:	d0fa      	beq.n	800a86e <__sccl+0x46>
 800a878:	42b3      	cmp	r3, r6
 800a87a:	dcf8      	bgt.n	800a86e <__sccl+0x46>
 800a87c:	4619      	mov	r1, r3
 800a87e:	3502      	adds	r5, #2
 800a880:	3101      	adds	r1, #1
 800a882:	428e      	cmp	r6, r1
 800a884:	5462      	strb	r2, [r4, r1]
 800a886:	dcfb      	bgt.n	800a880 <__sccl+0x58>
 800a888:	1af1      	subs	r1, r6, r3
 800a88a:	3901      	subs	r1, #1
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	bfa8      	it	ge
 800a890:	2100      	movge	r1, #0
 800a892:	1c58      	adds	r0, r3, #1
 800a894:	1843      	adds	r3, r0, r1
 800a896:	e7e0      	b.n	800a85a <__sccl+0x32>

0800a898 <_strtol_l.constprop.0>:
 800a898:	2b01      	cmp	r3, #1
 800a89a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a89e:	4680      	mov	r8, r0
 800a8a0:	d001      	beq.n	800a8a6 <_strtol_l.constprop.0+0xe>
 800a8a2:	2b24      	cmp	r3, #36	; 0x24
 800a8a4:	d906      	bls.n	800a8b4 <_strtol_l.constprop.0+0x1c>
 800a8a6:	f7fe fd9f 	bl	80093e8 <__errno>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	4f35      	ldr	r7, [pc, #212]	; (800a98c <_strtol_l.constprop.0+0xf4>)
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8be:	5de6      	ldrb	r6, [r4, r7]
 800a8c0:	f016 0608 	ands.w	r6, r6, #8
 800a8c4:	d1f8      	bne.n	800a8b8 <_strtol_l.constprop.0+0x20>
 800a8c6:	2c2d      	cmp	r4, #45	; 0x2d
 800a8c8:	d12f      	bne.n	800a92a <_strtol_l.constprop.0+0x92>
 800a8ca:	2601      	movs	r6, #1
 800a8cc:	782c      	ldrb	r4, [r5, #0]
 800a8ce:	1c85      	adds	r5, r0, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d057      	beq.n	800a984 <_strtol_l.constprop.0+0xec>
 800a8d4:	2b10      	cmp	r3, #16
 800a8d6:	d109      	bne.n	800a8ec <_strtol_l.constprop.0+0x54>
 800a8d8:	2c30      	cmp	r4, #48	; 0x30
 800a8da:	d107      	bne.n	800a8ec <_strtol_l.constprop.0+0x54>
 800a8dc:	7828      	ldrb	r0, [r5, #0]
 800a8de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a8e2:	2858      	cmp	r0, #88	; 0x58
 800a8e4:	d149      	bne.n	800a97a <_strtol_l.constprop.0+0xe2>
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	786c      	ldrb	r4, [r5, #1]
 800a8ea:	3502      	adds	r5, #2
 800a8ec:	2700      	movs	r7, #0
 800a8ee:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a8f2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a8f6:	fbbe f9f3 	udiv	r9, lr, r3
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	fb03 ea19 	mls	sl, r3, r9, lr
 800a900:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a904:	f1bc 0f09 	cmp.w	ip, #9
 800a908:	d814      	bhi.n	800a934 <_strtol_l.constprop.0+0x9c>
 800a90a:	4664      	mov	r4, ip
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	dd22      	ble.n	800a956 <_strtol_l.constprop.0+0xbe>
 800a910:	2f00      	cmp	r7, #0
 800a912:	db1d      	blt.n	800a950 <_strtol_l.constprop.0+0xb8>
 800a914:	4581      	cmp	r9, r0
 800a916:	d31b      	bcc.n	800a950 <_strtol_l.constprop.0+0xb8>
 800a918:	d101      	bne.n	800a91e <_strtol_l.constprop.0+0x86>
 800a91a:	45a2      	cmp	sl, r4
 800a91c:	db18      	blt.n	800a950 <_strtol_l.constprop.0+0xb8>
 800a91e:	2701      	movs	r7, #1
 800a920:	fb00 4003 	mla	r0, r0, r3, r4
 800a924:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a928:	e7ea      	b.n	800a900 <_strtol_l.constprop.0+0x68>
 800a92a:	2c2b      	cmp	r4, #43	; 0x2b
 800a92c:	bf04      	itt	eq
 800a92e:	782c      	ldrbeq	r4, [r5, #0]
 800a930:	1c85      	addeq	r5, r0, #2
 800a932:	e7cd      	b.n	800a8d0 <_strtol_l.constprop.0+0x38>
 800a934:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a938:	f1bc 0f19 	cmp.w	ip, #25
 800a93c:	d801      	bhi.n	800a942 <_strtol_l.constprop.0+0xaa>
 800a93e:	3c37      	subs	r4, #55	; 0x37
 800a940:	e7e4      	b.n	800a90c <_strtol_l.constprop.0+0x74>
 800a942:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a946:	f1bc 0f19 	cmp.w	ip, #25
 800a94a:	d804      	bhi.n	800a956 <_strtol_l.constprop.0+0xbe>
 800a94c:	3c57      	subs	r4, #87	; 0x57
 800a94e:	e7dd      	b.n	800a90c <_strtol_l.constprop.0+0x74>
 800a950:	f04f 37ff 	mov.w	r7, #4294967295
 800a954:	e7e6      	b.n	800a924 <_strtol_l.constprop.0+0x8c>
 800a956:	2f00      	cmp	r7, #0
 800a958:	da07      	bge.n	800a96a <_strtol_l.constprop.0+0xd2>
 800a95a:	2322      	movs	r3, #34	; 0x22
 800a95c:	4670      	mov	r0, lr
 800a95e:	f8c8 3000 	str.w	r3, [r8]
 800a962:	2a00      	cmp	r2, #0
 800a964:	d0a4      	beq.n	800a8b0 <_strtol_l.constprop.0+0x18>
 800a966:	1e69      	subs	r1, r5, #1
 800a968:	e005      	b.n	800a976 <_strtol_l.constprop.0+0xde>
 800a96a:	b106      	cbz	r6, 800a96e <_strtol_l.constprop.0+0xd6>
 800a96c:	4240      	negs	r0, r0
 800a96e:	2a00      	cmp	r2, #0
 800a970:	d09e      	beq.n	800a8b0 <_strtol_l.constprop.0+0x18>
 800a972:	2f00      	cmp	r7, #0
 800a974:	d1f7      	bne.n	800a966 <_strtol_l.constprop.0+0xce>
 800a976:	6011      	str	r1, [r2, #0]
 800a978:	e79a      	b.n	800a8b0 <_strtol_l.constprop.0+0x18>
 800a97a:	2430      	movs	r4, #48	; 0x30
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1b5      	bne.n	800a8ec <_strtol_l.constprop.0+0x54>
 800a980:	2308      	movs	r3, #8
 800a982:	e7b3      	b.n	800a8ec <_strtol_l.constprop.0+0x54>
 800a984:	2c30      	cmp	r4, #48	; 0x30
 800a986:	d0a9      	beq.n	800a8dc <_strtol_l.constprop.0+0x44>
 800a988:	230a      	movs	r3, #10
 800a98a:	e7af      	b.n	800a8ec <_strtol_l.constprop.0+0x54>
 800a98c:	0800b48f 	.word	0x0800b48f

0800a990 <_strtol_r>:
 800a990:	f7ff bf82 	b.w	800a898 <_strtol_l.constprop.0>

0800a994 <_strtoul_l.constprop.0>:
 800a994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a998:	4686      	mov	lr, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	4f35      	ldr	r7, [pc, #212]	; (800aa74 <_strtoul_l.constprop.0+0xe0>)
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9a4:	5de6      	ldrb	r6, [r4, r7]
 800a9a6:	f016 0608 	ands.w	r6, r6, #8
 800a9aa:	d1f8      	bne.n	800a99e <_strtoul_l.constprop.0+0xa>
 800a9ac:	2c2d      	cmp	r4, #45	; 0x2d
 800a9ae:	d12f      	bne.n	800aa10 <_strtoul_l.constprop.0+0x7c>
 800a9b0:	2601      	movs	r6, #1
 800a9b2:	782c      	ldrb	r4, [r5, #0]
 800a9b4:	1c85      	adds	r5, r0, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d057      	beq.n	800aa6a <_strtoul_l.constprop.0+0xd6>
 800a9ba:	2b10      	cmp	r3, #16
 800a9bc:	d109      	bne.n	800a9d2 <_strtoul_l.constprop.0+0x3e>
 800a9be:	2c30      	cmp	r4, #48	; 0x30
 800a9c0:	d107      	bne.n	800a9d2 <_strtoul_l.constprop.0+0x3e>
 800a9c2:	7828      	ldrb	r0, [r5, #0]
 800a9c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9c8:	2858      	cmp	r0, #88	; 0x58
 800a9ca:	d149      	bne.n	800aa60 <_strtoul_l.constprop.0+0xcc>
 800a9cc:	2310      	movs	r3, #16
 800a9ce:	786c      	ldrb	r4, [r5, #1]
 800a9d0:	3502      	adds	r5, #2
 800a9d2:	f04f 38ff 	mov.w	r8, #4294967295
 800a9d6:	fbb8 f8f3 	udiv	r8, r8, r3
 800a9da:	2700      	movs	r7, #0
 800a9dc:	fb03 f908 	mul.w	r9, r3, r8
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	ea6f 0909 	mvn.w	r9, r9
 800a9e6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9ea:	f1bc 0f09 	cmp.w	ip, #9
 800a9ee:	d814      	bhi.n	800aa1a <_strtoul_l.constprop.0+0x86>
 800a9f0:	4664      	mov	r4, ip
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	dd22      	ble.n	800aa3c <_strtoul_l.constprop.0+0xa8>
 800a9f6:	2f00      	cmp	r7, #0
 800a9f8:	db1d      	blt.n	800aa36 <_strtoul_l.constprop.0+0xa2>
 800a9fa:	4580      	cmp	r8, r0
 800a9fc:	d31b      	bcc.n	800aa36 <_strtoul_l.constprop.0+0xa2>
 800a9fe:	d101      	bne.n	800aa04 <_strtoul_l.constprop.0+0x70>
 800aa00:	45a1      	cmp	r9, r4
 800aa02:	db18      	blt.n	800aa36 <_strtoul_l.constprop.0+0xa2>
 800aa04:	2701      	movs	r7, #1
 800aa06:	fb00 4003 	mla	r0, r0, r3, r4
 800aa0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa0e:	e7ea      	b.n	800a9e6 <_strtoul_l.constprop.0+0x52>
 800aa10:	2c2b      	cmp	r4, #43	; 0x2b
 800aa12:	bf04      	itt	eq
 800aa14:	782c      	ldrbeq	r4, [r5, #0]
 800aa16:	1c85      	addeq	r5, r0, #2
 800aa18:	e7cd      	b.n	800a9b6 <_strtoul_l.constprop.0+0x22>
 800aa1a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa1e:	f1bc 0f19 	cmp.w	ip, #25
 800aa22:	d801      	bhi.n	800aa28 <_strtoul_l.constprop.0+0x94>
 800aa24:	3c37      	subs	r4, #55	; 0x37
 800aa26:	e7e4      	b.n	800a9f2 <_strtoul_l.constprop.0+0x5e>
 800aa28:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa2c:	f1bc 0f19 	cmp.w	ip, #25
 800aa30:	d804      	bhi.n	800aa3c <_strtoul_l.constprop.0+0xa8>
 800aa32:	3c57      	subs	r4, #87	; 0x57
 800aa34:	e7dd      	b.n	800a9f2 <_strtoul_l.constprop.0+0x5e>
 800aa36:	f04f 37ff 	mov.w	r7, #4294967295
 800aa3a:	e7e6      	b.n	800aa0a <_strtoul_l.constprop.0+0x76>
 800aa3c:	2f00      	cmp	r7, #0
 800aa3e:	da07      	bge.n	800aa50 <_strtoul_l.constprop.0+0xbc>
 800aa40:	2322      	movs	r3, #34	; 0x22
 800aa42:	f04f 30ff 	mov.w	r0, #4294967295
 800aa46:	f8ce 3000 	str.w	r3, [lr]
 800aa4a:	b932      	cbnz	r2, 800aa5a <_strtoul_l.constprop.0+0xc6>
 800aa4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa50:	b106      	cbz	r6, 800aa54 <_strtoul_l.constprop.0+0xc0>
 800aa52:	4240      	negs	r0, r0
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	d0f9      	beq.n	800aa4c <_strtoul_l.constprop.0+0xb8>
 800aa58:	b107      	cbz	r7, 800aa5c <_strtoul_l.constprop.0+0xc8>
 800aa5a:	1e69      	subs	r1, r5, #1
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	e7f5      	b.n	800aa4c <_strtoul_l.constprop.0+0xb8>
 800aa60:	2430      	movs	r4, #48	; 0x30
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1b5      	bne.n	800a9d2 <_strtoul_l.constprop.0+0x3e>
 800aa66:	2308      	movs	r3, #8
 800aa68:	e7b3      	b.n	800a9d2 <_strtoul_l.constprop.0+0x3e>
 800aa6a:	2c30      	cmp	r4, #48	; 0x30
 800aa6c:	d0a9      	beq.n	800a9c2 <_strtoul_l.constprop.0+0x2e>
 800aa6e:	230a      	movs	r3, #10
 800aa70:	e7af      	b.n	800a9d2 <_strtoul_l.constprop.0+0x3e>
 800aa72:	bf00      	nop
 800aa74:	0800b48f 	.word	0x0800b48f

0800aa78 <_strtoul_r>:
 800aa78:	f7ff bf8c 	b.w	800a994 <_strtoul_l.constprop.0>

0800aa7c <__submore>:
 800aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa80:	460c      	mov	r4, r1
 800aa82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	d11b      	bne.n	800aac4 <__submore+0x48>
 800aa8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aa90:	f7fe fec4 	bl	800981c <_malloc_r>
 800aa94:	b918      	cbnz	r0, 800aa9e <__submore+0x22>
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa2:	63a3      	str	r3, [r4, #56]	; 0x38
 800aaa4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aaa8:	6360      	str	r0, [r4, #52]	; 0x34
 800aaaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aaae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aab2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aab6:	7043      	strb	r3, [r0, #1]
 800aab8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aabc:	7003      	strb	r3, [r0, #0]
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	2000      	movs	r0, #0
 800aac2:	e7ea      	b.n	800aa9a <__submore+0x1e>
 800aac4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aac6:	0077      	lsls	r7, r6, #1
 800aac8:	463a      	mov	r2, r7
 800aaca:	f000 fb27 	bl	800b11c <_realloc_r>
 800aace:	4605      	mov	r5, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d0e0      	beq.n	800aa96 <__submore+0x1a>
 800aad4:	eb00 0806 	add.w	r8, r0, r6
 800aad8:	4601      	mov	r1, r0
 800aada:	4632      	mov	r2, r6
 800aadc:	4640      	mov	r0, r8
 800aade:	f7fe fcad 	bl	800943c <memcpy>
 800aae2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aae6:	f8c4 8000 	str.w	r8, [r4]
 800aaea:	e7e9      	b.n	800aac0 <__submore+0x44>

0800aaec <__swbuf_r>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	460e      	mov	r6, r1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	b118      	cbz	r0, 800aafe <__swbuf_r+0x12>
 800aaf6:	6983      	ldr	r3, [r0, #24]
 800aaf8:	b90b      	cbnz	r3, 800aafe <__swbuf_r+0x12>
 800aafa:	f000 f9d5 	bl	800aea8 <__sinit>
 800aafe:	4b21      	ldr	r3, [pc, #132]	; (800ab84 <__swbuf_r+0x98>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d12b      	bne.n	800ab5c <__swbuf_r+0x70>
 800ab04:	686c      	ldr	r4, [r5, #4]
 800ab06:	69a3      	ldr	r3, [r4, #24]
 800ab08:	60a3      	str	r3, [r4, #8]
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	071a      	lsls	r2, r3, #28
 800ab0e:	d52f      	bpl.n	800ab70 <__swbuf_r+0x84>
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	b36b      	cbz	r3, 800ab70 <__swbuf_r+0x84>
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	6820      	ldr	r0, [r4, #0]
 800ab18:	b2f6      	uxtb	r6, r6
 800ab1a:	1ac0      	subs	r0, r0, r3
 800ab1c:	6963      	ldr	r3, [r4, #20]
 800ab1e:	4637      	mov	r7, r6
 800ab20:	4283      	cmp	r3, r0
 800ab22:	dc04      	bgt.n	800ab2e <__swbuf_r+0x42>
 800ab24:	4621      	mov	r1, r4
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 f92a 	bl	800ad80 <_fflush_r>
 800ab2c:	bb30      	cbnz	r0, 800ab7c <__swbuf_r+0x90>
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	3001      	adds	r0, #1
 800ab32:	3b01      	subs	r3, #1
 800ab34:	60a3      	str	r3, [r4, #8]
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	701e      	strb	r6, [r3, #0]
 800ab3e:	6963      	ldr	r3, [r4, #20]
 800ab40:	4283      	cmp	r3, r0
 800ab42:	d004      	beq.n	800ab4e <__swbuf_r+0x62>
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	07db      	lsls	r3, r3, #31
 800ab48:	d506      	bpl.n	800ab58 <__swbuf_r+0x6c>
 800ab4a:	2e0a      	cmp	r6, #10
 800ab4c:	d104      	bne.n	800ab58 <__swbuf_r+0x6c>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 f915 	bl	800ad80 <_fflush_r>
 800ab56:	b988      	cbnz	r0, 800ab7c <__swbuf_r+0x90>
 800ab58:	4638      	mov	r0, r7
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <__swbuf_r+0x9c>)
 800ab5e:	429c      	cmp	r4, r3
 800ab60:	d101      	bne.n	800ab66 <__swbuf_r+0x7a>
 800ab62:	68ac      	ldr	r4, [r5, #8]
 800ab64:	e7cf      	b.n	800ab06 <__swbuf_r+0x1a>
 800ab66:	4b09      	ldr	r3, [pc, #36]	; (800ab8c <__swbuf_r+0xa0>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	bf08      	it	eq
 800ab6c:	68ec      	ldreq	r4, [r5, #12]
 800ab6e:	e7ca      	b.n	800ab06 <__swbuf_r+0x1a>
 800ab70:	4621      	mov	r1, r4
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 f80c 	bl	800ab90 <__swsetup_r>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d0cb      	beq.n	800ab14 <__swbuf_r+0x28>
 800ab7c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab80:	e7ea      	b.n	800ab58 <__swbuf_r+0x6c>
 800ab82:	bf00      	nop
 800ab84:	0800b5b0 	.word	0x0800b5b0
 800ab88:	0800b5d0 	.word	0x0800b5d0
 800ab8c:	0800b590 	.word	0x0800b590

0800ab90 <__swsetup_r>:
 800ab90:	4b32      	ldr	r3, [pc, #200]	; (800ac5c <__swsetup_r+0xcc>)
 800ab92:	b570      	push	{r4, r5, r6, lr}
 800ab94:	681d      	ldr	r5, [r3, #0]
 800ab96:	4606      	mov	r6, r0
 800ab98:	460c      	mov	r4, r1
 800ab9a:	b125      	cbz	r5, 800aba6 <__swsetup_r+0x16>
 800ab9c:	69ab      	ldr	r3, [r5, #24]
 800ab9e:	b913      	cbnz	r3, 800aba6 <__swsetup_r+0x16>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 f981 	bl	800aea8 <__sinit>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__swsetup_r+0xd0>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d10f      	bne.n	800abcc <__swsetup_r+0x3c>
 800abac:	686c      	ldr	r4, [r5, #4]
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abb4:	0719      	lsls	r1, r3, #28
 800abb6:	d42c      	bmi.n	800ac12 <__swsetup_r+0x82>
 800abb8:	06dd      	lsls	r5, r3, #27
 800abba:	d411      	bmi.n	800abe0 <__swsetup_r+0x50>
 800abbc:	2309      	movs	r3, #9
 800abbe:	6033      	str	r3, [r6, #0]
 800abc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	e03e      	b.n	800ac4a <__swsetup_r+0xba>
 800abcc:	4b25      	ldr	r3, [pc, #148]	; (800ac64 <__swsetup_r+0xd4>)
 800abce:	429c      	cmp	r4, r3
 800abd0:	d101      	bne.n	800abd6 <__swsetup_r+0x46>
 800abd2:	68ac      	ldr	r4, [r5, #8]
 800abd4:	e7eb      	b.n	800abae <__swsetup_r+0x1e>
 800abd6:	4b24      	ldr	r3, [pc, #144]	; (800ac68 <__swsetup_r+0xd8>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	bf08      	it	eq
 800abdc:	68ec      	ldreq	r4, [r5, #12]
 800abde:	e7e6      	b.n	800abae <__swsetup_r+0x1e>
 800abe0:	0758      	lsls	r0, r3, #29
 800abe2:	d512      	bpl.n	800ac0a <__swsetup_r+0x7a>
 800abe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abe6:	b141      	cbz	r1, 800abfa <__swsetup_r+0x6a>
 800abe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abec:	4299      	cmp	r1, r3
 800abee:	d002      	beq.n	800abf6 <__swsetup_r+0x66>
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7fe fdab 	bl	800974c <_free_r>
 800abf6:	2300      	movs	r3, #0
 800abf8:	6363      	str	r3, [r4, #52]	; 0x34
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac00:	81a3      	strh	r3, [r4, #12]
 800ac02:	2300      	movs	r3, #0
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	f043 0308 	orr.w	r3, r3, #8
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	b94b      	cbnz	r3, 800ac2a <__swsetup_r+0x9a>
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac20:	d003      	beq.n	800ac2a <__swsetup_r+0x9a>
 800ac22:	4621      	mov	r1, r4
 800ac24:	4630      	mov	r0, r6
 800ac26:	f000 fa05 	bl	800b034 <__smakebuf_r>
 800ac2a:	89a0      	ldrh	r0, [r4, #12]
 800ac2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac30:	f010 0301 	ands.w	r3, r0, #1
 800ac34:	d00a      	beq.n	800ac4c <__swsetup_r+0xbc>
 800ac36:	2300      	movs	r3, #0
 800ac38:	60a3      	str	r3, [r4, #8]
 800ac3a:	6963      	ldr	r3, [r4, #20]
 800ac3c:	425b      	negs	r3, r3
 800ac3e:	61a3      	str	r3, [r4, #24]
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	b943      	cbnz	r3, 800ac56 <__swsetup_r+0xc6>
 800ac44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac48:	d1ba      	bne.n	800abc0 <__swsetup_r+0x30>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	0781      	lsls	r1, r0, #30
 800ac4e:	bf58      	it	pl
 800ac50:	6963      	ldrpl	r3, [r4, #20]
 800ac52:	60a3      	str	r3, [r4, #8]
 800ac54:	e7f4      	b.n	800ac40 <__swsetup_r+0xb0>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e7f7      	b.n	800ac4a <__swsetup_r+0xba>
 800ac5a:	bf00      	nop
 800ac5c:	20000184 	.word	0x20000184
 800ac60:	0800b5b0 	.word	0x0800b5b0
 800ac64:	0800b5d0 	.word	0x0800b5d0
 800ac68:	0800b590 	.word	0x0800b590

0800ac6c <abort>:
 800ac6c:	2006      	movs	r0, #6
 800ac6e:	b508      	push	{r3, lr}
 800ac70:	f000 faac 	bl	800b1cc <raise>
 800ac74:	2001      	movs	r0, #1
 800ac76:	f7f6 f802 	bl	8000c7e <_exit>
	...

0800ac7c <__sflush_r>:
 800ac7c:	898a      	ldrh	r2, [r1, #12]
 800ac7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac80:	4605      	mov	r5, r0
 800ac82:	0710      	lsls	r0, r2, #28
 800ac84:	460c      	mov	r4, r1
 800ac86:	d457      	bmi.n	800ad38 <__sflush_r+0xbc>
 800ac88:	684b      	ldr	r3, [r1, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dc04      	bgt.n	800ac98 <__sflush_r+0x1c>
 800ac8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc01      	bgt.n	800ac98 <__sflush_r+0x1c>
 800ac94:	2000      	movs	r0, #0
 800ac96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	d0fa      	beq.n	800ac94 <__sflush_r+0x18>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aca4:	682f      	ldr	r7, [r5, #0]
 800aca6:	602b      	str	r3, [r5, #0]
 800aca8:	d032      	beq.n	800ad10 <__sflush_r+0x94>
 800acaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	075a      	lsls	r2, r3, #29
 800acb0:	d505      	bpl.n	800acbe <__sflush_r+0x42>
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	1ac0      	subs	r0, r0, r3
 800acb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acb8:	b10b      	cbz	r3, 800acbe <__sflush_r+0x42>
 800acba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acbc:	1ac0      	subs	r0, r0, r3
 800acbe:	2300      	movs	r3, #0
 800acc0:	4602      	mov	r2, r0
 800acc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acc4:	4628      	mov	r0, r5
 800acc6:	6a21      	ldr	r1, [r4, #32]
 800acc8:	47b0      	blx	r6
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	d106      	bne.n	800acde <__sflush_r+0x62>
 800acd0:	6829      	ldr	r1, [r5, #0]
 800acd2:	291d      	cmp	r1, #29
 800acd4:	d82c      	bhi.n	800ad30 <__sflush_r+0xb4>
 800acd6:	4a29      	ldr	r2, [pc, #164]	; (800ad7c <__sflush_r+0x100>)
 800acd8:	40ca      	lsrs	r2, r1
 800acda:	07d6      	lsls	r6, r2, #31
 800acdc:	d528      	bpl.n	800ad30 <__sflush_r+0xb4>
 800acde:	2200      	movs	r2, #0
 800ace0:	6062      	str	r2, [r4, #4]
 800ace2:	6922      	ldr	r2, [r4, #16]
 800ace4:	04d9      	lsls	r1, r3, #19
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	d504      	bpl.n	800acf4 <__sflush_r+0x78>
 800acea:	1c42      	adds	r2, r0, #1
 800acec:	d101      	bne.n	800acf2 <__sflush_r+0x76>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	b903      	cbnz	r3, 800acf4 <__sflush_r+0x78>
 800acf2:	6560      	str	r0, [r4, #84]	; 0x54
 800acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf6:	602f      	str	r7, [r5, #0]
 800acf8:	2900      	cmp	r1, #0
 800acfa:	d0cb      	beq.n	800ac94 <__sflush_r+0x18>
 800acfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad00:	4299      	cmp	r1, r3
 800ad02:	d002      	beq.n	800ad0a <__sflush_r+0x8e>
 800ad04:	4628      	mov	r0, r5
 800ad06:	f7fe fd21 	bl	800974c <_free_r>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad0e:	e7c2      	b.n	800ac96 <__sflush_r+0x1a>
 800ad10:	6a21      	ldr	r1, [r4, #32]
 800ad12:	2301      	movs	r3, #1
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b0      	blx	r6
 800ad18:	1c41      	adds	r1, r0, #1
 800ad1a:	d1c7      	bne.n	800acac <__sflush_r+0x30>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c4      	beq.n	800acac <__sflush_r+0x30>
 800ad22:	2b1d      	cmp	r3, #29
 800ad24:	d001      	beq.n	800ad2a <__sflush_r+0xae>
 800ad26:	2b16      	cmp	r3, #22
 800ad28:	d101      	bne.n	800ad2e <__sflush_r+0xb2>
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	e7b2      	b.n	800ac94 <__sflush_r+0x18>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7ae      	b.n	800ac96 <__sflush_r+0x1a>
 800ad38:	690f      	ldr	r7, [r1, #16]
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	d0aa      	beq.n	800ac94 <__sflush_r+0x18>
 800ad3e:	0793      	lsls	r3, r2, #30
 800ad40:	bf18      	it	ne
 800ad42:	2300      	movne	r3, #0
 800ad44:	680e      	ldr	r6, [r1, #0]
 800ad46:	bf08      	it	eq
 800ad48:	694b      	ldreq	r3, [r1, #20]
 800ad4a:	1bf6      	subs	r6, r6, r7
 800ad4c:	600f      	str	r7, [r1, #0]
 800ad4e:	608b      	str	r3, [r1, #8]
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	dd9f      	ble.n	800ac94 <__sflush_r+0x18>
 800ad54:	4633      	mov	r3, r6
 800ad56:	463a      	mov	r2, r7
 800ad58:	4628      	mov	r0, r5
 800ad5a:	6a21      	ldr	r1, [r4, #32]
 800ad5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad60:	47e0      	blx	ip
 800ad62:	2800      	cmp	r0, #0
 800ad64:	dc06      	bgt.n	800ad74 <__sflush_r+0xf8>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	e790      	b.n	800ac96 <__sflush_r+0x1a>
 800ad74:	4407      	add	r7, r0
 800ad76:	1a36      	subs	r6, r6, r0
 800ad78:	e7ea      	b.n	800ad50 <__sflush_r+0xd4>
 800ad7a:	bf00      	nop
 800ad7c:	20400001 	.word	0x20400001

0800ad80 <_fflush_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	690b      	ldr	r3, [r1, #16]
 800ad84:	4605      	mov	r5, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	b913      	cbnz	r3, 800ad90 <_fflush_r+0x10>
 800ad8a:	2500      	movs	r5, #0
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	b118      	cbz	r0, 800ad9a <_fflush_r+0x1a>
 800ad92:	6983      	ldr	r3, [r0, #24]
 800ad94:	b90b      	cbnz	r3, 800ad9a <_fflush_r+0x1a>
 800ad96:	f000 f887 	bl	800aea8 <__sinit>
 800ad9a:	4b14      	ldr	r3, [pc, #80]	; (800adec <_fflush_r+0x6c>)
 800ad9c:	429c      	cmp	r4, r3
 800ad9e:	d11b      	bne.n	800add8 <_fflush_r+0x58>
 800ada0:	686c      	ldr	r4, [r5, #4]
 800ada2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0ef      	beq.n	800ad8a <_fflush_r+0xa>
 800adaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adac:	07d0      	lsls	r0, r2, #31
 800adae:	d404      	bmi.n	800adba <_fflush_r+0x3a>
 800adb0:	0599      	lsls	r1, r3, #22
 800adb2:	d402      	bmi.n	800adba <_fflush_r+0x3a>
 800adb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb6:	f000 f915 	bl	800afe4 <__retarget_lock_acquire_recursive>
 800adba:	4628      	mov	r0, r5
 800adbc:	4621      	mov	r1, r4
 800adbe:	f7ff ff5d 	bl	800ac7c <__sflush_r>
 800adc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adc4:	4605      	mov	r5, r0
 800adc6:	07da      	lsls	r2, r3, #31
 800adc8:	d4e0      	bmi.n	800ad8c <_fflush_r+0xc>
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	059b      	lsls	r3, r3, #22
 800adce:	d4dd      	bmi.n	800ad8c <_fflush_r+0xc>
 800add0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800add2:	f000 f908 	bl	800afe6 <__retarget_lock_release_recursive>
 800add6:	e7d9      	b.n	800ad8c <_fflush_r+0xc>
 800add8:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <_fflush_r+0x70>)
 800adda:	429c      	cmp	r4, r3
 800addc:	d101      	bne.n	800ade2 <_fflush_r+0x62>
 800adde:	68ac      	ldr	r4, [r5, #8]
 800ade0:	e7df      	b.n	800ada2 <_fflush_r+0x22>
 800ade2:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <_fflush_r+0x74>)
 800ade4:	429c      	cmp	r4, r3
 800ade6:	bf08      	it	eq
 800ade8:	68ec      	ldreq	r4, [r5, #12]
 800adea:	e7da      	b.n	800ada2 <_fflush_r+0x22>
 800adec:	0800b5b0 	.word	0x0800b5b0
 800adf0:	0800b5d0 	.word	0x0800b5d0
 800adf4:	0800b590 	.word	0x0800b590

0800adf8 <std>:
 800adf8:	2300      	movs	r3, #0
 800adfa:	b510      	push	{r4, lr}
 800adfc:	4604      	mov	r4, r0
 800adfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ae02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	8181      	strh	r1, [r0, #12]
 800ae0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae0c:	81c2      	strh	r2, [r0, #14]
 800ae0e:	6183      	str	r3, [r0, #24]
 800ae10:	4619      	mov	r1, r3
 800ae12:	2208      	movs	r2, #8
 800ae14:	305c      	adds	r0, #92	; 0x5c
 800ae16:	f7fe fb1f 	bl	8009458 <memset>
 800ae1a:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <std+0x38>)
 800ae1c:	6224      	str	r4, [r4, #32]
 800ae1e:	6263      	str	r3, [r4, #36]	; 0x24
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <std+0x3c>)
 800ae22:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <std+0x40>)
 800ae26:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <std+0x44>)
 800ae2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	bf00      	nop
 800ae30:	080094bd 	.word	0x080094bd
 800ae34:	080094e3 	.word	0x080094e3
 800ae38:	0800951b 	.word	0x0800951b
 800ae3c:	0800953f 	.word	0x0800953f

0800ae40 <_cleanup_r>:
 800ae40:	4901      	ldr	r1, [pc, #4]	; (800ae48 <_cleanup_r+0x8>)
 800ae42:	f000 b8af 	b.w	800afa4 <_fwalk_reent>
 800ae46:	bf00      	nop
 800ae48:	0800ad81 	.word	0x0800ad81

0800ae4c <__sfmoreglue>:
 800ae4c:	2268      	movs	r2, #104	; 0x68
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	1e4d      	subs	r5, r1, #1
 800ae52:	4355      	muls	r5, r2
 800ae54:	460e      	mov	r6, r1
 800ae56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae5a:	f7fe fcdf 	bl	800981c <_malloc_r>
 800ae5e:	4604      	mov	r4, r0
 800ae60:	b140      	cbz	r0, 800ae74 <__sfmoreglue+0x28>
 800ae62:	2100      	movs	r1, #0
 800ae64:	e9c0 1600 	strd	r1, r6, [r0]
 800ae68:	300c      	adds	r0, #12
 800ae6a:	60a0      	str	r0, [r4, #8]
 800ae6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae70:	f7fe faf2 	bl	8009458 <memset>
 800ae74:	4620      	mov	r0, r4
 800ae76:	bd70      	pop	{r4, r5, r6, pc}

0800ae78 <__sfp_lock_acquire>:
 800ae78:	4801      	ldr	r0, [pc, #4]	; (800ae80 <__sfp_lock_acquire+0x8>)
 800ae7a:	f000 b8b3 	b.w	800afe4 <__retarget_lock_acquire_recursive>
 800ae7e:	bf00      	nop
 800ae80:	2000153d 	.word	0x2000153d

0800ae84 <__sfp_lock_release>:
 800ae84:	4801      	ldr	r0, [pc, #4]	; (800ae8c <__sfp_lock_release+0x8>)
 800ae86:	f000 b8ae 	b.w	800afe6 <__retarget_lock_release_recursive>
 800ae8a:	bf00      	nop
 800ae8c:	2000153d 	.word	0x2000153d

0800ae90 <__sinit_lock_acquire>:
 800ae90:	4801      	ldr	r0, [pc, #4]	; (800ae98 <__sinit_lock_acquire+0x8>)
 800ae92:	f000 b8a7 	b.w	800afe4 <__retarget_lock_acquire_recursive>
 800ae96:	bf00      	nop
 800ae98:	2000153e 	.word	0x2000153e

0800ae9c <__sinit_lock_release>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__sinit_lock_release+0x8>)
 800ae9e:	f000 b8a2 	b.w	800afe6 <__retarget_lock_release_recursive>
 800aea2:	bf00      	nop
 800aea4:	2000153e 	.word	0x2000153e

0800aea8 <__sinit>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	4604      	mov	r4, r0
 800aeac:	f7ff fff0 	bl	800ae90 <__sinit_lock_acquire>
 800aeb0:	69a3      	ldr	r3, [r4, #24]
 800aeb2:	b11b      	cbz	r3, 800aebc <__sinit+0x14>
 800aeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeb8:	f7ff bff0 	b.w	800ae9c <__sinit_lock_release>
 800aebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aec0:	6523      	str	r3, [r4, #80]	; 0x50
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <__sinit+0x68>)
 800aec4:	4a13      	ldr	r2, [pc, #76]	; (800af14 <__sinit+0x6c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	bf08      	it	eq
 800aece:	2301      	moveq	r3, #1
 800aed0:	4620      	mov	r0, r4
 800aed2:	bf08      	it	eq
 800aed4:	61a3      	streq	r3, [r4, #24]
 800aed6:	f000 f81f 	bl	800af18 <__sfp>
 800aeda:	6060      	str	r0, [r4, #4]
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f81b 	bl	800af18 <__sfp>
 800aee2:	60a0      	str	r0, [r4, #8]
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 f817 	bl	800af18 <__sfp>
 800aeea:	2200      	movs	r2, #0
 800aeec:	2104      	movs	r1, #4
 800aeee:	60e0      	str	r0, [r4, #12]
 800aef0:	6860      	ldr	r0, [r4, #4]
 800aef2:	f7ff ff81 	bl	800adf8 <std>
 800aef6:	2201      	movs	r2, #1
 800aef8:	2109      	movs	r1, #9
 800aefa:	68a0      	ldr	r0, [r4, #8]
 800aefc:	f7ff ff7c 	bl	800adf8 <std>
 800af00:	2202      	movs	r2, #2
 800af02:	2112      	movs	r1, #18
 800af04:	68e0      	ldr	r0, [r4, #12]
 800af06:	f7ff ff77 	bl	800adf8 <std>
 800af0a:	2301      	movs	r3, #1
 800af0c:	61a3      	str	r3, [r4, #24]
 800af0e:	e7d1      	b.n	800aeb4 <__sinit+0xc>
 800af10:	0800b38c 	.word	0x0800b38c
 800af14:	0800ae41 	.word	0x0800ae41

0800af18 <__sfp>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	4607      	mov	r7, r0
 800af1c:	f7ff ffac 	bl	800ae78 <__sfp_lock_acquire>
 800af20:	4b1e      	ldr	r3, [pc, #120]	; (800af9c <__sfp+0x84>)
 800af22:	681e      	ldr	r6, [r3, #0]
 800af24:	69b3      	ldr	r3, [r6, #24]
 800af26:	b913      	cbnz	r3, 800af2e <__sfp+0x16>
 800af28:	4630      	mov	r0, r6
 800af2a:	f7ff ffbd 	bl	800aea8 <__sinit>
 800af2e:	3648      	adds	r6, #72	; 0x48
 800af30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af34:	3b01      	subs	r3, #1
 800af36:	d503      	bpl.n	800af40 <__sfp+0x28>
 800af38:	6833      	ldr	r3, [r6, #0]
 800af3a:	b30b      	cbz	r3, 800af80 <__sfp+0x68>
 800af3c:	6836      	ldr	r6, [r6, #0]
 800af3e:	e7f7      	b.n	800af30 <__sfp+0x18>
 800af40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af44:	b9d5      	cbnz	r5, 800af7c <__sfp+0x64>
 800af46:	4b16      	ldr	r3, [pc, #88]	; (800afa0 <__sfp+0x88>)
 800af48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af4c:	60e3      	str	r3, [r4, #12]
 800af4e:	6665      	str	r5, [r4, #100]	; 0x64
 800af50:	f000 f847 	bl	800afe2 <__retarget_lock_init_recursive>
 800af54:	f7ff ff96 	bl	800ae84 <__sfp_lock_release>
 800af58:	2208      	movs	r2, #8
 800af5a:	4629      	mov	r1, r5
 800af5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af64:	6025      	str	r5, [r4, #0]
 800af66:	61a5      	str	r5, [r4, #24]
 800af68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af6c:	f7fe fa74 	bl	8009458 <memset>
 800af70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af78:	4620      	mov	r0, r4
 800af7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af7c:	3468      	adds	r4, #104	; 0x68
 800af7e:	e7d9      	b.n	800af34 <__sfp+0x1c>
 800af80:	2104      	movs	r1, #4
 800af82:	4638      	mov	r0, r7
 800af84:	f7ff ff62 	bl	800ae4c <__sfmoreglue>
 800af88:	4604      	mov	r4, r0
 800af8a:	6030      	str	r0, [r6, #0]
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1d5      	bne.n	800af3c <__sfp+0x24>
 800af90:	f7ff ff78 	bl	800ae84 <__sfp_lock_release>
 800af94:	230c      	movs	r3, #12
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	e7ee      	b.n	800af78 <__sfp+0x60>
 800af9a:	bf00      	nop
 800af9c:	0800b38c 	.word	0x0800b38c
 800afa0:	ffff0001 	.word	0xffff0001

0800afa4 <_fwalk_reent>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4606      	mov	r6, r0
 800afaa:	4688      	mov	r8, r1
 800afac:	2700      	movs	r7, #0
 800afae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afb6:	f1b9 0901 	subs.w	r9, r9, #1
 800afba:	d505      	bpl.n	800afc8 <_fwalk_reent+0x24>
 800afbc:	6824      	ldr	r4, [r4, #0]
 800afbe:	2c00      	cmp	r4, #0
 800afc0:	d1f7      	bne.n	800afb2 <_fwalk_reent+0xe>
 800afc2:	4638      	mov	r0, r7
 800afc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc8:	89ab      	ldrh	r3, [r5, #12]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d907      	bls.n	800afde <_fwalk_reent+0x3a>
 800afce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afd2:	3301      	adds	r3, #1
 800afd4:	d003      	beq.n	800afde <_fwalk_reent+0x3a>
 800afd6:	4629      	mov	r1, r5
 800afd8:	4630      	mov	r0, r6
 800afda:	47c0      	blx	r8
 800afdc:	4307      	orrs	r7, r0
 800afde:	3568      	adds	r5, #104	; 0x68
 800afe0:	e7e9      	b.n	800afb6 <_fwalk_reent+0x12>

0800afe2 <__retarget_lock_init_recursive>:
 800afe2:	4770      	bx	lr

0800afe4 <__retarget_lock_acquire_recursive>:
 800afe4:	4770      	bx	lr

0800afe6 <__retarget_lock_release_recursive>:
 800afe6:	4770      	bx	lr

0800afe8 <__swhatbuf_r>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	460e      	mov	r6, r1
 800afec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff0:	4614      	mov	r4, r2
 800aff2:	2900      	cmp	r1, #0
 800aff4:	461d      	mov	r5, r3
 800aff6:	b096      	sub	sp, #88	; 0x58
 800aff8:	da08      	bge.n	800b00c <__swhatbuf_r+0x24>
 800affa:	2200      	movs	r2, #0
 800affc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	061a      	lsls	r2, r3, #24
 800b004:	d410      	bmi.n	800b028 <__swhatbuf_r+0x40>
 800b006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b00a:	e00e      	b.n	800b02a <__swhatbuf_r+0x42>
 800b00c:	466a      	mov	r2, sp
 800b00e:	f000 f8f9 	bl	800b204 <_fstat_r>
 800b012:	2800      	cmp	r0, #0
 800b014:	dbf1      	blt.n	800affa <__swhatbuf_r+0x12>
 800b016:	9a01      	ldr	r2, [sp, #4]
 800b018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b01c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b020:	425a      	negs	r2, r3
 800b022:	415a      	adcs	r2, r3
 800b024:	602a      	str	r2, [r5, #0]
 800b026:	e7ee      	b.n	800b006 <__swhatbuf_r+0x1e>
 800b028:	2340      	movs	r3, #64	; 0x40
 800b02a:	2000      	movs	r0, #0
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	b016      	add	sp, #88	; 0x58
 800b030:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b034 <__smakebuf_r>:
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b038:	079d      	lsls	r5, r3, #30
 800b03a:	4606      	mov	r6, r0
 800b03c:	460c      	mov	r4, r1
 800b03e:	d507      	bpl.n	800b050 <__smakebuf_r+0x1c>
 800b040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	6123      	str	r3, [r4, #16]
 800b048:	2301      	movs	r3, #1
 800b04a:	6163      	str	r3, [r4, #20]
 800b04c:	b002      	add	sp, #8
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	466a      	mov	r2, sp
 800b052:	ab01      	add	r3, sp, #4
 800b054:	f7ff ffc8 	bl	800afe8 <__swhatbuf_r>
 800b058:	9900      	ldr	r1, [sp, #0]
 800b05a:	4605      	mov	r5, r0
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7fe fbdd 	bl	800981c <_malloc_r>
 800b062:	b948      	cbnz	r0, 800b078 <__smakebuf_r+0x44>
 800b064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b068:	059a      	lsls	r2, r3, #22
 800b06a:	d4ef      	bmi.n	800b04c <__smakebuf_r+0x18>
 800b06c:	f023 0303 	bic.w	r3, r3, #3
 800b070:	f043 0302 	orr.w	r3, r3, #2
 800b074:	81a3      	strh	r3, [r4, #12]
 800b076:	e7e3      	b.n	800b040 <__smakebuf_r+0xc>
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <__smakebuf_r+0x7c>)
 800b07a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	6120      	str	r0, [r4, #16]
 800b08a:	6163      	str	r3, [r4, #20]
 800b08c:	9b01      	ldr	r3, [sp, #4]
 800b08e:	b15b      	cbz	r3, 800b0a8 <__smakebuf_r+0x74>
 800b090:	4630      	mov	r0, r6
 800b092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b096:	f000 f8c7 	bl	800b228 <_isatty_r>
 800b09a:	b128      	cbz	r0, 800b0a8 <__smakebuf_r+0x74>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	f043 0301 	orr.w	r3, r3, #1
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	89a0      	ldrh	r0, [r4, #12]
 800b0aa:	4305      	orrs	r5, r0
 800b0ac:	81a5      	strh	r5, [r4, #12]
 800b0ae:	e7cd      	b.n	800b04c <__smakebuf_r+0x18>
 800b0b0:	0800ae41 	.word	0x0800ae41

0800b0b4 <memchr>:
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	b510      	push	{r4, lr}
 800b0b8:	b2c9      	uxtb	r1, r1
 800b0ba:	4402      	add	r2, r0
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	d101      	bne.n	800b0c6 <memchr+0x12>
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e003      	b.n	800b0ce <memchr+0x1a>
 800b0c6:	7804      	ldrb	r4, [r0, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	428c      	cmp	r4, r1
 800b0cc:	d1f6      	bne.n	800b0bc <memchr+0x8>
 800b0ce:	bd10      	pop	{r4, pc}

0800b0d0 <memmove>:
 800b0d0:	4288      	cmp	r0, r1
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	eb01 0402 	add.w	r4, r1, r2
 800b0d8:	d902      	bls.n	800b0e0 <memmove+0x10>
 800b0da:	4284      	cmp	r4, r0
 800b0dc:	4623      	mov	r3, r4
 800b0de:	d807      	bhi.n	800b0f0 <memmove+0x20>
 800b0e0:	1e43      	subs	r3, r0, #1
 800b0e2:	42a1      	cmp	r1, r4
 800b0e4:	d008      	beq.n	800b0f8 <memmove+0x28>
 800b0e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ee:	e7f8      	b.n	800b0e2 <memmove+0x12>
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	4402      	add	r2, r0
 800b0f4:	428a      	cmp	r2, r1
 800b0f6:	d100      	bne.n	800b0fa <memmove+0x2a>
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b102:	e7f7      	b.n	800b0f4 <memmove+0x24>

0800b104 <__malloc_lock>:
 800b104:	4801      	ldr	r0, [pc, #4]	; (800b10c <__malloc_lock+0x8>)
 800b106:	f7ff bf6d 	b.w	800afe4 <__retarget_lock_acquire_recursive>
 800b10a:	bf00      	nop
 800b10c:	2000153c 	.word	0x2000153c

0800b110 <__malloc_unlock>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__malloc_unlock+0x8>)
 800b112:	f7ff bf68 	b.w	800afe6 <__retarget_lock_release_recursive>
 800b116:	bf00      	nop
 800b118:	2000153c 	.word	0x2000153c

0800b11c <_realloc_r>:
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b120:	4680      	mov	r8, r0
 800b122:	4614      	mov	r4, r2
 800b124:	460e      	mov	r6, r1
 800b126:	b921      	cbnz	r1, 800b132 <_realloc_r+0x16>
 800b128:	4611      	mov	r1, r2
 800b12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b12e:	f7fe bb75 	b.w	800981c <_malloc_r>
 800b132:	b92a      	cbnz	r2, 800b140 <_realloc_r+0x24>
 800b134:	f7fe fb0a 	bl	800974c <_free_r>
 800b138:	4625      	mov	r5, r4
 800b13a:	4628      	mov	r0, r5
 800b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b140:	f000 f882 	bl	800b248 <_malloc_usable_size_r>
 800b144:	4284      	cmp	r4, r0
 800b146:	4607      	mov	r7, r0
 800b148:	d802      	bhi.n	800b150 <_realloc_r+0x34>
 800b14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b14e:	d812      	bhi.n	800b176 <_realloc_r+0x5a>
 800b150:	4621      	mov	r1, r4
 800b152:	4640      	mov	r0, r8
 800b154:	f7fe fb62 	bl	800981c <_malloc_r>
 800b158:	4605      	mov	r5, r0
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d0ed      	beq.n	800b13a <_realloc_r+0x1e>
 800b15e:	42bc      	cmp	r4, r7
 800b160:	4622      	mov	r2, r4
 800b162:	4631      	mov	r1, r6
 800b164:	bf28      	it	cs
 800b166:	463a      	movcs	r2, r7
 800b168:	f7fe f968 	bl	800943c <memcpy>
 800b16c:	4631      	mov	r1, r6
 800b16e:	4640      	mov	r0, r8
 800b170:	f7fe faec 	bl	800974c <_free_r>
 800b174:	e7e1      	b.n	800b13a <_realloc_r+0x1e>
 800b176:	4635      	mov	r5, r6
 800b178:	e7df      	b.n	800b13a <_realloc_r+0x1e>

0800b17a <_raise_r>:
 800b17a:	291f      	cmp	r1, #31
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4604      	mov	r4, r0
 800b180:	460d      	mov	r5, r1
 800b182:	d904      	bls.n	800b18e <_raise_r+0x14>
 800b184:	2316      	movs	r3, #22
 800b186:	6003      	str	r3, [r0, #0]
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	bd38      	pop	{r3, r4, r5, pc}
 800b18e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b190:	b112      	cbz	r2, 800b198 <_raise_r+0x1e>
 800b192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b196:	b94b      	cbnz	r3, 800b1ac <_raise_r+0x32>
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 f831 	bl	800b200 <_getpid_r>
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a8:	f000 b818 	b.w	800b1dc <_kill_r>
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d00a      	beq.n	800b1c6 <_raise_r+0x4c>
 800b1b0:	1c59      	adds	r1, r3, #1
 800b1b2:	d103      	bne.n	800b1bc <_raise_r+0x42>
 800b1b4:	2316      	movs	r3, #22
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	e7e7      	b.n	800b18c <_raise_r+0x12>
 800b1bc:	2400      	movs	r4, #0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1c4:	4798      	blx	r3
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e7e0      	b.n	800b18c <_raise_r+0x12>
	...

0800b1cc <raise>:
 800b1cc:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <raise+0xc>)
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	f7ff bfd2 	b.w	800b17a <_raise_r>
 800b1d6:	bf00      	nop
 800b1d8:	20000184 	.word	0x20000184

0800b1dc <_kill_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4d06      	ldr	r5, [pc, #24]	; (800b1fc <_kill_r+0x20>)
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	f7f5 fd38 	bl	8000c5e <_kill>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d102      	bne.n	800b1f8 <_kill_r+0x1c>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	b103      	cbz	r3, 800b1f8 <_kill_r+0x1c>
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20001538 	.word	0x20001538

0800b200 <_getpid_r>:
 800b200:	f7f5 bd26 	b.w	8000c50 <_getpid>

0800b204 <_fstat_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	2300      	movs	r3, #0
 800b208:	4d06      	ldr	r5, [pc, #24]	; (800b224 <_fstat_r+0x20>)
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	4611      	mov	r1, r2
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f7f5 fd82 	bl	8000d1a <_fstat>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d102      	bne.n	800b220 <_fstat_r+0x1c>
 800b21a:	682b      	ldr	r3, [r5, #0]
 800b21c:	b103      	cbz	r3, 800b220 <_fstat_r+0x1c>
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	bd38      	pop	{r3, r4, r5, pc}
 800b222:	bf00      	nop
 800b224:	20001538 	.word	0x20001538

0800b228 <_isatty_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	2300      	movs	r3, #0
 800b22c:	4d05      	ldr	r5, [pc, #20]	; (800b244 <_isatty_r+0x1c>)
 800b22e:	4604      	mov	r4, r0
 800b230:	4608      	mov	r0, r1
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	f7f5 fd80 	bl	8000d38 <_isatty>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d102      	bne.n	800b242 <_isatty_r+0x1a>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	b103      	cbz	r3, 800b242 <_isatty_r+0x1a>
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	20001538 	.word	0x20001538

0800b248 <_malloc_usable_size_r>:
 800b248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b24c:	1f18      	subs	r0, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfbc      	itt	lt
 800b252:	580b      	ldrlt	r3, [r1, r0]
 800b254:	18c0      	addlt	r0, r0, r3
 800b256:	4770      	bx	lr

0800b258 <_init>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr

0800b264 <_fini>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	bf00      	nop
 800b268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26a:	bc08      	pop	{r3}
 800b26c:	469e      	mov	lr, r3
 800b26e:	4770      	bx	lr
