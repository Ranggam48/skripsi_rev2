
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e4  0800c9e4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9e4  0800c9e4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9e4  0800c9e4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002348  200001ec  0800cbd8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800cbd8  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c719  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047e0  00000000  00000000  0003c92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00041110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00042ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db68  00000000  00000000  00044460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2da  00000000  00000000  00061fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b34c  00000000  00000000  000812a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c5ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c74  00000000  00000000  0011c640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5cc 	.word	0x0800c5cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800c5cc 	.word	0x0800c5cc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000208 	.word	0x20000208
 80001a0:	2000025c 	.word	0x2000025c

080001a4 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	60f8      	str	r0, [r7, #12]
 80001ac:	60b9      	str	r1, [r7, #8]
 80001ae:	607a      	str	r2, [r7, #4]
 80001b0:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 80001b2:	68fa      	ldr	r2, [r7, #12]
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	1ad3      	subs	r3, r2, r3
 80001b8:	69b9      	ldr	r1, [r7, #24]
 80001ba:	683a      	ldr	r2, [r7, #0]
 80001bc:	1a8a      	subs	r2, r1, r2
 80001be:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	1acb      	subs	r3, r1, r3
 80001c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	4413      	add	r3, r2
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
	...

080001dc <delay_us>:

void delay_us(uint32_t us) {
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <delay_us+0x2c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2200      	movs	r2, #0
 80001ea:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001ec:	bf00      	nop
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <delay_us+0x2c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d8f9      	bhi.n	80001ee <delay_us+0x12>
		;
}
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000504 	.word	0x20000504

0800020c <modeSoftStart>:

void modeSoftStart() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0

	if (sign == -1) {
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <modeSoftStart+0x7c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000218:	d10e      	bne.n	8000238 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 800021a:	481c      	ldr	r0, [pc, #112]	; (800028c <modeSoftStart+0x80>)
 800021c:	f003 fe2c 	bl	8003e78 <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f000 ff85 	bl	8001130 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000226:	2006      	movs	r0, #6
 8000228:	f001 f89b 	bl	8001362 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800022c:	2007      	movs	r0, #7
 800022e:	f001 f898 	bl	8001362 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000232:	2008      	movs	r0, #8
 8000234:	f001 f895 	bl	8001362 <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <modeSoftStart+0x84>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d120      	bne.n	8000282 <modeSoftStart+0x76>
		sign = 0;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <modeSoftStart+0x7c>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000246:	2006      	movs	r0, #6
 8000248:	f001 f899 	bl	800137e <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800024c:	2007      	movs	r0, #7
 800024e:	f001 f896 	bl	800137e <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000252:	2008      	movs	r0, #8
 8000254:	f001 f893 	bl	800137e <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <modeSoftStart+0x80>)
 800025a:	f003 fe5f 	bl	8003f1c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <modeSoftStart+0x88>)
 8000266:	f001 fa34 	bl	80016d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000270:	4808      	ldr	r0, [pc, #32]	; (8000294 <modeSoftStart+0x88>)
 8000272:	f001 fa2e 	bl	80016d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <modeSoftStart+0x88>)
 800027e:	f001 fa28 	bl	80016d2 <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000
 800028c:	2000054c 	.word	0x2000054c
 8000290:	20000460 	.word	0x20000460
 8000294:	40010c00 	.word	0x40010c00

08000298 <modeDOL>:

void modeDOL(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <modeDOL+0x34>)
 80002a4:	f001 fa15 	bl	80016d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <modeDOL+0x34>)
 80002b0:	f001 fa0f 	bl	80016d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <modeDOL+0x34>)
 80002bc:	f001 fa09 	bl	80016d2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f000 ff35 	bl	8001130 <HAL_Delay>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <EXTI_Stop>:

void EXTI_Stop(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002d4:	2006      	movs	r0, #6
 80002d6:	f001 f852 	bl	800137e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002da:	2007      	movs	r0, #7
 80002dc:	f001 f84f 	bl	800137e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002e0:	2008      	movs	r0, #8
 80002e2:	f001 f84c 	bl	800137e <HAL_NVIC_DisableIRQ>
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b096      	sub	sp, #88	; 0x58
 80002f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002f2:	f000 feeb 	bl	80010cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002f6:	f000 f8a1 	bl	800043c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002fa:	f000 f9ef 	bl	80006dc <MX_GPIO_Init>
	MX_I2C1_Init();
 80002fe:	f000 f8f7 	bl	80004f0 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000302:	f000 f923 	bl	800054c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000306:	f000 f9bf 	bl	8000688 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800030a:	f000 f96f 	bl	80005ec <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 800030e:	f7ff ffdf 	bl	80002d0 <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 8000312:	483d      	ldr	r0, [pc, #244]	; (8000408 <main+0x11c>)
 8000314:	f003 fd66 	bl	8003de4 <HAL_TIM_Base_Start>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000318:	4b3c      	ldr	r3, [pc, #240]	; (800040c <main+0x120>)
 800031a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800031e:	461d      	mov	r5, r3
 8000320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000324:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800032c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f008 fbad 	bl	8008a92 <osThreadCreate>
 8000338:	4603      	mov	r3, r0
 800033a:	4a35      	ldr	r2, [pc, #212]	; (8000410 <main+0x124>)
 800033c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadDef(phaseATask, PhaseATask, osPriorityNormal, 0, 256);
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <main+0x128>)
 8000340:	f107 0420 	add.w	r4, r7, #32
 8000344:	461d      	mov	r5, r3
 8000346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800034e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	phaseATaskHandle = osThreadCreate(osThread(phaseATask), NULL);
 8000352:	f107 0320 	add.w	r3, r7, #32
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f008 fb9a 	bl	8008a92 <osThreadCreate>
 800035e:	4603      	mov	r3, r0
 8000360:	4a2d      	ldr	r2, [pc, #180]	; (8000418 <main+0x12c>)
 8000362:	6013      	str	r3, [r2, #0]

	osThreadDef(phaseBTask, PhaseBTask, osPriorityNormal, 0, 256);
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <main+0x130>)
 8000366:	1d3c      	adds	r4, r7, #4
 8000368:	461d      	mov	r5, r3
 800036a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	phaseBTaskHandle = osThreadCreate(osThread(phaseBTask), NULL);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 fb89 	bl	8008a92 <osThreadCreate>
 8000380:	4603      	mov	r3, r0
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <main+0x134>)
 8000384:	6013      	str	r3, [r2, #0]
//	osThreadDef(phaseCTask, PhaseCTask, osPriorityNormal, 0, 256);
//	phaseCTaskHandle = osThreadCreate(osThread(phaseCTask), NULL);
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000386:	f008 fb7d 	bl	8008a84 <osKernelStart>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <main+0x138>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d109      	bne.n	80003a6 <main+0xba>
 8000392:	4b25      	ldr	r3, [pc, #148]	; (8000428 <main+0x13c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d105      	bne.n	80003a6 <main+0xba>
			modeDOL();
 800039a:	f7ff ff7d 	bl	8000298 <modeDOL>
			HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f000 fec6 	bl	8001130 <HAL_Delay>
 80003a4:	e02e      	b.n	8000404 <main+0x118>
		}

		else if (mode == 2 && flag == 1) {
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <main+0x138>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d109      	bne.n	80003c2 <main+0xd6>
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <main+0x13c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d105      	bne.n	80003c2 <main+0xd6>
			modeSoftStart();
 80003b6:	f7ff ff29 	bl	800020c <modeSoftStart>
			HAL_Delay(10);
 80003ba:	200a      	movs	r0, #10
 80003bc:	f000 feb8 	bl	8001130 <HAL_Delay>
 80003c0:	e020      	b.n	8000404 <main+0x118>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c8:	4818      	ldr	r0, [pc, #96]	; (800042c <main+0x140>)
 80003ca:	f001 f982 	bl	80016d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <main+0x140>)
 80003d6:	f001 f97c 	bl	80016d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <main+0x140>)
 80003e2:	f001 f976 	bl	80016d2 <HAL_GPIO_WritePin>
			sign = -1;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <main+0x144>)
 80003e8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ec:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <main+0x148>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	fb02 f303 	mul.w	r3, r2, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <main+0x14c>)
 80003fc:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 80003fe:	200a      	movs	r0, #10
 8000400:	f000 fe96 	bl	8001130 <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000404:	e7c1      	b.n	800038a <main+0x9e>
 8000406:	bf00      	nop
 8000408:	20000504 	.word	0x20000504
 800040c:	0800c608 	.word	0x0800c608
 8000410:	200005d8 	.word	0x200005d8
 8000414:	0800c624 	.word	0x0800c624
 8000418:	200005dc 	.word	0x200005dc
 800041c:	0800c640 	.word	0x0800c640
 8000420:	200005e0 	.word	0x200005e0
 8000424:	200004a8 	.word	0x200004a8
 8000428:	200004ac 	.word	0x200004ac
 800042c:	40010c00 	.word	0x40010c00
 8000430:	20000000 	.word	0x20000000
 8000434:	20000004 	.word	0x20000004
 8000438:	20000460 	.word	0x20000460

0800043c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	; 0x50
 8000440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f00a f9be 	bl	800a7cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000488:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800048e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000492:	4618      	mov	r0, r3
 8000494:	f002 ff56 	bl	8003344 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x66>
		Error_Handler();
 800049e:	f000 fa77 	bl	8000990 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 f9c2 	bl	8003848 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x92>
		Error_Handler();
 80004ca:	f000 fa61 	bl	8000990 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ce:	2310      	movs	r3, #16
 80004d0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 fb7d 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xac>
		Error_Handler();
 80004e4:	f000 fa54 	bl	8000990 <Error_Handler>
	}
}
 80004e8:	bf00      	nop
 80004ea:	3750      	adds	r7, #80	; 0x50
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_I2C1_Init+0x50>)
 80004f6:	4a13      	ldr	r2, [pc, #76]	; (8000544 <MX_I2C1_Init+0x54>)
 80004f8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_I2C1_Init+0x50>)
 80004fc:	4a12      	ldr	r2, [pc, #72]	; (8000548 <MX_I2C1_Init+0x58>)
 80004fe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_I2C1_Init+0x50>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_I2C1_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_I2C1_Init+0x50>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MX_I2C1_Init+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_I2C1_Init+0x50>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_I2C1_Init+0x50>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_I2C1_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_I2C1_Init+0x50>)
 800052e:	f001 f901 	bl	8001734 <HAL_I2C_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000538:	f000 fa2a 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200004b0 	.word	0x200004b0
 8000544:	40005400 	.word	0x40005400
 8000548:	000186a0 	.word	0x000186a0

0800054c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_TIM1_Init+0x98>)
 800056a:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <MX_TIM1_Init+0x9c>)
 800056c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_TIM1_Init+0x98>)
 8000570:	2247      	movs	r2, #71	; 0x47
 8000572:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_TIM1_Init+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_TIM1_Init+0x98>)
 800057c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000580:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_TIM1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_TIM1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_TIM1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <MX_TIM1_Init+0x98>)
 8000596:	f003 fbd5 	bl	8003d44 <HAL_TIM_Base_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x58>
		Error_Handler();
 80005a0:	f000 f9f6 	bl	8000990 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_TIM1_Init+0x98>)
 80005b2:	f003 fde9 	bl	8004188 <HAL_TIM_ConfigClockSource>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0x74>
		Error_Handler();
 80005bc:	f000 f9e8 	bl	8000990 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_TIM1_Init+0x98>)
 80005ce:	f003 ffbb 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80005d8:	f000 f9da 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000504 	.word	0x20000504
 80005e8:	40012c00 	.word	0x40012c00

080005ec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_TIM2_Init+0x98>)
 800060a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_TIM2_Init+0x98>)
 8000612:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000616:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_TIM2_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_TIM2_Init+0x98>)
 8000620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000624:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_TIM2_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_TIM2_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_TIM2_Init+0x98>)
 8000634:	f003 fb86 	bl	8003d44 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x56>
		Error_Handler();
 800063e:	f000 f9a7 	bl	8000990 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_TIM2_Init+0x98>)
 8000650:	f003 fd9a 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x72>
		Error_Handler();
 800065a:	f000 f999 	bl	8000990 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_TIM2_Init+0x98>)
 800066c:	f003 ff6c 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000676:	f000 f98b 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000054c 	.word	0x2000054c

08000688 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART1_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006c0:	f003 ffb2 	bl	8004628 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80006ca:	f000 f961 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000594 	.word	0x20000594
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000758:	f000 ffbb 	bl	80016d2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_GPIO_Init+0xf0>)
 8000764:	f000 ffb5 	bl	80016d2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000782:	f000 fe0b 	bl	800139c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000786:	2307      	movs	r3, #7
 8000788:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_GPIO_Init+0xf4>)
 800079a:	f000 fdff 	bl	800139c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800079e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xf0>)
 80007b8:	f000 fdf0 	bl	800139c <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	40010800 	.word	0x40010800

080007d4 <PhaseATask>:
//		}
//	}
//}
/* USER CODE END 4 */

void PhaseATask(void const *argument) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	int stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007dc:	2101      	movs	r1, #1
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <PhaseATask+0x6c>)
 80007e0:	f000 ff60 	bl	80016a4 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	60bb      	str	r3, [r7, #8]
	int stateSensorPrv = -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	60fb      	str	r3, [r7, #12]

	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007ee:	2101      	movs	r1, #1
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <PhaseATask+0x6c>)
 80007f2:	f000 ff57 	bl	80016a4 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	60bb      	str	r3, [r7, #8]
		if (stateSensorNow != stateSensorPrv) {
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d0f5      	beq.n	80007ee <PhaseATask+0x1a>
			count++;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <PhaseATask+0x70>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <PhaseATask+0x70>)
 800080a:	6013      	str	r3, [r2, #0]
			delay_us(delay);
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <PhaseATask+0x74>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fce3 	bl	80001dc <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <PhaseATask+0x78>)
 800081e:	f000 ff58 	bl	80016d2 <HAL_GPIO_WritePin>
			delay_us(50);
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f7ff fcda 	bl	80001dc <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <PhaseATask+0x78>)
 8000830:	f000 ff4f 	bl	80016d2 <HAL_GPIO_WritePin>
			stateSensorPrv = stateSensorNow;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60fb      	str	r3, [r7, #12]
			osDelay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f008 f976 	bl	8008b2a <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800083e:	e7d6      	b.n	80007ee <PhaseATask+0x1a>
 8000840:	40010800 	.word	0x40010800
 8000844:	20000464 	.word	0x20000464
 8000848:	2000045c 	.word	0x2000045c
 800084c:	40010c00 	.word	0x40010c00

08000850 <PhaseBTask>:
		}

	}
}

void PhaseBTask(void const *argument) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	int stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000858:	2102      	movs	r1, #2
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <PhaseBTask+0x64>)
 800085c:	f000 ff22 	bl	80016a4 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	60bb      	str	r3, [r7, #8]
	int stateSensorPrv = -1;
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	60fb      	str	r3, [r7, #12]

	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800086a:	2102      	movs	r1, #2
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <PhaseBTask+0x64>)
 800086e:	f000 ff19 	bl	80016a4 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	60bb      	str	r3, [r7, #8]
		if (stateSensorNow != stateSensorPrv) {
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	d0f5      	beq.n	800086a <PhaseBTask+0x1a>
			delay_us(delay);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <PhaseBTask+0x68>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fcaa 	bl	80001dc <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <PhaseBTask+0x6c>)
 8000890:	f000 ff1f 	bl	80016d2 <HAL_GPIO_WritePin>
			delay_us(50);
 8000894:	2032      	movs	r0, #50	; 0x32
 8000896:	f7ff fca1 	bl	80001dc <delay_us>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <PhaseBTask+0x6c>)
 80008a2:	f000 ff16 	bl	80016d2 <HAL_GPIO_WritePin>
			stateSensorPrv = stateSensorNow;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	60fb      	str	r3, [r7, #12]
			osDelay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f008 f93d 	bl	8008b2a <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80008b0:	e7db      	b.n	800086a <PhaseBTask+0x1a>
 80008b2:	bf00      	nop
 80008b4:	40010800 	.word	0x40010800
 80008b8:	2000045c 	.word	0x2000045c
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80008c8:	f009 fa9a 	bl	8009e00 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	counter = 100;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <StartDefaultTask+0x4c>)
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		delay = MAP(counter, 0, 100, 0, 9000);
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <StartDefaultTask+0x4c>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f242 3328 	movw	r3, #9000	; 0x2328
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2264      	movs	r2, #100	; 0x64
 80008e0:	2100      	movs	r1, #0
 80008e2:	f7ff fc5f 	bl	80001a4 <MAP>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <StartDefaultTask+0x50>)
 80008ea:	6013      	str	r3, [r2, #0]
		osDelay(100);
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f008 f91c 	bl	8008b2a <osDelay>
		counter--;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <StartDefaultTask+0x4c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <StartDefaultTask+0x4c>)
 80008fa:	6013      	str	r3, [r2, #0]
		if (counter == 0) {
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <StartDefaultTask+0x4c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1e6      	bne.n	80008d2 <StartDefaultTask+0x12>
			counter = 100;
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <StartDefaultTask+0x4c>)
 8000906:	2264      	movs	r2, #100	; 0x64
 8000908:	601a      	str	r2, [r3, #0]
		delay = MAP(counter, 0, 100, 0, 9000);
 800090a:	e7e2      	b.n	80008d2 <StartDefaultTask+0x12>
 800090c:	20000460 	.word	0x20000460
 8000910:	2000045c 	.word	0x2000045c

08000914 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000926:	f000 fbe7 	bl	80010f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000932:	d11f      	bne.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x60>
		delay = 7200;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000936:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800093a:	601a      	str	r2, [r3, #0]
		counter = counter - 10;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b0a      	subs	r3, #10
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000944:	6013      	str	r3, [r2, #0]
		delay = MAP(counter, 0, time * 100, 200, 7200);
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	fb02 f303 	mul.w	r3, r2, r3
 8000954:	461a      	mov	r2, r3
 8000956:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	23c8      	movs	r3, #200	; 0xc8
 800095e:	2100      	movs	r1, #0
 8000960:	f7ff fc20 	bl	80001a4 <MAP>
 8000964:	4603      	mov	r3, r0
 8000966:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000968:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000970:	f000 fec7 	bl	8001702 <HAL_GPIO_TogglePin>
	}
	/* USER CODE END Callback 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40000800 	.word	0x40000800
 8000980:	2000045c 	.word	0x2000045c
 8000984:	20000460 	.word	0x20000460
 8000988:	20000004 	.word	0x20000004
 800098c:	40011000 	.word	0x40011000

08000990 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_MspInit+0x68>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_MspInit+0x68>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_MspInit+0x68>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x68>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_MspInit+0x68>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x68>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fca6 	bl	800132a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_MspInit+0x6c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_MspInit+0x6c>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x70>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d123      	bne.n	8000a74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <HAL_I2C_MspInit+0x78>)
 8000a58:	f000 fca0 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <HAL_TIM_Base_MspInit+0x68>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d10c      	bne.n	8000ab4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	e018      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abc:	d113      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x6c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	201c      	movs	r0, #28
 8000adc:	f000 fc25 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae0:	201c      	movs	r0, #28
 8000ae2:	f000 fc3e 	bl	8001362 <HAL_NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40012c00 	.word	0x40012c00
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d131      	bne.n	8000b7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b5e:	f000 fc1d 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b78:	f000 fc10 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800

08000b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	201e      	movs	r0, #30
 8000ba6:	f000 fbc0 	bl	800132a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000baa:	201e      	movs	r0, #30
 8000bac:	f000 fbd9 	bl	8001362 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_InitTick+0xa0>)
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_InitTick+0xa0>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	61d3      	str	r3, [r2, #28]
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xa0>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 0210 	add.w	r2, r7, #16
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 ffb2 	bl	8003b3c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bd8:	f002 ff88 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_InitTick+0xa4>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_InitTick+0xa8>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_InitTick+0xac>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_InitTick+0xa8>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_InitTick+0xa8>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_InitTick+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_InitTick+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_InitTick+0xa8>)
 8000c12:	f003 f897 	bl	8003d44 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_InitTick+0xa8>)
 8000c1e:	f003 f92b 	bl	8003e78 <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	200005e4 	.word	0x200005e4
 8000c3c:	40000800 	.word	0x40000800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
	...

08000c6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c72:	f000 ffd4 	bl	8001c1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20002018 	.word	0x20002018

08000c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM2_IRQHandler+0x10>)
 8000c86:	f003 f977 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000054c 	.word	0x2000054c

08000c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM4_IRQHandler+0x10>)
 8000c9a:	f003 f96d 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200005e4 	.word	0x200005e4

08000ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <_kill>:

int _kill(int pid, int sig)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cc0:	f009 fd4c 	bl	800a75c <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2216      	movs	r2, #22
 8000cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_exit>:

void _exit (int status)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cde:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffe7 	bl	8000cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ce8:	e7fe      	b.n	8000ce8 <_exit+0x12>

08000cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e00a      	b.n	8000d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfc:	f3af 8000 	nop.w
 8000d00:	4601      	mov	r1, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	b2ca      	uxtb	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dbf0      	blt.n	8000cfc <_read+0x12>
	}

return len;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e009      	b.n	8000d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	60ba      	str	r2, [r7, #8]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dbf1      	blt.n	8000d36 <_write+0x12>
	}
	return len;
 8000d52:	687b      	ldr	r3, [r7, #4]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_close>:

int _close(int file)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <_isatty>:

int _isatty(int file)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	return 1;
 8000d98:	2301      	movs	r3, #1
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f009 fcb6 	bl	800a75c <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	2000062c 	.word	0x2000062c
 8000e24:	20002538 	.word	0x20002538

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000e34:	b40f      	push	{r0, r1, r2, r3}
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b0c2      	sub	sp, #264	; 0x108
 8000e3a:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000e3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000e44:	4638      	mov	r0, r7
 8000e46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e4e:	21fe      	movs	r1, #254	; 0xfe
 8000e50:	f009 fdbc 	bl	800a9cc <vsniprintf>
 8000e54:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dd0c      	ble.n	8000e7a <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e64:	2bfe      	cmp	r3, #254	; 0xfe
 8000e66:	bfa8      	it	ge
 8000e68:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	463b      	mov	r3, r7
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 f893 	bl	8009fa0 <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000e7a:	bf00      	nop
 8000e7c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e80:	46bd      	mov	sp, r7
 8000e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e86:	b004      	add	sp, #16
 8000e88:	4770      	bx	lr
	...

08000e8c <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0c4      	sub	sp, #272	; 0x110
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e9a:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eaa:	4962      	ldr	r1, [pc, #392]	; (8001034 <terminal_proses+0x1a8>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	f009 fd05 	bl	800a8bc <strtok>
 8000eb2:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000eb6:	e012      	b.n	8000ede <terminal_proses+0x52>
		argv[argc++] = p2;
 8000eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000ec2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ec6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000eca:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000ed2:	4958      	ldr	r1, [pc, #352]	; (8001034 <terminal_proses+0x1a8>)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f009 fcf1 	bl	800a8bc <strtok>
 8000eda:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000ede:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <terminal_proses+0x62>
 8000ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eea:	2b3f      	cmp	r3, #63	; 0x3f
 8000eec:	dde4      	ble.n	8000eb8 <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000ef6:	4850      	ldr	r0, [pc, #320]	; (8001038 <terminal_proses+0x1ac>)
 8000ef8:	f7ff ff9c 	bl	8000e34 <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000efc:	e094      	b.n	8001028 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000efe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	494c      	ldr	r1, [pc, #304]	; (800103c <terminal_proses+0x1b0>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f920 	bl	8000150 <strcmp>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000f16:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <terminal_proses+0x1b4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4849      	ldr	r0, [pc, #292]	; (8001044 <terminal_proses+0x1b8>)
 8000f1e:	f7ff ff89 	bl	8000e34 <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <terminal_proses+0x1bc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4848      	ldr	r0, [pc, #288]	; (800104c <terminal_proses+0x1c0>)
 8000f2a:	f7ff ff83 	bl	8000e34 <command_printf>
}
 8000f2e:	e07b      	b.n	8001028 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4945      	ldr	r1, [pc, #276]	; (8001050 <terminal_proses+0x1c4>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f907 	bl	8000150 <strcmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10c      	bne.n	8000f62 <terminal_proses+0xd6>
		flag = 0;
 8000f48:	4b42      	ldr	r3, [pc, #264]	; (8001054 <terminal_proses+0x1c8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f54:	4840      	ldr	r0, [pc, #256]	; (8001058 <terminal_proses+0x1cc>)
 8000f56:	f000 fbbc 	bl	80016d2 <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000f5a:	4840      	ldr	r0, [pc, #256]	; (800105c <terminal_proses+0x1d0>)
 8000f5c:	f7ff ff6a 	bl	8000e34 <command_printf>
}
 8000f60:	e062      	b.n	8001028 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000f62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	493c      	ldr	r1, [pc, #240]	; (8001060 <terminal_proses+0x1d4>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f8ee 	bl	8000150 <strcmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <terminal_proses+0x108>
		flag = 1;
 8000f7a:	4b36      	ldr	r3, [pc, #216]	; (8001054 <terminal_proses+0x1c8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	4834      	ldr	r0, [pc, #208]	; (8001058 <terminal_proses+0x1cc>)
 8000f88:	f000 fba3 	bl	80016d2 <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8000f8c:	4835      	ldr	r0, [pc, #212]	; (8001064 <terminal_proses+0x1d8>)
 8000f8e:	f7ff ff51 	bl	8000e34 <command_printf>
}
 8000f92:	e049      	b.n	8001028 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8000f94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4932      	ldr	r1, [pc, #200]	; (8001068 <terminal_proses+0x1dc>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f8d5 	bl	8000150 <strcmp>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11d      	bne.n	8000fe8 <terminal_proses+0x15c>
		if (argc == 2) {
 8000fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d109      	bne.n	8000fc8 <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8000fb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a20      	ldr	r2, [pc, #128]	; (8001040 <terminal_proses+0x1b4>)
 8000fc0:	492a      	ldr	r1, [pc, #168]	; (800106c <terminal_proses+0x1e0>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 fc0a 	bl	800a7dc <siscanf>
		if (mode == 1) {
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <terminal_proses+0x1b4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d103      	bne.n	8000fd8 <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8000fd0:	4827      	ldr	r0, [pc, #156]	; (8001070 <terminal_proses+0x1e4>)
 8000fd2:	f7ff ff2f 	bl	8000e34 <command_printf>
}
 8000fd6:	e027      	b.n	8001028 <terminal_proses+0x19c>
		} else if (mode == 2) {
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <terminal_proses+0x1b4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8000fe0:	4824      	ldr	r0, [pc, #144]	; (8001074 <terminal_proses+0x1e8>)
 8000fe2:	f7ff ff27 	bl	8000e34 <command_printf>
}
 8000fe6:	e01f      	b.n	8001028 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 8000fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4921      	ldr	r1, [pc, #132]	; (8001078 <terminal_proses+0x1ec>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8ab 	bl	8000150 <strcmp>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d113      	bne.n	8001028 <terminal_proses+0x19c>
		if (argc == 2) {
 8001000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001004:	2b02      	cmp	r3, #2
 8001006:	d10f      	bne.n	8001028 <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 8001008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <terminal_proses+0x1bc>)
 8001014:	4915      	ldr	r1, [pc, #84]	; (800106c <terminal_proses+0x1e0>)
 8001016:	4618      	mov	r0, r3
 8001018:	f009 fbe0 	bl	800a7dc <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <terminal_proses+0x1bc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <terminal_proses+0x1f0>)
 8001024:	f7ff ff06 	bl	8000e34 <command_printf>
}
 8001028:	bf00      	nop
 800102a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	0800c65c 	.word	0x0800c65c
 8001038:	0800c660 	.word	0x0800c660
 800103c:	0800c674 	.word	0x0800c674
 8001040:	200004a8 	.word	0x200004a8
 8001044:	0800c67c 	.word	0x0800c67c
 8001048:	20000004 	.word	0x20000004
 800104c:	0800c688 	.word	0x0800c688
 8001050:	0800c694 	.word	0x0800c694
 8001054:	200004ac 	.word	0x200004ac
 8001058:	40011000 	.word	0x40011000
 800105c:	0800c698 	.word	0x0800c698
 8001060:	0800c6a0 	.word	0x0800c6a0
 8001064:	0800c6a4 	.word	0x0800c6a4
 8001068:	0800c6a8 	.word	0x0800c6a8
 800106c:	0800c6b0 	.word	0x0800c6b0
 8001070:	0800c6b4 	.word	0x0800c6b4
 8001074:	0800c6c0 	.word	0x0800c6c0
 8001078:	0800c6d4 	.word	0x0800c6d4
 800107c:	0800c6e0 	.word	0x0800c6e0

08001080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010a6:	f7ff febf 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f009 fb5d 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff f91d 	bl	80002ec <main>
  bx lr
 80010b2:	4770      	bx	lr
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80010bc:	0800c9ec 	.word	0x0800c9ec
  ldr r2, =_sbss
 80010c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80010c4:	20002534 	.word	0x20002534

080010c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x28>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x28>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f919 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff fd54 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fc58 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x20>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000010 	.word	0x20000010
 8001118:	20000630 	.word	0x20000630

0800111c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000630 	.word	0x20000630

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffe0 	bl	800111c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000010 	.word	0x20000010

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <__NVIC_EnableIRQ+0x34>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db12      	blt.n	800124c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	490a      	ldr	r1, [pc, #40]	; (8001258 <__NVIC_DisableIRQ+0x44>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	3320      	adds	r3, #32
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
}
 8001244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001246:	f3bf 8f6f 	isb	sy
}
 800124a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff2b 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff40 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ffb2 	bl	80012b0 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff81 	bl	800125c <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff33 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff41 	bl	8001214 <__NVIC_DisableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e169      	b.n	8001684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b0:	2201      	movs	r2, #1
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8158 	bne.w	800167e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a9a      	ldr	r2, [pc, #616]	; (800163c <HAL_GPIO_Init+0x2a0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d05e      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013d8:	4a98      	ldr	r2, [pc, #608]	; (800163c <HAL_GPIO_Init+0x2a0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d875      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013de:	4a98      	ldr	r2, [pc, #608]	; (8001640 <HAL_GPIO_Init+0x2a4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d058      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013e4:	4a96      	ldr	r2, [pc, #600]	; (8001640 <HAL_GPIO_Init+0x2a4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d86f      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013ea:	4a96      	ldr	r2, [pc, #600]	; (8001644 <HAL_GPIO_Init+0x2a8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d052      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013f0:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_GPIO_Init+0x2a8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d869      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013f6:	4a94      	ldr	r2, [pc, #592]	; (8001648 <HAL_GPIO_Init+0x2ac>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d04c      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013fc:	4a92      	ldr	r2, [pc, #584]	; (8001648 <HAL_GPIO_Init+0x2ac>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d863      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001402:	4a92      	ldr	r2, [pc, #584]	; (800164c <HAL_GPIO_Init+0x2b0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d046      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 8001408:	4a90      	ldr	r2, [pc, #576]	; (800164c <HAL_GPIO_Init+0x2b0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d85d      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d82a      	bhi.n	8001468 <HAL_GPIO_Init+0xcc>
 8001412:	2b12      	cmp	r3, #18
 8001414:	d859      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <HAL_GPIO_Init+0x80>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001497 	.word	0x08001497
 8001420:	08001471 	.word	0x08001471
 8001424:	08001483 	.word	0x08001483
 8001428:	080014c5 	.word	0x080014c5
 800142c:	080014cb 	.word	0x080014cb
 8001430:	080014cb 	.word	0x080014cb
 8001434:	080014cb 	.word	0x080014cb
 8001438:	080014cb 	.word	0x080014cb
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014cb 	.word	0x080014cb
 8001444:	080014cb 	.word	0x080014cb
 8001448:	080014cb 	.word	0x080014cb
 800144c:	080014cb 	.word	0x080014cb
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014cb 	.word	0x080014cb
 8001458:	080014cb 	.word	0x080014cb
 800145c:	080014cb 	.word	0x080014cb
 8001460:	08001479 	.word	0x08001479
 8001464:	0800148d 	.word	0x0800148d
 8001468:	4a79      	ldr	r2, [pc, #484]	; (8001650 <HAL_GPIO_Init+0x2b4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146e:	e02c      	b.n	80014ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e029      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	3304      	adds	r3, #4
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e024      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	3308      	adds	r3, #8
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e01f      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	330c      	adds	r3, #12
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e01a      	b.n	80014cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149e:	2304      	movs	r3, #4
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e013      	b.n	80014cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ac:	2308      	movs	r3, #8
 80014ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	611a      	str	r2, [r3, #16]
          break;
 80014b6:	e009      	b.n	80014cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	615a      	str	r2, [r3, #20]
          break;
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x130>
          break;
 80014ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d801      	bhi.n	80014d6 <HAL_GPIO_Init+0x13a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_Init+0x13e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	d802      	bhi.n	80014e8 <HAL_GPIO_Init+0x14c>
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x152>
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	3b08      	subs	r3, #8
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	210f      	movs	r1, #15
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	6a39      	ldr	r1, [r7, #32]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80b1 	beq.w	800167e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a40      	ldr	r2, [pc, #256]	; (800165c <HAL_GPIO_Init+0x2c0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_GPIO_Init+0x1ec>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1e8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1e4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3d      	ldr	r2, [pc, #244]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1e0>
 8001578:	2303      	movs	r3, #3
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 800157c:	2304      	movs	r3, #4
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001588:	2300      	movs	r3, #0
 800158a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800159a:	492f      	ldr	r1, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	492c      	ldr	r1, [pc, #176]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4928      	ldr	r1, [pc, #160]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4922      	ldr	r1, [pc, #136]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	491e      	ldr	r1, [pc, #120]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4918      	ldr	r1, [pc, #96]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	4914      	ldr	r1, [pc, #80]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800161c:	4013      	ands	r3, r2
 800161e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d021      	beq.n	8001670 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	490e      	ldr	r1, [pc, #56]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
 8001638:	e021      	b.n	800167e <HAL_GPIO_Init+0x2e2>
 800163a:	bf00      	nop
 800163c:	10320000 	.word	0x10320000
 8001640:	10310000 	.word	0x10310000
 8001644:	10220000 	.word	0x10220000
 8001648:	10210000 	.word	0x10210000
 800164c:	10120000 	.word	0x10120000
 8001650:	10110000 	.word	0x10110000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_GPIO_Init+0x304>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	43db      	mvns	r3, r3
 8001678:	4909      	ldr	r1, [pc, #36]	; (80016a0 <HAL_GPIO_Init+0x304>)
 800167a:	4013      	ands	r3, r2
 800167c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3301      	adds	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f47f ae8e 	bne.w	80013b0 <HAL_GPIO_Init+0x14>
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e001      	b.n	80016c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e2:	787b      	ldrb	r3, [r7, #1]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e8:	887a      	ldrh	r2, [r7, #2]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	041a      	lsls	r2, r3, #16
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	041a      	lsls	r2, r3, #16
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43d9      	mvns	r1, r3
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	400b      	ands	r3, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	611a      	str	r2, [r3, #16]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12b      	b.n	800199e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff f956 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001798:	f002 f9a8 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a81      	ldr	r2, [pc, #516]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d807      	bhi.n	80017b8 <HAL_I2C_Init+0x84>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_I2C_Init+0x278>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e006      	b.n	80017c6 <HAL_I2C_Init+0x92>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <HAL_I2C_Init+0x27c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_I2C_Init+0x280>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d802      	bhi.n	8001808 <HAL_I2C_Init+0xd4>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	e009      	b.n	800181c <HAL_I2C_Init+0xe8>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_I2C_Init+0x284>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	495c      	ldr	r1, [pc, #368]	; (80019a8 <HAL_I2C_Init+0x274>)
 8001838:	428b      	cmp	r3, r1
 800183a:	d819      	bhi.n	8001870 <HAL_I2C_Init+0x13c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e59      	subs	r1, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb1 f3f3 	udiv	r3, r1, r3
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001850:	400b      	ands	r3, r1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <HAL_I2C_Init+0x138>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	e051      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 800186c:	2304      	movs	r3, #4
 800186e:	e04f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_I2C_Init+0x168>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_I2C_Init+0x18e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x196>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e022      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_I2C_Init+0x1bc>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e58      	subs	r0, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6859      	ldr	r1, [r3, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	440b      	add	r3, r1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	e00f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800193e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6911      	ldr	r1, [r2, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d2      	ldr	r2, [r2, #12]
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	000186a0 	.word	0x000186a0
 80019ac:	001e847f 	.word	0x001e847f
 80019b0:	003d08ff 	.word	0x003d08ff
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af06      	add	r7, sp, #24
 80019c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0fd      	b.n	8001bca <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f008 fc10 	bl	800a208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2203      	movs	r2, #3
 80019ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 ff19 	bl	800482c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	687e      	ldr	r6, [r7, #4]
 8001a02:	466d      	mov	r5, sp
 8001a04:	f106 0410 	add.w	r4, r6, #16
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	1d33      	adds	r3, r6, #4
 8001a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f002 fee3 	bl	80047e0 <USB_CoreInit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0ce      	b.n	8001bca <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 ff14 	bl	8004860 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e04c      	b.n	8001ad8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3336      	adds	r3, #54	; 0x36
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3303      	adds	r3, #3
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3338      	adds	r3, #56	; 0x38
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	333c      	adds	r3, #60	; 0x3c
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3340      	adds	r3, #64	; 0x40
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3ad      	bcc.n	8001a3e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e044      	b.n	8001b72 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3b5      	bcc.n	8001ae8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	602b      	str	r3, [r5, #0]
 8001b92:	1d33      	adds	r3, r6, #4
 8001b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f002 fe6e 	bl	8004878 <USB_DevInit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00d      	b.n	8001bca <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 fb20 	bl	8007208 <USB_DevDisconnect>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_Start+0x16>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e016      	b.n	8001c16 <HAL_PCD_Start+0x44>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fe03 	bl	8004800 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f008 fd76 	bl	800a6ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 faf4 	bl	80071f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b088      	sub	sp, #32
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 faf6 	bl	800721c <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d102      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fb5f 	bl	8002300 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f005 fae8 	bl	800721c <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f008 fb44 	bl	800a2fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c76:	2100      	movs	r1, #0
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f923 	bl	8001ec4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 faca 	bl	800721c <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c92:	d10b      	bne.n	8001cac <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fab3 	bl	800721c <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc0:	d10b      	bne.n	8001cda <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 fa9c 	bl	800721c <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	d126      	bne.n	8001d3e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0204 	bic.w	r2, r2, #4
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f008 fb25 	bl	800a370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d38:	b292      	uxth	r2, r2
 8001d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 fa6a 	bl	800721c <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d52:	f040 8082 	bne.w	8001e5a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	77fb      	strb	r3, [r7, #31]
 8001d5a:	e010      	b.n	8001d7e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	441a      	add	r2, r3
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	8812      	ldrh	r2, [r2, #0]
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3320      	adds	r3, #32
 8001d72:	443b      	add	r3, r7
 8001d74:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d9eb      	bls.n	8001d5c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	b292      	uxth	r2, r2
 8001d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001db4:	bf00      	nop
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f6      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
 8001de4:	e00f      	b.n	8001e06 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4611      	mov	r1, r2
 8001dee:	7ffa      	ldrb	r2, [r7, #31]
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	440a      	add	r2, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3320      	adds	r3, #32
 8001df8:	443b      	add	r3, r7
 8001dfa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dfe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
 8001e02:	3301      	adds	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	d9ec      	bls.n	8001de6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	b292      	uxth	r2, r2
 8001e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0204 	orr.w	r2, r2, #4
 8001e4e:	b292      	uxth	r2, r2
 8001e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f008 fa71 	bl	800a33c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f005 f9dc 	bl	800721c <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6e:	d10e      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e82:	b292      	uxth	r2, r2
 8001e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f008 fa2a 	bl	800a2e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 f9c2 	bl	800721c <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d10b      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_SetAddress+0x1a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e013      	b.n	8001f06 <HAL_PCD_SetAddress+0x42>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f005 f969 	bl	80071ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	4608      	mov	r0, r1
 8001f18:	4611      	mov	r1, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	70fb      	strb	r3, [r7, #3]
 8001f20:	460b      	mov	r3, r1
 8001f22:	803b      	strh	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0e      	bge.n	8001f52 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	705a      	strb	r2, [r3, #1]
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0207 	and.w	r2, r3, #7
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f7c:	883a      	ldrh	r2, [r7, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	78ba      	ldrb	r2, [r7, #2]
 8001f86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f9a:	78bb      	ldrb	r3, [r7, #2]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_PCD_EP_Open+0xa6>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e00e      	b.n	8001fd2 <HAL_PCD_EP_Open+0xc4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fc78 	bl	80048b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0e      	bge.n	800200c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
 800200a:	e00e      	b.n	800202a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 0207 	and.w	r2, r3, #7
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_PCD_EP_Close+0x6a>
 8002040:	2302      	movs	r3, #2
 8002042:	e00e      	b.n	8002062 <HAL_PCD_EP_Close+0x88>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 ff9a 	bl	8004f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	460b      	mov	r3, r1
 8002078:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	f003 0207 	and.w	r2, r3, #7
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 f94c 	bl	8005364 <USB_EPStartXfer>
 80020cc:	e005      	b.n	80020da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f945 	bl	8005364 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0207 	and.w	r2, r3, #7
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2201      	movs	r2, #1
 800215c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	b2da      	uxtb	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6979      	ldr	r1, [r7, #20]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f8f2 	bl	8005364 <USB_EPStartXfer>
 8002180:	e005      	b.n	800218e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6979      	ldr	r1, [r7, #20]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f8eb 	bl	8005364 <USB_EPStartXfer>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 0207 	and.w	r2, r3, #7
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d901      	bls.n	80021b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e04c      	b.n	8002250 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da0e      	bge.n	80021dc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
 80021da:	e00c      	b.n	80021f6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_EP_SetStall+0x7e>
 8002212:	2302      	movs	r3, #2
 8002214:	e01c      	b.n	8002250 <HAL_PCD_EP_SetStall+0xb8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fed5 	bl	8006fd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f004 fffa 	bl	800723a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 020f 	and.w	r2, r3, #15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d901      	bls.n	8002276 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e040      	b.n	80022f8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da0e      	bge.n	800229c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	705a      	strb	r2, [r3, #1]
 800229a:	e00e      	b.n	80022ba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 0207 	and.w	r2, r3, #7
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_PCD_EP_ClrStall+0x82>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e00e      	b.n	80022f8 <HAL_PCD_EP_ClrStall+0xa0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fec3 	bl	8007074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08e      	sub	sp, #56	; 0x38
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002308:	e2ec      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002312:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002314:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002320:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8161 	bne.w	80025ec <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800232a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d152      	bne.n	80023da <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002344:	81fb      	strh	r3, [r7, #14]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3328      	adds	r3, #40	; 0x28
 800235c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	3302      	adds	r3, #2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	441a      	add	r2, r3
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002398:	2100      	movs	r1, #0
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f007 ff87 	bl	800a2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 829b 	beq.w	80028e4 <PCD_EP_ISR_Handler+0x5e4>
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8296 	bne.w	80028e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b292      	uxth	r2, r2
 80023cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023d8:	e284      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d034      	beq.n	800245e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	3306      	adds	r3, #6
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002432:	b29b      	uxth	r3, r3
 8002434:	f004 ff51 	bl	80072da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002444:	4013      	ands	r3, r2
 8002446:	823b      	strh	r3, [r7, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	8a3a      	ldrh	r2, [r7, #16]
 800244e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002452:	b292      	uxth	r2, r2
 8002454:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f007 fefc 	bl	800a254 <HAL_PCD_SetupStageCallback>
 800245c:	e242      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800245e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002462:	2b00      	cmp	r3, #0
 8002464:	f280 823e 	bge.w	80028e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29a      	uxth	r2, r3
 8002470:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002474:	4013      	ands	r3, r2
 8002476:	83bb      	strh	r3, [r7, #28]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	8bba      	ldrh	r2, [r7, #28]
 800247e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002482:	b292      	uxth	r2, r2
 8002484:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	3306      	adds	r3, #6
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d019      	beq.n	80024ee <PCD_EP_ISR_Handler+0x1ee>
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d015      	beq.n	80024ee <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	6959      	ldr	r1, [r3, #20]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f004 ff01 	bl	80072da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	441a      	add	r2, r3
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f007 fec5 	bl	800a278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 81f2 	bne.w	80028e4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d112      	bne.n	800254e <PCD_EP_ISR_Handler+0x24e>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002532:	b29a      	uxth	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e02f      	b.n	80025ae <PCD_EP_ISR_Handler+0x2ae>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b3e      	cmp	r3, #62	; 0x3e
 8002554:	d813      	bhi.n	800257e <PCD_EP_ISR_Handler+0x27e>
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <PCD_EP_ISR_Handler+0x270>
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	3301      	adds	r3, #1
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	b29b      	uxth	r3, r3
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	b29a      	uxth	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	e017      	b.n	80025ae <PCD_EP_ISR_Handler+0x2ae>
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <PCD_EP_ISR_Handler+0x298>
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	3b01      	subs	r3, #1
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	b29b      	uxth	r3, r3
 800259c:	029b      	lsls	r3, r3, #10
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	827b      	strh	r3, [r7, #18]
 80025c0:	8a7b      	ldrh	r3, [r7, #18]
 80025c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025c6:	827b      	strh	r3, [r7, #18]
 80025c8:	8a7b      	ldrh	r3, [r7, #18]
 80025ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025ce:	827b      	strh	r3, [r7, #18]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	8a7b      	ldrh	r3, [r7, #18]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
 80025ea:	e17b      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002602:	2b00      	cmp	r3, #0
 8002604:	f280 80ea 	bge.w	80027dc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800261e:	4013      	ands	r3, r2
 8002620:	853b      	strh	r3, [r7, #40]	; 0x28
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002636:	b292      	uxth	r2, r2
 8002638:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800263a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d122      	bne.n	800269e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	3306      	adds	r3, #6
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002682:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8087 	beq.w	8002798 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	88da      	ldrh	r2, [r3, #6]
 8002696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002698:	f004 fe1f 	bl	80072da <USB_ReadPMA>
 800269c:	e07c      	b.n	8002798 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	78db      	ldrb	r3, [r3, #3]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d108      	bne.n	80026b8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a8:	461a      	mov	r2, r3
 80026aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f927 	bl	8002900 <HAL_PCD_EP_DB_Receive>
 80026b2:	4603      	mov	r3, r0
 80026b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026b6:	e06f      	b.n	8002798 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	441a      	add	r2, r3
 80026e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d021      	beq.n	8002756 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	3302      	adds	r3, #2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800273c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02a      	beq.n	8002798 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	6959      	ldr	r1, [r3, #20]
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	891a      	ldrh	r2, [r3, #8]
 800274e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002750:	f004 fdc3 	bl	80072da <USB_ReadPMA>
 8002754:	e020      	b.n	8002798 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	3306      	adds	r3, #6
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	895a      	ldrh	r2, [r3, #10]
 8002792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002794:	f004 fda1 	bl	80072da <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279e:	441a      	add	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027aa:	441a      	add	r2, r3
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <PCD_EP_ISR_Handler+0x4c2>
 80027b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d206      	bcs.n	80027d0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f007 fd55 	bl	800a278 <HAL_PCD_DataOutStageCallback>
 80027ce:	e005      	b.n	80027dc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fdc4 	bl	8005364 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80027e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	843b      	strh	r3, [r7, #32]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	8c3b      	ldrh	r3, [r7, #32]
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	78db      	ldrb	r3, [r3, #3]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d00c      	beq.n	8002854 <PCD_EP_ISR_Handler+0x554>
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002846:	2b02      	cmp	r3, #2
 8002848:	d146      	bne.n	80028d8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800284a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d141      	bne.n	80028d8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	3302      	adds	r3, #2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	8bfb      	ldrh	r3, [r7, #30]
 8002884:	429a      	cmp	r2, r3
 8002886:	d906      	bls.n	8002896 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	8bfb      	ldrh	r3, [r7, #30]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	e002      	b.n	800289c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f007 fcff 	bl	800a2ae <HAL_PCD_DataInStageCallback>
 80028b0:	e018      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	8bfb      	ldrh	r3, [r7, #30]
 80028b8:	441a      	add	r2, r3
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	8bfb      	ldrh	r3, [r7, #30]
 80028c4:	441a      	add	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fd47 	bl	8005364 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028d6:	e005      	b.n	80028e4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028da:	461a      	mov	r2, r3
 80028dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f91b 	bl	8002b1a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f6ff ad0a 	blt.w	800230a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3738      	adds	r7, #56	; 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d07e      	beq.n	8002a16 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	3302      	adds	r3, #2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002940:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	8b7b      	ldrh	r3, [r7, #26]
 8002948:	429a      	cmp	r2, r3
 800294a:	d306      	bcc.n	800295a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	8b7b      	ldrh	r3, [r7, #26]
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	619a      	str	r2, [r3, #24]
 8002958:	e002      	b.n	8002960 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d123      	bne.n	80029b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	833b      	strh	r3, [r7, #24]
 8002984:	8b3b      	ldrh	r3, [r7, #24]
 8002986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800298a:	833b      	strh	r3, [r7, #24]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	441a      	add	r2, r3
 800299a:	8b3b      	ldrh	r3, [r7, #24]
 800299c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01f      	beq.n	80029fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d4:	82fb      	strh	r3, [r7, #22]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	8afb      	ldrh	r3, [r7, #22]
 80029e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029fa:	8b7b      	ldrh	r3, [r7, #26]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8087 	beq.w	8002b10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6959      	ldr	r1, [r3, #20]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	891a      	ldrh	r2, [r3, #8]
 8002a0e:	8b7b      	ldrh	r3, [r7, #26]
 8002a10:	f004 fc63 	bl	80072da <USB_ReadPMA>
 8002a14:	e07c      	b.n	8002b10 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3306      	adds	r3, #6
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d306      	bcc.n	8002a58 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	8b7b      	ldrh	r3, [r7, #26]
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	e002      	b.n	8002a5e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d123      	bne.n	8002aae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	83fb      	strh	r3, [r7, #30]
 8002a82:	8bfb      	ldrh	r3, [r7, #30]
 8002a84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a88:	83fb      	strh	r3, [r7, #30]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11f      	bne.n	8002af8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	83bb      	strh	r3, [r7, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	8bbb      	ldrh	r3, [r7, #28]
 8002ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6959      	ldr	r1, [r3, #20]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	895a      	ldrh	r2, [r3, #10]
 8002b0a:	8b7b      	ldrh	r3, [r7, #26]
 8002b0c:	f004 fbe5 	bl	80072da <USB_ReadPMA>
    }
  }

  return count;
 8002b10:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b0a2      	sub	sp, #136	; 0x88
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	4613      	mov	r3, r2
 8002b26:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 81c7 	beq.w	8002ec2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d907      	bls.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b74:	1ad2      	subs	r2, r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	619a      	str	r2, [r3, #24]
 8002b7a:	e002      	b.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80b9 	bne.w	8002cfe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d126      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	4413      	add	r3, r2
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	e01a      	b.n	8002c18 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d116      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	4413      	add	r3, r2
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	011a      	lsls	r2, r3, #4
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2200      	movs	r2, #0
 8002c16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d126      	bne.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	011a      	lsls	r2, r3, #4
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	801a      	strh	r2, [r3, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	e017      	b.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d113      	bne.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	011a      	lsls	r2, r3, #4
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	4413      	add	r3, r2
 8002c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f007 faff 	bl	800a2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 82d4 	beq.w	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	827b      	strh	r3, [r7, #18]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	8a7b      	ldrh	r3, [r7, #18]
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]
 8002cfc:	e2b2      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d021      	beq.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 8286 	bne.w	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d60:	441a      	add	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d6e:	441a      	add	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d309      	bcc.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	621a      	str	r2, [r3, #32]
 8002d92:	e015      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002daa:	e009      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d155      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	4413      	add	r3, r2
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	011a      	lsls	r2, r3, #4
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	4413      	add	r3, r2
 8002dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d112      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x302>
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	e047      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x392>
 8002e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e20:	d811      	bhi.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e34:	3301      	adds	r3, #1
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	801a      	strh	r2, [r3, #0]
 8002e44:	e032      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x392>
 8002e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x342>
 8002e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	e01b      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x392>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d117      	bne.n	8002eac <HAL_PCD_EP_DB_Transmit+0x392>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e90:	4413      	add	r3, r2
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	011a      	lsls	r2, r3, #4
 8002e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6959      	ldr	r1, [r3, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	891a      	ldrh	r2, [r3, #8]
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f004 f9c8 	bl	8007250 <USB_WritePMA>
 8002ec0:	e1d0      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3306      	adds	r3, #6
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d307      	bcc.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f02:	1ad2      	subs	r2, r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	619a      	str	r2, [r3, #24]
 8002f08:	e002      	b.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 80c4 	bne.w	80030a2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d126      	bne.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x456>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	4413      	add	r3, r2
 8002f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	011a      	lsls	r2, r3, #4
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	4413      	add	r3, r2
 8002f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e01a      	b.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d116      	bne.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	4413      	add	r3, r2
 8002f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	011a      	lsls	r2, r3, #4
 8002f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f98:	4413      	add	r3, r2
 8002f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d12f      	bne.n	8003014 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	011a      	lsls	r2, r3, #4
 8002fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fdc:	4413      	add	r3, r2
 8002fde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300a:	b29a      	uxth	r2, r3
 800300c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e017      	b.n	8003044 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d113      	bne.n	8003044 <HAL_PCD_EP_DB_Transmit+0x52a>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003024:	b29b      	uxth	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302a:	4413      	add	r3, r2
 800302c:	67bb      	str	r3, [r7, #120]	; 0x78
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	011a      	lsls	r2, r3, #4
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	4413      	add	r3, r2
 8003038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800303c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800303e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003040:	2200      	movs	r2, #0
 8003042:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f007 f92f 	bl	800a2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 8104 	bne.w	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
 80030a0:	e0e0      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d121      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	f040 80b4 	bne.w	8003264 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003104:	441a      	add	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003112:	441a      	add	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	429a      	cmp	r2, r3
 8003122:	d309      	bcc.n	8003138 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	621a      	str	r2, [r3, #32]
 8003136:	e015      	b.n	8003164 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003140:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800314e:	e009      	b.n	8003164 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	667b      	str	r3, [r7, #100]	; 0x64
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d155      	bne.n	800321e <HAL_PCD_EP_DB_Transmit+0x704>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003186:	4413      	add	r3, r2
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003192:	4413      	add	r3, r2
 8003194:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003198:	65bb      	str	r3, [r7, #88]	; 0x58
 800319a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031be:	b29a      	uxth	r2, r3
 80031c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	e044      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x736>
 80031c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c8:	2b3e      	cmp	r3, #62	; 0x3e
 80031ca:	d811      	bhi.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	657b      	str	r3, [r7, #84]	; 0x54
 80031d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80031dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031de:	3301      	adds	r3, #1
 80031e0:	657b      	str	r3, [r7, #84]	; 0x54
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e02f      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x736>
 80031f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	657b      	str	r3, [r7, #84]	; 0x54
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003202:	3b01      	subs	r3, #1
 8003204:	657b      	str	r3, [r7, #84]	; 0x54
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	b29b      	uxth	r3, r3
 800320a:	029b      	lsls	r3, r3, #10
 800320c:	b29b      	uxth	r3, r3
 800320e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003216:	b29a      	uxth	r2, r3
 8003218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	e018      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x736>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d114      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x736>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003234:	4413      	add	r3, r2
 8003236:	667b      	str	r3, [r7, #100]	; 0x64
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	011a      	lsls	r2, r3, #4
 800323e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003240:	4413      	add	r3, r2
 8003242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003246:	663b      	str	r3, [r7, #96]	; 0x60
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	b29a      	uxth	r2, r3
 800324c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6959      	ldr	r1, [r3, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	895a      	ldrh	r2, [r3, #10]
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	f003 fff6 	bl	8007250 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327e:	823b      	strh	r3, [r7, #16]
 8003280:	8a3b      	ldrh	r3, [r7, #16]
 8003282:	f083 0310 	eor.w	r3, r3, #16
 8003286:	823b      	strh	r3, [r7, #16]
 8003288:	8a3b      	ldrh	r3, [r7, #16]
 800328a:	f083 0320 	eor.w	r3, r3, #32
 800328e:	823b      	strh	r3, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	8a3b      	ldrh	r3, [r7, #16]
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3788      	adds	r7, #136	; 0x88
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	817b      	strh	r3, [r7, #10]
 80032cc:	4613      	mov	r3, r2
 80032ce:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032d0:	897b      	ldrh	r3, [r7, #10]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e009      	b.n	8003308 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f4:	897a      	ldrh	r2, [r7, #10]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	b29a      	uxth	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	80da      	strh	r2, [r3, #6]
 800331c:	e00b      	b.n	8003336 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2201      	movs	r2, #1
 8003322:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	b29a      	uxth	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	b29a      	uxth	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
	...

08003344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e272      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8087 	beq.w	8003472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003364:	4b92      	ldr	r3, [pc, #584]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b04      	cmp	r3, #4
 800336e:	d00c      	beq.n	800338a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003370:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d112      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5e>
 800337c:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d06c      	beq.n	8003470 <HAL_RCC_OscConfig+0x12c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d168      	bne.n	8003470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e24c      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x76>
 80033ac:	4b80      	ldr	r3, [pc, #512]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7f      	ldr	r2, [pc, #508]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e02e      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b7b      	ldr	r3, [pc, #492]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7a      	ldr	r2, [pc, #488]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0xbc>
 80033e6:	4b72      	ldr	r3, [pc, #456]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a71      	ldr	r2, [pc, #452]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6e      	ldr	r2, [pc, #440]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a67      	ldr	r2, [pc, #412]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fe7c 	bl	800111c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fe78 	bl	800111c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e200      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xe4>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fd fe68 	bl	800111c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fd fe64 	bl	800111c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1ec      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x10c>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800348a:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x18c>
 8003496:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x176>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c0      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4939      	ldr	r1, [pc, #228]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fd fe1d 	bl	800111c <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fd fe19 	bl	800111c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1a1      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4927      	ldr	r1, [pc, #156]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_RCC_OscConfig+0x270>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd fdfc 	bl	800111c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fd fdf8 	bl	800111c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e180      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03a      	beq.n	80035c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <HAL_RCC_OscConfig+0x274>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fd fddc 	bl	800111c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd fdd8 	bl	800111c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e160      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003586:	2001      	movs	r0, #1
 8003588:	f000 fb08 	bl	8003b9c <RCC_Delay>
 800358c:	e01c      	b.n	80035c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_RCC_OscConfig+0x274>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fd fdc2 	bl	800111c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359a:	e00f      	b.n	80035bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd fdbe 	bl	800111c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d908      	bls.n	80035bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e146      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	42420000 	.word	0x42420000
 80035b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b92      	ldr	r3, [pc, #584]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e9      	bne.n	800359c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80a6 	beq.w	8003722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	61d3      	str	r3, [r2, #28]
 80035f2:	4b85      	ldr	r3, [pc, #532]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b82      	ldr	r3, [pc, #520]	; (800380c <HAL_RCC_OscConfig+0x4c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x4c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x4c8>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fd fd7f 	bl	800111c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fd fd7b 	bl	800111c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e103      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b75      	ldr	r3, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x4c8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x312>
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6213      	str	r3, [r2, #32]
 8003654:	e02d      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x334>
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a69      	ldr	r2, [pc, #420]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a66      	ldr	r2, [pc, #408]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x356>
 8003680:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a60      	ldr	r2, [pc, #384]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 800369a:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a5a      	ldr	r2, [pc, #360]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6213      	str	r3, [r2, #32]
 80036a6:	4b58      	ldr	r3, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a57      	ldr	r2, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7fd fd2f 	bl	800111c <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fd2b 	bl	800111c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0b1      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x37e>
 80036e4:	e014      	b.n	8003710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fd19 	bl	800111c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fd15 	bl	800111c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e09b      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	4b40      	ldr	r3, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b3c      	ldr	r3, [pc, #240]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8087 	beq.w	800383a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d061      	beq.n	80037fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d146      	bne.n	80037ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b33      	ldr	r3, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fce9 	bl	800111c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fce5 	bl	800111c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e06d      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d108      	bne.n	8003788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4921      	ldr	r1, [pc, #132]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a19      	ldr	r1, [r3, #32]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	430b      	orrs	r3, r1
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x4cc>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fd fcb9 	bl	800111c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fd fcb5 	bl	800111c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03d      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x46a>
 80037cc:	e035      	b.n	800383a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x4cc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fca2 	bl	800111c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd fc9e 	bl	800111c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e026      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x498>
 80037fa:	e01e      	b.n	800383a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e019      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
 8003810:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x500>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d0      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4965      	ldr	r1, [pc, #404]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d040      	beq.n	8003968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e073      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4936      	ldr	r1, [pc, #216]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003938:	f7fd fbf0 	bl	800111c <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fd fbec 	bl	800111c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e053      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d210      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 0207 	bic.w	r2, r3, #7
 800397e:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f821 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1cc>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1d0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd f8ca 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800c768 	.word	0x0800c768
 8003a14:	20000008 	.word	0x20000008
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b490      	push	{r4, r7}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a24:	1d3c      	adds	r4, r7, #4
 8003a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a2c:	f240 2301 	movw	r3, #513	; 0x201
 8003a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x40>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x46>
 8003a5a:	e02b      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a5e:	623b      	str	r3, [r7, #32]
      break;
 8003a60:	e02b      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	443b      	add	r3, r7
 8003a6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0c5b      	lsrs	r3, r3, #17
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	443b      	add	r3, r7
 8003a8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a96:	fb03 f202 	mul.w	r2, r3, r2
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e004      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	623b      	str	r3, [r7, #32]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab6:	623b      	str	r3, [r7, #32]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc90      	pop	{r4, r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0800c6fc 	.word	0x0800c6fc
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	003d0900 	.word	0x003d0900

08003ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b02      	ldr	r3, [pc, #8]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000008 	.word	0x20000008

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff2 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	0800c778 	.word	0x0800c778

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffde 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	0adb      	lsrs	r3, r3, #11
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	0800c778 	.word	0x0800c778

08003b3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	220f      	movs	r2, #15
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCC_GetClockConfig+0x58>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_RCC_GetClockConfig+0x58>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_GetClockConfig+0x58>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_RCC_GetClockConfig+0x58>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetClockConfig+0x5c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0207 	and.w	r2, r3, #7
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40022000 	.word	0x40022000

08003b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <RCC_Delay+0x34>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <RCC_Delay+0x38>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0a5b      	lsrs	r3, r3, #9
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bb8:	bf00      	nop
  }
  while (Delay --);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	60fa      	str	r2, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <RCC_Delay+0x1c>
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	10624dd3 	.word	0x10624dd3

08003bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d07d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
 8003c10:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d118      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2c:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a42      	ldr	r2, [pc, #264]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c38:	f7fd fa70 	bl	800111c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c40:	f7fd fa6c 	bl	800111c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e06d      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02e      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d027      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c86:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c92:	4a29      	ldr	r2, [pc, #164]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d014      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fd fa3b 	bl	800111c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fa37 	bl	800111c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e036      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ee      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4917      	ldr	r1, [pc, #92]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	490b      	ldr	r1, [pc, #44]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42420440 	.word	0x42420440

08003d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e041      	b.n	8003dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fe8c 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 fae8 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d001      	beq.n	8003dfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_TIM_Base_Start+0x88>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_TIM_Base_Start+0x48>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d009      	beq.n	8003e2c <HAL_TIM_Base_Start+0x48>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <HAL_TIM_Base_Start+0x8c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_Base_Start+0x48>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_TIM_Base_Start+0x90>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d010      	beq.n	8003e60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4e:	e007      	b.n	8003e60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800

08003e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e03a      	b.n	8003f06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_Base_Start_IT+0x98>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x58>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d009      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x58>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x58>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d111      	bne.n	8003ef4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d010      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	e007      	b.n	8003f04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800

08003f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9b1 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9a4 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f9b3 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0204 	mvn.w	r2, #4
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f987 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f97a 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f989 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0208 	mvn.w	r2, #8
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2204      	movs	r2, #4
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f95d 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f950 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f95f 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f933 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f926 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f935 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fc0c 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa77 	bl	8004616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8f9 	bl	8004346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0220 	mvn.w	r2, #32
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa42 	bl	8004604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e0b3      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x180>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d03e      	beq.n	8004258 <HAL_TIM_ConfigClockSource+0xd0>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	f200 8087 	bhi.w	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	f000 8085 	beq.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	d87f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d01a      	beq.n	800422a <HAL_TIM_ConfigClockSource+0xa2>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d87b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f8:	2b60      	cmp	r3, #96	; 0x60
 80041fa:	d050      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x116>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d877      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004200:	2b50      	cmp	r3, #80	; 0x50
 8004202:	d03c      	beq.n	800427e <HAL_TIM_ConfigClockSource+0xf6>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d873      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d058      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x136>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d86f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d064      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d86b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d060      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d867      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d05a      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004228:	e062      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f000 f966 	bl	800450a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800424c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	609a      	str	r2, [r3, #8]
      break;
 8004256:	e04e      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f000 f94f 	bl	800450a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	609a      	str	r2, [r3, #8]
      break;
 800427c:	e03b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 f8c6 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2150      	movs	r1, #80	; 0x50
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f91d 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 800429c:	e02b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 f8e4 	bl	8004478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2160      	movs	r1, #96	; 0x60
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f90d 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e01b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 f8a6 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8fd 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f000 f8f4 	bl	80044d6 <TIM_ITRx_SetConfig>
        break;
 80042ee:	e002      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a26      	ldr	r2, [pc, #152]	; (8004414 <TIM_Base_SetConfig+0xbc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <TIM_Base_SetConfig+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <TIM_Base_SetConfig+0xbc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <TIM_Base_SetConfig+0xc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a07      	ldr	r2, [pc, #28]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	615a      	str	r2, [r3, #20]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800

0800441c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0201 	bic.w	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 030a 	bic.w	r3, r3, #10
 8004458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f023 0210 	bic.w	r2, r3, #16
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	621a      	str	r2, [r3, #32]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f043 0307 	orr.w	r3, r3, #7
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004524:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	431a      	orrs	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	609a      	str	r2, [r3, #8]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800455c:	2302      	movs	r3, #2
 800455e:	e046      	b.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d009      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800

08004604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e03f      	b.n	80046ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fa52 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f829 	bl	80046c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046fe:	f023 030c 	bic.w	r3, r3, #12
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	430b      	orrs	r3, r1
 800470a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <UART_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d103      	bne.n	8004734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7ff f9f2 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	e002      	b.n	800473a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004734:	f7ff f9da 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8004738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009a      	lsls	r2, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	4a22      	ldr	r2, [pc, #136]	; (80047dc <UART_SetConfig+0x118>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	0119      	lsls	r1, r3, #4
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <UART_SetConfig+0x118>)
 8004772:	fba3 0302 	umull	r0, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2064      	movs	r0, #100	; 0x64
 800477a:	fb00 f303 	mul.w	r3, r0, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	3332      	adds	r3, #50	; 0x32
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <UART_SetConfig+0x118>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004790:	4419      	add	r1, r3
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <UART_SetConfig+0x118>)
 80047aa:	fba3 0302 	umull	r0, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2064      	movs	r0, #100	; 0x64
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	3332      	adds	r3, #50	; 0x32
 80047bc:	4a07      	ldr	r2, [pc, #28]	; (80047dc <UART_SetConfig+0x118>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	440a      	add	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40013800 	.word	0x40013800
 80047dc:	51eb851f 	.word	0x51eb851f

080047e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047e0:	b084      	sub	sp, #16
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	f107 0014 	add.w	r0, r7, #20
 80047ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	b004      	add	sp, #16
 80047fe:	4770      	bx	lr

08004800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004810:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004814:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004834:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004838:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	b29b      	uxth	r3, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	b29b      	uxth	r3, r3
 800484a:	4013      	ands	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004878:	b084      	sub	sp, #16
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	f107 0014 	add.w	r0, r7, #20
 8004886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	b004      	add	sp, #16
 80048b6:	4770      	bx	lr

080048b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b09b      	sub	sp, #108	; 0x6c
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d81f      	bhi.n	800492a <USB_ActivateEndpoint+0x72>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <USB_ActivateEndpoint+0x38>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004901 	.word	0x08004901
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	08004933 	.word	0x08004933
 80048fc:	0800490f 	.word	0x0800490f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004900:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004908:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800490c:	e012      	b.n	8004934 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800490e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004912:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004916:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800491a:	e00b      	b.n	8004934 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800491c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004924:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004928:	e004      	b.n	8004934 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004930:	e000      	b.n	8004934 <USB_ActivateEndpoint+0x7c>
      break;
 8004932:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	b29a      	uxth	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	4313      	orrs	r3, r2
 8004976:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	7b1b      	ldrb	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 8149 	bne.w	8004c38 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8084 	beq.w	8004ab8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	011a      	lsls	r2, r3, #4
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	88db      	ldrh	r3, [r3, #6]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	81fb      	strh	r3, [r7, #14]
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <USB_ActivateEndpoint+0x17c>
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	81bb      	strh	r3, [r7, #12]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	89bb      	ldrh	r3, [r7, #12]
 8004a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	78db      	ldrb	r3, [r3, #3]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d020      	beq.n	8004a7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a52:	813b      	strh	r3, [r7, #8]
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	f083 0320 	eor.w	r3, r3, #32
 8004a5a:	813b      	strh	r3, [r7, #8]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8013      	strh	r3, [r2, #0]
 8004a7c:	e27f      	b.n	8004f7e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	897b      	ldrh	r3, [r7, #10]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
 8004ab6:	e262      	b.n	8004f7e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	4413      	add	r3, r2
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	011a      	lsls	r2, r3, #4
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	88db      	ldrh	r3, [r3, #6]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	4413      	add	r3, r2
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <USB_ActivateEndpoint+0x286>
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e02f      	b.n	8004b9e <USB_ActivateEndpoint+0x2e6>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d813      	bhi.n	8004b6e <USB_ActivateEndpoint+0x2b6>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <USB_ActivateEndpoint+0x2a8>
 8004b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	029b      	lsls	r3, r3, #10
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e017      	b.n	8004b9e <USB_ActivateEndpoint+0x2e6>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	663b      	str	r3, [r7, #96]	; 0x60
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <USB_ActivateEndpoint+0x2d0>
 8004b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b84:	3b01      	subs	r3, #1
 8004b86:	663b      	str	r3, [r7, #96]	; 0x60
 8004b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	83fb      	strh	r3, [r7, #30]
 8004bac:	8bfb      	ldrh	r3, [r7, #30]
 8004bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <USB_ActivateEndpoint+0x336>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	83bb      	strh	r3, [r7, #28]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8bbb      	ldrh	r3, [r7, #28]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c04:	837b      	strh	r3, [r7, #26]
 8004c06:	8b7b      	ldrh	r3, [r7, #26]
 8004c08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c0c:	837b      	strh	r3, [r7, #26]
 8004c0e:	8b7b      	ldrh	r3, [r7, #26]
 8004c10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c14:	837b      	strh	r3, [r7, #26]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	8b7b      	ldrh	r3, [r7, #26]
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e1a2      	b.n	8004f7e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c84:	4413      	add	r3, r2
 8004c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	011a      	lsls	r2, r3, #4
 8004c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c96:	657b      	str	r3, [r7, #84]	; 0x54
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	891b      	ldrh	r3, [r3, #8]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	653b      	str	r3, [r7, #80]	; 0x50
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb8:	4413      	add	r3, r2
 8004cba:	653b      	str	r3, [r7, #80]	; 0x50
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	011a      	lsls	r2, r3, #4
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	895b      	ldrh	r3, [r3, #10]
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 8091 	bne.w	8004e08 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01b      	beq.n	8004d36 <USB_ActivateEndpoint+0x47e>
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01b      	beq.n	8004d86 <USB_ActivateEndpoint+0x4ce>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004da0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004da4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004da6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004da8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de4:	867b      	strh	r3, [r7, #50]	; 0x32
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
 8004e06:	e0ba      	b.n	8004f7e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01d      	beq.n	8004e60 <USB_ActivateEndpoint+0x5a8>
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01d      	beq.n	8004eb8 <USB_ActivateEndpoint+0x600>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d024      	beq.n	8004f0a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004eda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ede:	f083 0320 	eor.w	r3, r3, #32
 8004ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
 8004f08:	e01d      	b.n	8004f46 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	376c      	adds	r7, #108	; 0x6c
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b08d      	sub	sp, #52	; 0x34
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	7b1b      	ldrb	r3, [r3, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 808e 	bne.w	80050bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d044      	beq.n	8005032 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	81bb      	strh	r3, [r7, #12]
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <USB_DeactivateEndpoint+0x6c>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	817b      	strh	r3, [r7, #10]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500e:	813b      	strh	r3, [r7, #8]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	893b      	ldrh	r3, [r7, #8]
 800501c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]
 8005030:	e192      	b.n	8005358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	827b      	strh	r3, [r7, #18]
 8005040:	8a7b      	ldrh	r3, [r7, #18]
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01b      	beq.n	8005082 <USB_DeactivateEndpoint+0xf6>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	823b      	strh	r3, [r7, #16]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8a3b      	ldrh	r3, [r7, #16]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	81fb      	strh	r3, [r7, #14]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
 80050ba:	e14d      	b.n	8005358 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 80a5 	bne.w	8005210 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	843b      	strh	r3, [r7, #32]
 80050d4:	8c3b      	ldrh	r3, [r7, #32]
 80050d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <USB_DeactivateEndpoint+0x18a>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	83fb      	strh	r3, [r7, #30]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8bfb      	ldrh	r3, [r7, #30]
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	83bb      	strh	r3, [r7, #28]
 8005124:	8bbb      	ldrh	r3, [r7, #28]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01b      	beq.n	8005166 <USB_DeactivateEndpoint+0x1da>
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	837b      	strh	r3, [r7, #26]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	8b7b      	ldrh	r3, [r7, #26]
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	833b      	strh	r3, [r7, #24]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8b3b      	ldrh	r3, [r7, #24]
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b4:	82fb      	strh	r3, [r7, #22]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8afb      	ldrh	r3, [r7, #22]
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ec:	82bb      	strh	r3, [r7, #20]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8abb      	ldrh	r3, [r7, #20]
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
 800520e:	e0a3      	b.n	8005358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800521e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <USB_DeactivateEndpoint+0x2d4>
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800524c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800526e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <USB_DeactivateEndpoint+0x324>
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	847b      	strh	r3, [r7, #34]	; 0x22
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3734      	adds	r7, #52	; 0x34
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b0cc      	sub	sp, #304	; 0x130
 8005368:	af00      	add	r7, sp, #0
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005372:	6018      	str	r0, [r3, #0]
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b01      	cmp	r3, #1
 800538c:	f041 817d 	bne.w	800668a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053bc:	e007      	b.n	80053ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	7b1b      	ldrb	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d152      	bne.n	8005484 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6959      	ldr	r1, [r3, #20]
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	88da      	ldrh	r2, [r3, #6]
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005400:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005404:	6800      	ldr	r0, [r0, #0]
 8005406:	f001 ff23 	bl	8007250 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005412:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005416:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542c:	b29b      	uxth	r3, r3
 800542e:	4619      	mov	r1, r3
 8005430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005434:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005438:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800543c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	440a      	add	r2, r1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005458:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4413      	add	r3, r2
 8005460:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005472:	b29a      	uxth	r2, r3
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	f001 b8b5 	b.w	80065ee <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f040 84c6 	bne.w	8005e22 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	f240 8443 	bls.w	8005d3a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005520:	1ad2      	subs	r2, r2, r3
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 823e 	beq.w	80059d2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800555e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005562:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 809a 	bne.w	80056b0 <USB_EPStartXfer+0x34c>
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005584:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005588:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	440a      	add	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d122      	bne.n	800562e <USB_EPStartXfer+0x2ca>
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	e079      	b.n	8005722 <USB_EPStartXfer+0x3be>
 800562e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005632:	2b3e      	cmp	r3, #62	; 0x3e
 8005634:	d81b      	bhi.n	800566e <USB_EPStartXfer+0x30a>
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <USB_EPStartXfer+0x2f2>
 800564c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005650:	3301      	adds	r3, #1
 8005652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29a      	uxth	r2, r3
 8005660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005664:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	e059      	b.n	8005722 <USB_EPStartXfer+0x3be>
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <USB_EPStartXfer+0x32a>
 8005684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005688:	3b01      	subs	r3, #1
 800568a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800568e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29b      	uxth	r3, r3
 8005698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e038      	b.n	8005722 <USB_EPStartXfer+0x3be>
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d130      	bne.n	8005722 <USB_EPStartXfer+0x3be>
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	440a      	add	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4413      	add	r3, r2
 8005702:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005714:	b29a      	uxth	r2, r3
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	895b      	ldrh	r3, [r3, #10]
 800572e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005748:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800574c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	f001 fd7d 	bl	8007250 <USB_WritePMA>
            ep->xfer_buff += len;
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	441a      	add	r2, r3
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d90f      	bls.n	80057b0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a0:	1ad2      	subs	r2, r2, r3
 80057a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	621a      	str	r2, [r3, #32]
 80057ae:	e00e      	b.n	80057ce <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80057c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 809a 	bne.w	8005914 <USB_EPStartXfer+0x5b0>
 80057e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005802:	b29b      	uxth	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800580e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005812:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	440a      	add	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	011a      	lsls	r2, r3, #4
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4413      	add	r3, r2
 8005836:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d122      	bne.n	8005892 <USB_EPStartXfer+0x52e>
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800585e:	b29a      	uxth	r2, r3
 8005860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005864:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e083      	b.n	800599a <USB_EPStartXfer+0x636>
 8005892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005896:	2b3e      	cmp	r3, #62	; 0x3e
 8005898:	d81b      	bhi.n	80058d2 <USB_EPStartXfer+0x56e>
 800589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <USB_EPStartXfer+0x556>
 80058b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058b4:	3301      	adds	r3, #1
 80058b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	e063      	b.n	800599a <USB_EPStartXfer+0x636>
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <USB_EPStartXfer+0x58e>
 80058e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058ec:	3b01      	subs	r3, #1
 80058ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005904:	b29a      	uxth	r2, r3
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e042      	b.n	800599a <USB_EPStartXfer+0x636>
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d13a      	bne.n	800599a <USB_EPStartXfer+0x636>
 8005924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005928:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800592c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005930:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005946:	b29b      	uxth	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005956:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	440a      	add	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	011a      	lsls	r2, r3, #4
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4413      	add	r3, r2
 800597a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	b29a      	uxth	r2, r3
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	891b      	ldrh	r3, [r3, #8]
 80059a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6959      	ldr	r1, [r3, #20]
 80059b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059c8:	6800      	ldr	r0, [r0, #0]
 80059ca:	f001 fc41 	bl	8007250 <USB_WritePMA>
 80059ce:	f000 be0e 	b.w	80065ee <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d16d      	bne.n	8005abe <USB_EPStartXfer+0x75a>
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	4413      	add	r3, r2
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011a      	lsls	r2, r3, #4
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d112      	bne.n	8005a4c <USB_EPStartXfer+0x6e8>
 8005a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e063      	b.n	8005b14 <USB_EPStartXfer+0x7b0>
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	2b3e      	cmp	r3, #62	; 0x3e
 8005a52:	d817      	bhi.n	8005a84 <USB_EPStartXfer+0x720>
 8005a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <USB_EPStartXfer+0x710>
 8005a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e047      	b.n	8005b14 <USB_EPStartXfer+0x7b0>
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_EPStartXfer+0x740>
 8005a9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e02a      	b.n	8005b14 <USB_EPStartXfer+0x7b0>
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d122      	bne.n	8005b14 <USB_EPStartXfer+0x7b0>
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8005ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aee:	4413      	add	r3, r2
 8005af0:	653b      	str	r3, [r7, #80]	; 0x50
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	011a      	lsls	r2, r3, #4
 8005b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b02:	4413      	add	r3, r2
 8005b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	891b      	ldrh	r3, [r3, #8]
 8005b20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6959      	ldr	r1, [r3, #20]
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b3a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b42:	6800      	ldr	r0, [r0, #0]
 8005b44:	f001 fb84 	bl	8007250 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	441a      	add	r2, r3
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d90f      	bls.n	8005ba2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	621a      	str	r2, [r3, #32]
 8005ba0:	e00e      	b.n	8005bc0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	643b      	str	r3, [r7, #64]	; 0x40
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d16d      	bne.n	8005cb8 <USB_EPStartXfer+0x954>
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	4413      	add	r3, r2
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d112      	bne.n	8005c46 <USB_EPStartXfer+0x8e2>
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e05d      	b.n	8005d02 <USB_EPStartXfer+0x99e>
 8005c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c4c:	d817      	bhi.n	8005c7e <USB_EPStartXfer+0x91a>
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <USB_EPStartXfer+0x90a>
 8005c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e041      	b.n	8005d02 <USB_EPStartXfer+0x99e>
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <USB_EPStartXfer+0x93a>
 8005c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	029b      	lsls	r3, r3, #10
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e024      	b.n	8005d02 <USB_EPStartXfer+0x99e>
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d11c      	bne.n	8005d02 <USB_EPStartXfer+0x99e>
 8005cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	4413      	add	r3, r2
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	895b      	ldrh	r3, [r3, #10]
 8005d0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6959      	ldr	r1, [r3, #20]
 8005d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d30:	6800      	ldr	r0, [r0, #0]
 8005d32:	f001 fa8d 	bl	8007250 <USB_WritePMA>
 8005d36:	f000 bc5a 	b.w	80065ee <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc6:	4413      	add	r3, r2
 8005dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	891b      	ldrh	r3, [r3, #8]
 8005df8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6959      	ldr	r1, [r3, #20]
 8005e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e12:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e16:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	f001 fa18 	bl	8007250 <USB_WritePMA>
 8005e20:	e3e5      	b.n	80065ee <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 81bc 	beq.w	800623c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d16d      	bne.n	8005fbe <USB_EPStartXfer+0xc5a>
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f02:	4413      	add	r3, r2
 8005f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	011a      	lsls	r2, r3, #4
 8005f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f16:	4413      	add	r3, r2
 8005f18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d112      	bne.n	8005f4c <USB_EPStartXfer+0xbe8>
 8005f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e060      	b.n	800600e <USB_EPStartXfer+0xcaa>
 8005f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f50:	2b3e      	cmp	r3, #62	; 0x3e
 8005f52:	d817      	bhi.n	8005f84 <USB_EPStartXfer+0xc20>
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <USB_EPStartXfer+0xc10>
 8005f6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f6e:	3301      	adds	r3, #1
 8005f70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e044      	b.n	800600e <USB_EPStartXfer+0xcaa>
 8005f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <USB_EPStartXfer+0xc40>
 8005f9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e027      	b.n	800600e <USB_EPStartXfer+0xcaa>
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d11f      	bne.n	800600e <USB_EPStartXfer+0xcaa>
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	011a      	lsls	r2, r3, #4
 8005ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006002:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006008:	b29a      	uxth	r2, r3
 800600a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800600c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	895b      	ldrh	r3, [r3, #10]
 800601a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602e:	b29b      	uxth	r3, r3
 8006030:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006034:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006038:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f001 f907 	bl	8007250 <USB_WritePMA>
          ep->xfer_buff += len;
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	441a      	add	r2, r3
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1a      	ldr	r2, [r3, #32]
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90f      	bls.n	800609c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608c:	1ad2      	subs	r2, r2, r3
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	621a      	str	r2, [r3, #32]
 800609a:	e00e      	b.n	80060ba <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80060ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8295 	beq.w	80065ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d16d      	bne.n	80061b0 <USB_EPStartXfer+0xe4c>
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060f4:	4413      	add	r3, r2
 80060f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	011a      	lsls	r2, r3, #4
 8006106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006108:	4413      	add	r3, r2
 800610a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800610e:	667b      	str	r3, [r7, #100]	; 0x64
 8006110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d112      	bne.n	800613e <USB_EPStartXfer+0xdda>
 8006118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006122:	b29a      	uxth	r2, r3
 8006124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006136:	b29a      	uxth	r2, r3
 8006138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e063      	b.n	8006206 <USB_EPStartXfer+0xea2>
 800613e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006142:	2b3e      	cmp	r3, #62	; 0x3e
 8006144:	d817      	bhi.n	8006176 <USB_EPStartXfer+0xe12>
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <USB_EPStartXfer+0xe02>
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29a      	uxth	r2, r3
 8006170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	e047      	b.n	8006206 <USB_EPStartXfer+0xea2>
 8006176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <USB_EPStartXfer+0xe32>
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006190:	3b01      	subs	r3, #1
 8006192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e02a      	b.n	8006206 <USB_EPStartXfer+0xea2>
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d122      	bne.n	8006206 <USB_EPStartXfer+0xea2>
 80061c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	673b      	str	r3, [r7, #112]	; 0x70
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e0:	4413      	add	r3, r2
 80061e2:	673b      	str	r3, [r7, #112]	; 0x70
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	011a      	lsls	r2, r3, #4
 80061f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	b29a      	uxth	r2, r3
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	891b      	ldrh	r3, [r3, #8]
 8006212:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6959      	ldr	r1, [r3, #20]
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	b29b      	uxth	r3, r3
 8006228:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800622c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006230:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006234:	6800      	ldr	r0, [r0, #0]
 8006236:	f001 f80b 	bl	8007250 <USB_WritePMA>
 800623a:	e1d8      	b.n	80065ee <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d178      	bne.n	800633e <USB_EPStartXfer+0xfda>
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006270:	4413      	add	r3, r2
 8006272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	011a      	lsls	r2, r3, #4
 8006284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006288:	4413      	add	r3, r2
 800628a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800628e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d116      	bne.n	80062c8 <USB_EPStartXfer+0xf64>
 800629a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e06b      	b.n	80063a0 <USB_EPStartXfer+0x103c>
 80062c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062cc:	2b3e      	cmp	r3, #62	; 0x3e
 80062ce:	d818      	bhi.n	8006302 <USB_EPStartXfer+0xf9e>
 80062d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <USB_EPStartXfer+0xf8c>
 80062e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062ea:	3301      	adds	r3, #1
 80062ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e04e      	b.n	80063a0 <USB_EPStartXfer+0x103c>
 8006302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <USB_EPStartXfer+0xfbe>
 8006318:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800631c:	3b01      	subs	r3, #1
 800631e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006322:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006326:	b29b      	uxth	r3, r3
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	e030      	b.n	80063a0 <USB_EPStartXfer+0x103c>
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d128      	bne.n	80063a0 <USB_EPStartXfer+0x103c>
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800638a:	4413      	add	r3, r2
 800638c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800639e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	891b      	ldrh	r3, [r3, #8]
 80063ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6959      	ldr	r1, [r3, #20]
 80063bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063ce:	6800      	ldr	r0, [r0, #0]
 80063d0:	f000 ff3e 	bl	8007250 <USB_WritePMA>
          ep->xfer_buff += len;
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	441a      	add	r2, r3
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d90f      	bls.n	800642e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	621a      	str	r2, [r3, #32]
 800642c:	e00e      	b.n	800644c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2200      	movs	r2, #0
 800644a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800644c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80cc 	beq.w	80065ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d178      	bne.n	8006566 <USB_EPStartXfer+0x1202>
 8006474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006490:	b29b      	uxth	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006498:	4413      	add	r3, r2
 800649a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800649e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	011a      	lsls	r2, r3, #4
 80064ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064b0:	4413      	add	r3, r2
 80064b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d116      	bne.n	80064f0 <USB_EPStartXfer+0x118c>
 80064c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e064      	b.n	80065ba <USB_EPStartXfer+0x1256>
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	2b3e      	cmp	r3, #62	; 0x3e
 80064f6:	d818      	bhi.n	800652a <USB_EPStartXfer+0x11c6>
 80064f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <USB_EPStartXfer+0x11b4>
 800650e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006512:	3301      	adds	r3, #1
 8006514:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29a      	uxth	r2, r3
 8006522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e047      	b.n	80065ba <USB_EPStartXfer+0x1256>
 800652a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <USB_EPStartXfer+0x11e6>
 8006540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006544:	3b01      	subs	r3, #1
 8006546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800654a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654e:	b29b      	uxth	r3, r3
 8006550:	029b      	lsls	r3, r3, #10
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655c:	b29a      	uxth	r2, r3
 800655e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	e029      	b.n	80065ba <USB_EPStartXfer+0x1256>
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d121      	bne.n	80065ba <USB_EPStartXfer+0x1256>
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800658c:	4413      	add	r3, r2
 800658e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	011a      	lsls	r2, r3, #4
 80065a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	895b      	ldrh	r3, [r3, #10]
 80065c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6959      	ldr	r1, [r3, #20]
 80065d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065e8:	6800      	ldr	r0, [r0, #0]
 80065ea:	f000 fe31 	bl	8007250 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006610:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	8013      	strh	r3, [r2, #0]
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006626:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800662a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	f082 0210 	eor.w	r2, r2, #16
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800663e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006642:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	f082 0220 	eor.w	r2, r2, #32
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006682:	b29b      	uxth	r3, r3
 8006684:	8013      	strh	r3, [r2, #0]
 8006686:	f000 bc9f 	b.w	8006fc8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	7b1b      	ldrb	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 80ae 	bne.w	80067f8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d917      	bls.n	80066e8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80066b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80066c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	619a      	str	r2, [r3, #24]
 80066e6:	e00e      	b.n	8006706 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800672a:	4413      	add	r3, r2
 800672c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	011a      	lsls	r2, r3, #4
 800673e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006742:	4413      	add	r3, r2
 8006744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800674c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d116      	bne.n	8006782 <USB_EPStartXfer+0x141e>
 8006754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e3e8      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
 8006782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006786:	2b3e      	cmp	r3, #62	; 0x3e
 8006788:	d818      	bhi.n	80067bc <USB_EPStartXfer+0x1458>
 800678a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <USB_EPStartXfer+0x1446>
 80067a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a4:	3301      	adds	r3, #1
 80067a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	029b      	lsls	r3, r3, #10
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e3cb      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
 80067bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <USB_EPStartXfer+0x1478>
 80067d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067d6:	3b01      	subs	r3, #1
 80067d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	029b      	lsls	r3, r3, #10
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e3ad      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	78db      	ldrb	r3, [r3, #3]
 8006804:	2b02      	cmp	r3, #2
 8006806:	f040 8200 	bne.w	8006c0a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f040 8091 	bne.w	800693e <USB_EPStartXfer+0x15da>
 800681c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006838:	b29b      	uxth	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006840:	4413      	add	r3, r2
 8006842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	011a      	lsls	r2, r3, #4
 8006854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006858:	4413      	add	r3, r2
 800685a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800685e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d116      	bne.n	80068a0 <USB_EPStartXfer+0x153c>
 8006872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e083      	b.n	80069a8 <USB_EPStartXfer+0x1644>
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b3e      	cmp	r3, #62	; 0x3e
 80068ae:	d820      	bhi.n	80068f2 <USB_EPStartXfer+0x158e>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <USB_EPStartXfer+0x157c>
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	3301      	adds	r3, #1
 80068dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e05a      	b.n	80069a8 <USB_EPStartXfer+0x1644>
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2b00      	cmp	r3, #0
 8006916:	d104      	bne.n	8006922 <USB_EPStartXfer+0x15be>
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691c:	3b01      	subs	r3, #1
 800691e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	b29b      	uxth	r3, r3
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	b29b      	uxth	r3, r3
 800692c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e034      	b.n	80069a8 <USB_EPStartXfer+0x1644>
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12c      	bne.n	80069a8 <USB_EPStartXfer+0x1644>
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006972:	4413      	add	r3, r2
 8006974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	011a      	lsls	r2, r3, #4
 8006986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800698a:	4413      	add	r3, r2
 800698c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 8091 	bne.w	8006aea <USB_EPStartXfer+0x1786>
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069ec:	4413      	add	r3, r2
 80069ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	011a      	lsls	r2, r3, #4
 8006a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d116      	bne.n	8006a4c <USB_EPStartXfer+0x16e8>
 8006a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	e07c      	b.n	8006b46 <USB_EPStartXfer+0x17e2>
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5a:	d820      	bhi.n	8006a9e <USB_EPStartXfer+0x173a>
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <USB_EPStartXfer+0x1728>
 8006a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a86:	3301      	adds	r3, #1
 8006a88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e053      	b.n	8006b46 <USB_EPStartXfer+0x17e2>
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <USB_EPStartXfer+0x176a>
 8006ac4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ace:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	029b      	lsls	r3, r3, #10
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	e02d      	b.n	8006b46 <USB_EPStartXfer+0x17e2>
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d125      	bne.n	8006b46 <USB_EPStartXfer+0x17e2>
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b10:	4413      	add	r3, r2
 8006b12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	011a      	lsls	r2, r3, #4
 8006b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 81fe 	beq.w	8006f54 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <USB_EPStartXfer+0x182c>
 8006b84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 81db 	bne.w	8006f54 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b9e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 81d4 	bne.w	8006f54 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	441a      	add	r2, r3
 8006bf0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8013      	strh	r3, [r2, #0]
 8006c08:	e1a4      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	f040 819a 	bne.w	8006f50 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d917      	bls.n	8006c68 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	619a      	str	r2, [r3, #24]
 8006c66:	e00e      	b.n	8006c86 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d178      	bne.n	8006d88 <USB_EPStartXfer+0x1a24>
 8006c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cba:	4413      	add	r3, r2
 8006cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	011a      	lsls	r2, r3, #4
 8006cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d116      	bne.n	8006d12 <USB_EPStartXfer+0x19ae>
 8006ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e06b      	b.n	8006dea <USB_EPStartXfer+0x1a86>
 8006d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d16:	2b3e      	cmp	r3, #62	; 0x3e
 8006d18:	d818      	bhi.n	8006d4c <USB_EPStartXfer+0x19e8>
 8006d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <USB_EPStartXfer+0x19d6>
 8006d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d34:	3301      	adds	r3, #1
 8006d36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	029b      	lsls	r3, r3, #10
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e04e      	b.n	8006dea <USB_EPStartXfer+0x1a86>
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USB_EPStartXfer+0x1a08>
 8006d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d66:	3b01      	subs	r3, #1
 8006d68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e030      	b.n	8006dea <USB_EPStartXfer+0x1a86>
 8006d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d128      	bne.n	8006dea <USB_EPStartXfer+0x1a86>
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	011a      	lsls	r2, r3, #4
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d178      	bne.n	8006efa <USB_EPStartXfer+0x1b96>
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	011a      	lsls	r2, r3, #4
 8006e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d116      	bne.n	8006e84 <USB_EPStartXfer+0x1b20>
 8006e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e067      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
 8006e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e88:	2b3e      	cmp	r3, #62	; 0x3e
 8006e8a:	d818      	bhi.n	8006ebe <USB_EPStartXfer+0x1b5a>
 8006e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <USB_EPStartXfer+0x1b48>
 8006ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e04a      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
 8006ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <USB_EPStartXfer+0x1b7a>
 8006ed4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e02c      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d124      	bne.n	8006f54 <USB_EPStartXfer+0x1bf0>
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f20:	4413      	add	r3, r2
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	011a      	lsls	r2, r3, #4
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	e001      	b.n	8006f54 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e03a      	b.n	8006fca <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f7e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f8a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d020      	beq.n	8007028 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffc:	81bb      	strh	r3, [r7, #12]
 8006ffe:	89bb      	ldrh	r3, [r7, #12]
 8007000:	f083 0310 	eor.w	r3, r3, #16
 8007004:	81bb      	strh	r3, [r7, #12]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	89bb      	ldrh	r3, [r7, #12]
 8007012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	b29b      	uxth	r3, r3
 8007024:	8013      	strh	r3, [r2, #0]
 8007026:	e01f      	b.n	8007068 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	81fb      	strh	r3, [r7, #14]
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007046:	81fb      	strh	r3, [r7, #14]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	89fb      	ldrh	r3, [r7, #14]
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	7b1b      	ldrb	r3, [r3, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 809d 	bne.w	80071c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d04c      	beq.n	800712a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	823b      	strh	r3, [r7, #16]
 800709e:	8a3b      	ldrh	r3, [r7, #16]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01b      	beq.n	80070e0 <USB_EPClearStall+0x6c>
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070be:	81fb      	strh	r3, [r7, #14]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	441a      	add	r2, r3
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070dc:	b29b      	uxth	r3, r3
 80070de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	78db      	ldrb	r3, [r3, #3]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d06c      	beq.n	80071c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	81bb      	strh	r3, [r7, #12]
 8007100:	89bb      	ldrh	r3, [r7, #12]
 8007102:	f083 0320 	eor.w	r3, r3, #32
 8007106:	81bb      	strh	r3, [r7, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	89bb      	ldrh	r3, [r7, #12]
 8007114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]
 8007128:	e04b      	b.n	80071c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	82fb      	strh	r3, [r7, #22]
 8007138:	8afb      	ldrh	r3, [r7, #22]
 800713a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01b      	beq.n	800717a <USB_EPClearStall+0x106>
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007158:	82bb      	strh	r3, [r7, #20]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	8abb      	ldrh	r3, [r7, #20]
 8007166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	827b      	strh	r3, [r7, #18]
 8007192:	8a7b      	ldrh	r3, [r7, #18]
 8007194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007198:	827b      	strh	r3, [r7, #18]
 800719a:	8a7b      	ldrh	r3, [r7, #18]
 800719c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071a0:	827b      	strh	r3, [r7, #18]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	8a7b      	ldrh	r3, [r7, #18]
 80071ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071be:	b29b      	uxth	r3, r3
 80071c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2280      	movs	r2, #128	; 0x80
 80071e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr

080071f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800722a:	b29b      	uxth	r3, r3
 800722c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007250:	b480      	push	{r7}
 8007252:	b08d      	sub	sp, #52	; 0x34
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4611      	mov	r1, r2
 800725c:	461a      	mov	r2, r3
 800725e:	460b      	mov	r3, r1
 8007260:	80fb      	strh	r3, [r7, #6]
 8007262:	4613      	mov	r3, r2
 8007264:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007266:	88bb      	ldrh	r3, [r7, #4]
 8007268:	3301      	adds	r3, #1
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	005a      	lsls	r2, r3, #1
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007288:	e01e      	b.n	80072c8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	3302      	adds	r3, #2
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	3302      	adds	r3, #2
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	3301      	adds	r3, #1
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	3b01      	subs	r3, #1
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1dd      	bne.n	800728a <USB_WritePMA+0x3a>
  }
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	3734      	adds	r7, #52	; 0x34
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072da:	b480      	push	{r7}
 80072dc:	b08b      	sub	sp, #44	; 0x2c
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	4611      	mov	r1, r2
 80072e6:	461a      	mov	r2, r3
 80072e8:	460b      	mov	r3, r1
 80072ea:	80fb      	strh	r3, [r7, #6]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80072f0:	88bb      	ldrh	r3, [r7, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	005a      	lsls	r2, r3, #1
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800730c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
 8007312:	e01b      	b.n	800734c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	3302      	adds	r3, #2
 8007320:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	b2da      	uxtb	r2, r3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	3301      	adds	r3, #1
 800733e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	3302      	adds	r3, #2
 8007344:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	3b01      	subs	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e0      	bne.n	8007314 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007352:	88bb      	ldrh	r3, [r7, #4]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	701a      	strb	r2, [r3, #0]
  }
}
 800736e:	bf00      	nop
 8007370:	372c      	adds	r7, #44	; 0x2c
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7c1b      	ldrb	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d115      	bne.n	80073bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007394:	2202      	movs	r2, #2
 8007396:	2181      	movs	r1, #129	; 0x81
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f003 f86c 	bl	800a476 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a8:	2202      	movs	r2, #2
 80073aa:	2101      	movs	r1, #1
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f003 f862 	bl	800a476 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80073ba:	e012      	b.n	80073e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	2202      	movs	r2, #2
 80073c0:	2181      	movs	r1, #129	; 0x81
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f003 f857 	bl	800a476 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	2202      	movs	r2, #2
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f003 f84e 	bl	800a476 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073e2:	2308      	movs	r3, #8
 80073e4:	2203      	movs	r2, #3
 80073e6:	2182      	movs	r1, #130	; 0x82
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f003 f844 	bl	800a476 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073f8:	f003 f964 	bl	800a6c4 <USBD_static_malloc>
 80073fc:	4602      	mov	r2, r0
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e026      	b.n	8007462 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007448:	2101      	movs	r1, #1
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 f904 	bl	800a658 <USBD_LL_PrepareReceive>
 8007450:	e007      	b.n	8007462 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f003 f8fb 	bl	800a658 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800747c:	2181      	movs	r1, #129	; 0x81
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f003 f81f 	bl	800a4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800748a:	2101      	movs	r1, #1
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f003 f818 	bl	800a4c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800749a:	2182      	movs	r1, #130	; 0x82
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f003 f810 	bl	800a4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c2:	4618      	mov	r0, r3
 80074c4:	f003 f90a 	bl	800a6dc <USBD_static_free>
    pdev->pClassData = NULL;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007500:	2b00      	cmp	r3, #0
 8007502:	d039      	beq.n	8007578 <USBD_CDC_Setup+0x9e>
 8007504:	2b20      	cmp	r3, #32
 8007506:	d17f      	bne.n	8007608 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d029      	beq.n	8007564 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b25b      	sxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	da11      	bge.n	800753e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	88d2      	ldrh	r2, [r2, #6]
 800752c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800752e:	6939      	ldr	r1, [r7, #16]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	88db      	ldrh	r3, [r3, #6]
 8007534:	461a      	mov	r2, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fa09 	bl	800894e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800753c:	e06b      	b.n	8007616 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785a      	ldrb	r2, [r3, #1]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	88db      	ldrh	r3, [r3, #6]
 800754c:	b2da      	uxtb	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007554:	6939      	ldr	r1, [r7, #16]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	461a      	mov	r2, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fa24 	bl	80089aa <USBD_CtlPrepareRx>
      break;
 8007562:	e058      	b.n	8007616 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	7850      	ldrb	r0, [r2, #1]
 8007570:	2200      	movs	r2, #0
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	4798      	blx	r3
      break;
 8007576:	e04e      	b.n	8007616 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b0b      	cmp	r3, #11
 800757e:	d02e      	beq.n	80075de <USBD_CDC_Setup+0x104>
 8007580:	2b0b      	cmp	r3, #11
 8007582:	dc38      	bgt.n	80075f6 <USBD_CDC_Setup+0x11c>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <USBD_CDC_Setup+0xb4>
 8007588:	2b0a      	cmp	r3, #10
 800758a:	d014      	beq.n	80075b6 <USBD_CDC_Setup+0xdc>
 800758c:	e033      	b.n	80075f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007594:	2b03      	cmp	r3, #3
 8007596:	d107      	bne.n	80075a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007598:	f107 030c 	add.w	r3, r7, #12
 800759c:	2202      	movs	r2, #2
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 f9d4 	bl	800894e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075a6:	e02e      	b.n	8007606 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f965 	bl	800887a <USBD_CtlError>
            ret = USBD_FAIL;
 80075b0:	2302      	movs	r3, #2
 80075b2:	75fb      	strb	r3, [r7, #23]
          break;
 80075b4:	e027      	b.n	8007606 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d107      	bne.n	80075d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80075c0:	f107 030f 	add.w	r3, r7, #15
 80075c4:	2201      	movs	r2, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f9c0 	bl	800894e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ce:	e01a      	b.n	8007606 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f951 	bl	800887a <USBD_CtlError>
            ret = USBD_FAIL;
 80075d8:	2302      	movs	r3, #2
 80075da:	75fb      	strb	r3, [r7, #23]
          break;
 80075dc:	e013      	b.n	8007606 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d00d      	beq.n	8007604 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f945 	bl	800887a <USBD_CtlError>
            ret = USBD_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075f4:	e006      	b.n	8007604 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f93e 	bl	800887a <USBD_CtlError>
          ret = USBD_FAIL;
 80075fe:	2302      	movs	r3, #2
 8007600:	75fb      	strb	r3, [r7, #23]
          break;
 8007602:	e000      	b.n	8007606 <USBD_CDC_Setup+0x12c>
          break;
 8007604:	bf00      	nop
      }
      break;
 8007606:	e006      	b.n	8007616 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 f935 	bl	800887a <USBD_CtlError>
      ret = USBD_FAIL;
 8007610:	2302      	movs	r3, #2
 8007612:	75fb      	strb	r3, [r7, #23]
      break;
 8007614:	bf00      	nop
  }

  return ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800763a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03a      	beq.n	80076bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	331c      	adds	r3, #28
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d029      	beq.n	80076b0 <USBD_CDC_DataIn+0x90>
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	331c      	adds	r3, #28
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	78f9      	ldrb	r1, [r7, #3]
 8007670:	68b8      	ldr	r0, [r7, #8]
 8007672:	460b      	mov	r3, r1
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4403      	add	r3, r0
 800767c:	3338      	adds	r3, #56	; 0x38
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	fbb2 f1f3 	udiv	r1, r2, r3
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d110      	bne.n	80076b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	331c      	adds	r3, #28
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076a2:	78f9      	ldrb	r1, [r7, #3]
 80076a4:	2300      	movs	r3, #0
 80076a6:	2200      	movs	r2, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 ffb2 	bl	800a612 <USBD_LL_Transmit>
 80076ae:	e003      	b.n	80076b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e000      	b.n	80076be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076bc:	2302      	movs	r3, #2
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f002 ffdd 	bl	800a69e <USBD_LL_GetRxDataSize>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800770a:	4611      	mov	r1, r2
 800770c:	4798      	blx	r3

    return USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	e000      	b.n	8007714 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007712:	2302      	movs	r3, #2
  }
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007732:	2b00      	cmp	r3, #0
 8007734:	d015      	beq.n	8007762 <USBD_CDC_EP0_RxReady+0x46>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800773c:	2bff      	cmp	r3, #255	; 0xff
 800773e:	d010      	beq.n	8007762 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800774e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007756:	b292      	uxth	r2, r2
 8007758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	22ff      	movs	r2, #255	; 0xff
 800775e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2243      	movs	r2, #67	; 0x43
 8007778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800777a:	4b03      	ldr	r3, [pc, #12]	; (8007788 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	2000009c 	.word	0x2000009c

0800778c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2243      	movs	r2, #67	; 0x43
 8007798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000058 	.word	0x20000058

080077ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2243      	movs	r2, #67	; 0x43
 80077b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077ba:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	200000e0 	.word	0x200000e0

080077cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220a      	movs	r2, #10
 80077d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000014 	.word	0x20000014

080077ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077f6:	2302      	movs	r3, #2
 80077f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr

0800784a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr

08007870 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01c      	beq.n	80078c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007890:	2b00      	cmp	r3, #0
 8007892:	d115      	bne.n	80078c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2181      	movs	r1, #129	; 0x81
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f002 feab 	bl	800a612 <USBD_LL_Transmit>

      return USBD_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e002      	b.n	80078c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078c4:	2302      	movs	r3, #2
  }
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d017      	beq.n	8007918 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7c1b      	ldrb	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f002 feab 	bl	800a658 <USBD_LL_PrepareReceive>
 8007902:	e007      	b.n	8007914 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800790a:	2340      	movs	r3, #64	; 0x40
 800790c:	2101      	movs	r1, #1
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 fea2 	bl	800a658 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	4613      	mov	r3, r2
 800792e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	e01a      	b.n	8007970 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	79fa      	ldrb	r2, [r7, #7]
 8007966:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f002 fd0f 	bl	800a38c <USBD_LL_Init>

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d006      	beq.n	800799a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]
 8007998:	e001      	b.n	800799e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800799a:	2302      	movs	r3, #2
 800799c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr

080079aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f002 fd44 	bl	800a440 <USBD_LL_Start>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	4611      	mov	r1, r2
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fed8 	bl	8008802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a60:	461a      	mov	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d016      	beq.n	8007aa4 <USBD_LL_SetupStage+0x6a>
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d81c      	bhi.n	8007ab4 <USBD_LL_SetupStage+0x7a>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <USBD_LL_SetupStage+0x4a>
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d008      	beq.n	8007a94 <USBD_LL_SetupStage+0x5a>
 8007a82:	e017      	b.n	8007ab4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9cb 	bl	8007e28 <USBD_StdDevReq>
      break;
 8007a92:	e01a      	b.n	8007aca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa2d 	bl	8007efc <USBD_StdItfReq>
      break;
 8007aa2:	e012      	b.n	8007aca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa6d 	bl	8007f8c <USBD_StdEPReq>
      break;
 8007ab2:	e00a      	b.n	8007aca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f002 fd1c 	bl	800a500 <USBD_LL_StallEP>
      break;
 8007ac8:	bf00      	nop
  }

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	460b      	mov	r3, r1
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d14b      	bne.n	8007b80 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007aee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d134      	bne.n	8007b64 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d919      	bls.n	8007b3a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d203      	bcs.n	8007b28 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	e002      	b.n	8007b2e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 ff57 	bl	80089e6 <USBD_CtlContinueRx>
 8007b38:	e038      	b.n	8007bac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d105      	bne.n	8007b5c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 ff54 	bl	8008a0a <USBD_CtlSendStatus>
 8007b62:	e023      	b.n	8007bac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d11e      	bne.n	8007bac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b76:	2100      	movs	r1, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f002 fcc1 	bl	800a500 <USBD_LL_StallEP>
 8007b7e:	e015      	b.n	8007bac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d108      	bne.n	8007ba8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	7afa      	ldrb	r2, [r7, #11]
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	4798      	blx	r3
 8007ba6:	e001      	b.n	8007bac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e000      	b.n	8007bae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b086      	sub	sp, #24
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d17f      	bne.n	8007cca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3314      	adds	r3, #20
 8007bce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d15c      	bne.n	8007c94 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d915      	bls.n	8007c12 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fec1 	bl	8008986 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c04:	2300      	movs	r3, #0
 8007c06:	2200      	movs	r2, #0
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f002 fd24 	bl	800a658 <USBD_LL_PrepareReceive>
 8007c10:	e04e      	b.n	8007cb0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	6912      	ldr	r2, [r2, #16]
 8007c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c1e:	fb01 f202 	mul.w	r2, r1, r2
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11c      	bne.n	8007c62 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d316      	bcc.n	8007c62 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d20f      	bcs.n	8007c62 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 fe9d 	bl	8008986 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c54:	2300      	movs	r3, #0
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f002 fcfc 	bl	800a658 <USBD_LL_PrepareReceive>
 8007c60:	e026      	b.n	8007cb0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d105      	bne.n	8007c84 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c84:	2180      	movs	r1, #128	; 0x80
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f002 fc3a 	bl	800a500 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fecf 	bl	8008a30 <USBD_CtlReceiveStatus>
 8007c92:	e00d      	b.n	8007cb0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d004      	beq.n	8007ca8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f002 fc28 	bl	800a500 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d11d      	bne.n	8007cf6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fe81 	bl	80079c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cc8:	e015      	b.n	8007cf6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d108      	bne.n	8007cf2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	7afa      	ldrb	r2, [r7, #11]
 8007cea:	4611      	mov	r1, r2
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	4798      	blx	r3
 8007cf0:	e001      	b.n	8007cf6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e000      	b.n	8007cf8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f002 fbb1 	bl	800a476 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2240      	movs	r2, #64	; 0x40
 8007d20:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	2200      	movs	r2, #0
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f002 fba3 	bl	800a476 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2240      	movs	r2, #64	; 0x40
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6852      	ldr	r2, [r2, #4]
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	4611      	mov	r1, r2
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
  }

  return USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2204      	movs	r2, #4
 8007db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d105      	bne.n	8007de6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d10b      	bne.n	8007e1c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d005      	beq.n	8007e4e <USBD_StdDevReq+0x26>
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d84f      	bhi.n	8007ee6 <USBD_StdDevReq+0xbe>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <USBD_StdDevReq+0x36>
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d14b      	bne.n	8007ee6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
      break;
 8007e5c:	e048      	b.n	8007ef0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d839      	bhi.n	8007eda <USBD_StdDevReq+0xb2>
 8007e66:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <USBD_StdDevReq+0x44>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007ebd 	.word	0x08007ebd
 8007e70:	08007ed1 	.word	0x08007ed1
 8007e74:	08007edb 	.word	0x08007edb
 8007e78:	08007ec7 	.word	0x08007ec7
 8007e7c:	08007edb 	.word	0x08007edb
 8007e80:	08007e9f 	.word	0x08007e9f
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007edb 	.word	0x08007edb
 8007e8c:	08007eb3 	.word	0x08007eb3
 8007e90:	08007ea9 	.word	0x08007ea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9dc 	bl	8008254 <USBD_GetDescriptor>
          break;
 8007e9c:	e022      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fb3f 	bl	8008524 <USBD_SetAddress>
          break;
 8007ea6:	e01d      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb7e 	bl	80085ac <USBD_SetConfig>
          break;
 8007eb0:	e018      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fc07 	bl	80086c8 <USBD_GetConfig>
          break;
 8007eba:	e013      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc37 	bl	8008732 <USBD_GetStatus>
          break;
 8007ec4:	e00e      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc65 	bl	8008798 <USBD_SetFeature>
          break;
 8007ece:	e009      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fc74 	bl	80087c0 <USBD_ClrFeature>
          break;
 8007ed8:	e004      	b.n	8007ee4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fccc 	bl	800887a <USBD_CtlError>
          break;
 8007ee2:	bf00      	nop
      }
      break;
 8007ee4:	e004      	b.n	8007ef0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fcc6 	bl	800887a <USBD_CtlError>
      break;
 8007eee:	bf00      	nop
  }

  return ret;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d005      	beq.n	8007f22 <USBD_StdItfReq+0x26>
 8007f16:	2b40      	cmp	r3, #64	; 0x40
 8007f18:	d82e      	bhi.n	8007f78 <USBD_StdItfReq+0x7c>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <USBD_StdItfReq+0x26>
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d12a      	bne.n	8007f78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d81d      	bhi.n	8007f6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	889b      	ldrh	r3, [r3, #4]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d813      	bhi.n	8007f60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d110      	bne.n	8007f74 <USBD_StdItfReq+0x78>
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fd56 	bl	8008a0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f5e:	e009      	b.n	8007f74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc89 	bl	800887a <USBD_CtlError>
          break;
 8007f68:	e004      	b.n	8007f74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc84 	bl	800887a <USBD_CtlError>
          break;
 8007f72:	e000      	b.n	8007f76 <USBD_StdItfReq+0x7a>
          break;
 8007f74:	bf00      	nop
      }
      break;
 8007f76:	e004      	b.n	8007f82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fc7d 	bl	800887a <USBD_CtlError>
      break;
 8007f80:	bf00      	nop
  }

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	889b      	ldrh	r3, [r3, #4]
 8007f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d007      	beq.n	8007fbc <USBD_StdEPReq+0x30>
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	f200 8146 	bhi.w	800823e <USBD_StdEPReq+0x2b2>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <USBD_StdEPReq+0x40>
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	f040 8141 	bne.w	800823e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
      break;
 8007fca:	e13d      	b.n	8008248 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d10a      	bne.n	8007fee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	e12d      	b.n	800824a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d007      	beq.n	8008006 <USBD_StdEPReq+0x7a>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f300 811b 	bgt.w	8008232 <USBD_StdEPReq+0x2a6>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d072      	beq.n	80080e6 <USBD_StdEPReq+0x15a>
 8008000:	2b01      	cmp	r3, #1
 8008002:	d03a      	beq.n	800807a <USBD_StdEPReq+0xee>
 8008004:	e115      	b.n	8008232 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	2b02      	cmp	r3, #2
 800800e:	d002      	beq.n	8008016 <USBD_StdEPReq+0x8a>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d015      	beq.n	8008040 <USBD_StdEPReq+0xb4>
 8008014:	e02b      	b.n	800806e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00c      	beq.n	8008036 <USBD_StdEPReq+0xaa>
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d009      	beq.n	8008036 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f002 fa6a 	bl	800a500 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800802c:	2180      	movs	r1, #128	; 0x80
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fa66 	bl	800a500 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008034:	e020      	b.n	8008078 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc1e 	bl	800887a <USBD_CtlError>
              break;
 800803e:	e01b      	b.n	8008078 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10e      	bne.n	8008066 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <USBD_StdEPReq+0xda>
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b80      	cmp	r3, #128	; 0x80
 8008052:	d008      	beq.n	8008066 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f002 fa4d 	bl	800a500 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fccf 	bl	8008a0a <USBD_CtlSendStatus>

              break;
 800806c:	e004      	b.n	8008078 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc02 	bl	800887a <USBD_CtlError>
              break;
 8008076:	bf00      	nop
          }
          break;
 8008078:	e0e0      	b.n	800823c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0xfe>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d015      	beq.n	80080b4 <USBD_StdEPReq+0x128>
 8008088:	e026      	b.n	80080d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <USBD_StdEPReq+0x11e>
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d009      	beq.n	80080aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 fa30 	bl	800a500 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f002 fa2c 	bl	800a500 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080a8:	e01c      	b.n	80080e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fbe4 	bl	800887a <USBD_CtlError>
              break;
 80080b2:	e017      	b.n	80080e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	885b      	ldrh	r3, [r3, #2]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d112      	bne.n	80080e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f002 fa37 	bl	800a53e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fc9a 	bl	8008a0a <USBD_CtlSendStatus>
              }
              break;
 80080d6:	e004      	b.n	80080e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fbcd 	bl	800887a <USBD_CtlError>
              break;
 80080e0:	e000      	b.n	80080e4 <USBD_StdEPReq+0x158>
              break;
 80080e2:	bf00      	nop
          }
          break;
 80080e4:	e0aa      	b.n	800823c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d002      	beq.n	80080f6 <USBD_StdEPReq+0x16a>
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d032      	beq.n	800815a <USBD_StdEPReq+0x1ce>
 80080f4:	e097      	b.n	8008226 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <USBD_StdEPReq+0x180>
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b80      	cmp	r3, #128	; 0x80
 8008100:	d004      	beq.n	800810c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbb8 	bl	800887a <USBD_CtlError>
                break;
 800810a:	e091      	b.n	8008230 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800810c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008110:	2b00      	cmp	r3, #0
 8008112:	da0b      	bge.n	800812c <USBD_StdEPReq+0x1a0>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3310      	adds	r3, #16
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	e00b      	b.n	8008144 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2202      	movs	r2, #2
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fbfb 	bl	800894e <USBD_CtlSendData>
              break;
 8008158:	e06a      	b.n	8008230 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800815a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da11      	bge.n	8008186 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	f003 020f 	and.w	r2, r3, #15
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	3318      	adds	r3, #24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d117      	bne.n	80081ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fb7b 	bl	800887a <USBD_CtlError>
                  break;
 8008184:	e054      	b.n	8008230 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb68 	bl	800887a <USBD_CtlError>
                  break;
 80081aa:	e041      	b.n	8008230 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	da0b      	bge.n	80081cc <USBD_StdEPReq+0x240>
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	3310      	adds	r3, #16
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	e00b      	b.n	80081e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4413      	add	r3, r2
 80081e2:	3304      	adds	r3, #4
 80081e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <USBD_StdEPReq+0x266>
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b80      	cmp	r3, #128	; 0x80
 80081f0:	d103      	bne.n	80081fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e00e      	b.n	8008218 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f002 f9bc 	bl	800a57c <USBD_LL_IsStallEP>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2201      	movs	r2, #1
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e002      	b.n	8008218 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2202      	movs	r2, #2
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fb95 	bl	800894e <USBD_CtlSendData>
              break;
 8008224:	e004      	b.n	8008230 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fb26 	bl	800887a <USBD_CtlError>
              break;
 800822e:	bf00      	nop
          }
          break;
 8008230:	e004      	b.n	800823c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb20 	bl	800887a <USBD_CtlError>
          break;
 800823a:	bf00      	nop
      }
      break;
 800823c:	e004      	b.n	8008248 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fb1a 	bl	800887a <USBD_CtlError>
      break;
 8008246:	bf00      	nop
  }

  return ret;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	2b06      	cmp	r3, #6
 8008276:	f200 8128 	bhi.w	80084ca <USBD_GetDescriptor+0x276>
 800827a:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USBD_GetDescriptor+0x2c>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	0800829d 	.word	0x0800829d
 8008284:	080082b5 	.word	0x080082b5
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080084cb 	.word	0x080084cb
 8008290:	080084cb 	.word	0x080084cb
 8008294:	0800846b 	.word	0x0800846b
 8008298:	08008497 	.word	0x08008497
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7c12      	ldrb	r2, [r2, #16]
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
      break;
 80082b2:	e112      	b.n	80084da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7c1b      	ldrb	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10d      	bne.n	80082d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f107 0208 	add.w	r2, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	2202      	movs	r2, #2
 80082d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082d6:	e100      	b.n	80084da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	f107 0208 	add.w	r2, r7, #8
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3
 80082e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3301      	adds	r3, #1
 80082ee:	2202      	movs	r2, #2
 80082f0:	701a      	strb	r2, [r3, #0]
      break;
 80082f2:	e0f2      	b.n	80084da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	f200 80ac 	bhi.w	8008458 <USBD_GetDescriptor+0x204>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_GetDescriptor+0xb4>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008321 	.word	0x08008321
 800830c:	08008355 	.word	0x08008355
 8008310:	08008389 	.word	0x08008389
 8008314:	080083bd 	.word	0x080083bd
 8008318:	080083f1 	.word	0x080083f1
 800831c:	08008425 	.word	0x08008425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7c12      	ldrb	r2, [r2, #16]
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008342:	e091      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa97 	bl	800887a <USBD_CtlError>
            err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
          break;
 8008352:	e089      	b.n	8008468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008376:	e077      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa7d 	bl	800887a <USBD_CtlError>
            err++;
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	3301      	adds	r3, #1
 8008384:	72fb      	strb	r3, [r7, #11]
          break;
 8008386:	e06f      	b.n	8008468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7c12      	ldrb	r2, [r2, #16]
 80083a0:	f107 0108 	add.w	r1, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083aa:	e05d      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa63 	bl	800887a <USBD_CtlError>
            err++;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	3301      	adds	r3, #1
 80083b8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ba:	e055      	b.n	8008468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7c12      	ldrb	r2, [r2, #16]
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083de:	e043      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa49 	bl	800887a <USBD_CtlError>
            err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
          break;
 80083ee:	e03b      	b.n	8008468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	7c12      	ldrb	r2, [r2, #16]
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008412:	e029      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa2f 	bl	800887a <USBD_CtlError>
            err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
          break;
 8008422:	e021      	b.n	8008468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008446:	e00f      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa15 	bl	800887a <USBD_CtlError>
            err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
          break;
 8008456:	e007      	b.n	8008468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa0d 	bl	800887a <USBD_CtlError>
          err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008466:	e038      	b.n	80084da <USBD_GetDescriptor+0x286>
 8008468:	e037      	b.n	80084da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847a:	f107 0208 	add.w	r2, r7, #8
 800847e:	4610      	mov	r0, r2
 8008480:	4798      	blx	r3
 8008482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008484:	e029      	b.n	80084da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f9f6 	bl	800887a <USBD_CtlError>
        err++;
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	3301      	adds	r3, #1
 8008492:	72fb      	strb	r3, [r7, #11]
      break;
 8008494:	e021      	b.n	80084da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7c1b      	ldrb	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10d      	bne.n	80084ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a6:	f107 0208 	add.w	r2, r7, #8
 80084aa:	4610      	mov	r0, r2
 80084ac:	4798      	blx	r3
 80084ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	2207      	movs	r2, #7
 80084b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084b8:	e00f      	b.n	80084da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f9dc 	bl	800887a <USBD_CtlError>
        err++;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	3301      	adds	r3, #1
 80084c6:	72fb      	strb	r3, [r7, #11]
      break;
 80084c8:	e007      	b.n	80084da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9d4 	bl	800887a <USBD_CtlError>
      err++;
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	3301      	adds	r3, #1
 80084d6:	72fb      	strb	r3, [r7, #11]
      break;
 80084d8:	bf00      	nop
  }

  if (err != 0U)
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11c      	bne.n	800851a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80084e0:	893b      	ldrh	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d011      	beq.n	800850a <USBD_GetDescriptor+0x2b6>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	88da      	ldrh	r2, [r3, #6]
 80084f2:	893b      	ldrh	r3, [r7, #8]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	bf28      	it	cs
 80084f8:	4613      	movcs	r3, r2
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084fe:	893b      	ldrh	r3, [r7, #8]
 8008500:	461a      	mov	r2, r3
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fa22 	bl	800894e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa79 	bl	8008a0a <USBD_CtlSendStatus>
 8008518:	e000      	b.n	800851c <USBD_GetDescriptor+0x2c8>
    return;
 800851a:	bf00      	nop
    }
  }
}
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d130      	bne.n	8008598 <USBD_SetAddress+0x74>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d12c      	bne.n	8008598 <USBD_SetAddress+0x74>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	885b      	ldrh	r3, [r3, #2]
 8008542:	2b7f      	cmp	r3, #127	; 0x7f
 8008544:	d828      	bhi.n	8008598 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	2b03      	cmp	r3, #3
 800855a:	d104      	bne.n	8008566 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f98b 	bl	800887a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008564:	e01d      	b.n	80085a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	7bfa      	ldrb	r2, [r7, #15]
 800856a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f002 f82e 	bl	800a5d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa46 	bl	8008a0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858c:	e009      	b.n	80085a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008596:	e004      	b.n	80085a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f96d 	bl	800887a <USBD_CtlError>
  }
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <USBD_SetConfig+0x118>)
 80085be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085c0:	4b40      	ldr	r3, [pc, #256]	; (80086c4 <USBD_SetConfig+0x118>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d904      	bls.n	80085d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f955 	bl	800887a <USBD_CtlError>
 80085d0:	e075      	b.n	80086be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d002      	beq.n	80085e2 <USBD_SetConfig+0x36>
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d023      	beq.n	8008628 <USBD_SetConfig+0x7c>
 80085e0:	e062      	b.n	80086a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80085e2:	4b38      	ldr	r3, [pc, #224]	; (80086c4 <USBD_SetConfig+0x118>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01a      	beq.n	8008620 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80085ea:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <USBD_SetConfig+0x118>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2203      	movs	r2, #3
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085fc:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <USBD_SetConfig+0x118>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff f9e7 	bl	80079d6 <USBD_SetClassConfig>
 8008608:	4603      	mov	r3, r0
 800860a:	2b02      	cmp	r3, #2
 800860c:	d104      	bne.n	8008618 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f932 	bl	800887a <USBD_CtlError>
            return;
 8008616:	e052      	b.n	80086be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f9f6 	bl	8008a0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800861e:	e04e      	b.n	80086be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f9f2 	bl	8008a0a <USBD_CtlSendStatus>
        break;
 8008626:	e04a      	b.n	80086be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008628:	4b26      	ldr	r3, [pc, #152]	; (80086c4 <USBD_SetConfig+0x118>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d112      	bne.n	8008656 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008638:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <USBD_SetConfig+0x118>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008642:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <USBD_SetConfig+0x118>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff f9e3 	bl	8007a14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f9db 	bl	8008a0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008654:	e033      	b.n	80086be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008656:	4b1b      	ldr	r3, [pc, #108]	; (80086c4 <USBD_SetConfig+0x118>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d01d      	beq.n	80086a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff f9d1 	bl	8007a14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008672:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <USBD_SetConfig+0x118>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <USBD_SetConfig+0x118>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff f9a7 	bl	80079d6 <USBD_SetClassConfig>
 8008688:	4603      	mov	r3, r0
 800868a:	2b02      	cmp	r3, #2
 800868c:	d104      	bne.n	8008698 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8f2 	bl	800887a <USBD_CtlError>
            return;
 8008696:	e012      	b.n	80086be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f9b6 	bl	8008a0a <USBD_CtlSendStatus>
        break;
 800869e:	e00e      	b.n	80086be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f9b2 	bl	8008a0a <USBD_CtlSendStatus>
        break;
 80086a6:	e00a      	b.n	80086be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8e5 	bl	800887a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086b0:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <USBD_SetConfig+0x118>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f9ac 	bl	8007a14 <USBD_ClrClassConfig>
        break;
 80086bc:	bf00      	nop
    }
  }
}
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000634 	.word	0x20000634

080086c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d004      	beq.n	80086e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8cc 	bl	800887a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086e2:	e022      	b.n	800872a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	dc02      	bgt.n	80086f4 <USBD_GetConfig+0x2c>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dc03      	bgt.n	80086fa <USBD_GetConfig+0x32>
 80086f2:	e015      	b.n	8008720 <USBD_GetConfig+0x58>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d00b      	beq.n	8008710 <USBD_GetConfig+0x48>
 80086f8:	e012      	b.n	8008720 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3308      	adds	r3, #8
 8008704:	2201      	movs	r2, #1
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f920 	bl	800894e <USBD_CtlSendData>
        break;
 800870e:	e00c      	b.n	800872a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	2201      	movs	r2, #1
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f918 	bl	800894e <USBD_CtlSendData>
        break;
 800871e:	e004      	b.n	800872a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8a9 	bl	800887a <USBD_CtlError>
        break;
 8008728:	bf00      	nop
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	3b01      	subs	r3, #1
 8008744:	2b02      	cmp	r3, #2
 8008746:	d81e      	bhi.n	8008786 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d004      	beq.n	800875a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f891 	bl	800887a <USBD_CtlError>
        break;
 8008758:	e01a      	b.n	8008790 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f043 0202 	orr.w	r2, r3, #2
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	330c      	adds	r3, #12
 800877a:	2202      	movs	r2, #2
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8e5 	bl	800894e <USBD_CtlSendData>
      break;
 8008784:	e004      	b.n	8008790 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f876 	bl	800887a <USBD_CtlError>
      break;
 800878e:	bf00      	nop
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	885b      	ldrh	r3, [r3, #2]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d106      	bne.n	80087b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f929 	bl	8008a0a <USBD_CtlSendStatus>
  }
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	3b01      	subs	r3, #1
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d80b      	bhi.n	80087ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d10c      	bne.n	80087f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f90f 	bl	8008a0a <USBD_CtlSendStatus>
      }
      break;
 80087ec:	e004      	b.n	80087f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f842 	bl	800887a <USBD_CtlError>
      break;
 80087f6:	e000      	b.n	80087fa <USBD_ClrFeature+0x3a>
      break;
 80087f8:	bf00      	nop
  }
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785a      	ldrb	r2, [r3, #1]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	3302      	adds	r3, #2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29a      	uxth	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	3303      	adds	r3, #3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	b29b      	uxth	r3, r3
 8008830:	4413      	add	r3, r2
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	3304      	adds	r3, #4
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b29a      	uxth	r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	3305      	adds	r3, #5
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	b29b      	uxth	r3, r3
 800884c:	4413      	add	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	3306      	adds	r3, #6
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b29a      	uxth	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	3307      	adds	r3, #7
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	b29b      	uxth	r3, r3
 8008868:	4413      	add	r3, r2
 800886a:	b29a      	uxth	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	80da      	strh	r2, [r3, #6]

}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr

0800887a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008884:	2180      	movs	r1, #128	; 0x80
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fe3a 	bl	800a500 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800888c:	2100      	movs	r1, #0
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fe36 	bl	800a500 <USBD_LL_StallEP>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d032      	beq.n	8008918 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f834 	bl	8008920 <USBD_GetLen>
 80088b8:	4603      	mov	r3, r0
 80088ba:	3301      	adds	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	75fa      	strb	r2, [r7, #23]
 80088cc:	461a      	mov	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	75fa      	strb	r2, [r7, #23]
 80088de:	461a      	mov	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4413      	add	r3, r2
 80088e4:	2203      	movs	r2, #3
 80088e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80088e8:	e012      	b.n	8008910 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	60fa      	str	r2, [r7, #12]
 80088f0:	7dfa      	ldrb	r2, [r7, #23]
 80088f2:	1c51      	adds	r1, r2, #1
 80088f4:	75f9      	strb	r1, [r7, #23]
 80088f6:	4611      	mov	r1, r2
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	440a      	add	r2, r1
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	75fa      	strb	r2, [r7, #23]
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4413      	add	r3, r2
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e8      	bne.n	80088ea <USBD_GetString+0x4e>
    }
  }
}
 8008918:	bf00      	nop
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800892c:	e005      	b.n	800893a <USBD_GetLen+0x1a>
  {
    len++;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3301      	adds	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3301      	adds	r3, #1
 8008938:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f5      	bne.n	800892e <USBD_GetLen+0xe>
  }

  return len;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	4613      	mov	r3, r2
 800895a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2202      	movs	r2, #2
 8008960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008964:	88fa      	ldrh	r2, [r7, #6]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800896a:	88fa      	ldrh	r2, [r7, #6]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	2100      	movs	r1, #0
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f001 fe4b 	bl	800a612 <USBD_LL_Transmit>

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	4613      	mov	r3, r2
 8008992:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	2100      	movs	r1, #0
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f001 fe39 	bl	800a612 <USBD_LL_Transmit>

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2203      	movs	r2, #3
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089c0:	88fa      	ldrh	r2, [r7, #6]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	2100      	movs	r1, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 fe3e 	bl	800a658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	4613      	mov	r3, r2
 80089f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 fe2c 	bl	800a658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2204      	movs	r2, #4
 8008a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fdf6 	bl	800a612 <USBD_LL_Transmit>

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2205      	movs	r2, #5
 8008a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fe06 	bl	800a658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a68:	2b84      	cmp	r3, #132	; 0x84
 8008a6a:	d005      	beq.n	8008a78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	3303      	adds	r3, #3
 8008a76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a88:	f000 fad0 	bl	800902c <vTaskStartScheduler>
  
  return osOK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a94:	b089      	sub	sp, #36	; 0x24
 8008a96:	af04      	add	r7, sp, #16
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d020      	beq.n	8008ae6 <osThreadCreate+0x54>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01c      	beq.n	8008ae6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685c      	ldr	r4, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681d      	ldr	r5, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691e      	ldr	r6, [r3, #16]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff ffc9 	bl	8008a56 <makeFreeRtosPriority>
 8008ac4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ace:	9202      	str	r2, [sp, #8]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	9100      	str	r1, [sp, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 f8e8 	bl	8008cb0 <xTaskCreateStatic>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e01c      	b.n	8008b20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685c      	ldr	r4, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af2:	b29e      	uxth	r6, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ffab 	bl	8008a56 <makeFreeRtosPriority>
 8008b00:	4602      	mov	r2, r0
 8008b02:	f107 030c 	add.w	r3, r7, #12
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	9200      	str	r2, [sp, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4629      	mov	r1, r5
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f929 	bl	8008d68 <xTaskCreate>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d001      	beq.n	8008b20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e000      	b.n	8008b22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b20:	68fb      	ldr	r3, [r7, #12]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <osDelay+0x16>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	e000      	b.n	8008b42 <osDelay+0x18>
 8008b40:	2301      	movs	r3, #1
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fa3e 	bl	8008fc4 <vTaskDelay>
  
  return osOK;
 8008b48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f103 0208 	add.w	r2, r3, #8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f103 0208 	add.w	r2, r3, #8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f103 0208 	add.w	r2, r3, #8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc80      	pop	{r7}
 8008ba6:	4770      	bx	lr

08008ba8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr

08008bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d103      	bne.n	8008c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e00c      	b.n	8008c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3308      	adds	r3, #8
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e002      	b.n	8008c1c <vListInsert+0x2e>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d2f6      	bcs.n	8008c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6892      	ldr	r2, [r2, #8]
 8008c74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6852      	ldr	r2, [r2, #4]
 8008c7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d103      	bne.n	8008c92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1e5a      	subs	r2, r3, #1
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08e      	sub	sp, #56	; 0x38
 8008cb4:	af04      	add	r7, sp, #16
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61fb      	str	r3, [r7, #28]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cf6:	2354      	movs	r3, #84	; 0x54
 8008cf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b54      	cmp	r3, #84	; 0x54
 8008cfe:	d00a      	beq.n	8008d16 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	61bb      	str	r3, [r7, #24]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01e      	beq.n	8008d5a <xTaskCreateStatic+0xaa>
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01b      	beq.n	8008d5a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d34:	2300      	movs	r3, #0
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f850 	bl	8008df2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d54:	f000 f8cc 	bl	8008ef0 <prvAddNewTaskToReadyList>
 8008d58:	e001      	b.n	8008d5e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d5e:	697b      	ldr	r3, [r7, #20]
	}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3728      	adds	r7, #40	; 0x28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08c      	sub	sp, #48	; 0x30
 8008d6c:	af04      	add	r7, sp, #16
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	4613      	mov	r3, r2
 8008d76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fe67 	bl	8009a50 <pvPortMalloc>
 8008d82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008d8a:	2054      	movs	r0, #84	; 0x54
 8008d8c:	f000 fe60 	bl	8009a50 <pvPortMalloc>
 8008d90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d9e:	e005      	b.n	8008dac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f000 ff19 	bl	8009bd8 <vPortFree>
 8008da6:	e001      	b.n	8008dac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f80e 	bl	8008df2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dd6:	69f8      	ldr	r0, [r7, #28]
 8008dd8:	f000 f88a 	bl	8008ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	e002      	b.n	8008de8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008de8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b088      	sub	sp, #32
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <prvInitialiseNewTask+0x48>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	617b      	str	r3, [r7, #20]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	e012      	b.n	8008e66 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	7819      	ldrb	r1, [r3, #0]
 8008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	3334      	adds	r3, #52	; 0x34
 8008e50:	460a      	mov	r2, r1
 8008e52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	3301      	adds	r3, #1
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	2b0f      	cmp	r3, #15
 8008e6a:	d9e9      	bls.n	8008e40 <prvInitialiseNewTask+0x4e>
 8008e6c:	e000      	b.n	8008e70 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008e6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b06      	cmp	r3, #6
 8008e7c:	d901      	bls.n	8008e82 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e7e:	2306      	movs	r3, #6
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2200      	movs	r2, #0
 8008e92:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	3304      	adds	r3, #4
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fe79 	bl	8008b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	3318      	adds	r3, #24
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fe74 	bl	8008b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb0:	f1c3 0207 	rsb	r2, r3, #7
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	69b8      	ldr	r0, [r7, #24]
 8008ed2:	f000 fc0d 	bl	80096f0 <pxPortInitialiseStack>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee8:	bf00      	nop
 8008eea:	3720      	adds	r7, #32
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ef8:	f000 fce8 	bl	80098cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008efc:	4b2a      	ldr	r3, [pc, #168]	; (8008fa8 <prvAddNewTaskToReadyList+0xb8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <prvAddNewTaskToReadyList+0xb8>)
 8008f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f06:	4b29      	ldr	r3, [pc, #164]	; (8008fac <prvAddNewTaskToReadyList+0xbc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f0e:	4a27      	ldr	r2, [pc, #156]	; (8008fac <prvAddNewTaskToReadyList+0xbc>)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f14:	4b24      	ldr	r3, [pc, #144]	; (8008fa8 <prvAddNewTaskToReadyList+0xb8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d110      	bne.n	8008f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f1c:	f000 fac0 	bl	80094a0 <prvInitialiseTaskLists>
 8008f20:	e00d      	b.n	8008f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f22:	4b23      	ldr	r3, [pc, #140]	; (8008fb0 <prvAddNewTaskToReadyList+0xc0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f2a:	4b20      	ldr	r3, [pc, #128]	; (8008fac <prvAddNewTaskToReadyList+0xbc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d802      	bhi.n	8008f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f38:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <prvAddNewTaskToReadyList+0xbc>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f3e:	4b1d      	ldr	r3, [pc, #116]	; (8008fb4 <prvAddNewTaskToReadyList+0xc4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <prvAddNewTaskToReadyList+0xc4>)
 8008f46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	409a      	lsls	r2, r3
 8008f50:	4b19      	ldr	r3, [pc, #100]	; (8008fb8 <prvAddNewTaskToReadyList+0xc8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <prvAddNewTaskToReadyList+0xc8>)
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4a15      	ldr	r2, [pc, #84]	; (8008fbc <prvAddNewTaskToReadyList+0xcc>)
 8008f68:	441a      	add	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7ff fe19 	bl	8008ba8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f76:	f000 fcd9 	bl	800992c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <prvAddNewTaskToReadyList+0xc0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <prvAddNewTaskToReadyList+0xbc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d207      	bcs.n	8008fa0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvAddNewTaskToReadyList+0xd0>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000738 	.word	0x20000738
 8008fac:	20000638 	.word	0x20000638
 8008fb0:	20000744 	.word	0x20000744
 8008fb4:	20000754 	.word	0x20000754
 8008fb8:	20000740 	.word	0x20000740
 8008fbc:	2000063c 	.word	0x2000063c
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d017      	beq.n	8009006 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fd6:	4b13      	ldr	r3, [pc, #76]	; (8009024 <vTaskDelay+0x60>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <vTaskDelay+0x30>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60bb      	str	r3, [r7, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ff4:	f000 f87a 	bl	80090ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fb12 	bl	8009624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009000:	f000 f882 	bl	8009108 <xTaskResumeAll>
 8009004:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <vTaskDelay+0x64>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000760 	.word	0x20000760
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800903a:	463a      	mov	r2, r7
 800903c:	1d39      	adds	r1, r7, #4
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f7f7 f896 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	9202      	str	r2, [sp, #8]
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	2300      	movs	r3, #0
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	2300      	movs	r3, #0
 8009058:	460a      	mov	r2, r1
 800905a:	491e      	ldr	r1, [pc, #120]	; (80090d4 <vTaskStartScheduler+0xa8>)
 800905c:	481e      	ldr	r0, [pc, #120]	; (80090d8 <vTaskStartScheduler+0xac>)
 800905e:	f7ff fe27 	bl	8008cb0 <xTaskCreateStatic>
 8009062:	4603      	mov	r3, r0
 8009064:	4a1d      	ldr	r2, [pc, #116]	; (80090dc <vTaskStartScheduler+0xb0>)
 8009066:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009068:	4b1c      	ldr	r3, [pc, #112]	; (80090dc <vTaskStartScheduler+0xb0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009070:	2301      	movs	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	e001      	b.n	800907a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d116      	bne.n	80090ae <vTaskStartScheduler+0x82>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	613b      	str	r3, [r7, #16]
}
 8009092:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <vTaskStartScheduler+0xb4>)
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <vTaskStartScheduler+0xb8>)
 800909e:	2201      	movs	r2, #1
 80090a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80090a2:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <vTaskStartScheduler+0xbc>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090a8:	f000 fb9e 	bl	80097e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090ac:	e00e      	b.n	80090cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d10a      	bne.n	80090cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60fb      	str	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <vTaskStartScheduler+0x9e>
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	0800c70c 	.word	0x0800c70c
 80090d8:	08009471 	.word	0x08009471
 80090dc:	2000075c 	.word	0x2000075c
 80090e0:	20000758 	.word	0x20000758
 80090e4:	20000744 	.word	0x20000744
 80090e8:	2000073c 	.word	0x2000073c

080090ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <vTaskSuspendAll+0x18>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	4a03      	ldr	r2, [pc, #12]	; (8009104 <vTaskSuspendAll+0x18>)
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	bf00      	nop
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000760 	.word	0x20000760

08009108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009112:	2300      	movs	r3, #0
 8009114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009116:	4b41      	ldr	r3, [pc, #260]	; (800921c <xTaskResumeAll+0x114>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xTaskResumeAll+0x2c>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	603b      	str	r3, [r7, #0]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009134:	f000 fbca 	bl	80098cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009138:	4b38      	ldr	r3, [pc, #224]	; (800921c <xTaskResumeAll+0x114>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3b01      	subs	r3, #1
 800913e:	4a37      	ldr	r2, [pc, #220]	; (800921c <xTaskResumeAll+0x114>)
 8009140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009142:	4b36      	ldr	r3, [pc, #216]	; (800921c <xTaskResumeAll+0x114>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d161      	bne.n	800920e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800914a:	4b35      	ldr	r3, [pc, #212]	; (8009220 <xTaskResumeAll+0x118>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d05d      	beq.n	800920e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009152:	e02e      	b.n	80091b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009154:	4b33      	ldr	r3, [pc, #204]	; (8009224 <xTaskResumeAll+0x11c>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3318      	adds	r3, #24
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff fd7c 	bl	8008c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fd77 	bl	8008c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	2201      	movs	r2, #1
 8009176:	409a      	lsls	r2, r3
 8009178:	4b2b      	ldr	r3, [pc, #172]	; (8009228 <xTaskResumeAll+0x120>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4313      	orrs	r3, r2
 800917e:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <xTaskResumeAll+0x120>)
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a27      	ldr	r2, [pc, #156]	; (800922c <xTaskResumeAll+0x124>)
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7ff fd05 	bl	8008ba8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	4b23      	ldr	r3, [pc, #140]	; (8009230 <xTaskResumeAll+0x128>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d302      	bcc.n	80091b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <xTaskResumeAll+0x12c>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <xTaskResumeAll+0x11c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1cc      	bne.n	8009154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091c0:	f000 fa0c 	bl	80095dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80091c4:	4b1c      	ldr	r3, [pc, #112]	; (8009238 <xTaskResumeAll+0x130>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d010      	beq.n	80091f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091d0:	f000 f836 	bl	8009240 <xTaskIncrementTick>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091da:	4b16      	ldr	r3, [pc, #88]	; (8009234 <xTaskResumeAll+0x12c>)
 80091dc:	2201      	movs	r2, #1
 80091de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1f1      	bne.n	80091d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80091ec:	4b12      	ldr	r3, [pc, #72]	; (8009238 <xTaskResumeAll+0x130>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091f2:	4b10      	ldr	r3, [pc, #64]	; (8009234 <xTaskResumeAll+0x12c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <xTaskResumeAll+0x134>)
 8009200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800920e:	f000 fb8d 	bl	800992c <vPortExitCritical>

	return xAlreadyYielded;
 8009212:	68bb      	ldr	r3, [r7, #8]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000760 	.word	0x20000760
 8009220:	20000738 	.word	0x20000738
 8009224:	200006f8 	.word	0x200006f8
 8009228:	20000740 	.word	0x20000740
 800922c:	2000063c 	.word	0x2000063c
 8009230:	20000638 	.word	0x20000638
 8009234:	2000074c 	.word	0x2000074c
 8009238:	20000748 	.word	0x20000748
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800924a:	4b51      	ldr	r3, [pc, #324]	; (8009390 <xTaskIncrementTick+0x150>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f040 808d 	bne.w	800936e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009254:	4b4f      	ldr	r3, [pc, #316]	; (8009394 <xTaskIncrementTick+0x154>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3301      	adds	r3, #1
 800925a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800925c:	4a4d      	ldr	r2, [pc, #308]	; (8009394 <xTaskIncrementTick+0x154>)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d120      	bne.n	80092aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009268:	4b4b      	ldr	r3, [pc, #300]	; (8009398 <xTaskIncrementTick+0x158>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <xTaskIncrementTick+0x48>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	603b      	str	r3, [r7, #0]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xTaskIncrementTick+0x46>
 8009288:	4b43      	ldr	r3, [pc, #268]	; (8009398 <xTaskIncrementTick+0x158>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	4b43      	ldr	r3, [pc, #268]	; (800939c <xTaskIncrementTick+0x15c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a41      	ldr	r2, [pc, #260]	; (8009398 <xTaskIncrementTick+0x158>)
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4a41      	ldr	r2, [pc, #260]	; (800939c <xTaskIncrementTick+0x15c>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <xTaskIncrementTick+0x160>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	4a3f      	ldr	r2, [pc, #252]	; (80093a0 <xTaskIncrementTick+0x160>)
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	f000 f999 	bl	80095dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092aa:	4b3e      	ldr	r3, [pc, #248]	; (80093a4 <xTaskIncrementTick+0x164>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d34d      	bcc.n	8009350 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b4:	4b38      	ldr	r3, [pc, #224]	; (8009398 <xTaskIncrementTick+0x158>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <xTaskIncrementTick+0x82>
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <xTaskIncrementTick+0x84>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c8:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <xTaskIncrementTick+0x164>)
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	601a      	str	r2, [r3, #0]
					break;
 80092d0:	e03e      	b.n	8009350 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092d2:	4b31      	ldr	r3, [pc, #196]	; (8009398 <xTaskIncrementTick+0x158>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d203      	bcs.n	80092f2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092ea:	4a2e      	ldr	r2, [pc, #184]	; (80093a4 <xTaskIncrementTick+0x164>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6013      	str	r3, [r2, #0]
						break;
 80092f0:	e02e      	b.n	8009350 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fcb1 	bl	8008c5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	3318      	adds	r3, #24
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fca8 	bl	8008c5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009312:	2201      	movs	r2, #1
 8009314:	409a      	lsls	r2, r3
 8009316:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <xTaskIncrementTick+0x168>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4313      	orrs	r3, r2
 800931c:	4a22      	ldr	r2, [pc, #136]	; (80093a8 <xTaskIncrementTick+0x168>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4a1f      	ldr	r2, [pc, #124]	; (80093ac <xTaskIncrementTick+0x16c>)
 800932e:	441a      	add	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	3304      	adds	r3, #4
 8009334:	4619      	mov	r1, r3
 8009336:	4610      	mov	r0, r2
 8009338:	f7ff fc36 	bl	8008ba8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <xTaskIncrementTick+0x170>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	429a      	cmp	r2, r3
 8009348:	d3b4      	bcc.n	80092b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800934a:	2301      	movs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800934e:	e7b1      	b.n	80092b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009350:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <xTaskIncrementTick+0x170>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	4915      	ldr	r1, [pc, #84]	; (80093ac <xTaskIncrementTick+0x16c>)
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d907      	bls.n	8009378 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e004      	b.n	8009378 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800936e:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <xTaskIncrementTick+0x174>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	4a0f      	ldr	r2, [pc, #60]	; (80093b4 <xTaskIncrementTick+0x174>)
 8009376:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <xTaskIncrementTick+0x178>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009384:	697b      	ldr	r3, [r7, #20]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000760 	.word	0x20000760
 8009394:	2000073c 	.word	0x2000073c
 8009398:	200006f0 	.word	0x200006f0
 800939c:	200006f4 	.word	0x200006f4
 80093a0:	20000750 	.word	0x20000750
 80093a4:	20000758 	.word	0x20000758
 80093a8:	20000740 	.word	0x20000740
 80093ac:	2000063c 	.word	0x2000063c
 80093b0:	20000638 	.word	0x20000638
 80093b4:	20000748 	.word	0x20000748
 80093b8:	2000074c 	.word	0x2000074c

080093bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093c2:	4b26      	ldr	r3, [pc, #152]	; (800945c <vTaskSwitchContext+0xa0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ca:	4b25      	ldr	r3, [pc, #148]	; (8009460 <vTaskSwitchContext+0xa4>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093d0:	e03f      	b.n	8009452 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80093d2:	4b23      	ldr	r3, [pc, #140]	; (8009460 <vTaskSwitchContext+0xa4>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80093d8:	4b22      	ldr	r3, [pc, #136]	; (8009464 <vTaskSwitchContext+0xa8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	fab3 f383 	clz	r3, r3
 80093e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093e6:	7afb      	ldrb	r3, [r7, #11]
 80093e8:	f1c3 031f 	rsb	r3, r3, #31
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	491e      	ldr	r1, [pc, #120]	; (8009468 <vTaskSwitchContext+0xac>)
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	607b      	str	r3, [r7, #4]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <vTaskSwitchContext+0x5a>
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a11      	ldr	r2, [pc, #68]	; (8009468 <vTaskSwitchContext+0xac>)
 8009424:	4413      	add	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	3308      	adds	r3, #8
 800943a:	429a      	cmp	r2, r3
 800943c:	d104      	bne.n	8009448 <vTaskSwitchContext+0x8c>
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	4a07      	ldr	r2, [pc, #28]	; (800946c <vTaskSwitchContext+0xb0>)
 8009450:	6013      	str	r3, [r2, #0]
}
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr
 800945c:	20000760 	.word	0x20000760
 8009460:	2000074c 	.word	0x2000074c
 8009464:	20000740 	.word	0x20000740
 8009468:	2000063c 	.word	0x2000063c
 800946c:	20000638 	.word	0x20000638

08009470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009478:	f000 f852 	bl	8009520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <prvIdleTask+0x28>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d9f9      	bls.n	8009478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <prvIdleTask+0x2c>)
 8009486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009494:	e7f0      	b.n	8009478 <prvIdleTask+0x8>
 8009496:	bf00      	nop
 8009498:	2000063c 	.word	0x2000063c
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	e00c      	b.n	80094c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4a12      	ldr	r2, [pc, #72]	; (8009500 <prvInitialiseTaskLists+0x60>)
 80094b8:	4413      	add	r3, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fb49 	bl	8008b52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3301      	adds	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b06      	cmp	r3, #6
 80094ca:	d9ef      	bls.n	80094ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094cc:	480d      	ldr	r0, [pc, #52]	; (8009504 <prvInitialiseTaskLists+0x64>)
 80094ce:	f7ff fb40 	bl	8008b52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094d2:	480d      	ldr	r0, [pc, #52]	; (8009508 <prvInitialiseTaskLists+0x68>)
 80094d4:	f7ff fb3d 	bl	8008b52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094d8:	480c      	ldr	r0, [pc, #48]	; (800950c <prvInitialiseTaskLists+0x6c>)
 80094da:	f7ff fb3a 	bl	8008b52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094de:	480c      	ldr	r0, [pc, #48]	; (8009510 <prvInitialiseTaskLists+0x70>)
 80094e0:	f7ff fb37 	bl	8008b52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094e4:	480b      	ldr	r0, [pc, #44]	; (8009514 <prvInitialiseTaskLists+0x74>)
 80094e6:	f7ff fb34 	bl	8008b52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <prvInitialiseTaskLists+0x78>)
 80094ec:	4a05      	ldr	r2, [pc, #20]	; (8009504 <prvInitialiseTaskLists+0x64>)
 80094ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <prvInitialiseTaskLists+0x7c>)
 80094f2:	4a05      	ldr	r2, [pc, #20]	; (8009508 <prvInitialiseTaskLists+0x68>)
 80094f4:	601a      	str	r2, [r3, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000063c 	.word	0x2000063c
 8009504:	200006c8 	.word	0x200006c8
 8009508:	200006dc 	.word	0x200006dc
 800950c:	200006f8 	.word	0x200006f8
 8009510:	2000070c 	.word	0x2000070c
 8009514:	20000724 	.word	0x20000724
 8009518:	200006f0 	.word	0x200006f0
 800951c:	200006f4 	.word	0x200006f4

08009520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009526:	e019      	b.n	800955c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009528:	f000 f9d0 	bl	80098cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800952c:	4b10      	ldr	r3, [pc, #64]	; (8009570 <prvCheckTasksWaitingTermination+0x50>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff fb90 	bl	8008c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <prvCheckTasksWaitingTermination+0x54>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3b01      	subs	r3, #1
 8009544:	4a0b      	ldr	r2, [pc, #44]	; (8009574 <prvCheckTasksWaitingTermination+0x54>)
 8009546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3b01      	subs	r3, #1
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 8009550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009552:	f000 f9eb 	bl	800992c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f810 	bl	800957c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e1      	bne.n	8009528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	2000070c 	.word	0x2000070c
 8009574:	20000738 	.word	0x20000738
 8009578:	20000720 	.word	0x20000720

0800957c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800958a:	2b00      	cmp	r3, #0
 800958c:	d108      	bne.n	80095a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fb20 	bl	8009bd8 <vPortFree>
				vPortFree( pxTCB );
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb1d 	bl	8009bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800959e:	e018      	b.n	80095d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d103      	bne.n	80095b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fb14 	bl	8009bd8 <vPortFree>
	}
 80095b0:	e00f      	b.n	80095d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d00a      	beq.n	80095d2 <prvDeleteTCB+0x56>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60fb      	str	r3, [r7, #12]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <prvDeleteTCB+0x54>
	}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <prvResetNextTaskUnblockTime+0x40>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <prvResetNextTaskUnblockTime+0x14>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <prvResetNextTaskUnblockTime+0x16>
 80095f0:	2300      	movs	r3, #0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <prvResetNextTaskUnblockTime+0x44>)
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095fe:	e008      	b.n	8009612 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <prvResetNextTaskUnblockTime+0x40>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	4a04      	ldr	r2, [pc, #16]	; (8009620 <prvResetNextTaskUnblockTime+0x44>)
 8009610:	6013      	str	r3, [r2, #0]
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	200006f0 	.word	0x200006f0
 8009620:	20000758 	.word	0x20000758

08009624 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800962e:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009634:	4b28      	ldr	r3, [pc, #160]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff fb0f 	bl	8008c5e <uxListRemove>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10b      	bne.n	800965e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009646:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	2201      	movs	r2, #1
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43da      	mvns	r2, r3
 8009654:	4b21      	ldr	r3, [pc, #132]	; (80096dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4013      	ands	r3, r2
 800965a:	4a20      	ldr	r2, [pc, #128]	; (80096dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800965c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d10a      	bne.n	800967c <prvAddCurrentTaskToDelayedList+0x58>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966c:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	481a      	ldr	r0, [pc, #104]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009676:	f7ff fa97 	bl	8008ba8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800967a:	e026      	b.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	429a      	cmp	r2, r3
 8009692:	d209      	bcs.n	80096a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009694:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3304      	adds	r3, #4
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7ff faa4 	bl	8008bee <vListInsert>
}
 80096a6:	e010      	b.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7ff fa9a 	bl	8008bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d202      	bcs.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096c4:	4a09      	ldr	r2, [pc, #36]	; (80096ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6013      	str	r3, [r2, #0]
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	2000073c 	.word	0x2000073c
 80096d8:	20000638 	.word	0x20000638
 80096dc:	20000740 	.word	0x20000740
 80096e0:	20000724 	.word	0x20000724
 80096e4:	200006f4 	.word	0x200006f4
 80096e8:	200006f0 	.word	0x200006f0
 80096ec:	20000758 	.word	0x20000758

080096f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3b04      	subs	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3b04      	subs	r3, #4
 800970e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <pxPortInitialiseStack+0x54>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b14      	subs	r3, #20
 800972a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b20      	subs	r3, #32
 8009736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009738:	68fb      	ldr	r3, [r7, #12]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	08009749 	.word	0x08009749

08009748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <prvTaskExitError+0x54>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d00a      	beq.n	8009772 <prvTaskExitError+0x2a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <prvTaskExitError+0x28>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009786:	bf00      	nop
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0fc      	beq.n	8009788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000124 	.word	0x20000124

080097a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <pxCurrentTCBConst2>)
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	6808      	ldr	r0, [r1, #0]
 80097a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097aa:	f380 8809 	msr	PSP, r0
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80097be:	4770      	bx	lr

080097c0 <pxCurrentTCBConst2>:
 80097c0:	20000638 	.word	0x20000638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80097c8:	4806      	ldr	r0, [pc, #24]	; (80097e4 <prvPortStartFirstTask+0x1c>)
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f380 8808 	msr	MSP, r0
 80097d2:	b662      	cpsie	i
 80097d4:	b661      	cpsie	f
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	df00      	svc	0
 80097e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097e2:	bf00      	nop
 80097e4:	e000ed08 	.word	0xe000ed08

080097e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097ee:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <xPortStartScheduler+0xd0>)
 80097f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009810:	b2da      	uxtb	r2, r3
 8009812:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <xPortStartScheduler+0xd4>)
 8009814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009816:	4b2a      	ldr	r3, [pc, #168]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009818:	2207      	movs	r2, #7
 800981a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981c:	e009      	b.n	8009832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800981e:	4b28      	ldr	r3, [pc, #160]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3b01      	subs	r3, #1
 8009824:	4a26      	ldr	r2, [pc, #152]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d0ef      	beq.n	800981e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800983e:	4b20      	ldr	r3, [pc, #128]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f1c3 0307 	rsb	r3, r3, #7
 8009846:	2b04      	cmp	r3, #4
 8009848:	d00a      	beq.n	8009860 <xPortStartScheduler+0x78>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009860:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	4a16      	ldr	r2, [pc, #88]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009868:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <xPortStartScheduler+0xd8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009872:	4a13      	ldr	r2, [pc, #76]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009874:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	b2da      	uxtb	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <xPortStartScheduler+0xdc>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009890:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009894:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009896:	f000 f8b9 	bl	8009a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <xPortStartScheduler+0xe0>)
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098a0:	f7ff ff92 	bl	80097c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098a4:	f7ff fd8a 	bl	80093bc <vTaskSwitchContext>
	prvTaskExitError();
 80098a8:	f7ff ff4e 	bl	8009748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	e000e400 	.word	0xe000e400
 80098bc:	20000764 	.word	0x20000764
 80098c0:	20000768 	.word	0x20000768
 80098c4:	e000ed20 	.word	0xe000ed20
 80098c8:	20000124 	.word	0x20000124

080098cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	607b      	str	r3, [r7, #4]
}
 80098e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <vPortEnterCritical+0x58>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	4a0d      	ldr	r2, [pc, #52]	; (8009924 <vPortEnterCritical+0x58>)
 80098ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098f0:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <vPortEnterCritical+0x58>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10f      	bne.n	8009918 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098f8:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <vPortEnterCritical+0x5c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <vPortEnterCritical+0x4c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	603b      	str	r3, [r7, #0]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <vPortEnterCritical+0x4a>
	}
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000124 	.word	0x20000124
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <vPortExitCritical+0x4c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <vPortExitCritical+0x24>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	607b      	str	r3, [r7, #4]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <vPortExitCritical+0x4c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	4a08      	ldr	r2, [pc, #32]	; (8009978 <vPortExitCritical+0x4c>)
 8009958:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <vPortExitCritical+0x4c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <vPortExitCritical+0x42>
 8009962:	2300      	movs	r3, #0
 8009964:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800996c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr
 8009978:	20000124 	.word	0x20000124
 800997c:	00000000 	.word	0x00000000

08009980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009980:	f3ef 8009 	mrs	r0, PSP
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <pxCurrentTCBConst>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009990:	6010      	str	r0, [r2, #0]
 8009992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800999a:	f380 8811 	msr	BASEPRI, r0
 800999e:	f7ff fd0d 	bl	80093bc <vTaskSwitchContext>
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8811 	msr	BASEPRI, r0
 80099aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099b6:	f380 8809 	msr	PSP, r0
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	4770      	bx	lr

080099c0 <pxCurrentTCBConst>:
 80099c0:	20000638 	.word	0x20000638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e2:	f7ff fc2d 	bl	8009240 <xTaskIncrementTick>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <SysTick_Handler+0x40>)
 80099ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <vPortSetupTimerInterrupt+0x30>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <vPortSetupTimerInterrupt+0x38>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <vPortSetupTimerInterrupt+0x3c>)
 8009a22:	fba2 2303 	umull	r2, r3, r2, r3
 8009a26:	099b      	lsrs	r3, r3, #6
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <vPortSetupTimerInterrupt+0x40>)
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a2e:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <vPortSetupTimerInterrupt+0x30>)
 8009a30:	2207      	movs	r2, #7
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	e000e010 	.word	0xe000e010
 8009a40:	e000e018 	.word	0xe000e018
 8009a44:	20000008 	.word	0x20000008
 8009a48:	10624dd3 	.word	0x10624dd3
 8009a4c:	e000e014 	.word	0xe000e014

08009a50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a5c:	f7ff fb46 	bl	80090ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a60:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <pvPortMalloc+0x174>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a68:	f000 f910 	bl	8009c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a6c:	4b56      	ldr	r3, [pc, #344]	; (8009bc8 <pvPortMalloc+0x178>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4013      	ands	r3, r2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 808e 	bne.w	8009b96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01d      	beq.n	8009abc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a80:	2208      	movs	r2, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d014      	beq.n	8009abc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <pvPortMalloc+0x6c>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	617b      	str	r3, [r7, #20]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d069      	beq.n	8009b96 <pvPortMalloc+0x146>
 8009ac2:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <pvPortMalloc+0x17c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d864      	bhi.n	8009b96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009acc:	4b40      	ldr	r3, [pc, #256]	; (8009bd0 <pvPortMalloc+0x180>)
 8009ace:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ad0:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <pvPortMalloc+0x180>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad6:	e004      	b.n	8009ae2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d903      	bls.n	8009af4 <pvPortMalloc+0xa4>
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f1      	bne.n	8009ad8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009af4:	4b33      	ldr	r3, [pc, #204]	; (8009bc4 <pvPortMalloc+0x174>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d04b      	beq.n	8009b96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2208      	movs	r2, #8
 8009b04:	4413      	add	r3, r2
 8009b06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	2308      	movs	r3, #8
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d91f      	bls.n	8009b60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <pvPortMalloc+0xf8>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	613b      	str	r3, [r7, #16]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f000 f8f8 	bl	8009d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b60:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	4a18      	ldr	r2, [pc, #96]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b6e:	4b17      	ldr	r3, [pc, #92]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <pvPortMalloc+0x184>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d203      	bcs.n	8009b82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b7a:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <pvPortMalloc+0x184>)
 8009b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b96:	f7ff fab7 	bl	8009108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <pvPortMalloc+0x16a>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60fb      	str	r3, [r7, #12]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <pvPortMalloc+0x168>
	return pvReturn;
 8009bba:	69fb      	ldr	r3, [r7, #28]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3728      	adds	r7, #40	; 0x28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001374 	.word	0x20001374
 8009bc8:	20001380 	.word	0x20001380
 8009bcc:	20001378 	.word	0x20001378
 8009bd0:	2000136c 	.word	0x2000136c
 8009bd4:	2000137c 	.word	0x2000137c

08009bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d048      	beq.n	8009c7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bea:	2308      	movs	r3, #8
 8009bec:	425b      	negs	r3, r3
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <vPortFree+0xac>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <vPortFree+0x44>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <vPortFree+0x62>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60bb      	str	r3, [r7, #8]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <vPortFree+0xac>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d019      	beq.n	8009c7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d115      	bne.n	8009c7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <vPortFree+0xac>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c60:	f7ff fa44 	bl	80090ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <vPortFree+0xb0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4a06      	ldr	r2, [pc, #24]	; (8009c88 <vPortFree+0xb0>)
 8009c70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c72:	6938      	ldr	r0, [r7, #16]
 8009c74:	f000 f86c 	bl	8009d50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c78:	f7ff fa46 	bl	8009108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20001380 	.word	0x20001380
 8009c88:	20001378 	.word	0x20001378

08009c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c98:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <prvHeapInit+0xac>)
 8009c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3307      	adds	r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0307 	bic.w	r3, r3, #7
 8009cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	4a1f      	ldr	r2, [pc, #124]	; (8009d38 <prvHeapInit+0xac>)
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cc4:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <prvHeapInit+0xb0>)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cca:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <prvHeapInit+0xb0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cd8:	2208      	movs	r2, #8
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 0307 	bic.w	r3, r3, #7
 8009ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <prvHeapInit+0xb4>)
 8009cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <prvHeapInit+0xb4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cf6:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <prvHeapInit+0xb4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <prvHeapInit+0xb4>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <prvHeapInit+0xb8>)
 8009d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <prvHeapInit+0xbc>)
 8009d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <prvHeapInit+0xc0>)
 8009d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d2a:	601a      	str	r2, [r3, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bc80      	pop	{r7}
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	2000076c 	.word	0x2000076c
 8009d3c:	2000136c 	.word	0x2000136c
 8009d40:	20001374 	.word	0x20001374
 8009d44:	2000137c 	.word	0x2000137c
 8009d48:	20001378 	.word	0x20001378
 8009d4c:	20001380 	.word	0x20001380

08009d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d58:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <prvInsertBlockIntoFreeList+0xa8>)
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e002      	b.n	8009d64 <prvInsertBlockIntoFreeList+0x14>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d8f7      	bhi.n	8009d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4413      	add	r3, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d108      	bne.n	8009d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	441a      	add	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	441a      	add	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d118      	bne.n	8009dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <prvInsertBlockIntoFreeList+0xac>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d00d      	beq.n	8009dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	441a      	add	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e008      	b.n	8009de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <prvInsertBlockIntoFreeList+0xac>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	e003      	b.n	8009de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d002      	beq.n	8009dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr
 8009df8:	2000136c 	.word	0x2000136c
 8009dfc:	20001374 	.word	0x20001374

08009e00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e04:	2200      	movs	r2, #0
 8009e06:	4912      	ldr	r1, [pc, #72]	; (8009e50 <MX_USB_DEVICE_Init+0x50>)
 8009e08:	4812      	ldr	r0, [pc, #72]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e0a:	f7fd fd8a 	bl	8007922 <USBD_Init>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e14:	f7f6 fdbc 	bl	8000990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e18:	490f      	ldr	r1, [pc, #60]	; (8009e58 <MX_USB_DEVICE_Init+0x58>)
 8009e1a:	480e      	ldr	r0, [pc, #56]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e1c:	f7fd fdac 	bl	8007978 <USBD_RegisterClass>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e26:	f7f6 fdb3 	bl	8000990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e2a:	490c      	ldr	r1, [pc, #48]	; (8009e5c <MX_USB_DEVICE_Init+0x5c>)
 8009e2c:	4809      	ldr	r0, [pc, #36]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e2e:	f7fd fcdd 	bl	80077ec <USBD_CDC_RegisterInterface>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e38:	f7f6 fdaa 	bl	8000990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e3c:	4805      	ldr	r0, [pc, #20]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e3e:	f7fd fdb4 	bl	80079aa <USBD_Start>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e48:	f7f6 fda2 	bl	8000990 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e4c:	bf00      	nop
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20000138 	.word	0x20000138
 8009e54:	20001384 	.word	0x20001384
 8009e58:	20000020 	.word	0x20000020
 8009e5c:	20000128 	.word	0x20000128

08009e60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e64:	2200      	movs	r2, #0
 8009e66:	4905      	ldr	r1, [pc, #20]	; (8009e7c <CDC_Init_FS+0x1c>)
 8009e68:	4805      	ldr	r0, [pc, #20]	; (8009e80 <CDC_Init_FS+0x20>)
 8009e6a:	f7fd fcd5 	bl	8007818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e6e:	4905      	ldr	r1, [pc, #20]	; (8009e84 <CDC_Init_FS+0x24>)
 8009e70:	4803      	ldr	r0, [pc, #12]	; (8009e80 <CDC_Init_FS+0x20>)
 8009e72:	f7fd fcea 	bl	800784a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20001a30 	.word	0x20001a30
 8009e80:	20001384 	.word	0x20001384
 8009e84:	20001648 	.word	0x20001648

08009e88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr
	...

08009e98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	2b23      	cmp	r3, #35	; 0x23
 8009eac:	d84a      	bhi.n	8009f44 <CDC_Control_FS+0xac>
 8009eae:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <CDC_Control_FS+0x1c>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009f45 	.word	0x08009f45
 8009eb8:	08009f45 	.word	0x08009f45
 8009ebc:	08009f45 	.word	0x08009f45
 8009ec0:	08009f45 	.word	0x08009f45
 8009ec4:	08009f45 	.word	0x08009f45
 8009ec8:	08009f45 	.word	0x08009f45
 8009ecc:	08009f45 	.word	0x08009f45
 8009ed0:	08009f45 	.word	0x08009f45
 8009ed4:	08009f45 	.word	0x08009f45
 8009ed8:	08009f45 	.word	0x08009f45
 8009edc:	08009f45 	.word	0x08009f45
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009f45 	.word	0x08009f45
 8009ee8:	08009f45 	.word	0x08009f45
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	08009f45 	.word	0x08009f45
 8009ef4:	08009f45 	.word	0x08009f45
 8009ef8:	08009f45 	.word	0x08009f45
 8009efc:	08009f45 	.word	0x08009f45
 8009f00:	08009f45 	.word	0x08009f45
 8009f04:	08009f45 	.word	0x08009f45
 8009f08:	08009f45 	.word	0x08009f45
 8009f0c:	08009f45 	.word	0x08009f45
 8009f10:	08009f45 	.word	0x08009f45
 8009f14:	08009f45 	.word	0x08009f45
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	08009f45 	.word	0x08009f45
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	08009f45 	.word	0x08009f45
 8009f2c:	08009f45 	.word	0x08009f45
 8009f30:	08009f45 	.word	0x08009f45
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f45 	.word	0x08009f45
 8009f3c:	08009f45 	.word	0x08009f45
 8009f40:	08009f45 	.word	0x08009f45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f44:	bf00      	nop
  }

  return (USBD_OK);
 8009f46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop

08009f54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	480d      	ldr	r0, [pc, #52]	; (8009f98 <CDC_Receive_FS+0x44>)
 8009f62:	f7fd fc72 	bl	800784a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f66:	480c      	ldr	r0, [pc, #48]	; (8009f98 <CDC_Receive_FS+0x44>)
 8009f68:	f7fd fcb1 	bl	80078ce <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8009f72:	2240      	movs	r2, #64	; 0x40
 8009f74:	2100      	movs	r1, #0
 8009f76:	4809      	ldr	r0, [pc, #36]	; (8009f9c <CDC_Receive_FS+0x48>)
 8009f78:	f000 fc28 	bl	800a7cc <memset>
  memcpy(buffer, Buf, len);
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4806      	ldr	r0, [pc, #24]	; (8009f9c <CDC_Receive_FS+0x48>)
 8009f84:	f000 fc14 	bl	800a7b0 <memcpy>
  terminal_proses(buffer);
 8009f88:	4804      	ldr	r0, [pc, #16]	; (8009f9c <CDC_Receive_FS+0x48>)
 8009f8a:	f7f6 ff7f 	bl	8000e8c <terminal_proses>
  return (USBD_OK);
 8009f8e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20001384 	.word	0x20001384
 8009f9c:	20000468 	.word	0x20000468

08009fa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <CDC_Transmit_FS+0x48>)
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e00b      	b.n	8009fde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fc6:	887b      	ldrh	r3, [r7, #2]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4806      	ldr	r0, [pc, #24]	; (8009fe8 <CDC_Transmit_FS+0x48>)
 8009fce:	f7fd fc23 	bl	8007818 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fd2:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <CDC_Transmit_FS+0x48>)
 8009fd4:	f7fd fc4c 	bl	8007870 <USBD_CDC_TransmitPacket>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20001384 	.word	0x20001384

08009fec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2212      	movs	r2, #18
 8009ffc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ffe:	4b03      	ldr	r3, [pc, #12]	; (800a00c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000154 	.word	0x20000154

0800a010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2204      	movs	r2, #4
 800a020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a022:	4b03      	ldr	r3, [pc, #12]	; (800a030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20000168 	.word	0x20000168

0800a034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d105      	bne.n	800a052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4907      	ldr	r1, [pc, #28]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
 800a04a:	4808      	ldr	r0, [pc, #32]	; (800a06c <USBD_FS_ProductStrDescriptor+0x38>)
 800a04c:	f7fe fc26 	bl	800889c <USBD_GetString>
 800a050:	e004      	b.n	800a05c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4904      	ldr	r1, [pc, #16]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
 800a056:	4805      	ldr	r0, [pc, #20]	; (800a06c <USBD_FS_ProductStrDescriptor+0x38>)
 800a058:	f7fe fc20 	bl	800889c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a05c:	4b02      	ldr	r3, [pc, #8]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001e18 	.word	0x20001e18
 800a06c:	0800c714 	.word	0x0800c714

0800a070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	4904      	ldr	r1, [pc, #16]	; (800a090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a080:	4804      	ldr	r0, [pc, #16]	; (800a094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a082:	f7fe fc0b 	bl	800889c <USBD_GetString>
  return USBD_StrDesc;
 800a086:	4b02      	ldr	r3, [pc, #8]	; (800a090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20001e18 	.word	0x20001e18
 800a094:	0800c72c 	.word	0x0800c72c

0800a098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	221a      	movs	r2, #26
 800a0a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0aa:	f000 f843 	bl	800a134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0ae:	4b02      	ldr	r3, [pc, #8]	; (800a0b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	2000016c 	.word	0x2000016c

0800a0bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4907      	ldr	r1, [pc, #28]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	; (800a0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0d4:	f7fe fbe2 	bl	800889c <USBD_GetString>
 800a0d8:	e004      	b.n	800a0e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4904      	ldr	r1, [pc, #16]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0de:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0e0:	f7fe fbdc 	bl	800889c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20001e18 	.word	0x20001e18
 800a0f4:	0800c740 	.word	0x0800c740

0800a0f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a10e:	4808      	ldr	r0, [pc, #32]	; (800a130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a110:	f7fe fbc4 	bl	800889c <USBD_GetString>
 800a114:	e004      	b.n	800a120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4904      	ldr	r1, [pc, #16]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a11a:	4805      	ldr	r0, [pc, #20]	; (800a130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a11c:	f7fe fbbe 	bl	800889c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20001e18 	.word	0x20001e18
 800a130:	0800c74c 	.word	0x0800c74c

0800a134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a13a:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <Get_SerialNum+0x44>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a140:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <Get_SerialNum+0x48>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a146:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <Get_SerialNum+0x4c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d009      	beq.n	800a16e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a15a:	2208      	movs	r2, #8
 800a15c:	4909      	ldr	r1, [pc, #36]	; (800a184 <Get_SerialNum+0x50>)
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f814 	bl	800a18c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a164:	2204      	movs	r2, #4
 800a166:	4908      	ldr	r1, [pc, #32]	; (800a188 <Get_SerialNum+0x54>)
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f000 f80f 	bl	800a18c <IntToUnicode>
  }
}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	1ffff7e8 	.word	0x1ffff7e8
 800a17c:	1ffff7ec 	.word	0x1ffff7ec
 800a180:	1ffff7f0 	.word	0x1ffff7f0
 800a184:	2000016e 	.word	0x2000016e
 800a188:	2000017e 	.word	0x2000017e

0800a18c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
 800a1a2:	e027      	b.n	800a1f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	0f1b      	lsrs	r3, r3, #28
 800a1a8:	2b09      	cmp	r3, #9
 800a1aa:	d80b      	bhi.n	800a1c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0f1b      	lsrs	r3, r3, #28
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3230      	adds	r2, #48	; 0x30
 800a1be:	b2d2      	uxtb	r2, r2
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e00a      	b.n	800a1da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	0f1b      	lsrs	r3, r3, #28
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	440b      	add	r3, r1
 800a1d4:	3237      	adds	r2, #55	; 0x37
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
 800a1f4:	7dfa      	ldrb	r2, [r7, #23]
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d3d3      	bcc.n	800a1a4 <IntToUnicode+0x18>
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a0d      	ldr	r2, [pc, #52]	; (800a24c <HAL_PCD_MspInit+0x44>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d113      	bne.n	800a242 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <HAL_PCD_MspInit+0x48>)
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	4a0c      	ldr	r2, [pc, #48]	; (800a250 <HAL_PCD_MspInit+0x48>)
 800a220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a224:	61d3      	str	r3, [r2, #28]
 800a226:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <HAL_PCD_MspInit+0x48>)
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a232:	2200      	movs	r2, #0
 800a234:	2105      	movs	r1, #5
 800a236:	2014      	movs	r0, #20
 800a238:	f7f7 f877 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a23c:	2014      	movs	r0, #20
 800a23e:	f7f7 f890 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40005c00 	.word	0x40005c00
 800a250:	40021000 	.word	0x40021000

0800a254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a268:	4619      	mov	r1, r3
 800a26a:	4610      	mov	r0, r2
 800a26c:	f7fd fbe5 	bl	8007a3a <USBD_LL_SetupStage>
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a28a:	78fa      	ldrb	r2, [r7, #3]
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	440b      	add	r3, r1
 800a298:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	f7fd fc17 	bl	8007ad4 <USBD_LL_DataOutStage>
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	440b      	add	r3, r1
 800a2ce:	333c      	adds	r3, #60	; 0x3c
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f7fd fc6e 	bl	8007bb6 <USBD_LL_DataInStage>
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fd fd7e 	bl	8007df2 <USBD_LL_SOF>
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a306:	2301      	movs	r3, #1
 800a308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d001      	beq.n	800a316 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a312:	f7f6 fb3d 	bl	8000990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a31c:	7bfa      	ldrb	r2, [r7, #15]
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd fd2e 	bl	8007d82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fd fce7 	bl	8007d00 <USBD_LL_Reset>
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fd fd28 	bl	8007da0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d005      	beq.n	800a364 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a358:	4b04      	ldr	r3, [pc, #16]	; (800a36c <HAL_PCD_SuspendCallback+0x30>)
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	4a03      	ldr	r2, [pc, #12]	; (800a36c <HAL_PCD_SuspendCallback+0x30>)
 800a35e:	f043 0306 	orr.w	r3, r3, #6
 800a362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed00 	.word	0xe000ed00

0800a370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd fd22 	bl	8007dc8 <USBD_LL_Resume>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a394:	4a28      	ldr	r2, [pc, #160]	; (800a438 <USBD_LL_Init+0xac>)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a26      	ldr	r2, [pc, #152]	; (800a438 <USBD_LL_Init+0xac>)
 800a3a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3a4:	4b24      	ldr	r3, [pc, #144]	; (800a438 <USBD_LL_Init+0xac>)
 800a3a6:	4a25      	ldr	r2, [pc, #148]	; (800a43c <USBD_LL_Init+0xb0>)
 800a3a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3aa:	4b23      	ldr	r3, [pc, #140]	; (800a438 <USBD_LL_Init+0xac>)
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3b0:	4b21      	ldr	r3, [pc, #132]	; (800a438 <USBD_LL_Init+0xac>)
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3b6:	4b20      	ldr	r3, [pc, #128]	; (800a438 <USBD_LL_Init+0xac>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3bc:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <USBD_LL_Init+0xac>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3c2:	4b1d      	ldr	r3, [pc, #116]	; (800a438 <USBD_LL_Init+0xac>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3c8:	481b      	ldr	r0, [pc, #108]	; (800a438 <USBD_LL_Init+0xac>)
 800a3ca:	f7f7 faf7 	bl	80019bc <HAL_PCD_Init>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a3d4:	f7f6 fadc 	bl	8000990 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3de:	2318      	movs	r3, #24
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	f7f8 ff6b 	bl	80032be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3ee:	2358      	movs	r3, #88	; 0x58
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2180      	movs	r1, #128	; 0x80
 800a3f4:	f7f8 ff63 	bl	80032be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3fe:	23c0      	movs	r3, #192	; 0xc0
 800a400:	2200      	movs	r2, #0
 800a402:	2181      	movs	r1, #129	; 0x81
 800a404:	f7f8 ff5b 	bl	80032be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a40e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a412:	2200      	movs	r2, #0
 800a414:	2101      	movs	r1, #1
 800a416:	f7f8 ff52 	bl	80032be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a420:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a424:	2200      	movs	r2, #0
 800a426:	2182      	movs	r1, #130	; 0x82
 800a428:	f7f8 ff49 	bl	80032be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20002018 	.word	0x20002018
 800a43c:	40005c00 	.word	0x40005c00

0800a440 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a456:	4618      	mov	r0, r3
 800a458:	f7f7 fbbb 	bl	8001bd2 <HAL_PCD_Start>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f94e 	bl	800a704 <USBD_Get_USB_Status>
 800a468:	4603      	mov	r3, r0
 800a46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	461a      	mov	r2, r3
 800a484:	4603      	mov	r3, r0
 800a486:	70fb      	strb	r3, [r7, #3]
 800a488:	460b      	mov	r3, r1
 800a48a:	70bb      	strb	r3, [r7, #2]
 800a48c:	4613      	mov	r3, r2
 800a48e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a49e:	78bb      	ldrb	r3, [r7, #2]
 800a4a0:	883a      	ldrh	r2, [r7, #0]
 800a4a2:	78f9      	ldrb	r1, [r7, #3]
 800a4a4:	f7f7 fd33 	bl	8001f0e <HAL_PCD_EP_Open>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f928 	bl	800a704 <USBD_Get_USB_Status>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4dc:	78fa      	ldrb	r2, [r7, #3]
 800a4de:	4611      	mov	r1, r2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f7 fd7a 	bl	8001fda <HAL_PCD_EP_Close>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f909 	bl	800a704 <USBD_Get_USB_Status>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f7 fe3a 	bl	8002198 <HAL_PCD_EP_SetStall>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f8ea 	bl	800a704 <USBD_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a534:	7bbb      	ldrb	r3, [r7, #14]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a558:	78fa      	ldrb	r2, [r7, #3]
 800a55a:	4611      	mov	r1, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7f7 fe7b 	bl	8002258 <HAL_PCD_EP_ClrStall>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f8cb 	bl	800a704 <USBD_Get_USB_Status>
 800a56e:	4603      	mov	r3, r0
 800a570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a572:	7bbb      	ldrb	r3, [r7, #14]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a58e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a594:	2b00      	cmp	r3, #0
 800a596:	da0c      	bge.n	800a5b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	e00b      	b.n	800a5ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5b8:	68f9      	ldr	r1, [r7, #12]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	440b      	add	r3, r1
 800a5c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a5c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f7 fc66 	bl	8001ec4 <HAL_PCD_SetAddress>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f880 	bl	800a704 <USBD_Get_USB_Status>
 800a604:	4603      	mov	r3, r0
 800a606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a608:	7bbb      	ldrb	r3, [r7, #14]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b086      	sub	sp, #24
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	461a      	mov	r2, r3
 800a61e:	460b      	mov	r3, r1
 800a620:	72fb      	strb	r3, [r7, #11]
 800a622:	4613      	mov	r3, r2
 800a624:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a634:	893b      	ldrh	r3, [r7, #8]
 800a636:	7af9      	ldrb	r1, [r7, #11]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	f7f7 fd6a 	bl	8002112 <HAL_PCD_EP_Transmit>
 800a63e:	4603      	mov	r3, r0
 800a640:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 f85d 	bl	800a704 <USBD_Get_USB_Status>
 800a64a:	4603      	mov	r3, r0
 800a64c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a64e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	607a      	str	r2, [r7, #4]
 800a662:	461a      	mov	r2, r3
 800a664:	460b      	mov	r3, r1
 800a666:	72fb      	strb	r3, [r7, #11]
 800a668:	4613      	mov	r3, r2
 800a66a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a67a:	893b      	ldrh	r3, [r7, #8]
 800a67c:	7af9      	ldrb	r1, [r7, #11]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	f7f7 fcf3 	bl	800206a <HAL_PCD_EP_Receive>
 800a684:	4603      	mov	r3, r0
 800a686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f83a 	bl	800a704 <USBD_Get_USB_Status>
 800a690:	4603      	mov	r3, r0
 800a692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a694:	7dbb      	ldrb	r3, [r7, #22]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7f7 fd15 	bl	80020e4 <HAL_PCD_EP_GetRxCount>
 800a6ba:	4603      	mov	r3, r0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_static_malloc+0x14>)
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bc80      	pop	{r7}
 800a6d6:	4770      	bx	lr
 800a6d8:	20002304 	.word	0x20002304

0800a6dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]

}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bc80      	pop	{r7}
 800a6ec:	4770      	bx	lr

0800a6ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bc80      	pop	{r7}
 800a702:	4770      	bx	lr

0800a704 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d817      	bhi.n	800a748 <USBD_Get_USB_Status+0x44>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <USBD_Get_USB_Status+0x1c>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a731 	.word	0x0800a731
 800a724:	0800a737 	.word	0x0800a737
 800a728:	0800a73d 	.word	0x0800a73d
 800a72c:	0800a743 	.word	0x0800a743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
    break;
 800a734:	e00b      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a736:	2302      	movs	r3, #2
 800a738:	73fb      	strb	r3, [r7, #15]
    break;
 800a73a:	e008      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a73c:	2301      	movs	r3, #1
 800a73e:	73fb      	strb	r3, [r7, #15]
    break;
 800a740:	e005      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a742:	2302      	movs	r3, #2
 800a744:	73fb      	strb	r3, [r7, #15]
    break;
 800a746:	e002      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a748:	2302      	movs	r3, #2
 800a74a:	73fb      	strb	r3, [r7, #15]
    break;
 800a74c:	bf00      	nop
  }
  return usb_status;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	bc80      	pop	{r7}
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop

0800a75c <__errno>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	; (800a764 <__errno+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000188 	.word	0x20000188

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2600      	movs	r6, #0
 800a76c:	4d0c      	ldr	r5, [pc, #48]	; (800a7a0 <__libc_init_array+0x38>)
 800a76e:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a770:	1b64      	subs	r4, r4, r5
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	42a6      	cmp	r6, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	f001 ff28 	bl	800c5cc <_init>
 800a77c:	2600      	movs	r6, #0
 800a77e:	4d0a      	ldr	r5, [pc, #40]	; (800a7a8 <__libc_init_array+0x40>)
 800a780:	4c0a      	ldr	r4, [pc, #40]	; (800a7ac <__libc_init_array+0x44>)
 800a782:	1b64      	subs	r4, r4, r5
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	42a6      	cmp	r6, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a790:	4798      	blx	r3
 800a792:	3601      	adds	r6, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79a:	4798      	blx	r3
 800a79c:	3601      	adds	r6, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800c9e4 	.word	0x0800c9e4
 800a7a4:	0800c9e4 	.word	0x0800c9e4
 800a7a8:	0800c9e4 	.word	0x0800c9e4
 800a7ac:	0800c9e8 	.word	0x0800c9e8

0800a7b0 <memcpy>:
 800a7b0:	440a      	add	r2, r1
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7b8:	d100      	bne.n	800a7bc <memcpy+0xc>
 800a7ba:	4770      	bx	lr
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c2:	4291      	cmp	r1, r2
 800a7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c8:	d1f9      	bne.n	800a7be <memcpy+0xe>
 800a7ca:	bd10      	pop	{r4, pc}

0800a7cc <memset>:
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4402      	add	r2, r0
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <memset+0xa>
 800a7d4:	4770      	bx	lr
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <memset+0x4>

0800a7dc <siscanf>:
 800a7dc:	b40e      	push	{r1, r2, r3}
 800a7de:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a7e2:	b530      	push	{r4, r5, lr}
 800a7e4:	b09c      	sub	sp, #112	; 0x70
 800a7e6:	ac1f      	add	r4, sp, #124	; 0x7c
 800a7e8:	f854 5b04 	ldr.w	r5, [r4], #4
 800a7ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a7f0:	9002      	str	r0, [sp, #8]
 800a7f2:	9006      	str	r0, [sp, #24]
 800a7f4:	f7f5 fcb6 	bl	8000164 <strlen>
 800a7f8:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <siscanf+0x4c>)
 800a7fa:	9003      	str	r0, [sp, #12]
 800a7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7fe:	2300      	movs	r3, #0
 800a800:	930f      	str	r3, [sp, #60]	; 0x3c
 800a802:	9314      	str	r3, [sp, #80]	; 0x50
 800a804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a808:	9007      	str	r0, [sp, #28]
 800a80a:	4808      	ldr	r0, [pc, #32]	; (800a82c <siscanf+0x50>)
 800a80c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a810:	462a      	mov	r2, r5
 800a812:	4623      	mov	r3, r4
 800a814:	a902      	add	r1, sp, #8
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	9401      	str	r4, [sp, #4]
 800a81a:	f000 fbe3 	bl	800afe4 <__ssvfiscanf_r>
 800a81e:	b01c      	add	sp, #112	; 0x70
 800a820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr
 800a828:	0800a853 	.word	0x0800a853
 800a82c:	20000188 	.word	0x20000188

0800a830 <__sread>:
 800a830:	b510      	push	{r4, lr}
 800a832:	460c      	mov	r4, r1
 800a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a838:	f001 f98e 	bl	800bb58 <_read_r>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	bfab      	itete	ge
 800a840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a842:	89a3      	ldrhlt	r3, [r4, #12]
 800a844:	181b      	addge	r3, r3, r0
 800a846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a84a:	bfac      	ite	ge
 800a84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a84e:	81a3      	strhlt	r3, [r4, #12]
 800a850:	bd10      	pop	{r4, pc}

0800a852 <__seofread>:
 800a852:	2000      	movs	r0, #0
 800a854:	4770      	bx	lr

0800a856 <__swrite>:
 800a856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85a:	461f      	mov	r7, r3
 800a85c:	898b      	ldrh	r3, [r1, #12]
 800a85e:	4605      	mov	r5, r0
 800a860:	05db      	lsls	r3, r3, #23
 800a862:	460c      	mov	r4, r1
 800a864:	4616      	mov	r6, r2
 800a866:	d505      	bpl.n	800a874 <__swrite+0x1e>
 800a868:	2302      	movs	r3, #2
 800a86a:	2200      	movs	r2, #0
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	f000 f90c 	bl	800aa8c <_lseek_r>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	4632      	mov	r2, r6
 800a878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	4628      	mov	r0, r5
 800a880:	463b      	mov	r3, r7
 800a882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	f000 b8ad 	b.w	800a9e8 <_write_r>

0800a88e <__sseek>:
 800a88e:	b510      	push	{r4, lr}
 800a890:	460c      	mov	r4, r1
 800a892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a896:	f000 f8f9 	bl	800aa8c <_lseek_r>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	bf15      	itete	ne
 800a8a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8aa:	81a3      	strheq	r3, [r4, #12]
 800a8ac:	bf18      	it	ne
 800a8ae:	81a3      	strhne	r3, [r4, #12]
 800a8b0:	bd10      	pop	{r4, pc}

0800a8b2 <__sclose>:
 800a8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b6:	f000 b8c7 	b.w	800aa48 <_close_r>
	...

0800a8bc <strtok>:
 800a8bc:	4b16      	ldr	r3, [pc, #88]	; (800a918 <strtok+0x5c>)
 800a8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	681f      	ldr	r7, [r3, #0]
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a8c8:	460e      	mov	r6, r1
 800a8ca:	b9ec      	cbnz	r4, 800a908 <strtok+0x4c>
 800a8cc:	2050      	movs	r0, #80	; 0x50
 800a8ce:	f000 f8ef 	bl	800aab0 <malloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a8d6:	b920      	cbnz	r0, 800a8e2 <strtok+0x26>
 800a8d8:	2157      	movs	r1, #87	; 0x57
 800a8da:	4b10      	ldr	r3, [pc, #64]	; (800a91c <strtok+0x60>)
 800a8dc:	4810      	ldr	r0, [pc, #64]	; (800a920 <strtok+0x64>)
 800a8de:	f000 f895 	bl	800aa0c <__assert_func>
 800a8e2:	e9c0 4400 	strd	r4, r4, [r0]
 800a8e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a8ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a8ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a8f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a8f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a8fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a8fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a902:	6184      	str	r4, [r0, #24]
 800a904:	7704      	strb	r4, [r0, #28]
 800a906:	6244      	str	r4, [r0, #36]	; 0x24
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a90e:	2301      	movs	r3, #1
 800a910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	f000 b806 	b.w	800a924 <__strtok_r>
 800a918:	20000188 	.word	0x20000188
 800a91c:	0800c784 	.word	0x0800c784
 800a920:	0800c79b 	.word	0x0800c79b

0800a924 <__strtok_r>:
 800a924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a926:	b908      	cbnz	r0, 800a92c <__strtok_r+0x8>
 800a928:	6810      	ldr	r0, [r2, #0]
 800a92a:	b188      	cbz	r0, 800a950 <__strtok_r+0x2c>
 800a92c:	4604      	mov	r4, r0
 800a92e:	460f      	mov	r7, r1
 800a930:	4620      	mov	r0, r4
 800a932:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a936:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a93a:	b91e      	cbnz	r6, 800a944 <__strtok_r+0x20>
 800a93c:	b965      	cbnz	r5, 800a958 <__strtok_r+0x34>
 800a93e:	4628      	mov	r0, r5
 800a940:	6015      	str	r5, [r2, #0]
 800a942:	e005      	b.n	800a950 <__strtok_r+0x2c>
 800a944:	42b5      	cmp	r5, r6
 800a946:	d1f6      	bne.n	800a936 <__strtok_r+0x12>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1f0      	bne.n	800a92e <__strtok_r+0xa>
 800a94c:	6014      	str	r4, [r2, #0]
 800a94e:	7003      	strb	r3, [r0, #0]
 800a950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a952:	461c      	mov	r4, r3
 800a954:	e00c      	b.n	800a970 <__strtok_r+0x4c>
 800a956:	b915      	cbnz	r5, 800a95e <__strtok_r+0x3a>
 800a958:	460e      	mov	r6, r1
 800a95a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a95e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a962:	42ab      	cmp	r3, r5
 800a964:	d1f7      	bne.n	800a956 <__strtok_r+0x32>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f3      	beq.n	800a952 <__strtok_r+0x2e>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a970:	6014      	str	r4, [r2, #0]
 800a972:	e7ed      	b.n	800a950 <__strtok_r+0x2c>

0800a974 <_vsniprintf_r>:
 800a974:	b530      	push	{r4, r5, lr}
 800a976:	4614      	mov	r4, r2
 800a978:	2c00      	cmp	r4, #0
 800a97a:	4605      	mov	r5, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	b09b      	sub	sp, #108	; 0x6c
 800a980:	da05      	bge.n	800a98e <_vsniprintf_r+0x1a>
 800a982:	238b      	movs	r3, #139	; 0x8b
 800a984:	6003      	str	r3, [r0, #0]
 800a986:	f04f 30ff 	mov.w	r0, #4294967295
 800a98a:	b01b      	add	sp, #108	; 0x6c
 800a98c:	bd30      	pop	{r4, r5, pc}
 800a98e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a992:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a996:	bf0c      	ite	eq
 800a998:	4623      	moveq	r3, r4
 800a99a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9a6:	9100      	str	r1, [sp, #0]
 800a9a8:	9104      	str	r1, [sp, #16]
 800a9aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a9ae:	4669      	mov	r1, sp
 800a9b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a9b2:	f000 f9bd 	bl	800ad30 <_svfiprintf_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	bfbc      	itt	lt
 800a9ba:	238b      	movlt	r3, #139	; 0x8b
 800a9bc:	602b      	strlt	r3, [r5, #0]
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	d0e3      	beq.n	800a98a <_vsniprintf_r+0x16>
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	9b00      	ldr	r3, [sp, #0]
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e7df      	b.n	800a98a <_vsniprintf_r+0x16>
	...

0800a9cc <vsniprintf>:
 800a9cc:	b507      	push	{r0, r1, r2, lr}
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	4803      	ldr	r0, [pc, #12]	; (800a9e4 <vsniprintf+0x18>)
 800a9d8:	6800      	ldr	r0, [r0, #0]
 800a9da:	f7ff ffcb 	bl	800a974 <_vsniprintf_r>
 800a9de:	b003      	add	sp, #12
 800a9e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9e4:	20000188 	.word	0x20000188

0800a9e8 <_write_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4d05      	ldr	r5, [pc, #20]	; (800aa08 <_write_r+0x20>)
 800a9f4:	602a      	str	r2, [r5, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f7f6 f994 	bl	8000d24 <_write>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_write_r+0x1e>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_write_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	2000252c 	.word	0x2000252c

0800aa0c <__assert_func>:
 800aa0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa0e:	4614      	mov	r4, r2
 800aa10:	461a      	mov	r2, r3
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <__assert_func+0x2c>)
 800aa14:	4605      	mov	r5, r0
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68d8      	ldr	r0, [r3, #12]
 800aa1a:	b14c      	cbz	r4, 800aa30 <__assert_func+0x24>
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <__assert_func+0x30>)
 800aa1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa22:	9100      	str	r1, [sp, #0]
 800aa24:	462b      	mov	r3, r5
 800aa26:	4906      	ldr	r1, [pc, #24]	; (800aa40 <__assert_func+0x34>)
 800aa28:	f000 f81e 	bl	800aa68 <fiprintf>
 800aa2c:	f001 fad8 	bl	800bfe0 <abort>
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <__assert_func+0x38>)
 800aa32:	461c      	mov	r4, r3
 800aa34:	e7f3      	b.n	800aa1e <__assert_func+0x12>
 800aa36:	bf00      	nop
 800aa38:	20000188 	.word	0x20000188
 800aa3c:	0800c7f8 	.word	0x0800c7f8
 800aa40:	0800c805 	.word	0x0800c805
 800aa44:	0800c833 	.word	0x0800c833

0800aa48 <_close_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	4d05      	ldr	r5, [pc, #20]	; (800aa64 <_close_r+0x1c>)
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7f6 f982 	bl	8000d5c <_close>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_close_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_close_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	2000252c 	.word	0x2000252c

0800aa68 <fiprintf>:
 800aa68:	b40e      	push	{r1, r2, r3}
 800aa6a:	b503      	push	{r0, r1, lr}
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	ab03      	add	r3, sp, #12
 800aa70:	4805      	ldr	r0, [pc, #20]	; (800aa88 <fiprintf+0x20>)
 800aa72:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa76:	6800      	ldr	r0, [r0, #0]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	f000 fc55 	bl	800b328 <_vfiprintf_r>
 800aa7e:	b002      	add	sp, #8
 800aa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa84:	b003      	add	sp, #12
 800aa86:	4770      	bx	lr
 800aa88:	20000188 	.word	0x20000188

0800aa8c <_lseek_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	2200      	movs	r2, #0
 800aa96:	4d05      	ldr	r5, [pc, #20]	; (800aaac <_lseek_r+0x20>)
 800aa98:	602a      	str	r2, [r5, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f7f6 f982 	bl	8000da4 <_lseek>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_lseek_r+0x1e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_lseek_r+0x1e>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	2000252c 	.word	0x2000252c

0800aab0 <malloc>:
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <malloc+0xc>)
 800aab2:	4601      	mov	r1, r0
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f000 b86b 	b.w	800ab90 <_malloc_r>
 800aaba:	bf00      	nop
 800aabc:	20000188 	.word	0x20000188

0800aac0 <_free_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4605      	mov	r5, r0
 800aac4:	2900      	cmp	r1, #0
 800aac6:	d040      	beq.n	800ab4a <_free_r+0x8a>
 800aac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aacc:	1f0c      	subs	r4, r1, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bfb8      	it	lt
 800aad2:	18e4      	addlt	r4, r4, r3
 800aad4:	f001 fcd0 	bl	800c478 <__malloc_lock>
 800aad8:	4a1c      	ldr	r2, [pc, #112]	; (800ab4c <_free_r+0x8c>)
 800aada:	6813      	ldr	r3, [r2, #0]
 800aadc:	b933      	cbnz	r3, 800aaec <_free_r+0x2c>
 800aade:	6063      	str	r3, [r4, #4]
 800aae0:	6014      	str	r4, [r2, #0]
 800aae2:	4628      	mov	r0, r5
 800aae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae8:	f001 bccc 	b.w	800c484 <__malloc_unlock>
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d908      	bls.n	800ab02 <_free_r+0x42>
 800aaf0:	6820      	ldr	r0, [r4, #0]
 800aaf2:	1821      	adds	r1, r4, r0
 800aaf4:	428b      	cmp	r3, r1
 800aaf6:	bf01      	itttt	eq
 800aaf8:	6819      	ldreq	r1, [r3, #0]
 800aafa:	685b      	ldreq	r3, [r3, #4]
 800aafc:	1809      	addeq	r1, r1, r0
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	e7ed      	b.n	800aade <_free_r+0x1e>
 800ab02:	461a      	mov	r2, r3
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	b10b      	cbz	r3, 800ab0c <_free_r+0x4c>
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d9fa      	bls.n	800ab02 <_free_r+0x42>
 800ab0c:	6811      	ldr	r1, [r2, #0]
 800ab0e:	1850      	adds	r0, r2, r1
 800ab10:	42a0      	cmp	r0, r4
 800ab12:	d10b      	bne.n	800ab2c <_free_r+0x6c>
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	4401      	add	r1, r0
 800ab18:	1850      	adds	r0, r2, r1
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	d1e0      	bne.n	800aae2 <_free_r+0x22>
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	4401      	add	r1, r0
 800ab26:	6011      	str	r1, [r2, #0]
 800ab28:	6053      	str	r3, [r2, #4]
 800ab2a:	e7da      	b.n	800aae2 <_free_r+0x22>
 800ab2c:	d902      	bls.n	800ab34 <_free_r+0x74>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	e7d6      	b.n	800aae2 <_free_r+0x22>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	1821      	adds	r1, r4, r0
 800ab38:	428b      	cmp	r3, r1
 800ab3a:	bf01      	itttt	eq
 800ab3c:	6819      	ldreq	r1, [r3, #0]
 800ab3e:	685b      	ldreq	r3, [r3, #4]
 800ab40:	1809      	addeq	r1, r1, r0
 800ab42:	6021      	streq	r1, [r4, #0]
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6054      	str	r4, [r2, #4]
 800ab48:	e7cb      	b.n	800aae2 <_free_r+0x22>
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	20002524 	.word	0x20002524

0800ab50 <sbrk_aligned>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	4e0e      	ldr	r6, [pc, #56]	; (800ab8c <sbrk_aligned+0x3c>)
 800ab54:	460c      	mov	r4, r1
 800ab56:	6831      	ldr	r1, [r6, #0]
 800ab58:	4605      	mov	r5, r0
 800ab5a:	b911      	cbnz	r1, 800ab62 <sbrk_aligned+0x12>
 800ab5c:	f001 f80e 	bl	800bb7c <_sbrk_r>
 800ab60:	6030      	str	r0, [r6, #0]
 800ab62:	4621      	mov	r1, r4
 800ab64:	4628      	mov	r0, r5
 800ab66:	f001 f809 	bl	800bb7c <_sbrk_r>
 800ab6a:	1c43      	adds	r3, r0, #1
 800ab6c:	d00a      	beq.n	800ab84 <sbrk_aligned+0x34>
 800ab6e:	1cc4      	adds	r4, r0, #3
 800ab70:	f024 0403 	bic.w	r4, r4, #3
 800ab74:	42a0      	cmp	r0, r4
 800ab76:	d007      	beq.n	800ab88 <sbrk_aligned+0x38>
 800ab78:	1a21      	subs	r1, r4, r0
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f000 fffe 	bl	800bb7c <_sbrk_r>
 800ab80:	3001      	adds	r0, #1
 800ab82:	d101      	bne.n	800ab88 <sbrk_aligned+0x38>
 800ab84:	f04f 34ff 	mov.w	r4, #4294967295
 800ab88:	4620      	mov	r0, r4
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	20002528 	.word	0x20002528

0800ab90 <_malloc_r>:
 800ab90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab94:	1ccd      	adds	r5, r1, #3
 800ab96:	f025 0503 	bic.w	r5, r5, #3
 800ab9a:	3508      	adds	r5, #8
 800ab9c:	2d0c      	cmp	r5, #12
 800ab9e:	bf38      	it	cc
 800aba0:	250c      	movcc	r5, #12
 800aba2:	2d00      	cmp	r5, #0
 800aba4:	4607      	mov	r7, r0
 800aba6:	db01      	blt.n	800abac <_malloc_r+0x1c>
 800aba8:	42a9      	cmp	r1, r5
 800abaa:	d905      	bls.n	800abb8 <_malloc_r+0x28>
 800abac:	230c      	movs	r3, #12
 800abae:	2600      	movs	r6, #0
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	4630      	mov	r0, r6
 800abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb8:	4e2e      	ldr	r6, [pc, #184]	; (800ac74 <_malloc_r+0xe4>)
 800abba:	f001 fc5d 	bl	800c478 <__malloc_lock>
 800abbe:	6833      	ldr	r3, [r6, #0]
 800abc0:	461c      	mov	r4, r3
 800abc2:	bb34      	cbnz	r4, 800ac12 <_malloc_r+0x82>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4638      	mov	r0, r7
 800abc8:	f7ff ffc2 	bl	800ab50 <sbrk_aligned>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	4604      	mov	r4, r0
 800abd0:	d14d      	bne.n	800ac6e <_malloc_r+0xde>
 800abd2:	6834      	ldr	r4, [r6, #0]
 800abd4:	4626      	mov	r6, r4
 800abd6:	2e00      	cmp	r6, #0
 800abd8:	d140      	bne.n	800ac5c <_malloc_r+0xcc>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	4631      	mov	r1, r6
 800abde:	4638      	mov	r0, r7
 800abe0:	eb04 0803 	add.w	r8, r4, r3
 800abe4:	f000 ffca 	bl	800bb7c <_sbrk_r>
 800abe8:	4580      	cmp	r8, r0
 800abea:	d13a      	bne.n	800ac62 <_malloc_r+0xd2>
 800abec:	6821      	ldr	r1, [r4, #0]
 800abee:	3503      	adds	r5, #3
 800abf0:	1a6d      	subs	r5, r5, r1
 800abf2:	f025 0503 	bic.w	r5, r5, #3
 800abf6:	3508      	adds	r5, #8
 800abf8:	2d0c      	cmp	r5, #12
 800abfa:	bf38      	it	cc
 800abfc:	250c      	movcc	r5, #12
 800abfe:	4638      	mov	r0, r7
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7ff ffa5 	bl	800ab50 <sbrk_aligned>
 800ac06:	3001      	adds	r0, #1
 800ac08:	d02b      	beq.n	800ac62 <_malloc_r+0xd2>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	442b      	add	r3, r5
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	e00e      	b.n	800ac30 <_malloc_r+0xa0>
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	1b52      	subs	r2, r2, r5
 800ac16:	d41e      	bmi.n	800ac56 <_malloc_r+0xc6>
 800ac18:	2a0b      	cmp	r2, #11
 800ac1a:	d916      	bls.n	800ac4a <_malloc_r+0xba>
 800ac1c:	1961      	adds	r1, r4, r5
 800ac1e:	42a3      	cmp	r3, r4
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	bf18      	it	ne
 800ac24:	6059      	strne	r1, [r3, #4]
 800ac26:	6863      	ldr	r3, [r4, #4]
 800ac28:	bf08      	it	eq
 800ac2a:	6031      	streq	r1, [r6, #0]
 800ac2c:	5162      	str	r2, [r4, r5]
 800ac2e:	604b      	str	r3, [r1, #4]
 800ac30:	4638      	mov	r0, r7
 800ac32:	f104 060b 	add.w	r6, r4, #11
 800ac36:	f001 fc25 	bl	800c484 <__malloc_unlock>
 800ac3a:	f026 0607 	bic.w	r6, r6, #7
 800ac3e:	1d23      	adds	r3, r4, #4
 800ac40:	1af2      	subs	r2, r6, r3
 800ac42:	d0b6      	beq.n	800abb2 <_malloc_r+0x22>
 800ac44:	1b9b      	subs	r3, r3, r6
 800ac46:	50a3      	str	r3, [r4, r2]
 800ac48:	e7b3      	b.n	800abb2 <_malloc_r+0x22>
 800ac4a:	6862      	ldr	r2, [r4, #4]
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	bf0c      	ite	eq
 800ac50:	6032      	streq	r2, [r6, #0]
 800ac52:	605a      	strne	r2, [r3, #4]
 800ac54:	e7ec      	b.n	800ac30 <_malloc_r+0xa0>
 800ac56:	4623      	mov	r3, r4
 800ac58:	6864      	ldr	r4, [r4, #4]
 800ac5a:	e7b2      	b.n	800abc2 <_malloc_r+0x32>
 800ac5c:	4634      	mov	r4, r6
 800ac5e:	6876      	ldr	r6, [r6, #4]
 800ac60:	e7b9      	b.n	800abd6 <_malloc_r+0x46>
 800ac62:	230c      	movs	r3, #12
 800ac64:	4638      	mov	r0, r7
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	f001 fc0c 	bl	800c484 <__malloc_unlock>
 800ac6c:	e7a1      	b.n	800abb2 <_malloc_r+0x22>
 800ac6e:	6025      	str	r5, [r4, #0]
 800ac70:	e7de      	b.n	800ac30 <_malloc_r+0xa0>
 800ac72:	bf00      	nop
 800ac74:	20002524 	.word	0x20002524

0800ac78 <__ssputs_r>:
 800ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	688e      	ldr	r6, [r1, #8]
 800ac7e:	4682      	mov	sl, r0
 800ac80:	429e      	cmp	r6, r3
 800ac82:	460c      	mov	r4, r1
 800ac84:	4690      	mov	r8, r2
 800ac86:	461f      	mov	r7, r3
 800ac88:	d838      	bhi.n	800acfc <__ssputs_r+0x84>
 800ac8a:	898a      	ldrh	r2, [r1, #12]
 800ac8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac90:	d032      	beq.n	800acf8 <__ssputs_r+0x80>
 800ac92:	6825      	ldr	r5, [r4, #0]
 800ac94:	6909      	ldr	r1, [r1, #16]
 800ac96:	3301      	adds	r3, #1
 800ac98:	eba5 0901 	sub.w	r9, r5, r1
 800ac9c:	6965      	ldr	r5, [r4, #20]
 800ac9e:	444b      	add	r3, r9
 800aca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aca8:	106d      	asrs	r5, r5, #1
 800acaa:	429d      	cmp	r5, r3
 800acac:	bf38      	it	cc
 800acae:	461d      	movcc	r5, r3
 800acb0:	0553      	lsls	r3, r2, #21
 800acb2:	d531      	bpl.n	800ad18 <__ssputs_r+0xa0>
 800acb4:	4629      	mov	r1, r5
 800acb6:	f7ff ff6b 	bl	800ab90 <_malloc_r>
 800acba:	4606      	mov	r6, r0
 800acbc:	b950      	cbnz	r0, 800acd4 <__ssputs_r+0x5c>
 800acbe:	230c      	movs	r3, #12
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	f8ca 3000 	str.w	r3, [sl]
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd4:	464a      	mov	r2, r9
 800acd6:	6921      	ldr	r1, [r4, #16]
 800acd8:	f7ff fd6a 	bl	800a7b0 <memcpy>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ace2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	6126      	str	r6, [r4, #16]
 800acea:	444e      	add	r6, r9
 800acec:	6026      	str	r6, [r4, #0]
 800acee:	463e      	mov	r6, r7
 800acf0:	6165      	str	r5, [r4, #20]
 800acf2:	eba5 0509 	sub.w	r5, r5, r9
 800acf6:	60a5      	str	r5, [r4, #8]
 800acf8:	42be      	cmp	r6, r7
 800acfa:	d900      	bls.n	800acfe <__ssputs_r+0x86>
 800acfc:	463e      	mov	r6, r7
 800acfe:	4632      	mov	r2, r6
 800ad00:	4641      	mov	r1, r8
 800ad02:	6820      	ldr	r0, [r4, #0]
 800ad04:	f001 fb9e 	bl	800c444 <memmove>
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	1b9b      	subs	r3, r3, r6
 800ad0e:	60a3      	str	r3, [r4, #8]
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	4433      	add	r3, r6
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	e7db      	b.n	800acd0 <__ssputs_r+0x58>
 800ad18:	462a      	mov	r2, r5
 800ad1a:	f001 fbb9 	bl	800c490 <_realloc_r>
 800ad1e:	4606      	mov	r6, r0
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d1e1      	bne.n	800ace8 <__ssputs_r+0x70>
 800ad24:	4650      	mov	r0, sl
 800ad26:	6921      	ldr	r1, [r4, #16]
 800ad28:	f7ff feca 	bl	800aac0 <_free_r>
 800ad2c:	e7c7      	b.n	800acbe <__ssputs_r+0x46>
	...

0800ad30 <_svfiprintf_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4698      	mov	r8, r3
 800ad36:	898b      	ldrh	r3, [r1, #12]
 800ad38:	4607      	mov	r7, r0
 800ad3a:	061b      	lsls	r3, r3, #24
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	4614      	mov	r4, r2
 800ad40:	b09d      	sub	sp, #116	; 0x74
 800ad42:	d50e      	bpl.n	800ad62 <_svfiprintf_r+0x32>
 800ad44:	690b      	ldr	r3, [r1, #16]
 800ad46:	b963      	cbnz	r3, 800ad62 <_svfiprintf_r+0x32>
 800ad48:	2140      	movs	r1, #64	; 0x40
 800ad4a:	f7ff ff21 	bl	800ab90 <_malloc_r>
 800ad4e:	6028      	str	r0, [r5, #0]
 800ad50:	6128      	str	r0, [r5, #16]
 800ad52:	b920      	cbnz	r0, 800ad5e <_svfiprintf_r+0x2e>
 800ad54:	230c      	movs	r3, #12
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	e0d1      	b.n	800af02 <_svfiprintf_r+0x1d2>
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	616b      	str	r3, [r5, #20]
 800ad62:	2300      	movs	r3, #0
 800ad64:	9309      	str	r3, [sp, #36]	; 0x24
 800ad66:	2320      	movs	r3, #32
 800ad68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad6c:	2330      	movs	r3, #48	; 0x30
 800ad6e:	f04f 0901 	mov.w	r9, #1
 800ad72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af1c <_svfiprintf_r+0x1ec>
 800ad7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad7e:	4623      	mov	r3, r4
 800ad80:	469a      	mov	sl, r3
 800ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad86:	b10a      	cbz	r2, 800ad8c <_svfiprintf_r+0x5c>
 800ad88:	2a25      	cmp	r2, #37	; 0x25
 800ad8a:	d1f9      	bne.n	800ad80 <_svfiprintf_r+0x50>
 800ad8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad90:	d00b      	beq.n	800adaa <_svfiprintf_r+0x7a>
 800ad92:	465b      	mov	r3, fp
 800ad94:	4622      	mov	r2, r4
 800ad96:	4629      	mov	r1, r5
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff ff6d 	bl	800ac78 <__ssputs_r>
 800ad9e:	3001      	adds	r0, #1
 800ada0:	f000 80aa 	beq.w	800aef8 <_svfiprintf_r+0x1c8>
 800ada4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ada6:	445a      	add	r2, fp
 800ada8:	9209      	str	r2, [sp, #36]	; 0x24
 800adaa:	f89a 3000 	ldrb.w	r3, [sl]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 80a2 	beq.w	800aef8 <_svfiprintf_r+0x1c8>
 800adb4:	2300      	movs	r3, #0
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adbe:	f10a 0a01 	add.w	sl, sl, #1
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	9307      	str	r3, [sp, #28]
 800adc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adca:	931a      	str	r3, [sp, #104]	; 0x68
 800adcc:	4654      	mov	r4, sl
 800adce:	2205      	movs	r2, #5
 800add0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add4:	4851      	ldr	r0, [pc, #324]	; (800af1c <_svfiprintf_r+0x1ec>)
 800add6:	f001 fb27 	bl	800c428 <memchr>
 800adda:	9a04      	ldr	r2, [sp, #16]
 800addc:	b9d8      	cbnz	r0, 800ae16 <_svfiprintf_r+0xe6>
 800adde:	06d0      	lsls	r0, r2, #27
 800ade0:	bf44      	itt	mi
 800ade2:	2320      	movmi	r3, #32
 800ade4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade8:	0711      	lsls	r1, r2, #28
 800adea:	bf44      	itt	mi
 800adec:	232b      	movmi	r3, #43	; 0x2b
 800adee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf2:	f89a 3000 	ldrb.w	r3, [sl]
 800adf6:	2b2a      	cmp	r3, #42	; 0x2a
 800adf8:	d015      	beq.n	800ae26 <_svfiprintf_r+0xf6>
 800adfa:	4654      	mov	r4, sl
 800adfc:	2000      	movs	r0, #0
 800adfe:	f04f 0c0a 	mov.w	ip, #10
 800ae02:	9a07      	ldr	r2, [sp, #28]
 800ae04:	4621      	mov	r1, r4
 800ae06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae0a:	3b30      	subs	r3, #48	; 0x30
 800ae0c:	2b09      	cmp	r3, #9
 800ae0e:	d94e      	bls.n	800aeae <_svfiprintf_r+0x17e>
 800ae10:	b1b0      	cbz	r0, 800ae40 <_svfiprintf_r+0x110>
 800ae12:	9207      	str	r2, [sp, #28]
 800ae14:	e014      	b.n	800ae40 <_svfiprintf_r+0x110>
 800ae16:	eba0 0308 	sub.w	r3, r0, r8
 800ae1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	46a2      	mov	sl, r4
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	e7d2      	b.n	800adcc <_svfiprintf_r+0x9c>
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	1d19      	adds	r1, r3, #4
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	9103      	str	r1, [sp, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfbb      	ittet	lt
 800ae32:	425b      	neglt	r3, r3
 800ae34:	f042 0202 	orrlt.w	r2, r2, #2
 800ae38:	9307      	strge	r3, [sp, #28]
 800ae3a:	9307      	strlt	r3, [sp, #28]
 800ae3c:	bfb8      	it	lt
 800ae3e:	9204      	strlt	r2, [sp, #16]
 800ae40:	7823      	ldrb	r3, [r4, #0]
 800ae42:	2b2e      	cmp	r3, #46	; 0x2e
 800ae44:	d10c      	bne.n	800ae60 <_svfiprintf_r+0x130>
 800ae46:	7863      	ldrb	r3, [r4, #1]
 800ae48:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4a:	d135      	bne.n	800aeb8 <_svfiprintf_r+0x188>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3402      	adds	r4, #2
 800ae50:	1d1a      	adds	r2, r3, #4
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	9203      	str	r2, [sp, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	bfb8      	it	lt
 800ae5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af20 <_svfiprintf_r+0x1f0>
 800ae64:	2203      	movs	r2, #3
 800ae66:	4650      	mov	r0, sl
 800ae68:	7821      	ldrb	r1, [r4, #0]
 800ae6a:	f001 fadd 	bl	800c428 <memchr>
 800ae6e:	b140      	cbz	r0, 800ae82 <_svfiprintf_r+0x152>
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	eba0 000a 	sub.w	r0, r0, sl
 800ae76:	fa03 f000 	lsl.w	r0, r3, r0
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	3401      	adds	r4, #1
 800ae7e:	4303      	orrs	r3, r0
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae86:	2206      	movs	r2, #6
 800ae88:	4826      	ldr	r0, [pc, #152]	; (800af24 <_svfiprintf_r+0x1f4>)
 800ae8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae8e:	f001 facb 	bl	800c428 <memchr>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d038      	beq.n	800af08 <_svfiprintf_r+0x1d8>
 800ae96:	4b24      	ldr	r3, [pc, #144]	; (800af28 <_svfiprintf_r+0x1f8>)
 800ae98:	bb1b      	cbnz	r3, 800aee2 <_svfiprintf_r+0x1b2>
 800ae9a:	9b03      	ldr	r3, [sp, #12]
 800ae9c:	3307      	adds	r3, #7
 800ae9e:	f023 0307 	bic.w	r3, r3, #7
 800aea2:	3308      	adds	r3, #8
 800aea4:	9303      	str	r3, [sp, #12]
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	4433      	add	r3, r6
 800aeaa:	9309      	str	r3, [sp, #36]	; 0x24
 800aeac:	e767      	b.n	800ad7e <_svfiprintf_r+0x4e>
 800aeae:	460c      	mov	r4, r1
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb6:	e7a5      	b.n	800ae04 <_svfiprintf_r+0xd4>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f04f 0c0a 	mov.w	ip, #10
 800aebe:	4619      	mov	r1, r3
 800aec0:	3401      	adds	r4, #1
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	4620      	mov	r0, r4
 800aec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeca:	3a30      	subs	r2, #48	; 0x30
 800aecc:	2a09      	cmp	r2, #9
 800aece:	d903      	bls.n	800aed8 <_svfiprintf_r+0x1a8>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0c5      	beq.n	800ae60 <_svfiprintf_r+0x130>
 800aed4:	9105      	str	r1, [sp, #20]
 800aed6:	e7c3      	b.n	800ae60 <_svfiprintf_r+0x130>
 800aed8:	4604      	mov	r4, r0
 800aeda:	2301      	movs	r3, #1
 800aedc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aee0:	e7f0      	b.n	800aec4 <_svfiprintf_r+0x194>
 800aee2:	ab03      	add	r3, sp, #12
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	462a      	mov	r2, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <_svfiprintf_r+0x1fc>)
 800aeec:	a904      	add	r1, sp, #16
 800aeee:	f3af 8000 	nop.w
 800aef2:	1c42      	adds	r2, r0, #1
 800aef4:	4606      	mov	r6, r0
 800aef6:	d1d6      	bne.n	800aea6 <_svfiprintf_r+0x176>
 800aef8:	89ab      	ldrh	r3, [r5, #12]
 800aefa:	065b      	lsls	r3, r3, #25
 800aefc:	f53f af2c 	bmi.w	800ad58 <_svfiprintf_r+0x28>
 800af00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af02:	b01d      	add	sp, #116	; 0x74
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	ab03      	add	r3, sp, #12
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	462a      	mov	r2, r5
 800af0e:	4638      	mov	r0, r7
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <_svfiprintf_r+0x1fc>)
 800af12:	a904      	add	r1, sp, #16
 800af14:	f000 fba8 	bl	800b668 <_printf_i>
 800af18:	e7eb      	b.n	800aef2 <_svfiprintf_r+0x1c2>
 800af1a:	bf00      	nop
 800af1c:	0800c834 	.word	0x0800c834
 800af20:	0800c83a 	.word	0x0800c83a
 800af24:	0800c83e 	.word	0x0800c83e
 800af28:	00000000 	.word	0x00000000
 800af2c:	0800ac79 	.word	0x0800ac79

0800af30 <_sungetc_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	1c4b      	adds	r3, r1, #1
 800af34:	4614      	mov	r4, r2
 800af36:	d103      	bne.n	800af40 <_sungetc_r+0x10>
 800af38:	f04f 35ff 	mov.w	r5, #4294967295
 800af3c:	4628      	mov	r0, r5
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	8993      	ldrh	r3, [r2, #12]
 800af42:	b2cd      	uxtb	r5, r1
 800af44:	f023 0320 	bic.w	r3, r3, #32
 800af48:	8193      	strh	r3, [r2, #12]
 800af4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af4c:	6852      	ldr	r2, [r2, #4]
 800af4e:	b18b      	cbz	r3, 800af74 <_sungetc_r+0x44>
 800af50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af52:	4293      	cmp	r3, r2
 800af54:	dd08      	ble.n	800af68 <_sungetc_r+0x38>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	1e5a      	subs	r2, r3, #1
 800af5a:	6022      	str	r2, [r4, #0]
 800af5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	3301      	adds	r3, #1
 800af64:	6063      	str	r3, [r4, #4]
 800af66:	e7e9      	b.n	800af3c <_sungetc_r+0xc>
 800af68:	4621      	mov	r1, r4
 800af6a:	f000 ff41 	bl	800bdf0 <__submore>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d0f1      	beq.n	800af56 <_sungetc_r+0x26>
 800af72:	e7e1      	b.n	800af38 <_sungetc_r+0x8>
 800af74:	6921      	ldr	r1, [r4, #16]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	b151      	cbz	r1, 800af90 <_sungetc_r+0x60>
 800af7a:	4299      	cmp	r1, r3
 800af7c:	d208      	bcs.n	800af90 <_sungetc_r+0x60>
 800af7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800af82:	42a9      	cmp	r1, r5
 800af84:	d104      	bne.n	800af90 <_sungetc_r+0x60>
 800af86:	3b01      	subs	r3, #1
 800af88:	3201      	adds	r2, #1
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	6062      	str	r2, [r4, #4]
 800af8e:	e7d5      	b.n	800af3c <_sungetc_r+0xc>
 800af90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800af94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af98:	6363      	str	r3, [r4, #52]	; 0x34
 800af9a:	2303      	movs	r3, #3
 800af9c:	63a3      	str	r3, [r4, #56]	; 0x38
 800af9e:	4623      	mov	r3, r4
 800afa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	2301      	movs	r3, #1
 800afa8:	e7dc      	b.n	800af64 <_sungetc_r+0x34>

0800afaa <__ssrefill_r>:
 800afaa:	b510      	push	{r4, lr}
 800afac:	460c      	mov	r4, r1
 800afae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800afb0:	b169      	cbz	r1, 800afce <__ssrefill_r+0x24>
 800afb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb6:	4299      	cmp	r1, r3
 800afb8:	d001      	beq.n	800afbe <__ssrefill_r+0x14>
 800afba:	f7ff fd81 	bl	800aac0 <_free_r>
 800afbe:	2000      	movs	r0, #0
 800afc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afc2:	6360      	str	r0, [r4, #52]	; 0x34
 800afc4:	6063      	str	r3, [r4, #4]
 800afc6:	b113      	cbz	r3, 800afce <__ssrefill_r+0x24>
 800afc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd10      	pop	{r4, pc}
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f043 0320 	orr.w	r3, r3, #32
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	e7f3      	b.n	800afcc <__ssrefill_r+0x22>

0800afe4 <__ssvfiscanf_r>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	460c      	mov	r4, r1
 800afea:	2100      	movs	r1, #0
 800afec:	4606      	mov	r6, r0
 800afee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aff2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aff6:	49a7      	ldr	r1, [pc, #668]	; (800b294 <__ssvfiscanf_r+0x2b0>)
 800aff8:	f10d 0804 	add.w	r8, sp, #4
 800affc:	91a0      	str	r1, [sp, #640]	; 0x280
 800affe:	49a6      	ldr	r1, [pc, #664]	; (800b298 <__ssvfiscanf_r+0x2b4>)
 800b000:	4fa6      	ldr	r7, [pc, #664]	; (800b29c <__ssvfiscanf_r+0x2b8>)
 800b002:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b2a0 <__ssvfiscanf_r+0x2bc>
 800b006:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b00a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	7813      	ldrb	r3, [r2, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 815c 	beq.w	800b2ce <__ssvfiscanf_r+0x2ea>
 800b016:	5dd9      	ldrb	r1, [r3, r7]
 800b018:	1c55      	adds	r5, r2, #1
 800b01a:	f011 0108 	ands.w	r1, r1, #8
 800b01e:	d019      	beq.n	800b054 <__ssvfiscanf_r+0x70>
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dd0f      	ble.n	800b046 <__ssvfiscanf_r+0x62>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	5cba      	ldrb	r2, [r7, r2]
 800b02c:	0712      	lsls	r2, r2, #28
 800b02e:	d401      	bmi.n	800b034 <__ssvfiscanf_r+0x50>
 800b030:	462a      	mov	r2, r5
 800b032:	e7ec      	b.n	800b00e <__ssvfiscanf_r+0x2a>
 800b034:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b036:	3301      	adds	r3, #1
 800b038:	3201      	adds	r2, #1
 800b03a:	9245      	str	r2, [sp, #276]	; 0x114
 800b03c:	6862      	ldr	r2, [r4, #4]
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	3a01      	subs	r2, #1
 800b042:	6062      	str	r2, [r4, #4]
 800b044:	e7ec      	b.n	800b020 <__ssvfiscanf_r+0x3c>
 800b046:	4621      	mov	r1, r4
 800b048:	4630      	mov	r0, r6
 800b04a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b04c:	4798      	blx	r3
 800b04e:	2800      	cmp	r0, #0
 800b050:	d0e9      	beq.n	800b026 <__ssvfiscanf_r+0x42>
 800b052:	e7ed      	b.n	800b030 <__ssvfiscanf_r+0x4c>
 800b054:	2b25      	cmp	r3, #37	; 0x25
 800b056:	d012      	beq.n	800b07e <__ssvfiscanf_r+0x9a>
 800b058:	469a      	mov	sl, r3
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f340 8094 	ble.w	800b18a <__ssvfiscanf_r+0x1a6>
 800b062:	6822      	ldr	r2, [r4, #0]
 800b064:	7813      	ldrb	r3, [r2, #0]
 800b066:	4553      	cmp	r3, sl
 800b068:	f040 8131 	bne.w	800b2ce <__ssvfiscanf_r+0x2ea>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	3201      	adds	r2, #1
 800b070:	3b01      	subs	r3, #1
 800b072:	6063      	str	r3, [r4, #4]
 800b074:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b076:	6022      	str	r2, [r4, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	9345      	str	r3, [sp, #276]	; 0x114
 800b07c:	e7d8      	b.n	800b030 <__ssvfiscanf_r+0x4c>
 800b07e:	9141      	str	r1, [sp, #260]	; 0x104
 800b080:	9143      	str	r1, [sp, #268]	; 0x10c
 800b082:	7853      	ldrb	r3, [r2, #1]
 800b084:	2b2a      	cmp	r3, #42	; 0x2a
 800b086:	bf04      	itt	eq
 800b088:	2310      	moveq	r3, #16
 800b08a:	1c95      	addeq	r5, r2, #2
 800b08c:	f04f 020a 	mov.w	r2, #10
 800b090:	bf08      	it	eq
 800b092:	9341      	streq	r3, [sp, #260]	; 0x104
 800b094:	46aa      	mov	sl, r5
 800b096:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b09a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d91d      	bls.n	800b0de <__ssvfiscanf_r+0xfa>
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	487e      	ldr	r0, [pc, #504]	; (800b2a0 <__ssvfiscanf_r+0x2bc>)
 800b0a6:	f001 f9bf 	bl	800c428 <memchr>
 800b0aa:	b140      	cbz	r0, 800b0be <__ssvfiscanf_r+0xda>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4655      	mov	r5, sl
 800b0b0:	eba0 0009 	sub.w	r0, r0, r9
 800b0b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0ba:	4318      	orrs	r0, r3
 800b0bc:	9041      	str	r0, [sp, #260]	; 0x104
 800b0be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b0c2:	2b78      	cmp	r3, #120	; 0x78
 800b0c4:	d806      	bhi.n	800b0d4 <__ssvfiscanf_r+0xf0>
 800b0c6:	2b57      	cmp	r3, #87	; 0x57
 800b0c8:	d810      	bhi.n	800b0ec <__ssvfiscanf_r+0x108>
 800b0ca:	2b25      	cmp	r3, #37	; 0x25
 800b0cc:	d0c4      	beq.n	800b058 <__ssvfiscanf_r+0x74>
 800b0ce:	d857      	bhi.n	800b180 <__ssvfiscanf_r+0x19c>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d065      	beq.n	800b1a0 <__ssvfiscanf_r+0x1bc>
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0d8:	230a      	movs	r3, #10
 800b0da:	9342      	str	r3, [sp, #264]	; 0x108
 800b0dc:	e072      	b.n	800b1c4 <__ssvfiscanf_r+0x1e0>
 800b0de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b0e0:	4655      	mov	r5, sl
 800b0e2:	fb02 1103 	mla	r1, r2, r3, r1
 800b0e6:	3930      	subs	r1, #48	; 0x30
 800b0e8:	9143      	str	r1, [sp, #268]	; 0x10c
 800b0ea:	e7d3      	b.n	800b094 <__ssvfiscanf_r+0xb0>
 800b0ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b0f0:	2a20      	cmp	r2, #32
 800b0f2:	d8ef      	bhi.n	800b0d4 <__ssvfiscanf_r+0xf0>
 800b0f4:	a101      	add	r1, pc, #4	; (adr r1, 800b0fc <__ssvfiscanf_r+0x118>)
 800b0f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b1af 	.word	0x0800b1af
 800b100:	0800b0d5 	.word	0x0800b0d5
 800b104:	0800b0d5 	.word	0x0800b0d5
 800b108:	0800b20d 	.word	0x0800b20d
 800b10c:	0800b0d5 	.word	0x0800b0d5
 800b110:	0800b0d5 	.word	0x0800b0d5
 800b114:	0800b0d5 	.word	0x0800b0d5
 800b118:	0800b0d5 	.word	0x0800b0d5
 800b11c:	0800b0d5 	.word	0x0800b0d5
 800b120:	0800b0d5 	.word	0x0800b0d5
 800b124:	0800b0d5 	.word	0x0800b0d5
 800b128:	0800b223 	.word	0x0800b223
 800b12c:	0800b1f9 	.word	0x0800b1f9
 800b130:	0800b187 	.word	0x0800b187
 800b134:	0800b187 	.word	0x0800b187
 800b138:	0800b187 	.word	0x0800b187
 800b13c:	0800b0d5 	.word	0x0800b0d5
 800b140:	0800b1fd 	.word	0x0800b1fd
 800b144:	0800b0d5 	.word	0x0800b0d5
 800b148:	0800b0d5 	.word	0x0800b0d5
 800b14c:	0800b0d5 	.word	0x0800b0d5
 800b150:	0800b0d5 	.word	0x0800b0d5
 800b154:	0800b233 	.word	0x0800b233
 800b158:	0800b205 	.word	0x0800b205
 800b15c:	0800b1a7 	.word	0x0800b1a7
 800b160:	0800b0d5 	.word	0x0800b0d5
 800b164:	0800b0d5 	.word	0x0800b0d5
 800b168:	0800b22f 	.word	0x0800b22f
 800b16c:	0800b0d5 	.word	0x0800b0d5
 800b170:	0800b1f9 	.word	0x0800b1f9
 800b174:	0800b0d5 	.word	0x0800b0d5
 800b178:	0800b0d5 	.word	0x0800b0d5
 800b17c:	0800b1af 	.word	0x0800b1af
 800b180:	3b45      	subs	r3, #69	; 0x45
 800b182:	2b02      	cmp	r3, #2
 800b184:	d8a6      	bhi.n	800b0d4 <__ssvfiscanf_r+0xf0>
 800b186:	2305      	movs	r3, #5
 800b188:	e01b      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b18a:	4621      	mov	r1, r4
 800b18c:	4630      	mov	r0, r6
 800b18e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b190:	4798      	blx	r3
 800b192:	2800      	cmp	r0, #0
 800b194:	f43f af65 	beq.w	800b062 <__ssvfiscanf_r+0x7e>
 800b198:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f040 808d 	bne.w	800b2ba <__ssvfiscanf_r+0x2d6>
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e08f      	b.n	800b2c6 <__ssvfiscanf_r+0x2e2>
 800b1a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b1a8:	f042 0220 	orr.w	r2, r2, #32
 800b1ac:	9241      	str	r2, [sp, #260]	; 0x104
 800b1ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b1b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1b4:	9241      	str	r2, [sp, #260]	; 0x104
 800b1b6:	2210      	movs	r2, #16
 800b1b8:	2b6f      	cmp	r3, #111	; 0x6f
 800b1ba:	bf34      	ite	cc
 800b1bc:	2303      	movcc	r3, #3
 800b1be:	2304      	movcs	r3, #4
 800b1c0:	9242      	str	r2, [sp, #264]	; 0x108
 800b1c2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dd42      	ble.n	800b250 <__ssvfiscanf_r+0x26c>
 800b1ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1cc:	0659      	lsls	r1, r3, #25
 800b1ce:	d404      	bmi.n	800b1da <__ssvfiscanf_r+0x1f6>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	5cba      	ldrb	r2, [r7, r2]
 800b1d6:	0712      	lsls	r2, r2, #28
 800b1d8:	d441      	bmi.n	800b25e <__ssvfiscanf_r+0x27a>
 800b1da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	dc50      	bgt.n	800b282 <__ssvfiscanf_r+0x29e>
 800b1e0:	466b      	mov	r3, sp
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	a941      	add	r1, sp, #260	; 0x104
 800b1e8:	f000 fb64 	bl	800b8b4 <_scanf_chars>
 800b1ec:	2801      	cmp	r0, #1
 800b1ee:	d06e      	beq.n	800b2ce <__ssvfiscanf_r+0x2ea>
 800b1f0:	2802      	cmp	r0, #2
 800b1f2:	f47f af1d 	bne.w	800b030 <__ssvfiscanf_r+0x4c>
 800b1f6:	e7cf      	b.n	800b198 <__ssvfiscanf_r+0x1b4>
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	e7dd      	b.n	800b1b8 <__ssvfiscanf_r+0x1d4>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9342      	str	r3, [sp, #264]	; 0x108
 800b200:	2303      	movs	r3, #3
 800b202:	e7de      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b204:	2308      	movs	r3, #8
 800b206:	9342      	str	r3, [sp, #264]	; 0x108
 800b208:	2304      	movs	r3, #4
 800b20a:	e7da      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b20c:	4629      	mov	r1, r5
 800b20e:	4640      	mov	r0, r8
 800b210:	f000 fcc4 	bl	800bb9c <__sccl>
 800b214:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b216:	4605      	mov	r5, r0
 800b218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21c:	9341      	str	r3, [sp, #260]	; 0x104
 800b21e:	2301      	movs	r3, #1
 800b220:	e7cf      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b222:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b228:	9341      	str	r3, [sp, #260]	; 0x104
 800b22a:	2300      	movs	r3, #0
 800b22c:	e7c9      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b22e:	2302      	movs	r3, #2
 800b230:	e7c7      	b.n	800b1c2 <__ssvfiscanf_r+0x1de>
 800b232:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b234:	06c3      	lsls	r3, r0, #27
 800b236:	f53f aefb 	bmi.w	800b030 <__ssvfiscanf_r+0x4c>
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b23e:	1d19      	adds	r1, r3, #4
 800b240:	9100      	str	r1, [sp, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f010 0f01 	tst.w	r0, #1
 800b248:	bf14      	ite	ne
 800b24a:	801a      	strhne	r2, [r3, #0]
 800b24c:	601a      	streq	r2, [r3, #0]
 800b24e:	e6ef      	b.n	800b030 <__ssvfiscanf_r+0x4c>
 800b250:	4621      	mov	r1, r4
 800b252:	4630      	mov	r0, r6
 800b254:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b256:	4798      	blx	r3
 800b258:	2800      	cmp	r0, #0
 800b25a:	d0b6      	beq.n	800b1ca <__ssvfiscanf_r+0x1e6>
 800b25c:	e79c      	b.n	800b198 <__ssvfiscanf_r+0x1b4>
 800b25e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b260:	3201      	adds	r2, #1
 800b262:	9245      	str	r2, [sp, #276]	; 0x114
 800b264:	6862      	ldr	r2, [r4, #4]
 800b266:	3a01      	subs	r2, #1
 800b268:	2a00      	cmp	r2, #0
 800b26a:	6062      	str	r2, [r4, #4]
 800b26c:	dd02      	ble.n	800b274 <__ssvfiscanf_r+0x290>
 800b26e:	3301      	adds	r3, #1
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	e7ad      	b.n	800b1d0 <__ssvfiscanf_r+0x1ec>
 800b274:	4621      	mov	r1, r4
 800b276:	4630      	mov	r0, r6
 800b278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b27a:	4798      	blx	r3
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d0a7      	beq.n	800b1d0 <__ssvfiscanf_r+0x1ec>
 800b280:	e78a      	b.n	800b198 <__ssvfiscanf_r+0x1b4>
 800b282:	2b04      	cmp	r3, #4
 800b284:	dc0e      	bgt.n	800b2a4 <__ssvfiscanf_r+0x2c0>
 800b286:	466b      	mov	r3, sp
 800b288:	4622      	mov	r2, r4
 800b28a:	4630      	mov	r0, r6
 800b28c:	a941      	add	r1, sp, #260	; 0x104
 800b28e:	f000 fb6b 	bl	800b968 <_scanf_i>
 800b292:	e7ab      	b.n	800b1ec <__ssvfiscanf_r+0x208>
 800b294:	0800af31 	.word	0x0800af31
 800b298:	0800afab 	.word	0x0800afab
 800b29c:	0800c883 	.word	0x0800c883
 800b2a0:	0800c83a 	.word	0x0800c83a
 800b2a4:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <__ssvfiscanf_r+0x2f0>)
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f43f aec2 	beq.w	800b030 <__ssvfiscanf_r+0x4c>
 800b2ac:	466b      	mov	r3, sp
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	a941      	add	r1, sp, #260	; 0x104
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	e798      	b.n	800b1ec <__ssvfiscanf_r+0x208>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b2c0:	bf18      	it	ne
 800b2c2:	f04f 30ff 	movne.w	r0, #4294967295
 800b2c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b2d0:	e7f9      	b.n	800b2c6 <__ssvfiscanf_r+0x2e2>
 800b2d2:	bf00      	nop
 800b2d4:	00000000 	.word	0x00000000

0800b2d8 <__sfputc_r>:
 800b2d8:	6893      	ldr	r3, [r2, #8]
 800b2da:	b410      	push	{r4}
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	6093      	str	r3, [r2, #8]
 800b2e2:	da07      	bge.n	800b2f4 <__sfputc_r+0x1c>
 800b2e4:	6994      	ldr	r4, [r2, #24]
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	db01      	blt.n	800b2ee <__sfputc_r+0x16>
 800b2ea:	290a      	cmp	r1, #10
 800b2ec:	d102      	bne.n	800b2f4 <__sfputc_r+0x1c>
 800b2ee:	bc10      	pop	{r4}
 800b2f0:	f000 bdb6 	b.w	800be60 <__swbuf_r>
 800b2f4:	6813      	ldr	r3, [r2, #0]
 800b2f6:	1c58      	adds	r0, r3, #1
 800b2f8:	6010      	str	r0, [r2, #0]
 800b2fa:	7019      	strb	r1, [r3, #0]
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	bc10      	pop	{r4}
 800b300:	4770      	bx	lr

0800b302 <__sfputs_r>:
 800b302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	4614      	mov	r4, r2
 800b30a:	18d5      	adds	r5, r2, r3
 800b30c:	42ac      	cmp	r4, r5
 800b30e:	d101      	bne.n	800b314 <__sfputs_r+0x12>
 800b310:	2000      	movs	r0, #0
 800b312:	e007      	b.n	800b324 <__sfputs_r+0x22>
 800b314:	463a      	mov	r2, r7
 800b316:	4630      	mov	r0, r6
 800b318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31c:	f7ff ffdc 	bl	800b2d8 <__sfputc_r>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d1f3      	bne.n	800b30c <__sfputs_r+0xa>
 800b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b328 <_vfiprintf_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	460d      	mov	r5, r1
 800b32e:	4614      	mov	r4, r2
 800b330:	4698      	mov	r8, r3
 800b332:	4606      	mov	r6, r0
 800b334:	b09d      	sub	sp, #116	; 0x74
 800b336:	b118      	cbz	r0, 800b340 <_vfiprintf_r+0x18>
 800b338:	6983      	ldr	r3, [r0, #24]
 800b33a:	b90b      	cbnz	r3, 800b340 <_vfiprintf_r+0x18>
 800b33c:	f000 ff6e 	bl	800c21c <__sinit>
 800b340:	4b89      	ldr	r3, [pc, #548]	; (800b568 <_vfiprintf_r+0x240>)
 800b342:	429d      	cmp	r5, r3
 800b344:	d11b      	bne.n	800b37e <_vfiprintf_r+0x56>
 800b346:	6875      	ldr	r5, [r6, #4]
 800b348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b34a:	07d9      	lsls	r1, r3, #31
 800b34c:	d405      	bmi.n	800b35a <_vfiprintf_r+0x32>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	059a      	lsls	r2, r3, #22
 800b352:	d402      	bmi.n	800b35a <_vfiprintf_r+0x32>
 800b354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b356:	f000 ffff 	bl	800c358 <__retarget_lock_acquire_recursive>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	071b      	lsls	r3, r3, #28
 800b35e:	d501      	bpl.n	800b364 <_vfiprintf_r+0x3c>
 800b360:	692b      	ldr	r3, [r5, #16]
 800b362:	b9eb      	cbnz	r3, 800b3a0 <_vfiprintf_r+0x78>
 800b364:	4629      	mov	r1, r5
 800b366:	4630      	mov	r0, r6
 800b368:	f000 fdcc 	bl	800bf04 <__swsetup_r>
 800b36c:	b1c0      	cbz	r0, 800b3a0 <_vfiprintf_r+0x78>
 800b36e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b370:	07dc      	lsls	r4, r3, #31
 800b372:	d50e      	bpl.n	800b392 <_vfiprintf_r+0x6a>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b01d      	add	sp, #116	; 0x74
 800b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	4b7b      	ldr	r3, [pc, #492]	; (800b56c <_vfiprintf_r+0x244>)
 800b380:	429d      	cmp	r5, r3
 800b382:	d101      	bne.n	800b388 <_vfiprintf_r+0x60>
 800b384:	68b5      	ldr	r5, [r6, #8]
 800b386:	e7df      	b.n	800b348 <_vfiprintf_r+0x20>
 800b388:	4b79      	ldr	r3, [pc, #484]	; (800b570 <_vfiprintf_r+0x248>)
 800b38a:	429d      	cmp	r5, r3
 800b38c:	bf08      	it	eq
 800b38e:	68f5      	ldreq	r5, [r6, #12]
 800b390:	e7da      	b.n	800b348 <_vfiprintf_r+0x20>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	0598      	lsls	r0, r3, #22
 800b396:	d4ed      	bmi.n	800b374 <_vfiprintf_r+0x4c>
 800b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b39a:	f000 ffde 	bl	800c35a <__retarget_lock_release_recursive>
 800b39e:	e7e9      	b.n	800b374 <_vfiprintf_r+0x4c>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3aa:	2330      	movs	r3, #48	; 0x30
 800b3ac:	f04f 0901 	mov.w	r9, #1
 800b3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b574 <_vfiprintf_r+0x24c>
 800b3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3bc:	4623      	mov	r3, r4
 800b3be:	469a      	mov	sl, r3
 800b3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c4:	b10a      	cbz	r2, 800b3ca <_vfiprintf_r+0xa2>
 800b3c6:	2a25      	cmp	r2, #37	; 0x25
 800b3c8:	d1f9      	bne.n	800b3be <_vfiprintf_r+0x96>
 800b3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ce:	d00b      	beq.n	800b3e8 <_vfiprintf_r+0xc0>
 800b3d0:	465b      	mov	r3, fp
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff ff93 	bl	800b302 <__sfputs_r>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f000 80aa 	beq.w	800b536 <_vfiprintf_r+0x20e>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e4:	445a      	add	r2, fp
 800b3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80a2 	beq.w	800b536 <_vfiprintf_r+0x20e>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fc:	f10a 0a01 	add.w	sl, sl, #1
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b408:	931a      	str	r3, [sp, #104]	; 0x68
 800b40a:	4654      	mov	r4, sl
 800b40c:	2205      	movs	r2, #5
 800b40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b412:	4858      	ldr	r0, [pc, #352]	; (800b574 <_vfiprintf_r+0x24c>)
 800b414:	f001 f808 	bl	800c428 <memchr>
 800b418:	9a04      	ldr	r2, [sp, #16]
 800b41a:	b9d8      	cbnz	r0, 800b454 <_vfiprintf_r+0x12c>
 800b41c:	06d1      	lsls	r1, r2, #27
 800b41e:	bf44      	itt	mi
 800b420:	2320      	movmi	r3, #32
 800b422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b426:	0713      	lsls	r3, r2, #28
 800b428:	bf44      	itt	mi
 800b42a:	232b      	movmi	r3, #43	; 0x2b
 800b42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b430:	f89a 3000 	ldrb.w	r3, [sl]
 800b434:	2b2a      	cmp	r3, #42	; 0x2a
 800b436:	d015      	beq.n	800b464 <_vfiprintf_r+0x13c>
 800b438:	4654      	mov	r4, sl
 800b43a:	2000      	movs	r0, #0
 800b43c:	f04f 0c0a 	mov.w	ip, #10
 800b440:	9a07      	ldr	r2, [sp, #28]
 800b442:	4621      	mov	r1, r4
 800b444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b448:	3b30      	subs	r3, #48	; 0x30
 800b44a:	2b09      	cmp	r3, #9
 800b44c:	d94e      	bls.n	800b4ec <_vfiprintf_r+0x1c4>
 800b44e:	b1b0      	cbz	r0, 800b47e <_vfiprintf_r+0x156>
 800b450:	9207      	str	r2, [sp, #28]
 800b452:	e014      	b.n	800b47e <_vfiprintf_r+0x156>
 800b454:	eba0 0308 	sub.w	r3, r0, r8
 800b458:	fa09 f303 	lsl.w	r3, r9, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	46a2      	mov	sl, r4
 800b460:	9304      	str	r3, [sp, #16]
 800b462:	e7d2      	b.n	800b40a <_vfiprintf_r+0xe2>
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	1d19      	adds	r1, r3, #4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	9103      	str	r1, [sp, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfbb      	ittet	lt
 800b470:	425b      	neglt	r3, r3
 800b472:	f042 0202 	orrlt.w	r2, r2, #2
 800b476:	9307      	strge	r3, [sp, #28]
 800b478:	9307      	strlt	r3, [sp, #28]
 800b47a:	bfb8      	it	lt
 800b47c:	9204      	strlt	r2, [sp, #16]
 800b47e:	7823      	ldrb	r3, [r4, #0]
 800b480:	2b2e      	cmp	r3, #46	; 0x2e
 800b482:	d10c      	bne.n	800b49e <_vfiprintf_r+0x176>
 800b484:	7863      	ldrb	r3, [r4, #1]
 800b486:	2b2a      	cmp	r3, #42	; 0x2a
 800b488:	d135      	bne.n	800b4f6 <_vfiprintf_r+0x1ce>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	3402      	adds	r4, #2
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	9203      	str	r2, [sp, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	bfb8      	it	lt
 800b498:	f04f 33ff 	movlt.w	r3, #4294967295
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b578 <_vfiprintf_r+0x250>
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	7821      	ldrb	r1, [r4, #0]
 800b4a8:	f000 ffbe 	bl	800c428 <memchr>
 800b4ac:	b140      	cbz	r0, 800b4c0 <_vfiprintf_r+0x198>
 800b4ae:	2340      	movs	r3, #64	; 0x40
 800b4b0:	eba0 000a 	sub.w	r0, r0, sl
 800b4b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	3401      	adds	r4, #1
 800b4bc:	4303      	orrs	r3, r0
 800b4be:	9304      	str	r3, [sp, #16]
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	2206      	movs	r2, #6
 800b4c6:	482d      	ldr	r0, [pc, #180]	; (800b57c <_vfiprintf_r+0x254>)
 800b4c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4cc:	f000 ffac 	bl	800c428 <memchr>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d03f      	beq.n	800b554 <_vfiprintf_r+0x22c>
 800b4d4:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <_vfiprintf_r+0x258>)
 800b4d6:	bb1b      	cbnz	r3, 800b520 <_vfiprintf_r+0x1f8>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	3307      	adds	r3, #7
 800b4dc:	f023 0307 	bic.w	r3, r3, #7
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	9303      	str	r3, [sp, #12]
 800b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e6:	443b      	add	r3, r7
 800b4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ea:	e767      	b.n	800b3bc <_vfiprintf_r+0x94>
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f4:	e7a5      	b.n	800b442 <_vfiprintf_r+0x11a>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f04f 0c0a 	mov.w	ip, #10
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	3401      	adds	r4, #1
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	4620      	mov	r0, r4
 800b504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b508:	3a30      	subs	r2, #48	; 0x30
 800b50a:	2a09      	cmp	r2, #9
 800b50c:	d903      	bls.n	800b516 <_vfiprintf_r+0x1ee>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0c5      	beq.n	800b49e <_vfiprintf_r+0x176>
 800b512:	9105      	str	r1, [sp, #20]
 800b514:	e7c3      	b.n	800b49e <_vfiprintf_r+0x176>
 800b516:	4604      	mov	r4, r0
 800b518:	2301      	movs	r3, #1
 800b51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51e:	e7f0      	b.n	800b502 <_vfiprintf_r+0x1da>
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	462a      	mov	r2, r5
 800b526:	4630      	mov	r0, r6
 800b528:	4b16      	ldr	r3, [pc, #88]	; (800b584 <_vfiprintf_r+0x25c>)
 800b52a:	a904      	add	r1, sp, #16
 800b52c:	f3af 8000 	nop.w
 800b530:	4607      	mov	r7, r0
 800b532:	1c78      	adds	r0, r7, #1
 800b534:	d1d6      	bne.n	800b4e4 <_vfiprintf_r+0x1bc>
 800b536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b538:	07d9      	lsls	r1, r3, #31
 800b53a:	d405      	bmi.n	800b548 <_vfiprintf_r+0x220>
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	059a      	lsls	r2, r3, #22
 800b540:	d402      	bmi.n	800b548 <_vfiprintf_r+0x220>
 800b542:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b544:	f000 ff09 	bl	800c35a <__retarget_lock_release_recursive>
 800b548:	89ab      	ldrh	r3, [r5, #12]
 800b54a:	065b      	lsls	r3, r3, #25
 800b54c:	f53f af12 	bmi.w	800b374 <_vfiprintf_r+0x4c>
 800b550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b552:	e711      	b.n	800b378 <_vfiprintf_r+0x50>
 800b554:	ab03      	add	r3, sp, #12
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	462a      	mov	r2, r5
 800b55a:	4630      	mov	r0, r6
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <_vfiprintf_r+0x25c>)
 800b55e:	a904      	add	r1, sp, #16
 800b560:	f000 f882 	bl	800b668 <_printf_i>
 800b564:	e7e4      	b.n	800b530 <_vfiprintf_r+0x208>
 800b566:	bf00      	nop
 800b568:	0800c9a4 	.word	0x0800c9a4
 800b56c:	0800c9c4 	.word	0x0800c9c4
 800b570:	0800c984 	.word	0x0800c984
 800b574:	0800c834 	.word	0x0800c834
 800b578:	0800c83a 	.word	0x0800c83a
 800b57c:	0800c83e 	.word	0x0800c83e
 800b580:	00000000 	.word	0x00000000
 800b584:	0800b303 	.word	0x0800b303

0800b588 <_printf_common>:
 800b588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b58c:	4616      	mov	r6, r2
 800b58e:	4699      	mov	r9, r3
 800b590:	688a      	ldr	r2, [r1, #8]
 800b592:	690b      	ldr	r3, [r1, #16]
 800b594:	4607      	mov	r7, r0
 800b596:	4293      	cmp	r3, r2
 800b598:	bfb8      	it	lt
 800b59a:	4613      	movlt	r3, r2
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5a8:	b10a      	cbz	r2, 800b5ae <_printf_common+0x26>
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	6033      	str	r3, [r6, #0]
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	0699      	lsls	r1, r3, #26
 800b5b2:	bf42      	ittt	mi
 800b5b4:	6833      	ldrmi	r3, [r6, #0]
 800b5b6:	3302      	addmi	r3, #2
 800b5b8:	6033      	strmi	r3, [r6, #0]
 800b5ba:	6825      	ldr	r5, [r4, #0]
 800b5bc:	f015 0506 	ands.w	r5, r5, #6
 800b5c0:	d106      	bne.n	800b5d0 <_printf_common+0x48>
 800b5c2:	f104 0a19 	add.w	sl, r4, #25
 800b5c6:	68e3      	ldr	r3, [r4, #12]
 800b5c8:	6832      	ldr	r2, [r6, #0]
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	42ab      	cmp	r3, r5
 800b5ce:	dc28      	bgt.n	800b622 <_printf_common+0x9a>
 800b5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5d4:	1e13      	subs	r3, r2, #0
 800b5d6:	6822      	ldr	r2, [r4, #0]
 800b5d8:	bf18      	it	ne
 800b5da:	2301      	movne	r3, #1
 800b5dc:	0692      	lsls	r2, r2, #26
 800b5de:	d42d      	bmi.n	800b63c <_printf_common+0xb4>
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5e8:	47c0      	blx	r8
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d020      	beq.n	800b630 <_printf_common+0xa8>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	68e5      	ldr	r5, [r4, #12]
 800b5f2:	f003 0306 	and.w	r3, r3, #6
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	bf18      	it	ne
 800b5fa:	2500      	movne	r5, #0
 800b5fc:	6832      	ldr	r2, [r6, #0]
 800b5fe:	f04f 0600 	mov.w	r6, #0
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	bf08      	it	eq
 800b606:	1aad      	subeq	r5, r5, r2
 800b608:	6922      	ldr	r2, [r4, #16]
 800b60a:	bf08      	it	eq
 800b60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b610:	4293      	cmp	r3, r2
 800b612:	bfc4      	itt	gt
 800b614:	1a9b      	subgt	r3, r3, r2
 800b616:	18ed      	addgt	r5, r5, r3
 800b618:	341a      	adds	r4, #26
 800b61a:	42b5      	cmp	r5, r6
 800b61c:	d11a      	bne.n	800b654 <_printf_common+0xcc>
 800b61e:	2000      	movs	r0, #0
 800b620:	e008      	b.n	800b634 <_printf_common+0xac>
 800b622:	2301      	movs	r3, #1
 800b624:	4652      	mov	r2, sl
 800b626:	4649      	mov	r1, r9
 800b628:	4638      	mov	r0, r7
 800b62a:	47c0      	blx	r8
 800b62c:	3001      	adds	r0, #1
 800b62e:	d103      	bne.n	800b638 <_printf_common+0xb0>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b638:	3501      	adds	r5, #1
 800b63a:	e7c4      	b.n	800b5c6 <_printf_common+0x3e>
 800b63c:	2030      	movs	r0, #48	; 0x30
 800b63e:	18e1      	adds	r1, r4, r3
 800b640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b64a:	4422      	add	r2, r4
 800b64c:	3302      	adds	r3, #2
 800b64e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b652:	e7c5      	b.n	800b5e0 <_printf_common+0x58>
 800b654:	2301      	movs	r3, #1
 800b656:	4622      	mov	r2, r4
 800b658:	4649      	mov	r1, r9
 800b65a:	4638      	mov	r0, r7
 800b65c:	47c0      	blx	r8
 800b65e:	3001      	adds	r0, #1
 800b660:	d0e6      	beq.n	800b630 <_printf_common+0xa8>
 800b662:	3601      	adds	r6, #1
 800b664:	e7d9      	b.n	800b61a <_printf_common+0x92>
	...

0800b668 <_printf_i>:
 800b668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	7e0f      	ldrb	r7, [r1, #24]
 800b66e:	4691      	mov	r9, r2
 800b670:	2f78      	cmp	r7, #120	; 0x78
 800b672:	4680      	mov	r8, r0
 800b674:	460c      	mov	r4, r1
 800b676:	469a      	mov	sl, r3
 800b678:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b67a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b67e:	d807      	bhi.n	800b690 <_printf_i+0x28>
 800b680:	2f62      	cmp	r7, #98	; 0x62
 800b682:	d80a      	bhi.n	800b69a <_printf_i+0x32>
 800b684:	2f00      	cmp	r7, #0
 800b686:	f000 80d9 	beq.w	800b83c <_printf_i+0x1d4>
 800b68a:	2f58      	cmp	r7, #88	; 0x58
 800b68c:	f000 80a4 	beq.w	800b7d8 <_printf_i+0x170>
 800b690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b698:	e03a      	b.n	800b710 <_printf_i+0xa8>
 800b69a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b69e:	2b15      	cmp	r3, #21
 800b6a0:	d8f6      	bhi.n	800b690 <_printf_i+0x28>
 800b6a2:	a101      	add	r1, pc, #4	; (adr r1, 800b6a8 <_printf_i+0x40>)
 800b6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6a8:	0800b701 	.word	0x0800b701
 800b6ac:	0800b715 	.word	0x0800b715
 800b6b0:	0800b691 	.word	0x0800b691
 800b6b4:	0800b691 	.word	0x0800b691
 800b6b8:	0800b691 	.word	0x0800b691
 800b6bc:	0800b691 	.word	0x0800b691
 800b6c0:	0800b715 	.word	0x0800b715
 800b6c4:	0800b691 	.word	0x0800b691
 800b6c8:	0800b691 	.word	0x0800b691
 800b6cc:	0800b691 	.word	0x0800b691
 800b6d0:	0800b691 	.word	0x0800b691
 800b6d4:	0800b823 	.word	0x0800b823
 800b6d8:	0800b745 	.word	0x0800b745
 800b6dc:	0800b805 	.word	0x0800b805
 800b6e0:	0800b691 	.word	0x0800b691
 800b6e4:	0800b691 	.word	0x0800b691
 800b6e8:	0800b845 	.word	0x0800b845
 800b6ec:	0800b691 	.word	0x0800b691
 800b6f0:	0800b745 	.word	0x0800b745
 800b6f4:	0800b691 	.word	0x0800b691
 800b6f8:	0800b691 	.word	0x0800b691
 800b6fc:	0800b80d 	.word	0x0800b80d
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	1d1a      	adds	r2, r3, #4
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	602a      	str	r2, [r5, #0]
 800b708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b710:	2301      	movs	r3, #1
 800b712:	e0a4      	b.n	800b85e <_printf_i+0x1f6>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	6829      	ldr	r1, [r5, #0]
 800b718:	0606      	lsls	r6, r0, #24
 800b71a:	f101 0304 	add.w	r3, r1, #4
 800b71e:	d50a      	bpl.n	800b736 <_printf_i+0xce>
 800b720:	680e      	ldr	r6, [r1, #0]
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	2e00      	cmp	r6, #0
 800b726:	da03      	bge.n	800b730 <_printf_i+0xc8>
 800b728:	232d      	movs	r3, #45	; 0x2d
 800b72a:	4276      	negs	r6, r6
 800b72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b730:	230a      	movs	r3, #10
 800b732:	485e      	ldr	r0, [pc, #376]	; (800b8ac <_printf_i+0x244>)
 800b734:	e019      	b.n	800b76a <_printf_i+0x102>
 800b736:	680e      	ldr	r6, [r1, #0]
 800b738:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b73c:	602b      	str	r3, [r5, #0]
 800b73e:	bf18      	it	ne
 800b740:	b236      	sxthne	r6, r6
 800b742:	e7ef      	b.n	800b724 <_printf_i+0xbc>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	6820      	ldr	r0, [r4, #0]
 800b748:	1d19      	adds	r1, r3, #4
 800b74a:	6029      	str	r1, [r5, #0]
 800b74c:	0601      	lsls	r1, r0, #24
 800b74e:	d501      	bpl.n	800b754 <_printf_i+0xec>
 800b750:	681e      	ldr	r6, [r3, #0]
 800b752:	e002      	b.n	800b75a <_printf_i+0xf2>
 800b754:	0646      	lsls	r6, r0, #25
 800b756:	d5fb      	bpl.n	800b750 <_printf_i+0xe8>
 800b758:	881e      	ldrh	r6, [r3, #0]
 800b75a:	2f6f      	cmp	r7, #111	; 0x6f
 800b75c:	bf0c      	ite	eq
 800b75e:	2308      	moveq	r3, #8
 800b760:	230a      	movne	r3, #10
 800b762:	4852      	ldr	r0, [pc, #328]	; (800b8ac <_printf_i+0x244>)
 800b764:	2100      	movs	r1, #0
 800b766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b76a:	6865      	ldr	r5, [r4, #4]
 800b76c:	2d00      	cmp	r5, #0
 800b76e:	bfa8      	it	ge
 800b770:	6821      	ldrge	r1, [r4, #0]
 800b772:	60a5      	str	r5, [r4, #8]
 800b774:	bfa4      	itt	ge
 800b776:	f021 0104 	bicge.w	r1, r1, #4
 800b77a:	6021      	strge	r1, [r4, #0]
 800b77c:	b90e      	cbnz	r6, 800b782 <_printf_i+0x11a>
 800b77e:	2d00      	cmp	r5, #0
 800b780:	d04d      	beq.n	800b81e <_printf_i+0x1b6>
 800b782:	4615      	mov	r5, r2
 800b784:	fbb6 f1f3 	udiv	r1, r6, r3
 800b788:	fb03 6711 	mls	r7, r3, r1, r6
 800b78c:	5dc7      	ldrb	r7, [r0, r7]
 800b78e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b792:	4637      	mov	r7, r6
 800b794:	42bb      	cmp	r3, r7
 800b796:	460e      	mov	r6, r1
 800b798:	d9f4      	bls.n	800b784 <_printf_i+0x11c>
 800b79a:	2b08      	cmp	r3, #8
 800b79c:	d10b      	bne.n	800b7b6 <_printf_i+0x14e>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	07de      	lsls	r6, r3, #31
 800b7a2:	d508      	bpl.n	800b7b6 <_printf_i+0x14e>
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	6861      	ldr	r1, [r4, #4]
 800b7a8:	4299      	cmp	r1, r3
 800b7aa:	bfde      	ittt	le
 800b7ac:	2330      	movle	r3, #48	; 0x30
 800b7ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7b6:	1b52      	subs	r2, r2, r5
 800b7b8:	6122      	str	r2, [r4, #16]
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f8cd a000 	str.w	sl, [sp]
 800b7c4:	aa03      	add	r2, sp, #12
 800b7c6:	f7ff fedf 	bl	800b588 <_printf_common>
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d14c      	bne.n	800b868 <_printf_i+0x200>
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d2:	b004      	add	sp, #16
 800b7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d8:	4834      	ldr	r0, [pc, #208]	; (800b8ac <_printf_i+0x244>)
 800b7da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7de:	6829      	ldr	r1, [r5, #0]
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7e6:	6029      	str	r1, [r5, #0]
 800b7e8:	061d      	lsls	r5, r3, #24
 800b7ea:	d514      	bpl.n	800b816 <_printf_i+0x1ae>
 800b7ec:	07df      	lsls	r7, r3, #31
 800b7ee:	bf44      	itt	mi
 800b7f0:	f043 0320 	orrmi.w	r3, r3, #32
 800b7f4:	6023      	strmi	r3, [r4, #0]
 800b7f6:	b91e      	cbnz	r6, 800b800 <_printf_i+0x198>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	f023 0320 	bic.w	r3, r3, #32
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	2310      	movs	r3, #16
 800b802:	e7af      	b.n	800b764 <_printf_i+0xfc>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	f043 0320 	orr.w	r3, r3, #32
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	2378      	movs	r3, #120	; 0x78
 800b80e:	4828      	ldr	r0, [pc, #160]	; (800b8b0 <_printf_i+0x248>)
 800b810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b814:	e7e3      	b.n	800b7de <_printf_i+0x176>
 800b816:	0659      	lsls	r1, r3, #25
 800b818:	bf48      	it	mi
 800b81a:	b2b6      	uxthmi	r6, r6
 800b81c:	e7e6      	b.n	800b7ec <_printf_i+0x184>
 800b81e:	4615      	mov	r5, r2
 800b820:	e7bb      	b.n	800b79a <_printf_i+0x132>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	6826      	ldr	r6, [r4, #0]
 800b826:	1d18      	adds	r0, r3, #4
 800b828:	6961      	ldr	r1, [r4, #20]
 800b82a:	6028      	str	r0, [r5, #0]
 800b82c:	0635      	lsls	r5, r6, #24
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	d501      	bpl.n	800b836 <_printf_i+0x1ce>
 800b832:	6019      	str	r1, [r3, #0]
 800b834:	e002      	b.n	800b83c <_printf_i+0x1d4>
 800b836:	0670      	lsls	r0, r6, #25
 800b838:	d5fb      	bpl.n	800b832 <_printf_i+0x1ca>
 800b83a:	8019      	strh	r1, [r3, #0]
 800b83c:	2300      	movs	r3, #0
 800b83e:	4615      	mov	r5, r2
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	e7ba      	b.n	800b7ba <_printf_i+0x152>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	2100      	movs	r1, #0
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	602a      	str	r2, [r5, #0]
 800b84c:	681d      	ldr	r5, [r3, #0]
 800b84e:	6862      	ldr	r2, [r4, #4]
 800b850:	4628      	mov	r0, r5
 800b852:	f000 fde9 	bl	800c428 <memchr>
 800b856:	b108      	cbz	r0, 800b85c <_printf_i+0x1f4>
 800b858:	1b40      	subs	r0, r0, r5
 800b85a:	6060      	str	r0, [r4, #4]
 800b85c:	6863      	ldr	r3, [r4, #4]
 800b85e:	6123      	str	r3, [r4, #16]
 800b860:	2300      	movs	r3, #0
 800b862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b866:	e7a8      	b.n	800b7ba <_printf_i+0x152>
 800b868:	462a      	mov	r2, r5
 800b86a:	4649      	mov	r1, r9
 800b86c:	4640      	mov	r0, r8
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	47d0      	blx	sl
 800b872:	3001      	adds	r0, #1
 800b874:	d0ab      	beq.n	800b7ce <_printf_i+0x166>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	079b      	lsls	r3, r3, #30
 800b87a:	d413      	bmi.n	800b8a4 <_printf_i+0x23c>
 800b87c:	68e0      	ldr	r0, [r4, #12]
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	4298      	cmp	r0, r3
 800b882:	bfb8      	it	lt
 800b884:	4618      	movlt	r0, r3
 800b886:	e7a4      	b.n	800b7d2 <_printf_i+0x16a>
 800b888:	2301      	movs	r3, #1
 800b88a:	4632      	mov	r2, r6
 800b88c:	4649      	mov	r1, r9
 800b88e:	4640      	mov	r0, r8
 800b890:	47d0      	blx	sl
 800b892:	3001      	adds	r0, #1
 800b894:	d09b      	beq.n	800b7ce <_printf_i+0x166>
 800b896:	3501      	adds	r5, #1
 800b898:	68e3      	ldr	r3, [r4, #12]
 800b89a:	9903      	ldr	r1, [sp, #12]
 800b89c:	1a5b      	subs	r3, r3, r1
 800b89e:	42ab      	cmp	r3, r5
 800b8a0:	dcf2      	bgt.n	800b888 <_printf_i+0x220>
 800b8a2:	e7eb      	b.n	800b87c <_printf_i+0x214>
 800b8a4:	2500      	movs	r5, #0
 800b8a6:	f104 0619 	add.w	r6, r4, #25
 800b8aa:	e7f5      	b.n	800b898 <_printf_i+0x230>
 800b8ac:	0800c845 	.word	0x0800c845
 800b8b0:	0800c856 	.word	0x0800c856

0800b8b4 <_scanf_chars>:
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	4615      	mov	r5, r2
 800b8ba:	688a      	ldr	r2, [r1, #8]
 800b8bc:	4680      	mov	r8, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	b932      	cbnz	r2, 800b8d0 <_scanf_chars+0x1c>
 800b8c2:	698a      	ldr	r2, [r1, #24]
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	bf0c      	ite	eq
 800b8c8:	2201      	moveq	r2, #1
 800b8ca:	f04f 32ff 	movne.w	r2, #4294967295
 800b8ce:	608a      	str	r2, [r1, #8]
 800b8d0:	2700      	movs	r7, #0
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b964 <_scanf_chars+0xb0>
 800b8d8:	06d1      	lsls	r1, r2, #27
 800b8da:	bf5f      	itttt	pl
 800b8dc:	681a      	ldrpl	r2, [r3, #0]
 800b8de:	1d11      	addpl	r1, r2, #4
 800b8e0:	6019      	strpl	r1, [r3, #0]
 800b8e2:	6816      	ldrpl	r6, [r2, #0]
 800b8e4:	69a0      	ldr	r0, [r4, #24]
 800b8e6:	b188      	cbz	r0, 800b90c <_scanf_chars+0x58>
 800b8e8:	2801      	cmp	r0, #1
 800b8ea:	d107      	bne.n	800b8fc <_scanf_chars+0x48>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	6963      	ldr	r3, [r4, #20]
 800b8f2:	5c9b      	ldrb	r3, [r3, r2]
 800b8f4:	b953      	cbnz	r3, 800b90c <_scanf_chars+0x58>
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	d031      	beq.n	800b95e <_scanf_chars+0xaa>
 800b8fa:	e022      	b.n	800b942 <_scanf_chars+0x8e>
 800b8fc:	2802      	cmp	r0, #2
 800b8fe:	d120      	bne.n	800b942 <_scanf_chars+0x8e>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b908:	071b      	lsls	r3, r3, #28
 800b90a:	d41a      	bmi.n	800b942 <_scanf_chars+0x8e>
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	3701      	adds	r7, #1
 800b910:	06da      	lsls	r2, r3, #27
 800b912:	bf5e      	ittt	pl
 800b914:	682b      	ldrpl	r3, [r5, #0]
 800b916:	781b      	ldrbpl	r3, [r3, #0]
 800b918:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b91c:	682a      	ldr	r2, [r5, #0]
 800b91e:	686b      	ldr	r3, [r5, #4]
 800b920:	3201      	adds	r2, #1
 800b922:	602a      	str	r2, [r5, #0]
 800b924:	68a2      	ldr	r2, [r4, #8]
 800b926:	3b01      	subs	r3, #1
 800b928:	3a01      	subs	r2, #1
 800b92a:	606b      	str	r3, [r5, #4]
 800b92c:	60a2      	str	r2, [r4, #8]
 800b92e:	b142      	cbz	r2, 800b942 <_scanf_chars+0x8e>
 800b930:	2b00      	cmp	r3, #0
 800b932:	dcd7      	bgt.n	800b8e4 <_scanf_chars+0x30>
 800b934:	4629      	mov	r1, r5
 800b936:	4640      	mov	r0, r8
 800b938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b93c:	4798      	blx	r3
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0d0      	beq.n	800b8e4 <_scanf_chars+0x30>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	f013 0310 	ands.w	r3, r3, #16
 800b948:	d105      	bne.n	800b956 <_scanf_chars+0xa2>
 800b94a:	68e2      	ldr	r2, [r4, #12]
 800b94c:	3201      	adds	r2, #1
 800b94e:	60e2      	str	r2, [r4, #12]
 800b950:	69a2      	ldr	r2, [r4, #24]
 800b952:	b102      	cbz	r2, 800b956 <_scanf_chars+0xa2>
 800b954:	7033      	strb	r3, [r6, #0]
 800b956:	2000      	movs	r0, #0
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	443b      	add	r3, r7
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b962:	bf00      	nop
 800b964:	0800c883 	.word	0x0800c883

0800b968 <_scanf_i>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	460c      	mov	r4, r1
 800b96e:	4698      	mov	r8, r3
 800b970:	4b75      	ldr	r3, [pc, #468]	; (800bb48 <_scanf_i+0x1e0>)
 800b972:	b087      	sub	sp, #28
 800b974:	4682      	mov	sl, r0
 800b976:	4616      	mov	r6, r2
 800b978:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b97c:	ab03      	add	r3, sp, #12
 800b97e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b982:	4b72      	ldr	r3, [pc, #456]	; (800bb4c <_scanf_i+0x1e4>)
 800b984:	69a1      	ldr	r1, [r4, #24]
 800b986:	4a72      	ldr	r2, [pc, #456]	; (800bb50 <_scanf_i+0x1e8>)
 800b988:	4627      	mov	r7, r4
 800b98a:	2903      	cmp	r1, #3
 800b98c:	bf18      	it	ne
 800b98e:	461a      	movne	r2, r3
 800b990:	68a3      	ldr	r3, [r4, #8]
 800b992:	9201      	str	r2, [sp, #4]
 800b994:	1e5a      	subs	r2, r3, #1
 800b996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b99a:	bf81      	itttt	hi
 800b99c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b9a0:	eb03 0905 	addhi.w	r9, r3, r5
 800b9a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9a8:	60a3      	strhi	r3, [r4, #8]
 800b9aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b9ae:	bf98      	it	ls
 800b9b0:	f04f 0900 	movls.w	r9, #0
 800b9b4:	463d      	mov	r5, r7
 800b9b6:	f04f 0b00 	mov.w	fp, #0
 800b9ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	6831      	ldr	r1, [r6, #0]
 800b9c2:	ab03      	add	r3, sp, #12
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	7809      	ldrb	r1, [r1, #0]
 800b9c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b9cc:	f000 fd2c 	bl	800c428 <memchr>
 800b9d0:	b328      	cbz	r0, 800ba1e <_scanf_i+0xb6>
 800b9d2:	f1bb 0f01 	cmp.w	fp, #1
 800b9d6:	d159      	bne.n	800ba8c <_scanf_i+0x124>
 800b9d8:	6862      	ldr	r2, [r4, #4]
 800b9da:	b92a      	cbnz	r2, 800b9e8 <_scanf_i+0x80>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	6822      	ldr	r2, [r4, #0]
 800b9e0:	6063      	str	r3, [r4, #4]
 800b9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	6822      	ldr	r2, [r4, #0]
 800b9ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	68a2      	ldr	r2, [r4, #8]
 800b9f2:	1e51      	subs	r1, r2, #1
 800b9f4:	60a1      	str	r1, [r4, #8]
 800b9f6:	b192      	cbz	r2, 800ba1e <_scanf_i+0xb6>
 800b9f8:	6832      	ldr	r2, [r6, #0]
 800b9fa:	1c51      	adds	r1, r2, #1
 800b9fc:	6031      	str	r1, [r6, #0]
 800b9fe:	7812      	ldrb	r2, [r2, #0]
 800ba00:	f805 2b01 	strb.w	r2, [r5], #1
 800ba04:	6872      	ldr	r2, [r6, #4]
 800ba06:	3a01      	subs	r2, #1
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	6072      	str	r2, [r6, #4]
 800ba0c:	dc07      	bgt.n	800ba1e <_scanf_i+0xb6>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4650      	mov	r0, sl
 800ba12:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba16:	4790      	blx	r2
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	f040 8085 	bne.w	800bb28 <_scanf_i+0x1c0>
 800ba1e:	f10b 0b01 	add.w	fp, fp, #1
 800ba22:	f1bb 0f03 	cmp.w	fp, #3
 800ba26:	d1cb      	bne.n	800b9c0 <_scanf_i+0x58>
 800ba28:	6863      	ldr	r3, [r4, #4]
 800ba2a:	b90b      	cbnz	r3, 800ba30 <_scanf_i+0xc8>
 800ba2c:	230a      	movs	r3, #10
 800ba2e:	6063      	str	r3, [r4, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	4948      	ldr	r1, [pc, #288]	; (800bb54 <_scanf_i+0x1ec>)
 800ba34:	6960      	ldr	r0, [r4, #20]
 800ba36:	1ac9      	subs	r1, r1, r3
 800ba38:	f000 f8b0 	bl	800bb9c <__sccl>
 800ba3c:	f04f 0b00 	mov.w	fp, #0
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d03d      	beq.n	800bac4 <_scanf_i+0x15c>
 800ba48:	6831      	ldr	r1, [r6, #0]
 800ba4a:	6960      	ldr	r0, [r4, #20]
 800ba4c:	f891 c000 	ldrb.w	ip, [r1]
 800ba50:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d035      	beq.n	800bac4 <_scanf_i+0x15c>
 800ba58:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba5c:	d124      	bne.n	800baa8 <_scanf_i+0x140>
 800ba5e:	0510      	lsls	r0, r2, #20
 800ba60:	d522      	bpl.n	800baa8 <_scanf_i+0x140>
 800ba62:	f10b 0b01 	add.w	fp, fp, #1
 800ba66:	f1b9 0f00 	cmp.w	r9, #0
 800ba6a:	d003      	beq.n	800ba74 <_scanf_i+0x10c>
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba72:	60a3      	str	r3, [r4, #8]
 800ba74:	6873      	ldr	r3, [r6, #4]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	6073      	str	r3, [r6, #4]
 800ba7c:	dd1b      	ble.n	800bab6 <_scanf_i+0x14e>
 800ba7e:	6833      	ldr	r3, [r6, #0]
 800ba80:	3301      	adds	r3, #1
 800ba82:	6033      	str	r3, [r6, #0]
 800ba84:	68a3      	ldr	r3, [r4, #8]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	60a3      	str	r3, [r4, #8]
 800ba8a:	e7d9      	b.n	800ba40 <_scanf_i+0xd8>
 800ba8c:	f1bb 0f02 	cmp.w	fp, #2
 800ba90:	d1ae      	bne.n	800b9f0 <_scanf_i+0x88>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba9c:	d1bf      	bne.n	800ba1e <_scanf_i+0xb6>
 800ba9e:	2310      	movs	r3, #16
 800baa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	e7a2      	b.n	800b9ee <_scanf_i+0x86>
 800baa8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800baac:	6022      	str	r2, [r4, #0]
 800baae:	780b      	ldrb	r3, [r1, #0]
 800bab0:	f805 3b01 	strb.w	r3, [r5], #1
 800bab4:	e7de      	b.n	800ba74 <_scanf_i+0x10c>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4650      	mov	r0, sl
 800baba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800babe:	4798      	blx	r3
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d0df      	beq.n	800ba84 <_scanf_i+0x11c>
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	05db      	lsls	r3, r3, #23
 800bac8:	d50d      	bpl.n	800bae6 <_scanf_i+0x17e>
 800baca:	42bd      	cmp	r5, r7
 800bacc:	d909      	bls.n	800bae2 <_scanf_i+0x17a>
 800bace:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bad2:	4632      	mov	r2, r6
 800bad4:	4650      	mov	r0, sl
 800bad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bada:	f105 39ff 	add.w	r9, r5, #4294967295
 800bade:	4798      	blx	r3
 800bae0:	464d      	mov	r5, r9
 800bae2:	42bd      	cmp	r5, r7
 800bae4:	d02d      	beq.n	800bb42 <_scanf_i+0x1da>
 800bae6:	6822      	ldr	r2, [r4, #0]
 800bae8:	f012 0210 	ands.w	r2, r2, #16
 800baec:	d113      	bne.n	800bb16 <_scanf_i+0x1ae>
 800baee:	702a      	strb	r2, [r5, #0]
 800baf0:	4639      	mov	r1, r7
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	4650      	mov	r0, sl
 800baf6:	9e01      	ldr	r6, [sp, #4]
 800baf8:	47b0      	blx	r6
 800bafa:	6821      	ldr	r1, [r4, #0]
 800bafc:	f8d8 3000 	ldr.w	r3, [r8]
 800bb00:	f011 0f20 	tst.w	r1, #32
 800bb04:	d013      	beq.n	800bb2e <_scanf_i+0x1c6>
 800bb06:	1d1a      	adds	r2, r3, #4
 800bb08:	f8c8 2000 	str.w	r2, [r8]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6018      	str	r0, [r3, #0]
 800bb10:	68e3      	ldr	r3, [r4, #12]
 800bb12:	3301      	adds	r3, #1
 800bb14:	60e3      	str	r3, [r4, #12]
 800bb16:	2000      	movs	r0, #0
 800bb18:	1bed      	subs	r5, r5, r7
 800bb1a:	44ab      	add	fp, r5
 800bb1c:	6925      	ldr	r5, [r4, #16]
 800bb1e:	445d      	add	r5, fp
 800bb20:	6125      	str	r5, [r4, #16]
 800bb22:	b007      	add	sp, #28
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	f04f 0b00 	mov.w	fp, #0
 800bb2c:	e7ca      	b.n	800bac4 <_scanf_i+0x15c>
 800bb2e:	1d1a      	adds	r2, r3, #4
 800bb30:	f8c8 2000 	str.w	r2, [r8]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f011 0f01 	tst.w	r1, #1
 800bb3a:	bf14      	ite	ne
 800bb3c:	8018      	strhne	r0, [r3, #0]
 800bb3e:	6018      	streq	r0, [r3, #0]
 800bb40:	e7e6      	b.n	800bb10 <_scanf_i+0x1a8>
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7ed      	b.n	800bb22 <_scanf_i+0x1ba>
 800bb46:	bf00      	nop
 800bb48:	0800c75c 	.word	0x0800c75c
 800bb4c:	0800bded 	.word	0x0800bded
 800bb50:	0800bd05 	.word	0x0800bd05
 800bb54:	0800c880 	.word	0x0800c880

0800bb58 <_read_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	4611      	mov	r1, r2
 800bb60:	2200      	movs	r2, #0
 800bb62:	4d05      	ldr	r5, [pc, #20]	; (800bb78 <_read_r+0x20>)
 800bb64:	602a      	str	r2, [r5, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	f7f5 f8bf 	bl	8000cea <_read>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	d102      	bne.n	800bb76 <_read_r+0x1e>
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	b103      	cbz	r3, 800bb76 <_read_r+0x1e>
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	bd38      	pop	{r3, r4, r5, pc}
 800bb78:	2000252c 	.word	0x2000252c

0800bb7c <_sbrk_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	2300      	movs	r3, #0
 800bb80:	4d05      	ldr	r5, [pc, #20]	; (800bb98 <_sbrk_r+0x1c>)
 800bb82:	4604      	mov	r4, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	602b      	str	r3, [r5, #0]
 800bb88:	f7f5 f918 	bl	8000dbc <_sbrk>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_sbrk_r+0x1a>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_sbrk_r+0x1a>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	2000252c 	.word	0x2000252c

0800bb9c <__sccl>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	780b      	ldrb	r3, [r1, #0]
 800bba0:	4604      	mov	r4, r0
 800bba2:	2b5e      	cmp	r3, #94	; 0x5e
 800bba4:	bf13      	iteet	ne
 800bba6:	2200      	movne	r2, #0
 800bba8:	2201      	moveq	r2, #1
 800bbaa:	784b      	ldrbeq	r3, [r1, #1]
 800bbac:	1c48      	addne	r0, r1, #1
 800bbae:	bf08      	it	eq
 800bbb0:	1c88      	addeq	r0, r1, #2
 800bbb2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bbb6:	1e61      	subs	r1, r4, #1
 800bbb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bbbc:	42a9      	cmp	r1, r5
 800bbbe:	d1fb      	bne.n	800bbb8 <__sccl+0x1c>
 800bbc0:	b90b      	cbnz	r3, 800bbc6 <__sccl+0x2a>
 800bbc2:	3801      	subs	r0, #1
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	f082 0201 	eor.w	r2, r2, #1
 800bbca:	4605      	mov	r5, r0
 800bbcc:	54e2      	strb	r2, [r4, r3]
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbd4:	292d      	cmp	r1, #45	; 0x2d
 800bbd6:	d006      	beq.n	800bbe6 <__sccl+0x4a>
 800bbd8:	295d      	cmp	r1, #93	; 0x5d
 800bbda:	d0f3      	beq.n	800bbc4 <__sccl+0x28>
 800bbdc:	b909      	cbnz	r1, 800bbe2 <__sccl+0x46>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	e7f0      	b.n	800bbc4 <__sccl+0x28>
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	e7f1      	b.n	800bbca <__sccl+0x2e>
 800bbe6:	786e      	ldrb	r6, [r5, #1]
 800bbe8:	2e5d      	cmp	r6, #93	; 0x5d
 800bbea:	d0fa      	beq.n	800bbe2 <__sccl+0x46>
 800bbec:	42b3      	cmp	r3, r6
 800bbee:	dcf8      	bgt.n	800bbe2 <__sccl+0x46>
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	3502      	adds	r5, #2
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	428e      	cmp	r6, r1
 800bbf8:	5462      	strb	r2, [r4, r1]
 800bbfa:	dcfb      	bgt.n	800bbf4 <__sccl+0x58>
 800bbfc:	1af1      	subs	r1, r6, r3
 800bbfe:	3901      	subs	r1, #1
 800bc00:	42b3      	cmp	r3, r6
 800bc02:	bfa8      	it	ge
 800bc04:	2100      	movge	r1, #0
 800bc06:	1c58      	adds	r0, r3, #1
 800bc08:	1843      	adds	r3, r0, r1
 800bc0a:	e7e0      	b.n	800bbce <__sccl+0x32>

0800bc0c <_strtol_l.constprop.0>:
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc12:	4680      	mov	r8, r0
 800bc14:	d001      	beq.n	800bc1a <_strtol_l.constprop.0+0xe>
 800bc16:	2b24      	cmp	r3, #36	; 0x24
 800bc18:	d906      	bls.n	800bc28 <_strtol_l.constprop.0+0x1c>
 800bc1a:	f7fe fd9f 	bl	800a75c <__errno>
 800bc1e:	2316      	movs	r3, #22
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	2000      	movs	r0, #0
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc28:	460d      	mov	r5, r1
 800bc2a:	4f35      	ldr	r7, [pc, #212]	; (800bd00 <_strtol_l.constprop.0+0xf4>)
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc32:	5de6      	ldrb	r6, [r4, r7]
 800bc34:	f016 0608 	ands.w	r6, r6, #8
 800bc38:	d1f8      	bne.n	800bc2c <_strtol_l.constprop.0+0x20>
 800bc3a:	2c2d      	cmp	r4, #45	; 0x2d
 800bc3c:	d12f      	bne.n	800bc9e <_strtol_l.constprop.0+0x92>
 800bc3e:	2601      	movs	r6, #1
 800bc40:	782c      	ldrb	r4, [r5, #0]
 800bc42:	1c85      	adds	r5, r0, #2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d057      	beq.n	800bcf8 <_strtol_l.constprop.0+0xec>
 800bc48:	2b10      	cmp	r3, #16
 800bc4a:	d109      	bne.n	800bc60 <_strtol_l.constprop.0+0x54>
 800bc4c:	2c30      	cmp	r4, #48	; 0x30
 800bc4e:	d107      	bne.n	800bc60 <_strtol_l.constprop.0+0x54>
 800bc50:	7828      	ldrb	r0, [r5, #0]
 800bc52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bc56:	2858      	cmp	r0, #88	; 0x58
 800bc58:	d149      	bne.n	800bcee <_strtol_l.constprop.0+0xe2>
 800bc5a:	2310      	movs	r3, #16
 800bc5c:	786c      	ldrb	r4, [r5, #1]
 800bc5e:	3502      	adds	r5, #2
 800bc60:	2700      	movs	r7, #0
 800bc62:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800bc66:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bc6a:	fbbe f9f3 	udiv	r9, lr, r3
 800bc6e:	4638      	mov	r0, r7
 800bc70:	fb03 ea19 	mls	sl, r3, r9, lr
 800bc74:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc78:	f1bc 0f09 	cmp.w	ip, #9
 800bc7c:	d814      	bhi.n	800bca8 <_strtol_l.constprop.0+0x9c>
 800bc7e:	4664      	mov	r4, ip
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	dd22      	ble.n	800bcca <_strtol_l.constprop.0+0xbe>
 800bc84:	2f00      	cmp	r7, #0
 800bc86:	db1d      	blt.n	800bcc4 <_strtol_l.constprop.0+0xb8>
 800bc88:	4581      	cmp	r9, r0
 800bc8a:	d31b      	bcc.n	800bcc4 <_strtol_l.constprop.0+0xb8>
 800bc8c:	d101      	bne.n	800bc92 <_strtol_l.constprop.0+0x86>
 800bc8e:	45a2      	cmp	sl, r4
 800bc90:	db18      	blt.n	800bcc4 <_strtol_l.constprop.0+0xb8>
 800bc92:	2701      	movs	r7, #1
 800bc94:	fb00 4003 	mla	r0, r0, r3, r4
 800bc98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc9c:	e7ea      	b.n	800bc74 <_strtol_l.constprop.0+0x68>
 800bc9e:	2c2b      	cmp	r4, #43	; 0x2b
 800bca0:	bf04      	itt	eq
 800bca2:	782c      	ldrbeq	r4, [r5, #0]
 800bca4:	1c85      	addeq	r5, r0, #2
 800bca6:	e7cd      	b.n	800bc44 <_strtol_l.constprop.0+0x38>
 800bca8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bcac:	f1bc 0f19 	cmp.w	ip, #25
 800bcb0:	d801      	bhi.n	800bcb6 <_strtol_l.constprop.0+0xaa>
 800bcb2:	3c37      	subs	r4, #55	; 0x37
 800bcb4:	e7e4      	b.n	800bc80 <_strtol_l.constprop.0+0x74>
 800bcb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bcba:	f1bc 0f19 	cmp.w	ip, #25
 800bcbe:	d804      	bhi.n	800bcca <_strtol_l.constprop.0+0xbe>
 800bcc0:	3c57      	subs	r4, #87	; 0x57
 800bcc2:	e7dd      	b.n	800bc80 <_strtol_l.constprop.0+0x74>
 800bcc4:	f04f 37ff 	mov.w	r7, #4294967295
 800bcc8:	e7e6      	b.n	800bc98 <_strtol_l.constprop.0+0x8c>
 800bcca:	2f00      	cmp	r7, #0
 800bccc:	da07      	bge.n	800bcde <_strtol_l.constprop.0+0xd2>
 800bcce:	2322      	movs	r3, #34	; 0x22
 800bcd0:	4670      	mov	r0, lr
 800bcd2:	f8c8 3000 	str.w	r3, [r8]
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	d0a4      	beq.n	800bc24 <_strtol_l.constprop.0+0x18>
 800bcda:	1e69      	subs	r1, r5, #1
 800bcdc:	e005      	b.n	800bcea <_strtol_l.constprop.0+0xde>
 800bcde:	b106      	cbz	r6, 800bce2 <_strtol_l.constprop.0+0xd6>
 800bce0:	4240      	negs	r0, r0
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	d09e      	beq.n	800bc24 <_strtol_l.constprop.0+0x18>
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	d1f7      	bne.n	800bcda <_strtol_l.constprop.0+0xce>
 800bcea:	6011      	str	r1, [r2, #0]
 800bcec:	e79a      	b.n	800bc24 <_strtol_l.constprop.0+0x18>
 800bcee:	2430      	movs	r4, #48	; 0x30
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1b5      	bne.n	800bc60 <_strtol_l.constprop.0+0x54>
 800bcf4:	2308      	movs	r3, #8
 800bcf6:	e7b3      	b.n	800bc60 <_strtol_l.constprop.0+0x54>
 800bcf8:	2c30      	cmp	r4, #48	; 0x30
 800bcfa:	d0a9      	beq.n	800bc50 <_strtol_l.constprop.0+0x44>
 800bcfc:	230a      	movs	r3, #10
 800bcfe:	e7af      	b.n	800bc60 <_strtol_l.constprop.0+0x54>
 800bd00:	0800c883 	.word	0x0800c883

0800bd04 <_strtol_r>:
 800bd04:	f7ff bf82 	b.w	800bc0c <_strtol_l.constprop.0>

0800bd08 <_strtoul_l.constprop.0>:
 800bd08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	4686      	mov	lr, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	4f35      	ldr	r7, [pc, #212]	; (800bde8 <_strtoul_l.constprop.0+0xe0>)
 800bd12:	4628      	mov	r0, r5
 800bd14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd18:	5de6      	ldrb	r6, [r4, r7]
 800bd1a:	f016 0608 	ands.w	r6, r6, #8
 800bd1e:	d1f8      	bne.n	800bd12 <_strtoul_l.constprop.0+0xa>
 800bd20:	2c2d      	cmp	r4, #45	; 0x2d
 800bd22:	d12f      	bne.n	800bd84 <_strtoul_l.constprop.0+0x7c>
 800bd24:	2601      	movs	r6, #1
 800bd26:	782c      	ldrb	r4, [r5, #0]
 800bd28:	1c85      	adds	r5, r0, #2
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d057      	beq.n	800bdde <_strtoul_l.constprop.0+0xd6>
 800bd2e:	2b10      	cmp	r3, #16
 800bd30:	d109      	bne.n	800bd46 <_strtoul_l.constprop.0+0x3e>
 800bd32:	2c30      	cmp	r4, #48	; 0x30
 800bd34:	d107      	bne.n	800bd46 <_strtoul_l.constprop.0+0x3e>
 800bd36:	7828      	ldrb	r0, [r5, #0]
 800bd38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bd3c:	2858      	cmp	r0, #88	; 0x58
 800bd3e:	d149      	bne.n	800bdd4 <_strtoul_l.constprop.0+0xcc>
 800bd40:	2310      	movs	r3, #16
 800bd42:	786c      	ldrb	r4, [r5, #1]
 800bd44:	3502      	adds	r5, #2
 800bd46:	f04f 38ff 	mov.w	r8, #4294967295
 800bd4a:	fbb8 f8f3 	udiv	r8, r8, r3
 800bd4e:	2700      	movs	r7, #0
 800bd50:	fb03 f908 	mul.w	r9, r3, r8
 800bd54:	4638      	mov	r0, r7
 800bd56:	ea6f 0909 	mvn.w	r9, r9
 800bd5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd5e:	f1bc 0f09 	cmp.w	ip, #9
 800bd62:	d814      	bhi.n	800bd8e <_strtoul_l.constprop.0+0x86>
 800bd64:	4664      	mov	r4, ip
 800bd66:	42a3      	cmp	r3, r4
 800bd68:	dd22      	ble.n	800bdb0 <_strtoul_l.constprop.0+0xa8>
 800bd6a:	2f00      	cmp	r7, #0
 800bd6c:	db1d      	blt.n	800bdaa <_strtoul_l.constprop.0+0xa2>
 800bd6e:	4580      	cmp	r8, r0
 800bd70:	d31b      	bcc.n	800bdaa <_strtoul_l.constprop.0+0xa2>
 800bd72:	d101      	bne.n	800bd78 <_strtoul_l.constprop.0+0x70>
 800bd74:	45a1      	cmp	r9, r4
 800bd76:	db18      	blt.n	800bdaa <_strtoul_l.constprop.0+0xa2>
 800bd78:	2701      	movs	r7, #1
 800bd7a:	fb00 4003 	mla	r0, r0, r3, r4
 800bd7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd82:	e7ea      	b.n	800bd5a <_strtoul_l.constprop.0+0x52>
 800bd84:	2c2b      	cmp	r4, #43	; 0x2b
 800bd86:	bf04      	itt	eq
 800bd88:	782c      	ldrbeq	r4, [r5, #0]
 800bd8a:	1c85      	addeq	r5, r0, #2
 800bd8c:	e7cd      	b.n	800bd2a <_strtoul_l.constprop.0+0x22>
 800bd8e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bd92:	f1bc 0f19 	cmp.w	ip, #25
 800bd96:	d801      	bhi.n	800bd9c <_strtoul_l.constprop.0+0x94>
 800bd98:	3c37      	subs	r4, #55	; 0x37
 800bd9a:	e7e4      	b.n	800bd66 <_strtoul_l.constprop.0+0x5e>
 800bd9c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bda0:	f1bc 0f19 	cmp.w	ip, #25
 800bda4:	d804      	bhi.n	800bdb0 <_strtoul_l.constprop.0+0xa8>
 800bda6:	3c57      	subs	r4, #87	; 0x57
 800bda8:	e7dd      	b.n	800bd66 <_strtoul_l.constprop.0+0x5e>
 800bdaa:	f04f 37ff 	mov.w	r7, #4294967295
 800bdae:	e7e6      	b.n	800bd7e <_strtoul_l.constprop.0+0x76>
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	da07      	bge.n	800bdc4 <_strtoul_l.constprop.0+0xbc>
 800bdb4:	2322      	movs	r3, #34	; 0x22
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	f8ce 3000 	str.w	r3, [lr]
 800bdbe:	b932      	cbnz	r2, 800bdce <_strtoul_l.constprop.0+0xc6>
 800bdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdc4:	b106      	cbz	r6, 800bdc8 <_strtoul_l.constprop.0+0xc0>
 800bdc6:	4240      	negs	r0, r0
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	d0f9      	beq.n	800bdc0 <_strtoul_l.constprop.0+0xb8>
 800bdcc:	b107      	cbz	r7, 800bdd0 <_strtoul_l.constprop.0+0xc8>
 800bdce:	1e69      	subs	r1, r5, #1
 800bdd0:	6011      	str	r1, [r2, #0]
 800bdd2:	e7f5      	b.n	800bdc0 <_strtoul_l.constprop.0+0xb8>
 800bdd4:	2430      	movs	r4, #48	; 0x30
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1b5      	bne.n	800bd46 <_strtoul_l.constprop.0+0x3e>
 800bdda:	2308      	movs	r3, #8
 800bddc:	e7b3      	b.n	800bd46 <_strtoul_l.constprop.0+0x3e>
 800bdde:	2c30      	cmp	r4, #48	; 0x30
 800bde0:	d0a9      	beq.n	800bd36 <_strtoul_l.constprop.0+0x2e>
 800bde2:	230a      	movs	r3, #10
 800bde4:	e7af      	b.n	800bd46 <_strtoul_l.constprop.0+0x3e>
 800bde6:	bf00      	nop
 800bde8:	0800c883 	.word	0x0800c883

0800bdec <_strtoul_r>:
 800bdec:	f7ff bf8c 	b.w	800bd08 <_strtoul_l.constprop.0>

0800bdf0 <__submore>:
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bdf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	d11b      	bne.n	800be38 <__submore+0x48>
 800be00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800be04:	f7fe fec4 	bl	800ab90 <_malloc_r>
 800be08:	b918      	cbnz	r0, 800be12 <__submore+0x22>
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be16:	63a3      	str	r3, [r4, #56]	; 0x38
 800be18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800be1c:	6360      	str	r0, [r4, #52]	; 0x34
 800be1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800be22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800be26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800be2a:	7043      	strb	r3, [r0, #1]
 800be2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be30:	7003      	strb	r3, [r0, #0]
 800be32:	6020      	str	r0, [r4, #0]
 800be34:	2000      	movs	r0, #0
 800be36:	e7ea      	b.n	800be0e <__submore+0x1e>
 800be38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800be3a:	0077      	lsls	r7, r6, #1
 800be3c:	463a      	mov	r2, r7
 800be3e:	f000 fb27 	bl	800c490 <_realloc_r>
 800be42:	4605      	mov	r5, r0
 800be44:	2800      	cmp	r0, #0
 800be46:	d0e0      	beq.n	800be0a <__submore+0x1a>
 800be48:	eb00 0806 	add.w	r8, r0, r6
 800be4c:	4601      	mov	r1, r0
 800be4e:	4632      	mov	r2, r6
 800be50:	4640      	mov	r0, r8
 800be52:	f7fe fcad 	bl	800a7b0 <memcpy>
 800be56:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800be5a:	f8c4 8000 	str.w	r8, [r4]
 800be5e:	e7e9      	b.n	800be34 <__submore+0x44>

0800be60 <__swbuf_r>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	460e      	mov	r6, r1
 800be64:	4614      	mov	r4, r2
 800be66:	4605      	mov	r5, r0
 800be68:	b118      	cbz	r0, 800be72 <__swbuf_r+0x12>
 800be6a:	6983      	ldr	r3, [r0, #24]
 800be6c:	b90b      	cbnz	r3, 800be72 <__swbuf_r+0x12>
 800be6e:	f000 f9d5 	bl	800c21c <__sinit>
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <__swbuf_r+0x98>)
 800be74:	429c      	cmp	r4, r3
 800be76:	d12b      	bne.n	800bed0 <__swbuf_r+0x70>
 800be78:	686c      	ldr	r4, [r5, #4]
 800be7a:	69a3      	ldr	r3, [r4, #24]
 800be7c:	60a3      	str	r3, [r4, #8]
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	071a      	lsls	r2, r3, #28
 800be82:	d52f      	bpl.n	800bee4 <__swbuf_r+0x84>
 800be84:	6923      	ldr	r3, [r4, #16]
 800be86:	b36b      	cbz	r3, 800bee4 <__swbuf_r+0x84>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	6820      	ldr	r0, [r4, #0]
 800be8c:	b2f6      	uxtb	r6, r6
 800be8e:	1ac0      	subs	r0, r0, r3
 800be90:	6963      	ldr	r3, [r4, #20]
 800be92:	4637      	mov	r7, r6
 800be94:	4283      	cmp	r3, r0
 800be96:	dc04      	bgt.n	800bea2 <__swbuf_r+0x42>
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f92a 	bl	800c0f4 <_fflush_r>
 800bea0:	bb30      	cbnz	r0, 800bef0 <__swbuf_r+0x90>
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	3001      	adds	r0, #1
 800bea6:	3b01      	subs	r3, #1
 800bea8:	60a3      	str	r3, [r4, #8]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	701e      	strb	r6, [r3, #0]
 800beb2:	6963      	ldr	r3, [r4, #20]
 800beb4:	4283      	cmp	r3, r0
 800beb6:	d004      	beq.n	800bec2 <__swbuf_r+0x62>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	07db      	lsls	r3, r3, #31
 800bebc:	d506      	bpl.n	800becc <__swbuf_r+0x6c>
 800bebe:	2e0a      	cmp	r6, #10
 800bec0:	d104      	bne.n	800becc <__swbuf_r+0x6c>
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f000 f915 	bl	800c0f4 <_fflush_r>
 800beca:	b988      	cbnz	r0, 800bef0 <__swbuf_r+0x90>
 800becc:	4638      	mov	r0, r7
 800bece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <__swbuf_r+0x9c>)
 800bed2:	429c      	cmp	r4, r3
 800bed4:	d101      	bne.n	800beda <__swbuf_r+0x7a>
 800bed6:	68ac      	ldr	r4, [r5, #8]
 800bed8:	e7cf      	b.n	800be7a <__swbuf_r+0x1a>
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <__swbuf_r+0xa0>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	bf08      	it	eq
 800bee0:	68ec      	ldreq	r4, [r5, #12]
 800bee2:	e7ca      	b.n	800be7a <__swbuf_r+0x1a>
 800bee4:	4621      	mov	r1, r4
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f80c 	bl	800bf04 <__swsetup_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	d0cb      	beq.n	800be88 <__swbuf_r+0x28>
 800bef0:	f04f 37ff 	mov.w	r7, #4294967295
 800bef4:	e7ea      	b.n	800becc <__swbuf_r+0x6c>
 800bef6:	bf00      	nop
 800bef8:	0800c9a4 	.word	0x0800c9a4
 800befc:	0800c9c4 	.word	0x0800c9c4
 800bf00:	0800c984 	.word	0x0800c984

0800bf04 <__swsetup_r>:
 800bf04:	4b32      	ldr	r3, [pc, #200]	; (800bfd0 <__swsetup_r+0xcc>)
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	681d      	ldr	r5, [r3, #0]
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	b125      	cbz	r5, 800bf1a <__swsetup_r+0x16>
 800bf10:	69ab      	ldr	r3, [r5, #24]
 800bf12:	b913      	cbnz	r3, 800bf1a <__swsetup_r+0x16>
 800bf14:	4628      	mov	r0, r5
 800bf16:	f000 f981 	bl	800c21c <__sinit>
 800bf1a:	4b2e      	ldr	r3, [pc, #184]	; (800bfd4 <__swsetup_r+0xd0>)
 800bf1c:	429c      	cmp	r4, r3
 800bf1e:	d10f      	bne.n	800bf40 <__swsetup_r+0x3c>
 800bf20:	686c      	ldr	r4, [r5, #4]
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf28:	0719      	lsls	r1, r3, #28
 800bf2a:	d42c      	bmi.n	800bf86 <__swsetup_r+0x82>
 800bf2c:	06dd      	lsls	r5, r3, #27
 800bf2e:	d411      	bmi.n	800bf54 <__swsetup_r+0x50>
 800bf30:	2309      	movs	r3, #9
 800bf32:	6033      	str	r3, [r6, #0]
 800bf34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	e03e      	b.n	800bfbe <__swsetup_r+0xba>
 800bf40:	4b25      	ldr	r3, [pc, #148]	; (800bfd8 <__swsetup_r+0xd4>)
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d101      	bne.n	800bf4a <__swsetup_r+0x46>
 800bf46:	68ac      	ldr	r4, [r5, #8]
 800bf48:	e7eb      	b.n	800bf22 <__swsetup_r+0x1e>
 800bf4a:	4b24      	ldr	r3, [pc, #144]	; (800bfdc <__swsetup_r+0xd8>)
 800bf4c:	429c      	cmp	r4, r3
 800bf4e:	bf08      	it	eq
 800bf50:	68ec      	ldreq	r4, [r5, #12]
 800bf52:	e7e6      	b.n	800bf22 <__swsetup_r+0x1e>
 800bf54:	0758      	lsls	r0, r3, #29
 800bf56:	d512      	bpl.n	800bf7e <__swsetup_r+0x7a>
 800bf58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf5a:	b141      	cbz	r1, 800bf6e <__swsetup_r+0x6a>
 800bf5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf60:	4299      	cmp	r1, r3
 800bf62:	d002      	beq.n	800bf6a <__swsetup_r+0x66>
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7fe fdab 	bl	800aac0 <_free_r>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	2300      	movs	r3, #0
 800bf78:	6063      	str	r3, [r4, #4]
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f043 0308 	orr.w	r3, r3, #8
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	b94b      	cbnz	r3, 800bf9e <__swsetup_r+0x9a>
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf94:	d003      	beq.n	800bf9e <__swsetup_r+0x9a>
 800bf96:	4621      	mov	r1, r4
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f000 fa05 	bl	800c3a8 <__smakebuf_r>
 800bf9e:	89a0      	ldrh	r0, [r4, #12]
 800bfa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfa4:	f010 0301 	ands.w	r3, r0, #1
 800bfa8:	d00a      	beq.n	800bfc0 <__swsetup_r+0xbc>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60a3      	str	r3, [r4, #8]
 800bfae:	6963      	ldr	r3, [r4, #20]
 800bfb0:	425b      	negs	r3, r3
 800bfb2:	61a3      	str	r3, [r4, #24]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b943      	cbnz	r3, 800bfca <__swsetup_r+0xc6>
 800bfb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfbc:	d1ba      	bne.n	800bf34 <__swsetup_r+0x30>
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
 800bfc0:	0781      	lsls	r1, r0, #30
 800bfc2:	bf58      	it	pl
 800bfc4:	6963      	ldrpl	r3, [r4, #20]
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	e7f4      	b.n	800bfb4 <__swsetup_r+0xb0>
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e7f7      	b.n	800bfbe <__swsetup_r+0xba>
 800bfce:	bf00      	nop
 800bfd0:	20000188 	.word	0x20000188
 800bfd4:	0800c9a4 	.word	0x0800c9a4
 800bfd8:	0800c9c4 	.word	0x0800c9c4
 800bfdc:	0800c984 	.word	0x0800c984

0800bfe0 <abort>:
 800bfe0:	2006      	movs	r0, #6
 800bfe2:	b508      	push	{r3, lr}
 800bfe4:	f000 faac 	bl	800c540 <raise>
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f7f4 fe74 	bl	8000cd6 <_exit>
	...

0800bff0 <__sflush_r>:
 800bff0:	898a      	ldrh	r2, [r1, #12]
 800bff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff4:	4605      	mov	r5, r0
 800bff6:	0710      	lsls	r0, r2, #28
 800bff8:	460c      	mov	r4, r1
 800bffa:	d457      	bmi.n	800c0ac <__sflush_r+0xbc>
 800bffc:	684b      	ldr	r3, [r1, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	dc04      	bgt.n	800c00c <__sflush_r+0x1c>
 800c002:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	dc01      	bgt.n	800c00c <__sflush_r+0x1c>
 800c008:	2000      	movs	r0, #0
 800c00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c00c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d0fa      	beq.n	800c008 <__sflush_r+0x18>
 800c012:	2300      	movs	r3, #0
 800c014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c018:	682f      	ldr	r7, [r5, #0]
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	d032      	beq.n	800c084 <__sflush_r+0x94>
 800c01e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	075a      	lsls	r2, r3, #29
 800c024:	d505      	bpl.n	800c032 <__sflush_r+0x42>
 800c026:	6863      	ldr	r3, [r4, #4]
 800c028:	1ac0      	subs	r0, r0, r3
 800c02a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c02c:	b10b      	cbz	r3, 800c032 <__sflush_r+0x42>
 800c02e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c030:	1ac0      	subs	r0, r0, r3
 800c032:	2300      	movs	r3, #0
 800c034:	4602      	mov	r2, r0
 800c036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c038:	4628      	mov	r0, r5
 800c03a:	6a21      	ldr	r1, [r4, #32]
 800c03c:	47b0      	blx	r6
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	d106      	bne.n	800c052 <__sflush_r+0x62>
 800c044:	6829      	ldr	r1, [r5, #0]
 800c046:	291d      	cmp	r1, #29
 800c048:	d82c      	bhi.n	800c0a4 <__sflush_r+0xb4>
 800c04a:	4a29      	ldr	r2, [pc, #164]	; (800c0f0 <__sflush_r+0x100>)
 800c04c:	40ca      	lsrs	r2, r1
 800c04e:	07d6      	lsls	r6, r2, #31
 800c050:	d528      	bpl.n	800c0a4 <__sflush_r+0xb4>
 800c052:	2200      	movs	r2, #0
 800c054:	6062      	str	r2, [r4, #4]
 800c056:	6922      	ldr	r2, [r4, #16]
 800c058:	04d9      	lsls	r1, r3, #19
 800c05a:	6022      	str	r2, [r4, #0]
 800c05c:	d504      	bpl.n	800c068 <__sflush_r+0x78>
 800c05e:	1c42      	adds	r2, r0, #1
 800c060:	d101      	bne.n	800c066 <__sflush_r+0x76>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b903      	cbnz	r3, 800c068 <__sflush_r+0x78>
 800c066:	6560      	str	r0, [r4, #84]	; 0x54
 800c068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c06a:	602f      	str	r7, [r5, #0]
 800c06c:	2900      	cmp	r1, #0
 800c06e:	d0cb      	beq.n	800c008 <__sflush_r+0x18>
 800c070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c074:	4299      	cmp	r1, r3
 800c076:	d002      	beq.n	800c07e <__sflush_r+0x8e>
 800c078:	4628      	mov	r0, r5
 800c07a:	f7fe fd21 	bl	800aac0 <_free_r>
 800c07e:	2000      	movs	r0, #0
 800c080:	6360      	str	r0, [r4, #52]	; 0x34
 800c082:	e7c2      	b.n	800c00a <__sflush_r+0x1a>
 800c084:	6a21      	ldr	r1, [r4, #32]
 800c086:	2301      	movs	r3, #1
 800c088:	4628      	mov	r0, r5
 800c08a:	47b0      	blx	r6
 800c08c:	1c41      	adds	r1, r0, #1
 800c08e:	d1c7      	bne.n	800c020 <__sflush_r+0x30>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c4      	beq.n	800c020 <__sflush_r+0x30>
 800c096:	2b1d      	cmp	r3, #29
 800c098:	d001      	beq.n	800c09e <__sflush_r+0xae>
 800c09a:	2b16      	cmp	r3, #22
 800c09c:	d101      	bne.n	800c0a2 <__sflush_r+0xb2>
 800c09e:	602f      	str	r7, [r5, #0]
 800c0a0:	e7b2      	b.n	800c008 <__sflush_r+0x18>
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a8:	81a3      	strh	r3, [r4, #12]
 800c0aa:	e7ae      	b.n	800c00a <__sflush_r+0x1a>
 800c0ac:	690f      	ldr	r7, [r1, #16]
 800c0ae:	2f00      	cmp	r7, #0
 800c0b0:	d0aa      	beq.n	800c008 <__sflush_r+0x18>
 800c0b2:	0793      	lsls	r3, r2, #30
 800c0b4:	bf18      	it	ne
 800c0b6:	2300      	movne	r3, #0
 800c0b8:	680e      	ldr	r6, [r1, #0]
 800c0ba:	bf08      	it	eq
 800c0bc:	694b      	ldreq	r3, [r1, #20]
 800c0be:	1bf6      	subs	r6, r6, r7
 800c0c0:	600f      	str	r7, [r1, #0]
 800c0c2:	608b      	str	r3, [r1, #8]
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	dd9f      	ble.n	800c008 <__sflush_r+0x18>
 800c0c8:	4633      	mov	r3, r6
 800c0ca:	463a      	mov	r2, r7
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	6a21      	ldr	r1, [r4, #32]
 800c0d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c0d4:	47e0      	blx	ip
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	dc06      	bgt.n	800c0e8 <__sflush_r+0xf8>
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	e790      	b.n	800c00a <__sflush_r+0x1a>
 800c0e8:	4407      	add	r7, r0
 800c0ea:	1a36      	subs	r6, r6, r0
 800c0ec:	e7ea      	b.n	800c0c4 <__sflush_r+0xd4>
 800c0ee:	bf00      	nop
 800c0f0:	20400001 	.word	0x20400001

0800c0f4 <_fflush_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	690b      	ldr	r3, [r1, #16]
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	b913      	cbnz	r3, 800c104 <_fflush_r+0x10>
 800c0fe:	2500      	movs	r5, #0
 800c100:	4628      	mov	r0, r5
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	b118      	cbz	r0, 800c10e <_fflush_r+0x1a>
 800c106:	6983      	ldr	r3, [r0, #24]
 800c108:	b90b      	cbnz	r3, 800c10e <_fflush_r+0x1a>
 800c10a:	f000 f887 	bl	800c21c <__sinit>
 800c10e:	4b14      	ldr	r3, [pc, #80]	; (800c160 <_fflush_r+0x6c>)
 800c110:	429c      	cmp	r4, r3
 800c112:	d11b      	bne.n	800c14c <_fflush_r+0x58>
 800c114:	686c      	ldr	r4, [r5, #4]
 800c116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0ef      	beq.n	800c0fe <_fflush_r+0xa>
 800c11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c120:	07d0      	lsls	r0, r2, #31
 800c122:	d404      	bmi.n	800c12e <_fflush_r+0x3a>
 800c124:	0599      	lsls	r1, r3, #22
 800c126:	d402      	bmi.n	800c12e <_fflush_r+0x3a>
 800c128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c12a:	f000 f915 	bl	800c358 <__retarget_lock_acquire_recursive>
 800c12e:	4628      	mov	r0, r5
 800c130:	4621      	mov	r1, r4
 800c132:	f7ff ff5d 	bl	800bff0 <__sflush_r>
 800c136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c138:	4605      	mov	r5, r0
 800c13a:	07da      	lsls	r2, r3, #31
 800c13c:	d4e0      	bmi.n	800c100 <_fflush_r+0xc>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	059b      	lsls	r3, r3, #22
 800c142:	d4dd      	bmi.n	800c100 <_fflush_r+0xc>
 800c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c146:	f000 f908 	bl	800c35a <__retarget_lock_release_recursive>
 800c14a:	e7d9      	b.n	800c100 <_fflush_r+0xc>
 800c14c:	4b05      	ldr	r3, [pc, #20]	; (800c164 <_fflush_r+0x70>)
 800c14e:	429c      	cmp	r4, r3
 800c150:	d101      	bne.n	800c156 <_fflush_r+0x62>
 800c152:	68ac      	ldr	r4, [r5, #8]
 800c154:	e7df      	b.n	800c116 <_fflush_r+0x22>
 800c156:	4b04      	ldr	r3, [pc, #16]	; (800c168 <_fflush_r+0x74>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	bf08      	it	eq
 800c15c:	68ec      	ldreq	r4, [r5, #12]
 800c15e:	e7da      	b.n	800c116 <_fflush_r+0x22>
 800c160:	0800c9a4 	.word	0x0800c9a4
 800c164:	0800c9c4 	.word	0x0800c9c4
 800c168:	0800c984 	.word	0x0800c984

0800c16c <std>:
 800c16c:	2300      	movs	r3, #0
 800c16e:	b510      	push	{r4, lr}
 800c170:	4604      	mov	r4, r0
 800c172:	e9c0 3300 	strd	r3, r3, [r0]
 800c176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c17a:	6083      	str	r3, [r0, #8]
 800c17c:	8181      	strh	r1, [r0, #12]
 800c17e:	6643      	str	r3, [r0, #100]	; 0x64
 800c180:	81c2      	strh	r2, [r0, #14]
 800c182:	6183      	str	r3, [r0, #24]
 800c184:	4619      	mov	r1, r3
 800c186:	2208      	movs	r2, #8
 800c188:	305c      	adds	r0, #92	; 0x5c
 800c18a:	f7fe fb1f 	bl	800a7cc <memset>
 800c18e:	4b05      	ldr	r3, [pc, #20]	; (800c1a4 <std+0x38>)
 800c190:	6224      	str	r4, [r4, #32]
 800c192:	6263      	str	r3, [r4, #36]	; 0x24
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <std+0x3c>)
 800c196:	62a3      	str	r3, [r4, #40]	; 0x28
 800c198:	4b04      	ldr	r3, [pc, #16]	; (800c1ac <std+0x40>)
 800c19a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c19c:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <std+0x44>)
 800c19e:	6323      	str	r3, [r4, #48]	; 0x30
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800a831 	.word	0x0800a831
 800c1a8:	0800a857 	.word	0x0800a857
 800c1ac:	0800a88f 	.word	0x0800a88f
 800c1b0:	0800a8b3 	.word	0x0800a8b3

0800c1b4 <_cleanup_r>:
 800c1b4:	4901      	ldr	r1, [pc, #4]	; (800c1bc <_cleanup_r+0x8>)
 800c1b6:	f000 b8af 	b.w	800c318 <_fwalk_reent>
 800c1ba:	bf00      	nop
 800c1bc:	0800c0f5 	.word	0x0800c0f5

0800c1c0 <__sfmoreglue>:
 800c1c0:	2268      	movs	r2, #104	; 0x68
 800c1c2:	b570      	push	{r4, r5, r6, lr}
 800c1c4:	1e4d      	subs	r5, r1, #1
 800c1c6:	4355      	muls	r5, r2
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1ce:	f7fe fcdf 	bl	800ab90 <_malloc_r>
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	b140      	cbz	r0, 800c1e8 <__sfmoreglue+0x28>
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c1dc:	300c      	adds	r0, #12
 800c1de:	60a0      	str	r0, [r4, #8]
 800c1e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1e4:	f7fe faf2 	bl	800a7cc <memset>
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}

0800c1ec <__sfp_lock_acquire>:
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <__sfp_lock_acquire+0x8>)
 800c1ee:	f000 b8b3 	b.w	800c358 <__retarget_lock_acquire_recursive>
 800c1f2:	bf00      	nop
 800c1f4:	20002531 	.word	0x20002531

0800c1f8 <__sfp_lock_release>:
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__sfp_lock_release+0x8>)
 800c1fa:	f000 b8ae 	b.w	800c35a <__retarget_lock_release_recursive>
 800c1fe:	bf00      	nop
 800c200:	20002531 	.word	0x20002531

0800c204 <__sinit_lock_acquire>:
 800c204:	4801      	ldr	r0, [pc, #4]	; (800c20c <__sinit_lock_acquire+0x8>)
 800c206:	f000 b8a7 	b.w	800c358 <__retarget_lock_acquire_recursive>
 800c20a:	bf00      	nop
 800c20c:	20002532 	.word	0x20002532

0800c210 <__sinit_lock_release>:
 800c210:	4801      	ldr	r0, [pc, #4]	; (800c218 <__sinit_lock_release+0x8>)
 800c212:	f000 b8a2 	b.w	800c35a <__retarget_lock_release_recursive>
 800c216:	bf00      	nop
 800c218:	20002532 	.word	0x20002532

0800c21c <__sinit>:
 800c21c:	b510      	push	{r4, lr}
 800c21e:	4604      	mov	r4, r0
 800c220:	f7ff fff0 	bl	800c204 <__sinit_lock_acquire>
 800c224:	69a3      	ldr	r3, [r4, #24]
 800c226:	b11b      	cbz	r3, 800c230 <__sinit+0x14>
 800c228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c22c:	f7ff bff0 	b.w	800c210 <__sinit_lock_release>
 800c230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c234:	6523      	str	r3, [r4, #80]	; 0x50
 800c236:	4b13      	ldr	r3, [pc, #76]	; (800c284 <__sinit+0x68>)
 800c238:	4a13      	ldr	r2, [pc, #76]	; (800c288 <__sinit+0x6c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c23e:	42a3      	cmp	r3, r4
 800c240:	bf08      	it	eq
 800c242:	2301      	moveq	r3, #1
 800c244:	4620      	mov	r0, r4
 800c246:	bf08      	it	eq
 800c248:	61a3      	streq	r3, [r4, #24]
 800c24a:	f000 f81f 	bl	800c28c <__sfp>
 800c24e:	6060      	str	r0, [r4, #4]
 800c250:	4620      	mov	r0, r4
 800c252:	f000 f81b 	bl	800c28c <__sfp>
 800c256:	60a0      	str	r0, [r4, #8]
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 f817 	bl	800c28c <__sfp>
 800c25e:	2200      	movs	r2, #0
 800c260:	2104      	movs	r1, #4
 800c262:	60e0      	str	r0, [r4, #12]
 800c264:	6860      	ldr	r0, [r4, #4]
 800c266:	f7ff ff81 	bl	800c16c <std>
 800c26a:	2201      	movs	r2, #1
 800c26c:	2109      	movs	r1, #9
 800c26e:	68a0      	ldr	r0, [r4, #8]
 800c270:	f7ff ff7c 	bl	800c16c <std>
 800c274:	2202      	movs	r2, #2
 800c276:	2112      	movs	r1, #18
 800c278:	68e0      	ldr	r0, [r4, #12]
 800c27a:	f7ff ff77 	bl	800c16c <std>
 800c27e:	2301      	movs	r3, #1
 800c280:	61a3      	str	r3, [r4, #24]
 800c282:	e7d1      	b.n	800c228 <__sinit+0xc>
 800c284:	0800c780 	.word	0x0800c780
 800c288:	0800c1b5 	.word	0x0800c1b5

0800c28c <__sfp>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	4607      	mov	r7, r0
 800c290:	f7ff ffac 	bl	800c1ec <__sfp_lock_acquire>
 800c294:	4b1e      	ldr	r3, [pc, #120]	; (800c310 <__sfp+0x84>)
 800c296:	681e      	ldr	r6, [r3, #0]
 800c298:	69b3      	ldr	r3, [r6, #24]
 800c29a:	b913      	cbnz	r3, 800c2a2 <__sfp+0x16>
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7ff ffbd 	bl	800c21c <__sinit>
 800c2a2:	3648      	adds	r6, #72	; 0x48
 800c2a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	d503      	bpl.n	800c2b4 <__sfp+0x28>
 800c2ac:	6833      	ldr	r3, [r6, #0]
 800c2ae:	b30b      	cbz	r3, 800c2f4 <__sfp+0x68>
 800c2b0:	6836      	ldr	r6, [r6, #0]
 800c2b2:	e7f7      	b.n	800c2a4 <__sfp+0x18>
 800c2b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2b8:	b9d5      	cbnz	r5, 800c2f0 <__sfp+0x64>
 800c2ba:	4b16      	ldr	r3, [pc, #88]	; (800c314 <__sfp+0x88>)
 800c2bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2c0:	60e3      	str	r3, [r4, #12]
 800c2c2:	6665      	str	r5, [r4, #100]	; 0x64
 800c2c4:	f000 f847 	bl	800c356 <__retarget_lock_init_recursive>
 800c2c8:	f7ff ff96 	bl	800c1f8 <__sfp_lock_release>
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2d8:	6025      	str	r5, [r4, #0]
 800c2da:	61a5      	str	r5, [r4, #24]
 800c2dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2e0:	f7fe fa74 	bl	800a7cc <memset>
 800c2e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f0:	3468      	adds	r4, #104	; 0x68
 800c2f2:	e7d9      	b.n	800c2a8 <__sfp+0x1c>
 800c2f4:	2104      	movs	r1, #4
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	f7ff ff62 	bl	800c1c0 <__sfmoreglue>
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	6030      	str	r0, [r6, #0]
 800c300:	2800      	cmp	r0, #0
 800c302:	d1d5      	bne.n	800c2b0 <__sfp+0x24>
 800c304:	f7ff ff78 	bl	800c1f8 <__sfp_lock_release>
 800c308:	230c      	movs	r3, #12
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	e7ee      	b.n	800c2ec <__sfp+0x60>
 800c30e:	bf00      	nop
 800c310:	0800c780 	.word	0x0800c780
 800c314:	ffff0001 	.word	0xffff0001

0800c318 <_fwalk_reent>:
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	4606      	mov	r6, r0
 800c31e:	4688      	mov	r8, r1
 800c320:	2700      	movs	r7, #0
 800c322:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c32a:	f1b9 0901 	subs.w	r9, r9, #1
 800c32e:	d505      	bpl.n	800c33c <_fwalk_reent+0x24>
 800c330:	6824      	ldr	r4, [r4, #0]
 800c332:	2c00      	cmp	r4, #0
 800c334:	d1f7      	bne.n	800c326 <_fwalk_reent+0xe>
 800c336:	4638      	mov	r0, r7
 800c338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c33c:	89ab      	ldrh	r3, [r5, #12]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d907      	bls.n	800c352 <_fwalk_reent+0x3a>
 800c342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c346:	3301      	adds	r3, #1
 800c348:	d003      	beq.n	800c352 <_fwalk_reent+0x3a>
 800c34a:	4629      	mov	r1, r5
 800c34c:	4630      	mov	r0, r6
 800c34e:	47c0      	blx	r8
 800c350:	4307      	orrs	r7, r0
 800c352:	3568      	adds	r5, #104	; 0x68
 800c354:	e7e9      	b.n	800c32a <_fwalk_reent+0x12>

0800c356 <__retarget_lock_init_recursive>:
 800c356:	4770      	bx	lr

0800c358 <__retarget_lock_acquire_recursive>:
 800c358:	4770      	bx	lr

0800c35a <__retarget_lock_release_recursive>:
 800c35a:	4770      	bx	lr

0800c35c <__swhatbuf_r>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	460e      	mov	r6, r1
 800c360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c364:	4614      	mov	r4, r2
 800c366:	2900      	cmp	r1, #0
 800c368:	461d      	mov	r5, r3
 800c36a:	b096      	sub	sp, #88	; 0x58
 800c36c:	da08      	bge.n	800c380 <__swhatbuf_r+0x24>
 800c36e:	2200      	movs	r2, #0
 800c370:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c374:	602a      	str	r2, [r5, #0]
 800c376:	061a      	lsls	r2, r3, #24
 800c378:	d410      	bmi.n	800c39c <__swhatbuf_r+0x40>
 800c37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c37e:	e00e      	b.n	800c39e <__swhatbuf_r+0x42>
 800c380:	466a      	mov	r2, sp
 800c382:	f000 f8f9 	bl	800c578 <_fstat_r>
 800c386:	2800      	cmp	r0, #0
 800c388:	dbf1      	blt.n	800c36e <__swhatbuf_r+0x12>
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c390:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c394:	425a      	negs	r2, r3
 800c396:	415a      	adcs	r2, r3
 800c398:	602a      	str	r2, [r5, #0]
 800c39a:	e7ee      	b.n	800c37a <__swhatbuf_r+0x1e>
 800c39c:	2340      	movs	r3, #64	; 0x40
 800c39e:	2000      	movs	r0, #0
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	b016      	add	sp, #88	; 0x58
 800c3a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3a8 <__smakebuf_r>:
 800c3a8:	898b      	ldrh	r3, [r1, #12]
 800c3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3ac:	079d      	lsls	r5, r3, #30
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	d507      	bpl.n	800c3c4 <__smakebuf_r+0x1c>
 800c3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	2301      	movs	r3, #1
 800c3be:	6163      	str	r3, [r4, #20]
 800c3c0:	b002      	add	sp, #8
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	466a      	mov	r2, sp
 800c3c6:	ab01      	add	r3, sp, #4
 800c3c8:	f7ff ffc8 	bl	800c35c <__swhatbuf_r>
 800c3cc:	9900      	ldr	r1, [sp, #0]
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7fe fbdd 	bl	800ab90 <_malloc_r>
 800c3d6:	b948      	cbnz	r0, 800c3ec <__smakebuf_r+0x44>
 800c3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3dc:	059a      	lsls	r2, r3, #22
 800c3de:	d4ef      	bmi.n	800c3c0 <__smakebuf_r+0x18>
 800c3e0:	f023 0303 	bic.w	r3, r3, #3
 800c3e4:	f043 0302 	orr.w	r3, r3, #2
 800c3e8:	81a3      	strh	r3, [r4, #12]
 800c3ea:	e7e3      	b.n	800c3b4 <__smakebuf_r+0xc>
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <__smakebuf_r+0x7c>)
 800c3ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	6020      	str	r0, [r4, #0]
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	9b00      	ldr	r3, [sp, #0]
 800c3fc:	6120      	str	r0, [r4, #16]
 800c3fe:	6163      	str	r3, [r4, #20]
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	b15b      	cbz	r3, 800c41c <__smakebuf_r+0x74>
 800c404:	4630      	mov	r0, r6
 800c406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c40a:	f000 f8c7 	bl	800c59c <_isatty_r>
 800c40e:	b128      	cbz	r0, 800c41c <__smakebuf_r+0x74>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	f023 0303 	bic.w	r3, r3, #3
 800c416:	f043 0301 	orr.w	r3, r3, #1
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	89a0      	ldrh	r0, [r4, #12]
 800c41e:	4305      	orrs	r5, r0
 800c420:	81a5      	strh	r5, [r4, #12]
 800c422:	e7cd      	b.n	800c3c0 <__smakebuf_r+0x18>
 800c424:	0800c1b5 	.word	0x0800c1b5

0800c428 <memchr>:
 800c428:	4603      	mov	r3, r0
 800c42a:	b510      	push	{r4, lr}
 800c42c:	b2c9      	uxtb	r1, r1
 800c42e:	4402      	add	r2, r0
 800c430:	4293      	cmp	r3, r2
 800c432:	4618      	mov	r0, r3
 800c434:	d101      	bne.n	800c43a <memchr+0x12>
 800c436:	2000      	movs	r0, #0
 800c438:	e003      	b.n	800c442 <memchr+0x1a>
 800c43a:	7804      	ldrb	r4, [r0, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	428c      	cmp	r4, r1
 800c440:	d1f6      	bne.n	800c430 <memchr+0x8>
 800c442:	bd10      	pop	{r4, pc}

0800c444 <memmove>:
 800c444:	4288      	cmp	r0, r1
 800c446:	b510      	push	{r4, lr}
 800c448:	eb01 0402 	add.w	r4, r1, r2
 800c44c:	d902      	bls.n	800c454 <memmove+0x10>
 800c44e:	4284      	cmp	r4, r0
 800c450:	4623      	mov	r3, r4
 800c452:	d807      	bhi.n	800c464 <memmove+0x20>
 800c454:	1e43      	subs	r3, r0, #1
 800c456:	42a1      	cmp	r1, r4
 800c458:	d008      	beq.n	800c46c <memmove+0x28>
 800c45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c45e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c462:	e7f8      	b.n	800c456 <memmove+0x12>
 800c464:	4601      	mov	r1, r0
 800c466:	4402      	add	r2, r0
 800c468:	428a      	cmp	r2, r1
 800c46a:	d100      	bne.n	800c46e <memmove+0x2a>
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c476:	e7f7      	b.n	800c468 <memmove+0x24>

0800c478 <__malloc_lock>:
 800c478:	4801      	ldr	r0, [pc, #4]	; (800c480 <__malloc_lock+0x8>)
 800c47a:	f7ff bf6d 	b.w	800c358 <__retarget_lock_acquire_recursive>
 800c47e:	bf00      	nop
 800c480:	20002530 	.word	0x20002530

0800c484 <__malloc_unlock>:
 800c484:	4801      	ldr	r0, [pc, #4]	; (800c48c <__malloc_unlock+0x8>)
 800c486:	f7ff bf68 	b.w	800c35a <__retarget_lock_release_recursive>
 800c48a:	bf00      	nop
 800c48c:	20002530 	.word	0x20002530

0800c490 <_realloc_r>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	4680      	mov	r8, r0
 800c496:	4614      	mov	r4, r2
 800c498:	460e      	mov	r6, r1
 800c49a:	b921      	cbnz	r1, 800c4a6 <_realloc_r+0x16>
 800c49c:	4611      	mov	r1, r2
 800c49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a2:	f7fe bb75 	b.w	800ab90 <_malloc_r>
 800c4a6:	b92a      	cbnz	r2, 800c4b4 <_realloc_r+0x24>
 800c4a8:	f7fe fb0a 	bl	800aac0 <_free_r>
 800c4ac:	4625      	mov	r5, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b4:	f000 f882 	bl	800c5bc <_malloc_usable_size_r>
 800c4b8:	4284      	cmp	r4, r0
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	d802      	bhi.n	800c4c4 <_realloc_r+0x34>
 800c4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4c2:	d812      	bhi.n	800c4ea <_realloc_r+0x5a>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	f7fe fb62 	bl	800ab90 <_malloc_r>
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d0ed      	beq.n	800c4ae <_realloc_r+0x1e>
 800c4d2:	42bc      	cmp	r4, r7
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	bf28      	it	cs
 800c4da:	463a      	movcs	r2, r7
 800c4dc:	f7fe f968 	bl	800a7b0 <memcpy>
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	f7fe faec 	bl	800aac0 <_free_r>
 800c4e8:	e7e1      	b.n	800c4ae <_realloc_r+0x1e>
 800c4ea:	4635      	mov	r5, r6
 800c4ec:	e7df      	b.n	800c4ae <_realloc_r+0x1e>

0800c4ee <_raise_r>:
 800c4ee:	291f      	cmp	r1, #31
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	d904      	bls.n	800c502 <_raise_r+0x14>
 800c4f8:	2316      	movs	r3, #22
 800c4fa:	6003      	str	r3, [r0, #0]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c504:	b112      	cbz	r2, 800c50c <_raise_r+0x1e>
 800c506:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c50a:	b94b      	cbnz	r3, 800c520 <_raise_r+0x32>
 800c50c:	4620      	mov	r0, r4
 800c50e:	f000 f831 	bl	800c574 <_getpid_r>
 800c512:	462a      	mov	r2, r5
 800c514:	4601      	mov	r1, r0
 800c516:	4620      	mov	r0, r4
 800c518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51c:	f000 b818 	b.w	800c550 <_kill_r>
 800c520:	2b01      	cmp	r3, #1
 800c522:	d00a      	beq.n	800c53a <_raise_r+0x4c>
 800c524:	1c59      	adds	r1, r3, #1
 800c526:	d103      	bne.n	800c530 <_raise_r+0x42>
 800c528:	2316      	movs	r3, #22
 800c52a:	6003      	str	r3, [r0, #0]
 800c52c:	2001      	movs	r0, #1
 800c52e:	e7e7      	b.n	800c500 <_raise_r+0x12>
 800c530:	2400      	movs	r4, #0
 800c532:	4628      	mov	r0, r5
 800c534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c538:	4798      	blx	r3
 800c53a:	2000      	movs	r0, #0
 800c53c:	e7e0      	b.n	800c500 <_raise_r+0x12>
	...

0800c540 <raise>:
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <raise+0xc>)
 800c542:	4601      	mov	r1, r0
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f7ff bfd2 	b.w	800c4ee <_raise_r>
 800c54a:	bf00      	nop
 800c54c:	20000188 	.word	0x20000188

0800c550 <_kill_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	2300      	movs	r3, #0
 800c554:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_kill_r+0x20>)
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	4611      	mov	r1, r2
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	f7f4 fbaa 	bl	8000cb6 <_kill>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d102      	bne.n	800c56c <_kill_r+0x1c>
 800c566:	682b      	ldr	r3, [r5, #0]
 800c568:	b103      	cbz	r3, 800c56c <_kill_r+0x1c>
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	bf00      	nop
 800c570:	2000252c 	.word	0x2000252c

0800c574 <_getpid_r>:
 800c574:	f7f4 bb98 	b.w	8000ca8 <_getpid>

0800c578 <_fstat_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	2300      	movs	r3, #0
 800c57c:	4d06      	ldr	r5, [pc, #24]	; (800c598 <_fstat_r+0x20>)
 800c57e:	4604      	mov	r4, r0
 800c580:	4608      	mov	r0, r1
 800c582:	4611      	mov	r1, r2
 800c584:	602b      	str	r3, [r5, #0]
 800c586:	f7f4 fbf4 	bl	8000d72 <_fstat>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	d102      	bne.n	800c594 <_fstat_r+0x1c>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	b103      	cbz	r3, 800c594 <_fstat_r+0x1c>
 800c592:	6023      	str	r3, [r4, #0]
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	2000252c 	.word	0x2000252c

0800c59c <_isatty_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4d05      	ldr	r5, [pc, #20]	; (800c5b8 <_isatty_r+0x1c>)
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	f7f4 fbf2 	bl	8000d90 <_isatty>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_isatty_r+0x1a>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_isatty_r+0x1a>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	2000252c 	.word	0x2000252c

0800c5bc <_malloc_usable_size_r>:
 800c5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c0:	1f18      	subs	r0, r3, #4
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfbc      	itt	lt
 800c5c6:	580b      	ldrlt	r3, [r1, r0]
 800c5c8:	18c0      	addlt	r0, r0, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_init>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr

0800c5d8 <_fini>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	bf00      	nop
 800c5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5de:	bc08      	pop	{r3}
 800c5e0:	469e      	mov	lr, r3
 800c5e2:	4770      	bx	lr
