
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b6bc  0800b6bc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b6bc  0800b6bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200001e8  0800b8ac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  0800b8ac  00021540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ca  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c006  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1bc  00000000  00000000  0005985e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f52  00000000  00000000  00073a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010696c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  001069bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b324 	.word	0x0800b324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b324 	.word	0x0800b324

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	69b9      	ldr	r1, [r7, #24]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	1a8a      	subs	r2, r1, r2
 800018a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1acb      	subs	r3, r1, r3
 8000194:	fbb2 f2f3 	udiv	r2, r2, r3
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4413      	add	r3, r2
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <delay_us>:

void delay_us(uint32_t us) {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <delay_us+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8f9      	bhi.n	80001ba <delay_us+0x12>
		;
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200002b0 	.word	0x200002b0

080001d8 <modeSoftStart>:

void modeSoftStart() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	if (sign == -1) {
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <modeSoftStart+0x7c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001e4:	d10e      	bne.n	8000204 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <modeSoftStart+0x80>)
 80001e8:	f003 fec6 	bl	8003f78 <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f001 f809 	bl	8001204 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f2:	2006      	movs	r0, #6
 80001f4:	f001 f941 	bl	800147a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f001 f93e 	bl	800147a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80001fe:	2008      	movs	r0, #8
 8000200:	f001 f93b 	bl	800147a <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <modeSoftStart+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d120      	bne.n	800024e <modeSoftStart+0x76>
		sign = 0;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <modeSoftStart+0x7c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000212:	2006      	movs	r0, #6
 8000214:	f001 f93f 	bl	8001496 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000218:	2007      	movs	r0, #7
 800021a:	f001 f93c 	bl	8001496 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800021e:	2008      	movs	r0, #8
 8000220:	f001 f939 	bl	8001496 <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <modeSoftStart+0x80>)
 8000226:	f003 fef9 	bl	800401c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <modeSoftStart+0x88>)
 8000232:	f001 fae6 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <modeSoftStart+0x88>)
 800023e:	f001 fae0 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <modeSoftStart+0x88>)
 800024a:	f001 fada 	bl	8001802 <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	200002f8 	.word	0x200002f8
 800025c:	20000210 	.word	0x20000210
 8000260:	40010c00 	.word	0x40010c00

08000264 <modeDOL>:

void modeDOL(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <modeDOL+0x34>)
 8000270:	f001 fac7 	bl	8001802 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <modeDOL+0x34>)
 800027c:	f001 fac1 	bl	8001802 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <modeDOL+0x34>)
 8000288:	f001 fabb 	bl	8001802 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f000 ffb9 	bl	8001204 <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <EXTI_Stop>:

void EXTI_Stop(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002a0:	2006      	movs	r0, #6
 80002a2:	f001 f8f8 	bl	8001496 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f001 f8f5 	bl	8001496 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f001 f8f2 	bl	8001496 <HAL_NVIC_DisableIRQ>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002bc:	f000 ff40 	bl	8001140 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c0:	f000 f866 	bl	8000390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c4:	f000 f9b4 	bl	8000630 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_I2C1_Init>
	MX_TIM1_Init();
 80002cc:	f000 f8e8 	bl	80004a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80002d0:	f000 f984 	bl	80005dc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002d4:	f000 f934 	bl	8000540 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002d8:	f008 fc3e 	bl	8008b58 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 80002dc:	f7ff ffde 	bl	800029c <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 80002e0:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0xbc>)
 80002e2:	f003 fdff 	bl	8003ee4 <HAL_TIM_Base_Start>
	counter = time * 100;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2264      	movs	r2, #100	; 0x64
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0xc4>)
 80002f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <main+0x5a>
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0xcc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d105      	bne.n	8000312 <main+0x5a>
			modeDOL();
 8000306:	f7ff ffad 	bl	8000264 <modeDOL>
			HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 ff7a 	bl	8001204 <HAL_Delay>
 8000310:	e02e      	b.n	8000370 <main+0xb8>
		}

		else if (mode == 2 && flag == 1) {
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d109      	bne.n	800032e <main+0x76>
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x76>
			modeSoftStart();
 8000322:	f7ff ff59 	bl	80001d8 <modeSoftStart>
			HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 ff6c 	bl	8001204 <HAL_Delay>
 800032c:	e020      	b.n	8000370 <main+0xb8>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xd0>)
 8000336:	f001 fa64 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xd0>)
 8000342:	f001 fa5e 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xd0>)
 800034e:	f001 fa58 	bl	8001802 <HAL_GPIO_WritePin>
			sign = -1;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0xd4>)
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0xc0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0xc4>)
 8000368:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 ff4a 	bl	8001204 <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000370:	e7c1      	b.n	80002f6 <main+0x3e>
 8000372:	bf00      	nop
 8000374:	200002b0 	.word	0x200002b0
 8000378:	20000004 	.word	0x20000004
 800037c:	20000210 	.word	0x20000210
 8000380:	20000254 	.word	0x20000254
 8000384:	20000258 	.word	0x20000258
 8000388:	40010c00 	.word	0x40010c00
 800038c:	20000000 	.word	0x20000000

08000390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 f8c0 	bl	8009524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 f85c 	bl	80034a4 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
		Error_Handler();
 80003f2:	f000 fb49 	bl	8000a88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fac8 	bl	80039a8 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
		Error_Handler();
 800041e:	f000 fb33 	bl	8000a88 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fc53 	bl	8003cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
		Error_Handler();
 8000438:	f000 fb26 	bl	8000a88 <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 fa07 	bl	8001894 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800048c:	f000 fafc 	bl	8000a88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000025c 	.word	0x2000025c
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_TIM1_Init+0x98>)
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x98>)
 80004c4:	2247      	movs	r2, #71	; 0x47
 80004c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_TIM1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ea:	f003 fcab 	bl	8003e44 <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80004f4:	f000 fac8 	bl	8000a88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM1_Init+0x98>)
 8000506:	f003 febf 	bl	8004288 <HAL_TIM_ConfigClockSource>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000510:	f000 faba 	bl	8000a88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x98>)
 8000522:	f004 f891 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800052c:	f000 faac 	bl	8000a88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002b0 	.word	0x200002b0
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000566:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800056a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f003 fc5c 	bl	8003e44 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000592:	f000 fa79 	bl	8000a88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f003 fe70 	bl	8004288 <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80005ae:	f000 fa6b 	bl	8000a88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f004 f842 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005ca:	f000 fa5d 	bl	8000a88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002f8 	.word	0x200002f8

080005dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f004 f888 	bl	8004728 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 fa33 	bl	8000a88 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000340 	.word	0x20000340
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x118>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MX_GPIO_Init+0x118>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x118>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x118>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x118>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x118>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_GPIO_Init+0x118>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_GPIO_Init+0x118>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0x118>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0x118>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0x118>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0x118>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_GPIO_Init+0x11c>)
 80006ac:	f001 f8a9 	bl	8001802 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x120>)
 80006b8:	f001 f8a3 	bl	8001802 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0x11c>)
 80006d6:	f000 fef9 	bl	80014cc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80006da:	2307      	movs	r3, #7
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ee:	f000 feed 	bl	80014cc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0x120>)
 800070c:	f000 fede 	bl	80014cc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2006      	movs	r0, #6
 8000716:	f000 fe94 	bl	8001442 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 fead 	bl	800147a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2007      	movs	r0, #7
 8000726:	f000 fe8c 	bl	8001442 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800072a:	2007      	movs	r0, #7
 800072c:	f000 fea5 	bl	800147a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fe84 	bl	8001442 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800073a:	2008      	movs	r0, #8
 800073c:	f000 fe9d 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10110000 	.word	0x10110000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]

	counter = counter - 10;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b0a      	subs	r3, #10
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076c:	6013      	str	r3, [r2, #0]
	delay1 = delay2 = delay3 = MAP(counter, 0, time * 100, 200, 2800);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	23c8      	movs	r3, #200	; 0xc8
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fcf2 	bl	8000170 <MAP>
 800078c:	4603      	mov	r3, r0
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007a0:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007a8:	f001 f843 	bl	8001832 <HAL_GPIO_TogglePin>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000210 	.word	0x20000210
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000020c 	.word	0x2000020c
 80007c0:	20000208 	.word	0x20000208
 80007c4:	20000204 	.word	0x20000204
 80007c8:	40011000 	.word	0x40011000

080007cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d169      	bne.n	80008b0 <HAL_GPIO_EXTI_Callback+0xe4>

		delay_us(delay1);
 80007dc:	4ba4      	ldr	r3, [pc, #656]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fce1 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 2800) {
 80007e6:	4ba2      	ldr	r3, [pc, #648]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	4ba2      	ldr	r3, [pc, #648]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	441a      	add	r2, r3
 80007f0:	4ba1      	ldr	r3, [pc, #644]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80007fa:	d205      	bcs.n	8000808 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000802:	489e      	ldr	r0, [pc, #632]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000804:	f000 fffd 	bl	8001802 <HAL_GPIO_WritePin>
		}
		if (delay1 + delay2 + delay3 < 5600
 8000808:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b99      	ldr	r3, [pc, #612]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	441a      	add	r2, r3
 8000812:	4b99      	ldr	r3, [pc, #612]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800081c:	d210      	bcs.n	8000840 <HAL_GPIO_EXTI_Callback+0x74>
				&& delay1 + delay2 + delay3 > 2800) {
 800081e:	4b94      	ldr	r3, [pc, #592]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b94      	ldr	r3, [pc, #592]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	441a      	add	r2, r3
 8000828:	4b93      	ldr	r3, [pc, #588]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4413      	add	r3, r2
 800082e:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000832:	d905      	bls.n	8000840 <HAL_GPIO_EXTI_Callback+0x74>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083a:	4890      	ldr	r0, [pc, #576]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800083c:	f000 ffe1 	bl	8001802 <HAL_GPIO_WritePin>
		}
		if (delay1 + delay2 + delay3 < 8400
 8000840:	4b8b      	ldr	r3, [pc, #556]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b8b      	ldr	r3, [pc, #556]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	441a      	add	r2, r3
 800084a:	4b8b      	ldr	r3, [pc, #556]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000854:	4293      	cmp	r3, r2
 8000856:	d810      	bhi.n	800087a <HAL_GPIO_EXTI_Callback+0xae>
				&& delay1 + delay2 + delay3 > 5600) {
 8000858:	4b85      	ldr	r3, [pc, #532]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b85      	ldr	r3, [pc, #532]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	441a      	add	r2, r3
 8000862:	4b85      	ldr	r3, [pc, #532]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800086c:	d905      	bls.n	800087a <HAL_GPIO_EXTI_Callback+0xae>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000874:	4881      	ldr	r0, [pc, #516]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000876:	f000 ffc4 	bl	8001802 <HAL_GPIO_WritePin>
		}
		delay_us(50);
 800087a:	2032      	movs	r0, #50	; 0x32
 800087c:	f7ff fc94 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000880:	4b7f      	ldr	r3, [pc, #508]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 80ef 	beq.w	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	487a      	ldr	r0, [pc, #488]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000892:	f000 ffb6 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089c:	4877      	ldr	r0, [pc, #476]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800089e:	f000 ffb0 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a8:	4874      	ldr	r0, [pc, #464]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80008aa:	f000 ffaa 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}
 80008ae:	e0db      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
	else if (GPIO_Pin == GPIO_PIN_1) {
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d169      	bne.n	800098a <HAL_GPIO_EXTI_Callback+0x1be>
		delay_us(delay2);
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc74 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 8400
 80008c0:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	441a      	add	r2, r3
 80008ca:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d810      	bhi.n	80008fa <HAL_GPIO_EXTI_Callback+0x12e>
				&& delay1 + delay2 + delay3 > 5600) {
 80008d8:	4b65      	ldr	r3, [pc, #404]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	441a      	add	r2, r3
 80008e2:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 80008ec:	d905      	bls.n	80008fa <HAL_GPIO_EXTI_Callback+0x12e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	4861      	ldr	r0, [pc, #388]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80008f6:	f000 ff84 	bl	8001802 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 2800) {
 80008fa:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	441a      	add	r2, r3
 8000904:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800090e:	d205      	bcs.n	800091c <HAL_GPIO_EXTI_Callback+0x150>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	4859      	ldr	r0, [pc, #356]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000918:	f000 ff73 	bl	8001802 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 5600
 800091c:	4b54      	ldr	r3, [pc, #336]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	441a      	add	r2, r3
 8000926:	4b54      	ldr	r3, [pc, #336]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 8000930:	d210      	bcs.n	8000954 <HAL_GPIO_EXTI_Callback+0x188>
				&& delay1 + delay2 + delay3 > 2800) {
 8000932:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	441a      	add	r2, r3
 800093c:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4413      	add	r3, r2
 8000942:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000946:	d905      	bls.n	8000954 <HAL_GPIO_EXTI_Callback+0x188>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094e:	484b      	ldr	r0, [pc, #300]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000950:	f000 ff57 	bl	8001802 <HAL_GPIO_WritePin>
		delay_us(50);
 8000954:	2032      	movs	r0, #50	; 0x32
 8000956:	f7ff fc27 	bl	80001a8 <delay_us>
		if (counter > 0) {
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8082 	beq.w	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096a:	4844      	ldr	r0, [pc, #272]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800096c:	f000 ff49 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4841      	ldr	r0, [pc, #260]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000978:	f000 ff43 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	483e      	ldr	r0, [pc, #248]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000984:	f000 ff3d 	bl	8001802 <HAL_GPIO_WritePin>
}
 8000988:	e06e      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 800098a:	2104      	movs	r1, #4
 800098c:	483d      	ldr	r0, [pc, #244]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800098e:	f000 ff21 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d067      	beq.n	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
		delay_us(delay3);
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc03 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 < 5600
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	441a      	add	r2, r3
 80009ac:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 80009b6:	d210      	bcs.n	80009da <HAL_GPIO_EXTI_Callback+0x20e>
				&& delay1 + delay2 + delay3 > 2800) {
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	441a      	add	r2, r3
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80009cc:	d905      	bls.n	80009da <HAL_GPIO_EXTI_Callback+0x20e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	4829      	ldr	r0, [pc, #164]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009d6:	f000 ff14 	bl	8001802 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 8400
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	441a      	add	r2, r3
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d810      	bhi.n	8000a14 <HAL_GPIO_EXTI_Callback+0x248>
				&& delay1 + delay2 + delay3 > 5600) {
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	441a      	add	r2, r3
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 8000a06:	d905      	bls.n	8000a14 <HAL_GPIO_EXTI_Callback+0x248>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	481b      	ldr	r0, [pc, #108]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a10:	f000 fef7 	bl	8001802 <HAL_GPIO_WritePin>
		if (delay1 + delay2 + delay3 < 2800) {
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	441a      	add	r2, r3
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000a28:	d205      	bcs.n	8000a36 <HAL_GPIO_EXTI_Callback+0x26a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a32:	f000 fee6 	bl	8001802 <HAL_GPIO_WritePin>
		delay_us(50);
 8000a36:	2032      	movs	r0, #50	; 0x32
 8000a38:	f7ff fbb6 	bl	80001a8 <delay_us>
		if (counter > 0) {
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d011      	beq.n	8000a68 <HAL_GPIO_EXTI_Callback+0x29c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a4c:	f000 fed9 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a58:	f000 fed3 	bl	8001802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a64:	f000 fecd 	bl	8001802 <HAL_GPIO_WritePin>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000204 	.word	0x20000204
 8000a74:	20000208 	.word	0x20000208
 8000a78:	2000020c 	.word	0x2000020c
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	20000210 	.word	0x20000210
 8000a84:	40011000 	.word	0x40011000

08000a88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x60>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_MspInit+0x60>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <HAL_I2C_MspInit+0x70>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d123      	bne.n	8000b60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b30:	23c0      	movs	r3, #192	; 0xc0
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <HAL_I2C_MspInit+0x78>)
 8000b44:	f000 fcc2 	bl	80014cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_I2C_MspInit+0x74>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010c00 	.word	0x40010c00

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10c      	bne.n	8000ba0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	e018      	b.n	8000bd2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba8:	d113      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201c      	movs	r0, #28
 8000bc8:	f000 fc3b 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bcc:	201c      	movs	r0, #28
 8000bce:	f000 fc54 	bl	800147a <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40012c00 	.word	0x40012c00
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c4a:	f000 fc3f 	bl	80014cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c64:	f000 fc32 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 fa83 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fdc8 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f000 fdc1 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000cea:	2004      	movs	r0, #4
 8000cec:	f000 fdba 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cfa:	f001 f840 	bl	8001d7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20001024 	.word	0x20001024

08000d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM2_IRQHandler+0x10>)
 8000d0e:	f003 f9b3 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200002f8 	.word	0x200002f8

08000d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <_kill>:

int _kill(int pid, int sig)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d34:	f008 fbbe 	bl	80094b4 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2216      	movs	r2, #22
 8000d3c:	601a      	str	r2, [r3, #0]
	return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_exit>:

void _exit (int status)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffe7 	bl	8000d2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d5c:	e7fe      	b.n	8000d5c <_exit+0x12>

08000d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e00a      	b.n	8000d86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d70:	f3af 8000 	nop.w
 8000d74:	4601      	mov	r1, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	60ba      	str	r2, [r7, #8]
 8000d7c:	b2ca      	uxtb	r2, r1
 8000d7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbf0      	blt.n	8000d70 <_read+0x12>
	}

return len;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e009      	b.n	8000dbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	60ba      	str	r2, [r7, #8]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf1      	blt.n	8000daa <_write+0x12>
	}
	return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_close>:

int _close(int file)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	return -1;
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df6:	605a      	str	r2, [r3, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <_isatty>:

int _isatty(int file)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f008 fb28 	bl	80094b4 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20005000 	.word	0x20005000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	20000384 	.word	0x20000384
 8000e98:	20001540 	.word	0x20001540

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000ea8:	b40f      	push	{r0, r1, r2, r3}
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b0c2      	sub	sp, #264	; 0x108
 8000eae:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000eb0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000eb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ebe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000ec2:	21fe      	movs	r1, #254	; 0xfe
 8000ec4:	f008 fc2e 	bl	8009724 <vsniprintf>
 8000ec8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dd0c      	ble.n	8000eee <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ed8:	2bfe      	cmp	r3, #254	; 0xfe
 8000eda:	bfa8      	it	ge
 8000edc:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f007 ff05 	bl	8008cf8 <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000eee:	bf00      	nop
 8000ef0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000efa:	b004      	add	sp, #16
 8000efc:	4770      	bx	lr
	...

08000f00 <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0c4      	sub	sp, #272	; 0x110
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f0e:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f1e:	4962      	ldr	r1, [pc, #392]	; (80010a8 <terminal_proses+0x1a8>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f008 fb77 	bl	8009614 <strtok>
 8000f26:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000f2a:	e012      	b.n	8000f52 <terminal_proses+0x52>
		argv[argc++] = p2;
 8000f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000f36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f3a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000f3e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000f46:	4958      	ldr	r1, [pc, #352]	; (80010a8 <terminal_proses+0x1a8>)
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f008 fb63 	bl	8009614 <strtok>
 8000f4e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <terminal_proses+0x62>
 8000f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f60:	dde4      	ble.n	8000f2c <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000f6a:	4850      	ldr	r0, [pc, #320]	; (80010ac <terminal_proses+0x1ac>)
 8000f6c:	f7ff ff9c 	bl	8000ea8 <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000f70:	e094      	b.n	800109c <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000f72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	494c      	ldr	r1, [pc, #304]	; (80010b0 <terminal_proses+0x1b0>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f8e4 	bl	800014c <strcmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <terminal_proses+0x1b4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4849      	ldr	r0, [pc, #292]	; (80010b8 <terminal_proses+0x1b8>)
 8000f92:	f7ff ff89 	bl	8000ea8 <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <terminal_proses+0x1bc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4848      	ldr	r0, [pc, #288]	; (80010c0 <terminal_proses+0x1c0>)
 8000f9e:	f7ff ff83 	bl	8000ea8 <command_printf>
}
 8000fa2:	e07b      	b.n	800109c <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000fa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4945      	ldr	r1, [pc, #276]	; (80010c4 <terminal_proses+0x1c4>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f8cb 	bl	800014c <strcmp>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10c      	bne.n	8000fd6 <terminal_proses+0xd6>
		flag = 0;
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <terminal_proses+0x1c8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4840      	ldr	r0, [pc, #256]	; (80010cc <terminal_proses+0x1cc>)
 8000fca:	f000 fc1a 	bl	8001802 <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000fce:	4840      	ldr	r0, [pc, #256]	; (80010d0 <terminal_proses+0x1d0>)
 8000fd0:	f7ff ff6a 	bl	8000ea8 <command_printf>
}
 8000fd4:	e062      	b.n	800109c <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000fd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	493c      	ldr	r1, [pc, #240]	; (80010d4 <terminal_proses+0x1d4>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8b2 	bl	800014c <strcmp>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <terminal_proses+0x108>
		flag = 1;
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <terminal_proses+0x1c8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	4834      	ldr	r0, [pc, #208]	; (80010cc <terminal_proses+0x1cc>)
 8000ffc:	f000 fc01 	bl	8001802 <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8001000:	4835      	ldr	r0, [pc, #212]	; (80010d8 <terminal_proses+0x1d8>)
 8001002:	f7ff ff51 	bl	8000ea8 <command_printf>
}
 8001006:	e049      	b.n	800109c <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8001008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4932      	ldr	r1, [pc, #200]	; (80010dc <terminal_proses+0x1dc>)
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f899 	bl	800014c <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d11d      	bne.n	800105c <terminal_proses+0x15c>
		if (argc == 2) {
 8001020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001024:	2b02      	cmp	r3, #2
 8001026:	d109      	bne.n	800103c <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8001028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800102c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <terminal_proses+0x1b4>)
 8001034:	492a      	ldr	r1, [pc, #168]	; (80010e0 <terminal_proses+0x1e0>)
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fa7c 	bl	8009534 <siscanf>
		if (mode == 1) {
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <terminal_proses+0x1b4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d103      	bne.n	800104c <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <terminal_proses+0x1e4>)
 8001046:	f7ff ff2f 	bl	8000ea8 <command_printf>
}
 800104a:	e027      	b.n	800109c <terminal_proses+0x19c>
		} else if (mode == 2) {
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <terminal_proses+0x1b4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8001054:	4824      	ldr	r0, [pc, #144]	; (80010e8 <terminal_proses+0x1e8>)
 8001056:	f7ff ff27 	bl	8000ea8 <command_printf>
}
 800105a:	e01f      	b.n	800109c <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 800105c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4921      	ldr	r1, [pc, #132]	; (80010ec <terminal_proses+0x1ec>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f86f 	bl	800014c <strcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d113      	bne.n	800109c <terminal_proses+0x19c>
		if (argc == 2) {
 8001074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001078:	2b02      	cmp	r3, #2
 800107a:	d10f      	bne.n	800109c <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 800107c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <terminal_proses+0x1bc>)
 8001088:	4915      	ldr	r1, [pc, #84]	; (80010e0 <terminal_proses+0x1e0>)
 800108a:	4618      	mov	r0, r3
 800108c:	f008 fa52 	bl	8009534 <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <terminal_proses+0x1bc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <terminal_proses+0x1f0>)
 8001098:	f7ff ff06 	bl	8000ea8 <command_printf>
}
 800109c:	bf00      	nop
 800109e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800b33c 	.word	0x0800b33c
 80010ac:	0800b340 	.word	0x0800b340
 80010b0:	0800b354 	.word	0x0800b354
 80010b4:	20000254 	.word	0x20000254
 80010b8:	0800b35c 	.word	0x0800b35c
 80010bc:	20000004 	.word	0x20000004
 80010c0:	0800b368 	.word	0x0800b368
 80010c4:	0800b374 	.word	0x0800b374
 80010c8:	20000258 	.word	0x20000258
 80010cc:	40011000 	.word	0x40011000
 80010d0:	0800b378 	.word	0x0800b378
 80010d4:	0800b380 	.word	0x0800b380
 80010d8:	0800b384 	.word	0x0800b384
 80010dc:	0800b388 	.word	0x0800b388
 80010e0:	0800b390 	.word	0x0800b390
 80010e4:	0800b394 	.word	0x0800b394
 80010e8:	0800b3a0 	.word	0x0800b3a0
 80010ec:	0800b3b4 	.word	0x0800b3b4
 80010f0:	0800b3c0 	.word	0x0800b3c0

080010f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111a:	f7ff febf 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f008 f9cf 	bl	80094c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff f8c9 	bl	80002b8 <main>
  bx lr
 8001126:	4770      	bx	lr
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001130:	0800b6c4 	.word	0x0800b6c4
  ldr r2, =_sbss
 8001134:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001138:	20001540 	.word	0x20001540

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x28>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f96b 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fc9a 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f991 	bl	80014b2 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f94b 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000010 	.word	0x20000010
 80011c8:	2000000c 	.word	0x2000000c

080011cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x1c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x20>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_IncTick+0x20>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000010 	.word	0x20000010
 80011ec:	20000388 	.word	0x20000388

080011f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_GetTick+0x10>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000388 	.word	0x20000388

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fff0 	bl	80011f0 <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffe0 	bl	80011f0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000010 	.word	0x20000010

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <__NVIC_EnableIRQ+0x34>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db12      	blt.n	8001320 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	490a      	ldr	r1, [pc, #40]	; (800132c <__NVIC_DisableIRQ+0x44>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	3320      	adds	r3, #32
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001314:	f3bf 8f4f 	dsb	sy
}
 8001318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131a:	f3bf 8f6f 	isb	sy
}
 800131e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff90 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff09 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff1e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff11 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff1f 	bl	80012e8 <__NVIC_DisableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff94 	bl	80013e8 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e169      	b.n	80017b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e0:	2201      	movs	r2, #1
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8158 	bne.w	80017ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a9a      	ldr	r2, [pc, #616]	; (800176c <HAL_GPIO_Init+0x2a0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001508:	4a98      	ldr	r2, [pc, #608]	; (800176c <HAL_GPIO_Init+0x2a0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d875      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800150e:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d058      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001514:	4a96      	ldr	r2, [pc, #600]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d86f      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800151a:	4a96      	ldr	r2, [pc, #600]	; (8001774 <HAL_GPIO_Init+0x2a8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d052      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001520:	4a94      	ldr	r2, [pc, #592]	; (8001774 <HAL_GPIO_Init+0x2a8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d869      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001526:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04c      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 800152c:	4a92      	ldr	r2, [pc, #584]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d863      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001532:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_GPIO_Init+0x2b0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d046      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001538:	4a90      	ldr	r2, [pc, #576]	; (800177c <HAL_GPIO_Init+0x2b0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d85d      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d82a      	bhi.n	8001598 <HAL_GPIO_Init+0xcc>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d859      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <HAL_GPIO_Init+0x80>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015a1 	.word	0x080015a1
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015f5 	.word	0x080015f5
 800155c:	080015fb 	.word	0x080015fb
 8001560:	080015fb 	.word	0x080015fb
 8001564:	080015fb 	.word	0x080015fb
 8001568:	080015fb 	.word	0x080015fb
 800156c:	080015fb 	.word	0x080015fb
 8001570:	080015fb 	.word	0x080015fb
 8001574:	080015fb 	.word	0x080015fb
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015fb 	.word	0x080015fb
 8001588:	080015fb 	.word	0x080015fb
 800158c:	080015fb 	.word	0x080015fb
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	4a79      	ldr	r2, [pc, #484]	; (8001780 <HAL_GPIO_Init+0x2b4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e029      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e024      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01f      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e01a      	b.n	80015fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e013      	b.n	80015fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e009      	b.n	80015fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e003      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x130>
          break;
 80015fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d801      	bhi.n	8001606 <HAL_GPIO_Init+0x13a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_GPIO_Init+0x13e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d802      	bhi.n	8001618 <HAL_GPIO_Init+0x14c>
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x152>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	3b08      	subs	r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	210f      	movs	r1, #15
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80b1 	beq.w	80017ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001664:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x2bc>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_GPIO_Init+0x2c0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_GPIO_Init+0x2c4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1e8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_GPIO_Init+0x2cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1e0>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b8:	2300      	movs	r3, #0
 80016ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ca:	492f      	ldr	r1, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x2bc>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	492c      	ldr	r1, [pc, #176]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4928      	ldr	r1, [pc, #160]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4922      	ldr	r1, [pc, #136]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	491e      	ldr	r1, [pc, #120]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4914      	ldr	r1, [pc, #80]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e021      	b.n	80017ae <HAL_GPIO_Init+0x2e2>
 800176a:	bf00      	nop
 800176c:	10320000 	.word	0x10320000
 8001770:	10310000 	.word	0x10310000
 8001774:	10220000 	.word	0x10220000
 8001778:	10210000 	.word	0x10210000
 800177c:	10120000 	.word	0x10120000
 8001780:	10110000 	.word	0x10110000
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	40010800 	.word	0x40010800
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40011000 	.word	0x40011000
 8001798:	40011400 	.word	0x40011400
 800179c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_GPIO_Init+0x304>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4909      	ldr	r1, [pc, #36]	; (80017d0 <HAL_GPIO_Init+0x304>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f ae8e 	bne.w	80014e0 <HAL_GPIO_Init+0x14>
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	372c      	adds	r7, #44	; 0x2c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181e:	e003      	b.n	8001828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	041a      	lsls	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43d9      	mvns	r1, r3
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	400b      	ands	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe ffa2 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e12b      	b.n	8001afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff f91c 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f8:	f002 f9a8 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 80018fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a81      	ldr	r2, [pc, #516]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d807      	bhi.n	8001918 <HAL_I2C_Init+0x84>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a80      	ldr	r2, [pc, #512]	; (8001b0c <HAL_I2C_Init+0x278>)
 800190c:	4293      	cmp	r3, r2
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e006      	b.n	8001926 <HAL_I2C_Init+0x92>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a7d      	ldr	r2, [pc, #500]	; (8001b10 <HAL_I2C_Init+0x27c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	bf94      	ite	ls
 8001920:	2301      	movls	r3, #1
 8001922:	2300      	movhi	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0e7      	b.n	8001afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a78      	ldr	r2, [pc, #480]	; (8001b14 <HAL_I2C_Init+0x280>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <HAL_I2C_Init+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d802      	bhi.n	8001968 <HAL_I2C_Init+0xd4>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	e009      	b.n	800197c <HAL_I2C_Init+0xe8>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4a69      	ldr	r2, [pc, #420]	; (8001b18 <HAL_I2C_Init+0x284>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	3301      	adds	r3, #1
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800198e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	495c      	ldr	r1, [pc, #368]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001998:	428b      	cmp	r3, r1
 800199a:	d819      	bhi.n	80019d0 <HAL_I2C_Init+0x13c>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e59      	subs	r1, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b0:	400b      	ands	r3, r1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00a      	beq.n	80019cc <HAL_I2C_Init+0x138>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e59      	subs	r1, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	e051      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019cc:	2304      	movs	r3, #4
 80019ce:	e04f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <HAL_I2C_Init+0x168>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	440b      	add	r3, r1
 80019e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e012      	b.n	8001a22 <HAL_I2C_Init+0x18e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	0099      	lsls	r1, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Init+0x196>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e022      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10e      	bne.n	8001a50 <HAL_I2C_Init+0x1bc>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	e00f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6911      	ldr	r1, [r2, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	000186a0 	.word	0x000186a0
 8001b0c:	001e847f 	.word	0x001e847f
 8001b10:	003d08ff 	.word	0x003d08ff
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	10624dd3 	.word	0x10624dd3

08001b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af06      	add	r7, sp, #24
 8001b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0fd      	b.n	8001d2a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f007 fa0c 	bl	8008f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fee9 	bl	800492c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	687e      	ldr	r6, [r7, #4]
 8001b62:	466d      	mov	r5, sp
 8001b64:	f106 0410 	add.w	r4, r6, #16
 8001b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	1d33      	adds	r3, r6, #4
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f002 feb3 	bl	80048e0 <USB_CoreInit>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ce      	b.n	8001d2a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fee4 	bl	8004960 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e04c      	b.n	8001c38 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3301      	adds	r3, #1
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3336      	adds	r3, #54	; 0x36
 8001bdc:	4602      	mov	r2, r0
 8001bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3338      	adds	r3, #56	; 0x38
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	333c      	adds	r3, #60	; 0x3c
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3340      	adds	r3, #64	; 0x40
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3ad      	bcc.n	8001b9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e044      	b.n	8001cd2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3b5      	bcc.n	8001c48 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	687e      	ldr	r6, [r7, #4]
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	1d33      	adds	r3, r6, #4
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f002 fe3e 	bl	8004978 <USB_DevInit>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00d      	b.n	8001d2a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 faf0 	bl	8007308 <USB_DevDisconnect>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_Start+0x16>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e016      	b.n	8001d76 <HAL_PCD_Start+0x44>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 fdd3 	bl	8004900 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f007 fb72 	bl	8009446 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fac4 	bl	80072f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b088      	sub	sp, #32
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f005 fac6 	bl	800731c <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fb5f 	bl	8002460 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 fab8 	bl	800731c <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d112      	bne.n	8001dde <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f007 f940 	bl	8009056 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f923 	bl	8002024 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fa9a 	bl	800731c <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df2:	d10b      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e06:	b292      	uxth	r2, r2
 8001e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f005 fa83 	bl	800731c <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e20:	d10b      	bne.n	8001e3a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e34:	b292      	uxth	r2, r2
 8001e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 fa6c 	bl	800731c <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	d126      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0208 	bic.w	r2, r2, #8
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f007 f921 	bl	80090c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f005 fa3a 	bl	800731c <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb2:	f040 8082 	bne.w	8001fba <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	77fb      	strb	r3, [r7, #31]
 8001eba:	e010      	b.n	8001ede <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	8812      	ldrh	r2, [r2, #0]
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	3320      	adds	r3, #32
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	3301      	adds	r3, #1
 8001edc:	77fb      	strb	r3, [r7, #31]
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	d9eb      	bls.n	8001ebc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f14:	bf00      	nop
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f6      	beq.n	8001f16 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	77fb      	strb	r3, [r7, #31]
 8001f44:	e00f      	b.n	8001f66 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	7ffa      	ldrb	r2, [r7, #31]
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	440a      	add	r2, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	3320      	adds	r3, #32
 8001f58:	443b      	add	r3, r7
 8001f5a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	3301      	adds	r3, #1
 8001f64:	77fb      	strb	r3, [r7, #31]
 8001f66:	7ffb      	ldrb	r3, [r7, #31]
 8001f68:	2b07      	cmp	r3, #7
 8001f6a:	d9ec      	bls.n	8001f46 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0208 	orr.w	r2, r2, #8
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0204 	orr.w	r2, r2, #4
 8001fae:	b292      	uxth	r2, r2
 8001fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f007 f86d 	bl	8009094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 f9ac 	bl	800731c <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fce:	d10e      	bne.n	8001fee <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f007 f826 	bl	800903a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 f992 	bl	800731c <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002002:	d10b      	bne.n	800201c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002016:	b292      	uxth	r2, r2
 8002018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_SetAddress+0x1a>
 800203a:	2302      	movs	r3, #2
 800203c:	e013      	b.n	8002066 <HAL_PCD_SetAddress+0x42>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f005 f939 	bl	80072ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	4608      	mov	r0, r1
 8002078:	4611      	mov	r1, r2
 800207a:	461a      	mov	r2, r3
 800207c:	4603      	mov	r3, r0
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	460b      	mov	r3, r1
 8002082:	803b      	strh	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800208c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da0e      	bge.n	80020b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	705a      	strb	r2, [r3, #1]
 80020b0:	e00e      	b.n	80020d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0207 	and.w	r2, r3, #7
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020dc:	883a      	ldrh	r2, [r7, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	78ba      	ldrb	r2, [r7, #2]
 80020e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020fa:	78bb      	ldrb	r3, [r7, #2]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d102      	bne.n	8002106 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_EP_Open+0xa6>
 8002110:	2302      	movs	r3, #2
 8002112:	e00e      	b.n	8002132 <HAL_PCD_EP_Open+0xc4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fc48 	bl	80049b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002130:	7afb      	ldrb	r3, [r7, #11]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da0e      	bge.n	800216c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	705a      	strb	r2, [r3, #1]
 800216a:	e00e      	b.n	800218a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 0207 	and.w	r2, r3, #7
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_PCD_EP_Close+0x6a>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e00e      	b.n	80021c2 <HAL_PCD_EP_Close+0x88>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 ff6a 	bl	800508c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	460b      	mov	r3, r1
 80021d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 0207 	and.w	r2, r3, #7
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2200      	movs	r2, #0
 8002208:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b2da      	uxtb	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6979      	ldr	r1, [r7, #20]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 f91c 	bl	8005464 <USB_EPStartXfer>
 800222c:	e005      	b.n	800223a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6979      	ldr	r1, [r7, #20]
 8002234:	4618      	mov	r0, r3
 8002236:	f003 f915 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	460b      	mov	r3, r1
 8002280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002282:	7afb      	ldrb	r3, [r7, #11]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6979      	ldr	r1, [r7, #20]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 f8c2 	bl	8005464 <USB_EPStartXfer>
 80022e0:	e005      	b.n	80022ee <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6979      	ldr	r1, [r7, #20]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f8bb 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d901      	bls.n	8002316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e04c      	b.n	80023b0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0e      	bge.n	800233c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	705a      	strb	r2, [r3, #1]
 800233a:	e00c      	b.n	8002356 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_SetStall+0x7e>
 8002372:	2302      	movs	r3, #2
 8002374:	e01c      	b.n	80023b0 <HAL_PCD_EP_SetStall+0xb8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fea5 	bl	80070d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f004 ffca 	bl	800733a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d901      	bls.n	80023d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e040      	b.n	8002458 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da0e      	bge.n	80023fc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	705a      	strb	r2, [r3, #1]
 80023fa:	e00e      	b.n	800241a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0207 	and.w	r2, r3, #7
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_PCD_EP_ClrStall+0x82>
 8002436:	2302      	movs	r3, #2
 8002438:	e00e      	b.n	8002458 <HAL_PCD_EP_ClrStall+0xa0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 fe93 	bl	8007174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002468:	e2ec      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002472:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002474:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 8161 	bne.w	800274c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d152      	bne.n	800253a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a4:	81fb      	strh	r3, [r7, #14]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3328      	adds	r3, #40	; 0x28
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	3302      	adds	r3, #2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	441a      	add	r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f006 fd83 	bl	8009006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 829b 	beq.w	8002a44 <PCD_EP_ISR_Handler+0x5e4>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8296 	bne.w	8002a44 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002524:	b2da      	uxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002538:	e284      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800254c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002550:	2b00      	cmp	r3, #0
 8002552:	d034      	beq.n	80025be <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	3306      	adds	r3, #6
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002592:	b29b      	uxth	r3, r3
 8002594:	f004 ff21 	bl	80073da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a4:	4013      	ands	r3, r2
 80025a6:	823b      	strh	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8a3a      	ldrh	r2, [r7, #16]
 80025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f006 fcf8 	bl	8008fac <HAL_PCD_SetupStageCallback>
 80025bc:	e242      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f280 823e 	bge.w	8002a44 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d4:	4013      	ands	r3, r2
 80025d6:	83bb      	strh	r3, [r7, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	8bba      	ldrh	r2, [r7, #28]
 80025de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e2:	b292      	uxth	r2, r2
 80025e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	3306      	adds	r3, #6
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d019      	beq.n	800264e <PCD_EP_ISR_Handler+0x1ee>
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002632:	b29b      	uxth	r3, r3
 8002634:	f004 fed1 	bl	80073da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	441a      	add	r2, r3
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002646:	2100      	movs	r1, #0
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f006 fcc1 	bl	8008fd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 81f2 	bne.w	8002a44 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4413      	add	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d112      	bne.n	80026ae <PCD_EP_ISR_Handler+0x24e>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002692:	b29a      	uxth	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e02f      	b.n	800270e <PCD_EP_ISR_Handler+0x2ae>
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b3e      	cmp	r3, #62	; 0x3e
 80026b4:	d813      	bhi.n	80026de <PCD_EP_ISR_Handler+0x27e>
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <PCD_EP_ISR_Handler+0x270>
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	3301      	adds	r3, #1
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	e017      	b.n	800270e <PCD_EP_ISR_Handler+0x2ae>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <PCD_EP_ISR_Handler+0x298>
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	3b01      	subs	r3, #1
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	b29b      	uxth	r3, r3
 8002700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002708:	b29a      	uxth	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	827b      	strh	r3, [r7, #18]
 8002720:	8a7b      	ldrh	r3, [r7, #18]
 8002722:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002726:	827b      	strh	r3, [r7, #18]
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800272e:	827b      	strh	r3, [r7, #18]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	8a7b      	ldrh	r3, [r7, #18]
 8002736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800273a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002746:	b29b      	uxth	r3, r3
 8002748:	8013      	strh	r3, [r2, #0]
 800274a:	e17b      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800275e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002762:	2b00      	cmp	r3, #0
 8002764:	f280 80ea 	bge.w	800293c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800277e:	4013      	ands	r3, r2
 8002780:	853b      	strh	r3, [r7, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002796:	b292      	uxth	r2, r2
 8002798:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800279a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	7b1b      	ldrb	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d122      	bne.n	80027fe <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	3306      	adds	r3, #6
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8087 	beq.w	80028f8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	6959      	ldr	r1, [r3, #20]
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	88da      	ldrh	r2, [r3, #6]
 80027f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027f8:	f004 fdef 	bl	80073da <USB_ReadPMA>
 80027fc:	e07c      	b.n	80028f8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d108      	bne.n	8002818 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002808:	461a      	mov	r2, r3
 800280a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f927 	bl	8002a60 <HAL_PCD_EP_DB_Receive>
 8002812:	4603      	mov	r3, r0
 8002814:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002816:	e06f      	b.n	80028f8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	847b      	strh	r3, [r7, #34]	; 0x22
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d021      	beq.n	80028b6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	3302      	adds	r3, #2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800289c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02a      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	6959      	ldr	r1, [r3, #20]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	891a      	ldrh	r2, [r3, #8]
 80028ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b0:	f004 fd93 	bl	80073da <USB_ReadPMA>
 80028b4:	e020      	b.n	80028f8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	3306      	adds	r3, #6
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	895a      	ldrh	r2, [r3, #10]
 80028f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f4:	f004 fd71 	bl	80073da <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028fe:	441a      	add	r2, r3
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800290a:	441a      	add	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <PCD_EP_ISR_Handler+0x4c2>
 8002918:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	429a      	cmp	r2, r3
 8002920:	d206      	bcs.n	8002930 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f006 fb51 	bl	8008fd0 <HAL_PCD_DataOutStageCallback>
 800292e:	e005      	b.n	800293c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fd94 	bl	8005464 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800293c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07e      	beq.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002946:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	843b      	strh	r3, [r7, #32]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	8c3b      	ldrh	r3, [r7, #32]
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	78db      	ldrb	r3, [r3, #3]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d00c      	beq.n	80029b4 <PCD_EP_ISR_Handler+0x554>
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d146      	bne.n	8002a38 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d141      	bne.n	8002a38 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	3302      	adds	r3, #2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029dc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	8bfb      	ldrh	r3, [r7, #30]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d906      	bls.n	80029f6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	e002      	b.n	80029fc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f006 fafb 	bl	8009006 <HAL_PCD_DataInStageCallback>
 8002a10:	e018      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	441a      	add	r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	441a      	add	r2, r3
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fd17 	bl	8005464 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a36:	e005      	b.n	8002a44 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f91b 	bl	8002c7a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f6ff ad0a 	blt.w	800246a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3738      	adds	r7, #56	; 0x38
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07e      	beq.n	8002b76 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	8b7b      	ldrh	r3, [r7, #26]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d306      	bcc.n	8002aba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	8b7b      	ldrh	r3, [r7, #26]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	e002      	b.n	8002ac0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d123      	bne.n	8002b10 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	833b      	strh	r3, [r7, #24]
 8002ae4:	8b3b      	ldrh	r3, [r7, #24]
 8002ae6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aea:	833b      	strh	r3, [r7, #24]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	8b3b      	ldrh	r3, [r7, #24]
 8002afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01f      	beq.n	8002b5a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	82fb      	strh	r3, [r7, #22]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	8afb      	ldrh	r3, [r7, #22]
 8002b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8087 	beq.w	8002c70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6959      	ldr	r1, [r3, #20]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	891a      	ldrh	r2, [r3, #8]
 8002b6e:	8b7b      	ldrh	r3, [r7, #26]
 8002b70:	f004 fc33 	bl	80073da <USB_ReadPMA>
 8002b74:	e07c      	b.n	8002c70 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3306      	adds	r3, #6
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d306      	bcc.n	8002bb8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	8b7b      	ldrh	r3, [r7, #26]
 8002bb0:	1ad2      	subs	r2, r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	619a      	str	r2, [r3, #24]
 8002bb6:	e002      	b.n	8002bbe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d123      	bne.n	8002c0e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	83fb      	strh	r3, [r7, #30]
 8002be2:	8bfb      	ldrh	r3, [r7, #30]
 8002be4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be8:	83fb      	strh	r3, [r7, #30]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	441a      	add	r2, r3
 8002bf8:	8bfb      	ldrh	r3, [r7, #30]
 8002bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11f      	bne.n	8002c58 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	83bb      	strh	r3, [r7, #28]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	8bbb      	ldrh	r3, [r7, #28]
 8002c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c58:	8b7b      	ldrh	r3, [r7, #26]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6959      	ldr	r1, [r3, #20]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	895a      	ldrh	r2, [r3, #10]
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	f004 fbb5 	bl	80073da <USB_ReadPMA>
    }
  }

  return count;
 8002c70:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b0a2      	sub	sp, #136	; 0x88
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 81c7 	beq.w	8003022 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d907      	bls.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd4:	1ad2      	subs	r2, r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	619a      	str	r2, [r3, #24]
 8002cda:	e002      	b.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80b9 	bne.w	8002e5e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d126      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	4413      	add	r3, r2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	011a      	lsls	r2, r3, #4
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	4413      	add	r3, r2
 8002d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e01a      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d116      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	4413      	add	r3, r2
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d126      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011a      	lsls	r2, r3, #4
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e017      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d113      	bne.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	4413      	add	r3, r2
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	011a      	lsls	r2, r3, #4
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2200      	movs	r2, #0
 8002e02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f006 f8fb 	bl	8009006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 82d4 	beq.w	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	827b      	strh	r3, [r7, #18]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	8a7b      	ldrh	r3, [r7, #18]
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
 8002e5c:	e2b2      	b.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d021      	beq.n	8002eac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 8286 	bne.w	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ece:	441a      	add	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d309      	bcc.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	621a      	str	r2, [r3, #32]
 8002ef2:	e015      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f0a:	e009      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d155      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	4413      	add	r3, r2
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	011a      	lsls	r2, r3, #4
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d112      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x302>
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	e047      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x392>
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f80:	d811      	bhi.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f94:	3301      	adds	r3, #1
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	029b      	lsls	r3, r3, #10
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	e032      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x392>
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x342>
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	e01b      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x392>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	785b      	ldrb	r3, [r3, #1]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d117      	bne.n	800300c <HAL_PCD_EP_DB_Transmit+0x392>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff0:	4413      	add	r3, r2
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	011a      	lsls	r2, r3, #4
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	b29a      	uxth	r2, r3
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6959      	ldr	r1, [r3, #20]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	891a      	ldrh	r2, [r3, #8]
 8003018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	f004 f998 	bl	8007350 <USB_WritePMA>
 8003020:	e1d0      	b.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	3306      	adds	r3, #6
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003056:	429a      	cmp	r2, r3
 8003058:	d307      	bcc.n	800306a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003062:	1ad2      	subs	r2, r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	619a      	str	r2, [r3, #24]
 8003068:	e002      	b.n	8003070 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 80c4 	bne.w	8003202 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d126      	bne.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x456>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	4413      	add	r3, r2
 8003098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	011a      	lsls	r2, r3, #4
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	4413      	add	r3, r2
 80030a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	e01a      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d116      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	677b      	str	r3, [r7, #116]	; 0x74
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ec:	4413      	add	r3, r2
 80030ee:	677b      	str	r3, [r7, #116]	; 0x74
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	011a      	lsls	r2, r3, #4
 80030f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f8:	4413      	add	r3, r2
 80030fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003102:	2200      	movs	r2, #0
 8003104:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	67bb      	str	r3, [r7, #120]	; 0x78
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	785b      	ldrb	r3, [r3, #1]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d12f      	bne.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800312c:	4413      	add	r3, r2
 800312e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	011a      	lsls	r2, r3, #4
 8003138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800313c:	4413      	add	r3, r2
 800313e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003152:	b29a      	uxth	r2, r3
 8003154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316a:	b29a      	uxth	r2, r3
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	e017      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d113      	bne.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318a:	4413      	add	r3, r2
 800318c:	67bb      	str	r3, [r7, #120]	; 0x78
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	011a      	lsls	r2, r3, #4
 8003194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003196:	4413      	add	r3, r2
 8003198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800319c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800319e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031a0:	2200      	movs	r2, #0
 80031a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f005 ff2b 	bl	8009006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8104 	bne.w	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	8013      	strh	r3, [r2, #0]
 8003200:	e0e0      	b.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d121      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800323c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324c:	b29b      	uxth	r3, r3
 800324e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003256:	2b01      	cmp	r3, #1
 8003258:	f040 80b4 	bne.w	80033c4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003264:	441a      	add	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003272:	441a      	add	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d309      	bcc.n	8003298 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	621a      	str	r2, [r3, #32]
 8003296:	e015      	b.n	80032c4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80032a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ae:	e009      	b.n	80032c4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	667b      	str	r3, [r7, #100]	; 0x64
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d155      	bne.n	800337e <HAL_PCD_EP_DB_Transmit+0x704>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	4413      	add	r3, r2
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	011a      	lsls	r2, r3, #4
 80032f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f2:	4413      	add	r3, r2
 80032f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d112      	bne.n	8003326 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800330a:	b29a      	uxth	r2, r3
 800330c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331e:	b29a      	uxth	r2, r3
 8003320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e044      	b.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	2b3e      	cmp	r3, #62	; 0x3e
 800332a:	d811      	bhi.n	8003350 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800332c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	657b      	str	r3, [r7, #84]	; 0x54
 8003332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	3301      	adds	r3, #1
 8003340:	657b      	str	r3, [r7, #84]	; 0x54
 8003342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003344:	b29b      	uxth	r3, r3
 8003346:	029b      	lsls	r3, r3, #10
 8003348:	b29a      	uxth	r2, r3
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	e02f      	b.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	657b      	str	r3, [r7, #84]	; 0x54
 8003356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003362:	3b01      	subs	r3, #1
 8003364:	657b      	str	r3, [r7, #84]	; 0x54
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	b29b      	uxth	r3, r3
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	b29b      	uxth	r3, r3
 800336e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003376:	b29a      	uxth	r2, r3
 8003378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e018      	b.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x736>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d114      	bne.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003394:	4413      	add	r3, r2
 8003396:	667b      	str	r3, [r7, #100]	; 0x64
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	011a      	lsls	r2, r3, #4
 800339e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033a6:	663b      	str	r3, [r7, #96]	; 0x60
 80033a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6959      	ldr	r1, [r3, #20]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	895a      	ldrh	r2, [r3, #10]
 80033bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f003 ffc6 	bl	8007350 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033de:	823b      	strh	r3, [r7, #16]
 80033e0:	8a3b      	ldrh	r3, [r7, #16]
 80033e2:	f083 0310 	eor.w	r3, r3, #16
 80033e6:	823b      	strh	r3, [r7, #16]
 80033e8:	8a3b      	ldrh	r3, [r7, #16]
 80033ea:	f083 0320 	eor.w	r3, r3, #32
 80033ee:	823b      	strh	r3, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	8a3b      	ldrh	r3, [r7, #16]
 8003400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3788      	adds	r7, #136	; 0x88
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e009      	b.n	8003468 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003454:	897a      	ldrh	r2, [r7, #10]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b29a      	uxth	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	80da      	strh	r2, [r3, #6]
 800347c:	e00b      	b.n	8003496 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2201      	movs	r2, #1
 8003482:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	b29a      	uxth	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	b29a      	uxth	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e272      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c4:	4b92      	ldr	r3, [pc, #584]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d00c      	beq.n	80034ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d0:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d112      	bne.n	8003502 <HAL_RCC_OscConfig+0x5e>
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d10b      	bne.n	8003502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b89      	ldr	r3, [pc, #548]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x12c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d168      	bne.n	80035d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e24c      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x76>
 800350c:	4b80      	ldr	r3, [pc, #512]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7f      	ldr	r2, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e02e      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x98>
 8003522:	4b7b      	ldr	r3, [pc, #492]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7a      	ldr	r2, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b78      	ldr	r3, [pc, #480]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a77      	ldr	r2, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0xbc>
 8003546:	4b72      	ldr	r3, [pc, #456]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a71      	ldr	r2, [pc, #452]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b6f      	ldr	r3, [pc, #444]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6e      	ldr	r2, [pc, #440]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 8003560:	4b6b      	ldr	r3, [pc, #428]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a67      	ldr	r2, [pc, #412]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fe36 	bl	80011f0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fd fe32 	bl	80011f0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e200      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b5d      	ldr	r3, [pc, #372]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xe4>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd fe22 	bl	80011f0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fd fe1e 	bl	80011f0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1ec      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x10c>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035de:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x18c>
 80035f6:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b43      	ldr	r3, [pc, #268]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x176>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1c0      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4939      	ldr	r1, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e03a      	b.n	80036a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fd fdd7 	bl	80011f0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fd fdd3 	bl	80011f0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1a1      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4927      	ldr	r1, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCC_OscConfig+0x270>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd fdb6 	bl	80011f0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fd fdb2 	bl	80011f0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e180      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03a      	beq.n	8003728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fd fd96 	bl	80011f0 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fd fd92 	bl	80011f0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e160      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f000 fad8 	bl	8003c9c <RCC_Delay>
 80036ec:	e01c      	b.n	8003728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f4:	f7fd fd7c 	bl	80011f0 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	e00f      	b.n	800371c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fd fd78 	bl	80011f0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d908      	bls.n	800371c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e146      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	42420000 	.word	0x42420000
 8003718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e9      	bne.n	80036fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a6 	beq.w	8003882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373a:	4b8b      	ldr	r3, [pc, #556]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4a87      	ldr	r2, [pc, #540]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	61d3      	str	r3, [r2, #28]
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b82      	ldr	r3, [pc, #520]	; (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7e      	ldr	r2, [pc, #504]	; (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fd fd39 	bl	80011f0 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fd fd35 	bl	80011f0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e103      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b75      	ldr	r3, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x312>
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	e02d      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x334>
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4a69      	ldr	r2, [pc, #420]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6213      	str	r3, [r2, #32]
 80037ca:	4b67      	ldr	r3, [pc, #412]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a66      	ldr	r2, [pc, #408]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	e01c      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x356>
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a60      	ldr	r2, [pc, #384]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	4b5e      	ldr	r3, [pc, #376]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a5d      	ldr	r2, [pc, #372]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037fa:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a5a      	ldr	r2, [pc, #360]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6213      	str	r3, [r2, #32]
 8003806:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d015      	beq.n	8003846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fce9 	bl	80011f0 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fce5 	bl	80011f0 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b1      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ee      	beq.n	8003822 <HAL_RCC_OscConfig+0x37e>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fd fcd3 	bl	80011f0 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd fccf 	bl	80011f0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e09b      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a3b      	ldr	r2, [pc, #236]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8087 	beq.w	800399a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d061      	beq.n	800395c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d146      	bne.n	800392e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fca3 	bl	80011f0 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fc9f 	bl	80011f0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e06d      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c0:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d108      	bne.n	80038e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4921      	ldr	r1, [pc, #132]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a19      	ldr	r1, [r3, #32]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	430b      	orrs	r3, r1
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fc73 	bl	80011f0 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fc6f 	bl	80011f0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03d      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x46a>
 800392c:	e035      	b.n	800399a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fc5c 	bl	80011f0 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fc58 	bl	80011f0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e026      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x498>
 800395a:	e01e      	b.n	800399a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e019      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_OscConfig+0x500>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0d0      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	4965      	ldr	r1, [pc, #404]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d040      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d115      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e073      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06b      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4936      	ldr	r1, [pc, #216]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fbaa 	bl	80011f0 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fba6 	bl	80011f0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e053      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d210      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4922      	ldr	r1, [pc, #136]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1cc>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fb08 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	0800b440 	.word	0x0800b440
 8003b74:	20000008 	.word	0x20000008
 8003b78:	2000000c 	.word	0x2000000c

08003b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	b490      	push	{r4, r7}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b84:	1d3c      	adds	r4, r7, #4
 8003b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b8c:	f240 2301 	movw	r3, #513	; 0x201
 8003b90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8003bba:	e02b      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bbc:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bbe:	623b      	str	r3, [r7, #32]
      break;
 8003bc0:	e02b      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	0c9b      	lsrs	r3, r3, #18
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3328      	adds	r3, #40	; 0x28
 8003bcc:	443b      	add	r3, r7
 8003bce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bd2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0c5b      	lsrs	r3, r3, #17
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	3328      	adds	r3, #40	; 0x28
 8003bea:	443b      	add	r3, r7
 8003bec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bf0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bf6:	fb03 f202 	mul.w	r2, r3, r2
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	e004      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	623b      	str	r3, [r7, #32]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c16:	623b      	str	r3, [r7, #32]
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3728      	adds	r7, #40	; 0x28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc90      	pop	{r4, r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	0800b3dc 	.word	0x0800b3dc
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	007a1200 	.word	0x007a1200
 8003c34:	003d0900 	.word	0x003d0900

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000008 	.word	0x20000008

08003c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c50:	f7ff fff2 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	0800b450 	.word	0x0800b450

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c78:	f7ff ffde 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0adb      	lsrs	r3, r3, #11
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	0800b450 	.word	0x0800b450

08003c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <RCC_Delay+0x34>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <RCC_Delay+0x38>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a5b      	lsrs	r3, r3, #9
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cb8:	bf00      	nop
  }
  while (Delay --);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	60fa      	str	r2, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f9      	bne.n	8003cb8 <RCC_Delay+0x1c>
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d07d      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf8:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10d      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4a4b      	ldr	r2, [pc, #300]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	61d3      	str	r3, [r2, #28]
 8003d10:	4b49      	ldr	r3, [pc, #292]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d118      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a42      	ldr	r2, [pc, #264]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d38:	f7fd fa5a 	bl	80011f0 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fd fa56 	bl	80011f0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e06d      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d027      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d92:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fa25 	bl	80011f0 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fa21 	bl	80011f0 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e036      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4917      	ldr	r1, [pc, #92]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d105      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	490b      	ldr	r1, [pc, #44]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4904      	ldr	r1, [pc, #16]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42420440 	.word	0x42420440

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e041      	b.n	8003eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fc fe82 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 fae8 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_Base_Start+0x88>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIM_Base_Start+0x8c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_TIM_Base_Start+0x90>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800

08003f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e03a      	b.n	8004006 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIM_Base_Start_IT+0x98>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a1a      	ldr	r2, [r3, #32]
 800403a:	f241 1311 	movw	r3, #4369	; 0x1111
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10f      	bne.n	8004064 <HAL_TIM_Base_Stop_IT+0x48>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	f240 4344 	movw	r3, #1092	; 0x444
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_TIM_Base_Stop_IT+0x48>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0202 	mvn.w	r2, #2
 80040a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9b1 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9a4 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9b3 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0204 	mvn.w	r2, #4
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f987 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f97a 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f989 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0208 	mvn.w	r2, #8
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2204      	movs	r2, #4
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f95d 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f950 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f95f 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f933 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f926 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f935 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0201 	mvn.w	r2, #1
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fab0 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa77 	bl	8004716 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8f9 	bl	8004446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0220 	mvn.w	r2, #32
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa42 	bl	8004704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e0b3      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x180>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d03e      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0xd0>
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	f200 8087 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	f000 8085 	beq.w	80043f4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	d87f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b70      	cmp	r3, #112	; 0x70
 80042f2:	d01a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xa2>
 80042f4:	2b70      	cmp	r3, #112	; 0x70
 80042f6:	d87b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b60      	cmp	r3, #96	; 0x60
 80042fa:	d050      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x116>
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d877      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b50      	cmp	r3, #80	; 0x50
 8004302:	d03c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xf6>
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d873      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d058      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x136>
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d86f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d064      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x156>
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d86b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d060      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x156>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d867      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d05c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x156>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d05a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004328:	e062      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f000 f966 	bl	800460a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800434c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
      break;
 8004356:	e04e      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f000 f94f 	bl	800460a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437a:	609a      	str	r2, [r3, #8]
      break;
 800437c:	e03b      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	461a      	mov	r2, r3
 800438c:	f000 f8c6 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2150      	movs	r1, #80	; 0x50
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f91d 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 800439c:	e02b      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 f8e4 	bl	8004578 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2160      	movs	r1, #96	; 0x60
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f90d 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e01b      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8a6 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f8fd 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e00b      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 f8f4 	bl	80045d6 <TIM_ITRx_SetConfig>
        break;
 80043ee:	e002      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <TIM_Base_SetConfig+0xbc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a25      	ldr	r2, [pc, #148]	; (8004518 <TIM_Base_SetConfig+0xc0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <TIM_Base_SetConfig+0xbc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <TIM_Base_SetConfig+0xc0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	615a      	str	r2, [r3, #20]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800

0800451c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f023 0201 	bic.w	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 030a 	bic.w	r3, r3, #10
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0210 	bic.w	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	031b      	lsls	r3, r3, #12
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 0307 	orr.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800460a:	b480      	push	{r7}
 800460c:	b087      	sub	sp, #28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004624:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	431a      	orrs	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4313      	orrs	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	609a      	str	r2, [r3, #8]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800465c:	2302      	movs	r3, #2
 800465e:	e046      	b.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d009      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10c      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800

08004704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fa48 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f829 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047fe:	f023 030c 	bic.w	r3, r3, #12
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	430b      	orrs	r3, r1
 800480a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <UART_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7ff fa22 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	e002      	b.n	800483a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7ff fa0a 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 8004838:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	4a22      	ldr	r2, [pc, #136]	; (80048dc <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	0119      	lsls	r1, r3, #4
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <UART_SetConfig+0x118>)
 8004872:	fba3 0302 	umull	r0, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2064      	movs	r0, #100	; 0x64
 800487a:	fb00 f303 	mul.w	r3, r0, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	; 0x32
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004890:	4419      	add	r1, r3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <UART_SetConfig+0x118>)
 80048aa:	fba3 0302 	umull	r0, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	2064      	movs	r0, #100	; 0x64
 80048b2:	fb00 f303 	mul.w	r3, r0, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	3332      	adds	r3, #50	; 0x32
 80048bc:	4a07      	ldr	r2, [pc, #28]	; (80048dc <UART_SetConfig+0x118>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	f003 020f 	and.w	r2, r3, #15
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	440a      	add	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40013800 	.word	0x40013800
 80048dc:	51eb851f 	.word	0x51eb851f

080048e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048e0:	b084      	sub	sp, #16
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	f107 0014 	add.w	r0, r7, #20
 80048ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	b004      	add	sp, #16
 80048fe:	4770      	bx	lr

08004900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004910:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004934:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	b29b      	uxth	r3, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	b29b      	uxth	r3, r3
 800494a:	4013      	ands	r3, r2
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004978:	b084      	sub	sp, #16
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	f107 0014 	add.w	r0, r7, #20
 8004986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	b004      	add	sp, #16
 80049b6:	4770      	bx	lr

080049b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b09b      	sub	sp, #108	; 0x6c
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	78db      	ldrb	r3, [r3, #3]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d81f      	bhi.n	8004a2a <USB_ActivateEndpoint+0x72>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <USB_ActivateEndpoint+0x38>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a33 	.word	0x08004a33
 80049fc:	08004a0f 	.word	0x08004a0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a0c:	e012      	b.n	8004a34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a1a:	e00b      	b.n	8004a34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a28:	e004      	b.n	8004a34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a30:	e000      	b.n	8004a34 <USB_ActivateEndpoint+0x7c>
      break;
 8004a32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7b1b      	ldrb	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 8149 	bne.w	8004d38 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8084 	beq.w	8004bb8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	011a      	lsls	r2, r3, #4
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	88db      	ldrh	r3, [r3, #6]
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	81fb      	strh	r3, [r7, #14]
 8004af2:	89fb      	ldrh	r3, [r7, #14]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <USB_ActivateEndpoint+0x17c>
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	81bb      	strh	r3, [r7, #12]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	89bb      	ldrh	r3, [r7, #12]
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	78db      	ldrb	r3, [r3, #3]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d020      	beq.n	8004b7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b52:	813b      	strh	r3, [r7, #8]
 8004b54:	893b      	ldrh	r3, [r7, #8]
 8004b56:	f083 0320 	eor.w	r3, r3, #32
 8004b5a:	813b      	strh	r3, [r7, #8]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	893b      	ldrh	r3, [r7, #8]
 8004b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8013      	strh	r3, [r2, #0]
 8004b7c:	e27f      	b.n	800507e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
 8004bb6:	e262      	b.n	800507e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	4413      	add	r3, r2
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	011a      	lsls	r2, r3, #4
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	88db      	ldrh	r3, [r3, #6]
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	4413      	add	r3, r2
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	011a      	lsls	r2, r3, #4
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	4413      	add	r3, r2
 8004c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d112      	bne.n	8004c3e <USB_ActivateEndpoint+0x286>
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e02f      	b.n	8004c9e <USB_ActivateEndpoint+0x2e6>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b3e      	cmp	r3, #62	; 0x3e
 8004c44:	d813      	bhi.n	8004c6e <USB_ActivateEndpoint+0x2b6>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <USB_ActivateEndpoint+0x2a8>
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	e017      	b.n	8004c9e <USB_ActivateEndpoint+0x2e6>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	663b      	str	r3, [r7, #96]	; 0x60
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <USB_ActivateEndpoint+0x2d0>
 8004c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c84:	3b01      	subs	r3, #1
 8004c86:	663b      	str	r3, [r7, #96]	; 0x60
 8004c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	83fb      	strh	r3, [r7, #30]
 8004cac:	8bfb      	ldrh	r3, [r7, #30]
 8004cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01b      	beq.n	8004cee <USB_ActivateEndpoint+0x336>
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	83bb      	strh	r3, [r7, #28]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8bbb      	ldrh	r3, [r7, #28]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	837b      	strh	r3, [r7, #26]
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d0c:	837b      	strh	r3, [r7, #26]
 8004d0e:	8b7b      	ldrh	r3, [r7, #26]
 8004d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d14:	837b      	strh	r3, [r7, #26]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8b7b      	ldrh	r3, [r7, #26]
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
 8004d36:	e1a2      	b.n	800507e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d84:	4413      	add	r3, r2
 8004d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	657b      	str	r3, [r7, #84]	; 0x54
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	891b      	ldrh	r3, [r3, #8]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	653b      	str	r3, [r7, #80]	; 0x50
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db8:	4413      	add	r3, r2
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011a      	lsls	r2, r3, #4
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	895b      	ldrh	r3, [r3, #10]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8091 	bne.w	8004f08 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004df4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <USB_ActivateEndpoint+0x47e>
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	873b      	strh	r3, [r7, #56]	; 0x38
 8004e44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <USB_ActivateEndpoint+0x4ce>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ea4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ea6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee4:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]
 8004f06:	e0ba      	b.n	800507e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01d      	beq.n	8004f60 <USB_ActivateEndpoint+0x5a8>
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01d      	beq.n	8004fb8 <USB_ActivateEndpoint+0x600>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	78db      	ldrb	r3, [r3, #3]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d024      	beq.n	800500a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fde:	f083 0320 	eor.w	r3, r3, #32
 8004fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]
 8005008:	e01d      	b.n	8005046 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005042:	b29b      	uxth	r3, r3
 8005044:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800507e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005082:	4618      	mov	r0, r3
 8005084:	376c      	adds	r7, #108	; 0x6c
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800508c:	b480      	push	{r7}
 800508e:	b08d      	sub	sp, #52	; 0x34
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	7b1b      	ldrb	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 808e 	bne.w	80051bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d044      	beq.n	8005132 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	81bb      	strh	r3, [r7, #12]
 80050b6:	89bb      	ldrh	r3, [r7, #12]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <USB_DeactivateEndpoint+0x6c>
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	817b      	strh	r3, [r7, #10]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	813b      	strh	r3, [r7, #8]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	893b      	ldrh	r3, [r7, #8]
 800511c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512c:	b29b      	uxth	r3, r3
 800512e:	8013      	strh	r3, [r2, #0]
 8005130:	e192      	b.n	8005458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	827b      	strh	r3, [r7, #18]
 8005140:	8a7b      	ldrh	r3, [r7, #18]
 8005142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01b      	beq.n	8005182 <USB_DeactivateEndpoint+0xf6>
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	823b      	strh	r3, [r7, #16]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	441a      	add	r2, r3
 800516c:	8a3b      	ldrh	r3, [r7, #16]
 800516e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800517a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517e:	b29b      	uxth	r3, r3
 8005180:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005198:	81fb      	strh	r3, [r7, #14]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]
 80051ba:	e14d      	b.n	8005458 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 80a5 	bne.w	8005310 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	843b      	strh	r3, [r7, #32]
 80051d4:	8c3b      	ldrh	r3, [r7, #32]
 80051d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <USB_DeactivateEndpoint+0x18a>
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f4:	83fb      	strh	r3, [r7, #30]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800520e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005212:	b29b      	uxth	r3, r3
 8005214:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	83bb      	strh	r3, [r7, #28]
 8005224:	8bbb      	ldrh	r3, [r7, #28]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <USB_DeactivateEndpoint+0x1da>
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005244:	837b      	strh	r3, [r7, #26]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	441a      	add	r2, r3
 8005250:	8b7b      	ldrh	r3, [r7, #26]
 8005252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005262:	b29b      	uxth	r3, r3
 8005264:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	833b      	strh	r3, [r7, #24]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	8b3b      	ldrh	r3, [r7, #24]
 800528a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	82fb      	strh	r3, [r7, #22]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	8afb      	ldrh	r3, [r7, #22]
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ec:	82bb      	strh	r3, [r7, #20]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8abb      	ldrh	r3, [r7, #20]
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e0a3      	b.n	8005458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800531e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <USB_DeactivateEndpoint+0x2d4>
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800534c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535c:	b29b      	uxth	r3, r3
 800535e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800536e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <USB_DeactivateEndpoint+0x324>
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800539c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	847b      	strh	r3, [r7, #34]	; 0x22
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3734      	adds	r7, #52	; 0x34
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b0cc      	sub	sp, #304	; 0x130
 8005468:	af00      	add	r7, sp, #0
 800546a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005472:	6018      	str	r0, [r3, #0]
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b01      	cmp	r3, #1
 800548c:	f041 817d 	bne.w	800678a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d908      	bls.n	80054be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80054bc:	e007      	b.n	80054ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	7b1b      	ldrb	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d152      	bne.n	8005584 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6959      	ldr	r1, [r3, #20]
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	88da      	ldrh	r2, [r3, #6]
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005500:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005504:	6800      	ldr	r0, [r0, #0]
 8005506:	f001 ff23 	bl	8007350 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800550a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005512:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005516:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005534:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005538:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800553c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	440a      	add	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	011a      	lsls	r2, r3, #4
 8005554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005558:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4413      	add	r3, r2
 8005560:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005572:	b29a      	uxth	r2, r3
 8005574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	f001 b8b5 	b.w	80066ee <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	78db      	ldrb	r3, [r3, #3]
 8005590:	2b02      	cmp	r3, #2
 8005592:	f040 84c6 	bne.w	8005f22 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f240 8443 	bls.w	8005e3a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005620:	1ad2      	subs	r2, r2, r3
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 823e 	beq.w	8005ad2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800565e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005662:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 809a 	bne.w	80057b0 <USB_EPStartXfer+0x34c>
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005684:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005688:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	440a      	add	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	011a      	lsls	r2, r3, #4
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d122      	bne.n	800572e <USB_EPStartXfer+0x2ca>
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005700:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29a      	uxth	r2, r3
 8005720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005724:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e079      	b.n	8005822 <USB_EPStartXfer+0x3be>
 800572e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005732:	2b3e      	cmp	r3, #62	; 0x3e
 8005734:	d81b      	bhi.n	800576e <USB_EPStartXfer+0x30a>
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <USB_EPStartXfer+0x2f2>
 800574c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005750:	3301      	adds	r3, #1
 8005752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29a      	uxth	r2, r3
 8005760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005764:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e059      	b.n	8005822 <USB_EPStartXfer+0x3be>
 800576e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <USB_EPStartXfer+0x32a>
 8005784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005788:	3b01      	subs	r3, #1
 800578a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800578e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005792:	b29b      	uxth	r3, r3
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e038      	b.n	8005822 <USB_EPStartXfer+0x3be>
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d130      	bne.n	8005822 <USB_EPStartXfer+0x3be>
 80057c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80057da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	440a      	add	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	011a      	lsls	r2, r3, #4
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4413      	add	r3, r2
 8005802:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005814:	b29a      	uxth	r2, r3
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	895b      	ldrh	r3, [r3, #10]
 800582e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6959      	ldr	r1, [r3, #20]
 800583e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005842:	b29b      	uxth	r3, r3
 8005844:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005848:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800584c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005850:	6800      	ldr	r0, [r0, #0]
 8005852:	f001 fd7d 	bl	8007350 <USB_WritePMA>
            ep->xfer_buff += len;
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005866:	441a      	add	r2, r3
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d90f      	bls.n	80058b0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1a      	ldr	r2, [r3, #32]
 800589c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	621a      	str	r2, [r3, #32]
 80058ae:	e00e      	b.n	80058ce <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 809a 	bne.w	8005a14 <USB_EPStartXfer+0x5b0>
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	4619      	mov	r1, r3
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800590e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005912:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	440a      	add	r2, r1
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	011a      	lsls	r2, r3, #4
 800592a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4413      	add	r3, r2
 8005936:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d122      	bne.n	8005992 <USB_EPStartXfer+0x52e>
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800595e:	b29a      	uxth	r2, r3
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005988:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e083      	b.n	8005a9a <USB_EPStartXfer+0x636>
 8005992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005996:	2b3e      	cmp	r3, #62	; 0x3e
 8005998:	d81b      	bhi.n	80059d2 <USB_EPStartXfer+0x56e>
 800599a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <USB_EPStartXfer+0x556>
 80059b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059b4:	3301      	adds	r3, #1
 80059b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059be:	b29b      	uxth	r3, r3
 80059c0:	029b      	lsls	r3, r3, #10
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e063      	b.n	8005a9a <USB_EPStartXfer+0x636>
 80059d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <USB_EPStartXfer+0x58e>
 80059e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059ec:	3b01      	subs	r3, #1
 80059ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	e042      	b.n	8005a9a <USB_EPStartXfer+0x636>
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d13a      	bne.n	8005a9a <USB_EPStartXfer+0x636>
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a30:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a56:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	891b      	ldrh	r3, [r3, #8]
 8005aa6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ac0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ac4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f001 fc41 	bl	8007350 <USB_WritePMA>
 8005ace:	f000 be0e 	b.w	80066ee <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d16d      	bne.n	8005bbe <USB_EPStartXfer+0x75a>
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b02:	4413      	add	r3, r2
 8005b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011a      	lsls	r2, r3, #4
 8005b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d112      	bne.n	8005b4c <USB_EPStartXfer+0x6e8>
 8005b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e063      	b.n	8005c14 <USB_EPStartXfer+0x7b0>
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	2b3e      	cmp	r3, #62	; 0x3e
 8005b52:	d817      	bhi.n	8005b84 <USB_EPStartXfer+0x720>
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <USB_EPStartXfer+0x710>
 8005b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	e047      	b.n	8005c14 <USB_EPStartXfer+0x7b0>
 8005b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <USB_EPStartXfer+0x740>
 8005b9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	e02a      	b.n	8005c14 <USB_EPStartXfer+0x7b0>
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d122      	bne.n	8005c14 <USB_EPStartXfer+0x7b0>
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bee:	4413      	add	r3, r2
 8005bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	011a      	lsls	r2, r3, #4
 8005c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c02:	4413      	add	r3, r2
 8005c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	891b      	ldrh	r3, [r3, #8]
 8005c20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6959      	ldr	r1, [r3, #20]
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c3a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c42:	6800      	ldr	r0, [r0, #0]
 8005c44:	f001 fb84 	bl	8007350 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	441a      	add	r2, r3
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d90f      	bls.n	8005ca2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	1ad2      	subs	r2, r2, r3
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	621a      	str	r2, [r3, #32]
 8005ca0:	e00e      	b.n	8005cc0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d16d      	bne.n	8005db8 <USB_EPStartXfer+0x954>
 8005cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	4413      	add	r3, r2
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	011a      	lsls	r2, r3, #4
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	4413      	add	r3, r2
 8005d12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d112      	bne.n	8005d46 <USB_EPStartXfer+0x8e2>
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e05d      	b.n	8005e02 <USB_EPStartXfer+0x99e>
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4c:	d817      	bhi.n	8005d7e <USB_EPStartXfer+0x91a>
 8005d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <USB_EPStartXfer+0x90a>
 8005d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e041      	b.n	8005e02 <USB_EPStartXfer+0x99e>
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <USB_EPStartXfer+0x93a>
 8005d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e024      	b.n	8005e02 <USB_EPStartXfer+0x99e>
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11c      	bne.n	8005e02 <USB_EPStartXfer+0x99e>
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	4413      	add	r3, r2
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	011a      	lsls	r2, r3, #4
 8005dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df0:	4413      	add	r3, r2
 8005df2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	895b      	ldrh	r3, [r3, #10]
 8005e0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6959      	ldr	r1, [r3, #20]
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e30:	6800      	ldr	r0, [r0, #0]
 8005e32:	f001 fa8d 	bl	8007350 <USB_WritePMA>
 8005e36:	f000 bc5a 	b.w	80066ee <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec6:	4413      	add	r3, r2
 8005ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	891b      	ldrh	r3, [r3, #8]
 8005ef8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6959      	ldr	r1, [r3, #20]
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f12:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f16:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	f001 fa18 	bl	8007350 <USB_WritePMA>
 8005f20:	e3e5      	b.n	80066ee <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6a1a      	ldr	r2, [r3, #32]
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 81bc 	beq.w	800633c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d16d      	bne.n	80060be <USB_EPStartXfer+0xc5a>
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006002:	4413      	add	r3, r2
 8006004:	67bb      	str	r3, [r7, #120]	; 0x78
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006016:	4413      	add	r3, r2
 8006018:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601c:	677b      	str	r3, [r7, #116]	; 0x74
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d112      	bne.n	800604c <USB_EPStartXfer+0xbe8>
 8006026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006030:	b29a      	uxth	r2, r3
 8006032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e060      	b.n	800610e <USB_EPStartXfer+0xcaa>
 800604c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006050:	2b3e      	cmp	r3, #62	; 0x3e
 8006052:	d817      	bhi.n	8006084 <USB_EPStartXfer+0xc20>
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <USB_EPStartXfer+0xc10>
 800606a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800606e:	3301      	adds	r3, #1
 8006070:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006074:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29a      	uxth	r2, r3
 800607e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e044      	b.n	800610e <USB_EPStartXfer+0xcaa>
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2b00      	cmp	r3, #0
 8006098:	d104      	bne.n	80060a4 <USB_EPStartXfer+0xc40>
 800609a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800609e:	3b01      	subs	r3, #1
 80060a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	e027      	b.n	800610e <USB_EPStartXfer+0xcaa>
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d11f      	bne.n	800610e <USB_EPStartXfer+0xcaa>
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e4:	4413      	add	r3, r2
 80060e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	011a      	lsls	r2, r3, #4
 80060f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006102:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	b29a      	uxth	r2, r3
 800610a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	895b      	ldrh	r3, [r3, #10]
 800611a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6959      	ldr	r1, [r3, #20]
 800612a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612e:	b29b      	uxth	r3, r3
 8006130:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006134:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006138:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800613c:	6800      	ldr	r0, [r0, #0]
 800613e:	f001 f907 	bl	8007350 <USB_WritePMA>
          ep->xfer_buff += len;
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006152:	441a      	add	r2, r3
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	429a      	cmp	r2, r3
 800617a:	d90f      	bls.n	800619c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	621a      	str	r2, [r3, #32]
 800619a:	e00e      	b.n	80061ba <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80061ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8295 	beq.w	80066ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d16d      	bne.n	80062b0 <USB_EPStartXfer+0xe4c>
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f4:	4413      	add	r3, r2
 80061f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011a      	lsls	r2, r3, #4
 8006206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006208:	4413      	add	r3, r2
 800620a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620e:	667b      	str	r3, [r7, #100]	; 0x64
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d112      	bne.n	800623e <USB_EPStartXfer+0xdda>
 8006218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006222:	b29a      	uxth	r2, r3
 8006224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006236:	b29a      	uxth	r2, r3
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e063      	b.n	8006306 <USB_EPStartXfer+0xea2>
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	2b3e      	cmp	r3, #62	; 0x3e
 8006244:	d817      	bhi.n	8006276 <USB_EPStartXfer+0xe12>
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <USB_EPStartXfer+0xe02>
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626a:	b29b      	uxth	r3, r3
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	b29a      	uxth	r2, r3
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e047      	b.n	8006306 <USB_EPStartXfer+0xea2>
 8006276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <USB_EPStartXfer+0xe32>
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006290:	3b01      	subs	r3, #1
 8006292:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	e02a      	b.n	8006306 <USB_EPStartXfer+0xea2>
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d122      	bne.n	8006306 <USB_EPStartXfer+0xea2>
 80062c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	673b      	str	r3, [r7, #112]	; 0x70
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e0:	4413      	add	r3, r2
 80062e2:	673b      	str	r3, [r7, #112]	; 0x70
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	011a      	lsls	r2, r3, #4
 80062f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	b29a      	uxth	r2, r3
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	891b      	ldrh	r3, [r3, #8]
 8006312:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6959      	ldr	r1, [r3, #20]
 8006322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006326:	b29b      	uxth	r3, r3
 8006328:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800632c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006330:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006334:	6800      	ldr	r0, [r0, #0]
 8006336:	f001 f80b 	bl	8007350 <USB_WritePMA>
 800633a:	e1d8      	b.n	80066ee <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d178      	bne.n	800643e <USB_EPStartXfer+0xfda>
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800635a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006368:	b29b      	uxth	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006370:	4413      	add	r3, r2
 8006372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	011a      	lsls	r2, r3, #4
 8006384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006388:	4413      	add	r3, r2
 800638a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800638e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d116      	bne.n	80063c8 <USB_EPStartXfer+0xf64>
 800639a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e06b      	b.n	80064a0 <USB_EPStartXfer+0x103c>
 80063c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063cc:	2b3e      	cmp	r3, #62	; 0x3e
 80063ce:	d818      	bhi.n	8006402 <USB_EPStartXfer+0xf9e>
 80063d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <USB_EPStartXfer+0xf8c>
 80063e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063ea:	3301      	adds	r3, #1
 80063ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80063f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e04e      	b.n	80064a0 <USB_EPStartXfer+0x103c>
 8006402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800640c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <USB_EPStartXfer+0xfbe>
 8006418:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800641c:	3b01      	subs	r3, #1
 800641e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	e030      	b.n	80064a0 <USB_EPStartXfer+0x103c>
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d128      	bne.n	80064a0 <USB_EPStartXfer+0x103c>
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006472:	4413      	add	r3, r2
 8006474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800648a:	4413      	add	r3, r2
 800648c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800649e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	891b      	ldrh	r3, [r3, #8]
 80064ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6959      	ldr	r1, [r3, #20]
 80064bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	f000 ff3e 	bl	8007350 <USB_WritePMA>
          ep->xfer_buff += len;
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e4:	441a      	add	r2, r3
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d90f      	bls.n	800652e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	621a      	str	r2, [r3, #32]
 800652c:	e00e      	b.n	800654c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800652e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800654c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80cc 	beq.w	80066ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d178      	bne.n	8006666 <USB_EPStartXfer+0x1202>
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006598:	4413      	add	r3, r2
 800659a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800659e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d116      	bne.n	80065f0 <USB_EPStartXfer+0x118c>
 80065c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e064      	b.n	80066ba <USB_EPStartXfer+0x1256>
 80065f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f4:	2b3e      	cmp	r3, #62	; 0x3e
 80065f6:	d818      	bhi.n	800662a <USB_EPStartXfer+0x11c6>
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <USB_EPStartXfer+0x11b4>
 800660e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006612:	3301      	adds	r3, #1
 8006614:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29a      	uxth	r2, r3
 8006622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e047      	b.n	80066ba <USB_EPStartXfer+0x1256>
 800662a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USB_EPStartXfer+0x11e6>
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006644:	3b01      	subs	r3, #1
 8006646:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800664a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664e:	b29b      	uxth	r3, r3
 8006650:	029b      	lsls	r3, r3, #10
 8006652:	b29b      	uxth	r3, r3
 8006654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665c:	b29a      	uxth	r2, r3
 800665e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e029      	b.n	80066ba <USB_EPStartXfer+0x1256>
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d121      	bne.n	80066ba <USB_EPStartXfer+0x1256>
 8006676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006684:	b29b      	uxth	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800668c:	4413      	add	r3, r2
 800668e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	011a      	lsls	r2, r3, #4
 80066a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	895b      	ldrh	r3, [r3, #10]
 80066c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6959      	ldr	r1, [r3, #20]
 80066d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066e8:	6800      	ldr	r0, [r0, #0]
 80066ea:	f000 fe31 	bl	8007350 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006710:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671c:	8013      	strh	r3, [r2, #0]
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006726:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800672a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800672e:	8812      	ldrh	r2, [r2, #0]
 8006730:	f082 0210 	eor.w	r2, r2, #16
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800673e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006742:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	f082 0220 	eor.w	r2, r2, #32
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]
 8006786:	f000 bc9f 	b.w	80070c8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800678a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	7b1b      	ldrb	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 80ae 	bne.w	80068f8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800679c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d917      	bls.n	80067e8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80067c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	619a      	str	r2, [r3, #24]
 80067e6:	e00e      	b.n	8006806 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800682a:	4413      	add	r3, r2
 800682c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	011a      	lsls	r2, r3, #4
 800683e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006842:	4413      	add	r3, r2
 8006844:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800684c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <USB_EPStartXfer+0x141e>
 8006854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006878:	b29a      	uxth	r2, r3
 800687a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e3e8      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
 8006882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006886:	2b3e      	cmp	r3, #62	; 0x3e
 8006888:	d818      	bhi.n	80068bc <USB_EPStartXfer+0x1458>
 800688a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <USB_EPStartXfer+0x1446>
 80068a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a4:	3301      	adds	r3, #1
 80068a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e3cb      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
 80068bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <USB_EPStartXfer+0x1478>
 80068d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	029b      	lsls	r3, r3, #10
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e3ad      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	78db      	ldrb	r3, [r3, #3]
 8006904:	2b02      	cmp	r3, #2
 8006906:	f040 8200 	bne.w	8006d0a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 8091 	bne.w	8006a3e <USB_EPStartXfer+0x15da>
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006940:	4413      	add	r3, r2
 8006942:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	011a      	lsls	r2, r3, #4
 8006954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006958:	4413      	add	r3, r2
 800695a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800695e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d116      	bne.n	80069a0 <USB_EPStartXfer+0x153c>
 8006972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800697e:	b29a      	uxth	r2, r3
 8006980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006996:	b29a      	uxth	r2, r3
 8006998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	e083      	b.n	8006aa8 <USB_EPStartXfer+0x1644>
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b3e      	cmp	r3, #62	; 0x3e
 80069ae:	d820      	bhi.n	80069f2 <USB_EPStartXfer+0x158e>
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <USB_EPStartXfer+0x157c>
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069da:	3301      	adds	r3, #1
 80069dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e05a      	b.n	8006aa8 <USB_EPStartXfer+0x1644>
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <USB_EPStartXfer+0x15be>
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e034      	b.n	8006aa8 <USB_EPStartXfer+0x1644>
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d12c      	bne.n	8006aa8 <USB_EPStartXfer+0x1644>
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a72:	4413      	add	r3, r2
 8006a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 8091 	bne.w	8006bea <USB_EPStartXfer+0x1786>
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006aec:	4413      	add	r3, r2
 8006aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	011a      	lsls	r2, r3, #4
 8006b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d116      	bne.n	8006b4c <USB_EPStartXfer+0x16e8>
 8006b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b30:	801a      	strh	r2, [r3, #0]
 8006b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e07c      	b.n	8006c46 <USB_EPStartXfer+0x17e2>
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5a:	d820      	bhi.n	8006b9e <USB_EPStartXfer+0x173a>
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <USB_EPStartXfer+0x1728>
 8006b82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b86:	3301      	adds	r3, #1
 8006b88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e053      	b.n	8006c46 <USB_EPStartXfer+0x17e2>
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <USB_EPStartXfer+0x176a>
 8006bc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	e02d      	b.n	8006c46 <USB_EPStartXfer+0x17e2>
 8006bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d125      	bne.n	8006c46 <USB_EPStartXfer+0x17e2>
 8006bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c10:	4413      	add	r3, r2
 8006c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	011a      	lsls	r2, r3, #4
 8006c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 81fe 	beq.w	8007054 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <USB_EPStartXfer+0x182c>
 8006c84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10d      	bne.n	8006cac <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 81db 	bne.w	8007054 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c9e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f040 81d4 	bne.w	8007054 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	8013      	strh	r3, [r2, #0]
 8006d08:	e1a4      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	f040 819a 	bne.w	8007050 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d917      	bls.n	8006d68 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	619a      	str	r2, [r3, #24]
 8006d66:	e00e      	b.n	8006d86 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d178      	bne.n	8006e88 <USB_EPStartXfer+0x1a24>
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	011a      	lsls	r2, r3, #4
 8006dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <USB_EPStartXfer+0x19ae>
 8006de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e06b      	b.n	8006eea <USB_EPStartXfer+0x1a86>
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	2b3e      	cmp	r3, #62	; 0x3e
 8006e18:	d818      	bhi.n	8006e4c <USB_EPStartXfer+0x19e8>
 8006e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <USB_EPStartXfer+0x19d6>
 8006e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e34:	3301      	adds	r3, #1
 8006e36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e04e      	b.n	8006eea <USB_EPStartXfer+0x1a86>
 8006e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <USB_EPStartXfer+0x1a08>
 8006e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	029b      	lsls	r3, r3, #10
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e030      	b.n	8006eea <USB_EPStartXfer+0x1a86>
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d128      	bne.n	8006eea <USB_EPStartXfer+0x1a86>
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	011a      	lsls	r2, r3, #4
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d178      	bne.n	8006ffa <USB_EPStartXfer+0x1b96>
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d116      	bne.n	8006f84 <USB_EPStartXfer+0x1b20>
 8006f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e067      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8a:	d818      	bhi.n	8006fbe <USB_EPStartXfer+0x1b5a>
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <USB_EPStartXfer+0x1b48>
 8006fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e04a      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USB_EPStartXfer+0x1b7a>
 8006fd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	029b      	lsls	r3, r3, #10
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	e02c      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d124      	bne.n	8007054 <USB_EPStartXfer+0x1bf0>
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007018:	b29b      	uxth	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	4413      	add	r3, r2
 8007022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	011a      	lsls	r2, r3, #4
 8007034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007038:	4413      	add	r3, r2
 800703a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800703e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e001      	b.n	8007054 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e03a      	b.n	80070ca <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800707e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007082:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007086:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800708a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800708e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007092:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fc:	81bb      	strh	r3, [r7, #12]
 80070fe:	89bb      	ldrh	r3, [r7, #12]
 8007100:	f083 0310 	eor.w	r3, r3, #16
 8007104:	81bb      	strh	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	89bb      	ldrh	r3, [r7, #12]
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
 8007126:	e01f      	b.n	8007168 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	81fb      	strh	r3, [r7, #14]
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007146:	81fb      	strh	r3, [r7, #14]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	89fb      	ldrh	r3, [r7, #14]
 8007154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	7b1b      	ldrb	r3, [r3, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 809d 	bne.w	80072c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04c      	beq.n	800722a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	823b      	strh	r3, [r7, #16]
 800719e:	8a3b      	ldrh	r3, [r7, #16]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <USB_EPClearStall+0x6c>
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	81fb      	strh	r3, [r7, #14]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	89fb      	ldrh	r3, [r7, #14]
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d06c      	beq.n	80072c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	81bb      	strh	r3, [r7, #12]
 8007200:	89bb      	ldrh	r3, [r7, #12]
 8007202:	f083 0320 	eor.w	r3, r3, #32
 8007206:	81bb      	strh	r3, [r7, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	89bb      	ldrh	r3, [r7, #12]
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e04b      	b.n	80072c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	82fb      	strh	r3, [r7, #22]
 8007238:	8afb      	ldrh	r3, [r7, #22]
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01b      	beq.n	800727a <USB_EPClearStall+0x106>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	82bb      	strh	r3, [r7, #20]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	8abb      	ldrh	r3, [r7, #20]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	827b      	strh	r3, [r7, #18]
 8007292:	8a7b      	ldrh	r3, [r7, #18]
 8007294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007298:	827b      	strh	r3, [r7, #18]
 800729a:	8a7b      	ldrh	r3, [r7, #18]
 800729c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072a0:	827b      	strh	r3, [r7, #18]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	8a7b      	ldrh	r3, [r7, #18]
 80072ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	b29b      	uxth	r3, r3
 80072c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d103      	bne.n	80072e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2280      	movs	r2, #128	; 0x80
 80072e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800732a:	b29b      	uxth	r3, r3
 800732c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007350:	b480      	push	{r7}
 8007352:	b08d      	sub	sp, #52	; 0x34
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	460b      	mov	r3, r1
 8007360:	80fb      	strh	r3, [r7, #6]
 8007362:	4613      	mov	r3, r2
 8007364:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007366:	88bb      	ldrh	r3, [r7, #4]
 8007368:	3301      	adds	r3, #1
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	005a      	lsls	r2, r3, #1
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007388:	e01e      	b.n	80073c8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	3301      	adds	r3, #1
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	3302      	adds	r3, #2
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	3302      	adds	r3, #2
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	3301      	adds	r3, #1
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	3b01      	subs	r3, #1
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1dd      	bne.n	800738a <USB_WritePMA+0x3a>
  }
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	3734      	adds	r7, #52	; 0x34
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073da:	b480      	push	{r7}
 80073dc:	b08b      	sub	sp, #44	; 0x2c
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4611      	mov	r1, r2
 80073e6:	461a      	mov	r2, r3
 80073e8:	460b      	mov	r3, r1
 80073ea:	80fb      	strh	r3, [r7, #6]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073f0:	88bb      	ldrh	r3, [r7, #4]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	005a      	lsls	r2, r3, #1
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
 8007412:	e01b      	b.n	800744c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b29b      	uxth	r3, r3
 800741a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	3302      	adds	r3, #2
 8007420:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	3301      	adds	r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b2da      	uxtb	r2, r3
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3301      	adds	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	3302      	adds	r3, #2
 8007444:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	3b01      	subs	r3, #1
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e0      	bne.n	8007414 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007452:	88bb      	ldrh	r3, [r7, #4]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	701a      	strb	r2, [r3, #0]
  }
}
 800746e:	bf00      	nop
 8007470:	372c      	adds	r7, #44	; 0x2c
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr

08007478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7c1b      	ldrb	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d115      	bne.n	80074bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007494:	2202      	movs	r2, #2
 8007496:	2181      	movs	r1, #129	; 0x81
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fe98 	bl	80091ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a8:	2202      	movs	r2, #2
 80074aa:	2101      	movs	r1, #1
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fe8e 	bl	80091ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80074ba:	e012      	b.n	80074e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	2202      	movs	r2, #2
 80074c0:	2181      	movs	r1, #129	; 0x81
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fe83 	bl	80091ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074ce:	2340      	movs	r3, #64	; 0x40
 80074d0:	2202      	movs	r2, #2
 80074d2:	2101      	movs	r1, #1
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fe7a 	bl	80091ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074e2:	2308      	movs	r3, #8
 80074e4:	2203      	movs	r2, #3
 80074e6:	2182      	movs	r1, #130	; 0x82
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fe70 	bl	80091ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074f8:	f001 ff90 	bl	800941c <USBD_static_malloc>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800750e:	2301      	movs	r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	e026      	b.n	8007562 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7c1b      	ldrb	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ff30 	bl	80093b0 <USBD_LL_PrepareReceive>
 8007550:	e007      	b.n	8007562 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	2101      	movs	r1, #1
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 ff27 	bl	80093b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800757c:	2181      	movs	r1, #129	; 0x81
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fe4b 	bl	800921a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800758a:	2101      	movs	r1, #1
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 fe44 	bl	800921a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800759a:	2182      	movs	r1, #130	; 0x82
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fe3c 	bl	800921a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00e      	beq.n	80075d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 ff36 	bl	8009434 <USBD_static_free>
    pdev->pClassData = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007600:	2b00      	cmp	r3, #0
 8007602:	d039      	beq.n	8007678 <USBD_CDC_Setup+0x9e>
 8007604:	2b20      	cmp	r3, #32
 8007606:	d17f      	bne.n	8007708 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	88db      	ldrh	r3, [r3, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d029      	beq.n	8007664 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b25b      	sxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	da11      	bge.n	800763e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	88d2      	ldrh	r2, [r2, #6]
 800762c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800762e:	6939      	ldr	r1, [r7, #16]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	88db      	ldrh	r3, [r3, #6]
 8007634:	461a      	mov	r2, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fa09 	bl	8008a4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800763c:	e06b      	b.n	8007716 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	785a      	ldrb	r2, [r3, #1]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	88db      	ldrh	r3, [r3, #6]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007654:	6939      	ldr	r1, [r7, #16]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88db      	ldrh	r3, [r3, #6]
 800765a:	461a      	mov	r2, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fa24 	bl	8008aaa <USBD_CtlPrepareRx>
      break;
 8007662:	e058      	b.n	8007716 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	7850      	ldrb	r0, [r2, #1]
 8007670:	2200      	movs	r2, #0
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	4798      	blx	r3
      break;
 8007676:	e04e      	b.n	8007716 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b0b      	cmp	r3, #11
 800767e:	d02e      	beq.n	80076de <USBD_CDC_Setup+0x104>
 8007680:	2b0b      	cmp	r3, #11
 8007682:	dc38      	bgt.n	80076f6 <USBD_CDC_Setup+0x11c>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <USBD_CDC_Setup+0xb4>
 8007688:	2b0a      	cmp	r3, #10
 800768a:	d014      	beq.n	80076b6 <USBD_CDC_Setup+0xdc>
 800768c:	e033      	b.n	80076f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	2b03      	cmp	r3, #3
 8007696:	d107      	bne.n	80076a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007698:	f107 030c 	add.w	r3, r7, #12
 800769c:	2202      	movs	r2, #2
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f9d4 	bl	8008a4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076a6:	e02e      	b.n	8007706 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 f965 	bl	800897a <USBD_CtlError>
            ret = USBD_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	75fb      	strb	r3, [r7, #23]
          break;
 80076b4:	e027      	b.n	8007706 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d107      	bne.n	80076d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076c0:	f107 030f 	add.w	r3, r7, #15
 80076c4:	2201      	movs	r2, #1
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f9c0 	bl	8008a4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076ce:	e01a      	b.n	8007706 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 f951 	bl	800897a <USBD_CtlError>
            ret = USBD_FAIL;
 80076d8:	2302      	movs	r3, #2
 80076da:	75fb      	strb	r3, [r7, #23]
          break;
 80076dc:	e013      	b.n	8007706 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d00d      	beq.n	8007704 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f945 	bl	800897a <USBD_CtlError>
            ret = USBD_FAIL;
 80076f0:	2302      	movs	r3, #2
 80076f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076f4:	e006      	b.n	8007704 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f93e 	bl	800897a <USBD_CtlError>
          ret = USBD_FAIL;
 80076fe:	2302      	movs	r3, #2
 8007700:	75fb      	strb	r3, [r7, #23]
          break;
 8007702:	e000      	b.n	8007706 <USBD_CDC_Setup+0x12c>
          break;
 8007704:	bf00      	nop
      }
      break;
 8007706:	e006      	b.n	8007716 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 f935 	bl	800897a <USBD_CtlError>
      ret = USBD_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	bf00      	nop
  }

  return ret;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800773a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d03a      	beq.n	80077bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	331c      	adds	r3, #28
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d029      	beq.n	80077b0 <USBD_CDC_DataIn+0x90>
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	440b      	add	r3, r1
 800776a:	331c      	adds	r3, #28
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	78f9      	ldrb	r1, [r7, #3]
 8007770:	68b8      	ldr	r0, [r7, #8]
 8007772:	460b      	mov	r3, r1
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4403      	add	r3, r0
 800777c:	3338      	adds	r3, #56	; 0x38
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	fbb2 f1f3 	udiv	r1, r2, r3
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d110      	bne.n	80077b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800778e:	78fa      	ldrb	r2, [r7, #3]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	331c      	adds	r3, #28
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077a2:	78f9      	ldrb	r1, [r7, #3]
 80077a4:	2300      	movs	r3, #0
 80077a6:	2200      	movs	r2, #0
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 fdde 	bl	800936a <USBD_LL_Transmit>
 80077ae:	e003      	b.n	80077b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fe09 	bl	80093f6 <USBD_LL_GetRxDataSize>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800780a:	4611      	mov	r1, r2
 800780c:	4798      	blx	r3

    return USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007832:	2b00      	cmp	r3, #0
 8007834:	d015      	beq.n	8007862 <USBD_CDC_EP0_RxReady+0x46>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d010      	beq.n	8007862 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800784e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007856:	b292      	uxth	r2, r2
 8007858:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2243      	movs	r2, #67	; 0x43
 8007878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	2000009c 	.word	0x2000009c

0800788c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2243      	movs	r2, #67	; 0x43
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000058 	.word	0x20000058

080078ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2243      	movs	r2, #67	; 0x43
 80078b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078ba:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	200000e0 	.word	0x200000e0

080078cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220a      	movs	r2, #10
 80078d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80078da:	4b03      	ldr	r3, [pc, #12]	; (80078e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000014 	.word	0x20000014

080078ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01c      	beq.n	80079c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007990:	2b00      	cmp	r3, #0
 8007992:	d115      	bne.n	80079c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2181      	movs	r1, #129	; 0x81
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fcd7 	bl	800936a <USBD_LL_Transmit>

      return USBD_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e002      	b.n	80079c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
  }
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7c1b      	ldrb	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fcd7 	bl	80093b0 <USBD_LL_PrepareReceive>
 8007a02:	e007      	b.n	8007a14 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a0a:	2340      	movs	r3, #64	; 0x40
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fcce 	bl	80093b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a36:	2302      	movs	r3, #2
 8007a38:	e01a      	b.n	8007a70 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	79fa      	ldrb	r2, [r7, #7]
 8007a66:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f001 fb3b 	bl	80090e4 <USBD_LL_Init>

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d006      	beq.n	8007a9a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
 8007a98:	e001      	b.n	8007a9e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fb70 	bl	8009198 <USBD_LL_Start>

  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr

08007ad6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	4611      	mov	r1, r2
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fed8 	bl	8008902 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d016      	beq.n	8007ba4 <USBD_LL_SetupStage+0x6a>
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d81c      	bhi.n	8007bb4 <USBD_LL_SetupStage+0x7a>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <USBD_LL_SetupStage+0x4a>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d008      	beq.n	8007b94 <USBD_LL_SetupStage+0x5a>
 8007b82:	e017      	b.n	8007bb4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9cb 	bl	8007f28 <USBD_StdDevReq>
      break;
 8007b92:	e01a      	b.n	8007bca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa2d 	bl	8007ffc <USBD_StdItfReq>
      break;
 8007ba2:	e012      	b.n	8007bca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa6d 	bl	800808c <USBD_StdEPReq>
      break;
 8007bb2:	e00a      	b.n	8007bca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007bba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fb48 	bl	8009258 <USBD_LL_StallEP>
      break;
 8007bc8:	bf00      	nop
  }

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d14b      	bne.n	8007c80 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d134      	bne.n	8007c64 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d919      	bls.n	8007c3a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d203      	bcs.n	8007c28 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	e002      	b.n	8007c2e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 ff57 	bl	8008ae6 <USBD_CtlContinueRx>
 8007c38:	e038      	b.n	8007cac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d105      	bne.n	8007c5c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 ff54 	bl	8008b0a <USBD_CtlSendStatus>
 8007c62:	e023      	b.n	8007cac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d11e      	bne.n	8007cac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c76:	2100      	movs	r1, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f001 faed 	bl	8009258 <USBD_LL_StallEP>
 8007c7e:	e015      	b.n	8007cac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00d      	beq.n	8007ca8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d108      	bne.n	8007ca8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	7afa      	ldrb	r2, [r7, #11]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	4798      	blx	r3
 8007ca6:	e001      	b.n	8007cac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e000      	b.n	8007cae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b086      	sub	sp, #24
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d17f      	bne.n	8007dca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d15c      	bne.n	8007d94 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d915      	bls.n	8007d12 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fec1 	bl	8008a86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d04:	2300      	movs	r3, #0
 8007d06:	2200      	movs	r2, #0
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f001 fb50 	bl	80093b0 <USBD_LL_PrepareReceive>
 8007d10:	e04e      	b.n	8007db0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	6912      	ldr	r2, [r2, #16]
 8007d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d1e:	fb01 f202 	mul.w	r2, r1, r2
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d11c      	bne.n	8007d62 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d316      	bcc.n	8007d62 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d20f      	bcs.n	8007d62 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d42:	2200      	movs	r2, #0
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fe9d 	bl	8008a86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d54:	2300      	movs	r3, #0
 8007d56:	2200      	movs	r2, #0
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fb28 	bl	80093b0 <USBD_LL_PrepareReceive>
 8007d60:	e026      	b.n	8007db0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d105      	bne.n	8007d84 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d84:	2180      	movs	r1, #128	; 0x80
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f001 fa66 	bl	8009258 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fecf 	bl	8008b30 <USBD_CtlReceiveStatus>
 8007d92:	e00d      	b.n	8007db0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d004      	beq.n	8007da8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007da8:	2180      	movs	r1, #128	; 0x80
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f001 fa54 	bl	8009258 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d11d      	bne.n	8007df6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff fe81 	bl	8007ac2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dc8:	e015      	b.n	8007df6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00d      	beq.n	8007df2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d108      	bne.n	8007df2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	7afa      	ldrb	r2, [r7, #11]
 8007dea:	4611      	mov	r1, r2
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	4798      	blx	r3
 8007df0:	e001      	b.n	8007df6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007df2:	2302      	movs	r3, #2
 8007df4:	e000      	b.n	8007df8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 f9dd 	bl	80091ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2240      	movs	r2, #64	; 0x40
 8007e20:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	2200      	movs	r2, #0
 8007e28:	2180      	movs	r1, #128	; 0x80
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 f9cf 	bl	80091ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2240      	movs	r2, #64	; 0x40
 8007e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6852      	ldr	r2, [r2, #4]
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	4611      	mov	r1, r2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d105      	bne.n	8007ee6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr

08007ef2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d10b      	bne.n	8007f1c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d005      	beq.n	8007f4e <USBD_StdDevReq+0x26>
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	d84f      	bhi.n	8007fe6 <USBD_StdDevReq+0xbe>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <USBD_StdDevReq+0x36>
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d14b      	bne.n	8007fe6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
      break;
 8007f5c:	e048      	b.n	8007ff0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d839      	bhi.n	8007fda <USBD_StdDevReq+0xb2>
 8007f66:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <USBD_StdDevReq+0x44>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007fbd 	.word	0x08007fbd
 8007f70:	08007fd1 	.word	0x08007fd1
 8007f74:	08007fdb 	.word	0x08007fdb
 8007f78:	08007fc7 	.word	0x08007fc7
 8007f7c:	08007fdb 	.word	0x08007fdb
 8007f80:	08007f9f 	.word	0x08007f9f
 8007f84:	08007f95 	.word	0x08007f95
 8007f88:	08007fdb 	.word	0x08007fdb
 8007f8c:	08007fb3 	.word	0x08007fb3
 8007f90:	08007fa9 	.word	0x08007fa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9dc 	bl	8008354 <USBD_GetDescriptor>
          break;
 8007f9c:	e022      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb3f 	bl	8008624 <USBD_SetAddress>
          break;
 8007fa6:	e01d      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fb7e 	bl	80086ac <USBD_SetConfig>
          break;
 8007fb0:	e018      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc07 	bl	80087c8 <USBD_GetConfig>
          break;
 8007fba:	e013      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc37 	bl	8008832 <USBD_GetStatus>
          break;
 8007fc4:	e00e      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc65 	bl	8008898 <USBD_SetFeature>
          break;
 8007fce:	e009      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fc74 	bl	80088c0 <USBD_ClrFeature>
          break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fccc 	bl	800897a <USBD_CtlError>
          break;
 8007fe2:	bf00      	nop
      }
      break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fcc6 	bl	800897a <USBD_CtlError>
      break;
 8007fee:	bf00      	nop
  }

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop

08007ffc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008012:	2b40      	cmp	r3, #64	; 0x40
 8008014:	d005      	beq.n	8008022 <USBD_StdItfReq+0x26>
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d82e      	bhi.n	8008078 <USBD_StdItfReq+0x7c>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <USBD_StdItfReq+0x26>
 800801e:	2b20      	cmp	r3, #32
 8008020:	d12a      	bne.n	8008078 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	3b01      	subs	r3, #1
 800802a:	2b02      	cmp	r3, #2
 800802c:	d81d      	bhi.n	800806a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d813      	bhi.n	8008060 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d110      	bne.n	8008074 <USBD_StdItfReq+0x78>
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10d      	bne.n	8008074 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd56 	bl	8008b0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800805e:	e009      	b.n	8008074 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc89 	bl	800897a <USBD_CtlError>
          break;
 8008068:	e004      	b.n	8008074 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc84 	bl	800897a <USBD_CtlError>
          break;
 8008072:	e000      	b.n	8008076 <USBD_StdItfReq+0x7a>
          break;
 8008074:	bf00      	nop
      }
      break;
 8008076:	e004      	b.n	8008082 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc7d 	bl	800897a <USBD_CtlError>
      break;
 8008080:	bf00      	nop
  }

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	889b      	ldrh	r3, [r3, #4]
 800809e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a8:	2b40      	cmp	r3, #64	; 0x40
 80080aa:	d007      	beq.n	80080bc <USBD_StdEPReq+0x30>
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	f200 8146 	bhi.w	800833e <USBD_StdEPReq+0x2b2>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <USBD_StdEPReq+0x40>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	f040 8141 	bne.w	800833e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	4798      	blx	r3
      break;
 80080ca:	e13d      	b.n	8008348 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d10a      	bne.n	80080ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	e12d      	b.n	800834a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d007      	beq.n	8008106 <USBD_StdEPReq+0x7a>
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	f300 811b 	bgt.w	8008332 <USBD_StdEPReq+0x2a6>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d072      	beq.n	80081e6 <USBD_StdEPReq+0x15a>
 8008100:	2b01      	cmp	r3, #1
 8008102:	d03a      	beq.n	800817a <USBD_StdEPReq+0xee>
 8008104:	e115      	b.n	8008332 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	2b02      	cmp	r3, #2
 800810e:	d002      	beq.n	8008116 <USBD_StdEPReq+0x8a>
 8008110:	2b03      	cmp	r3, #3
 8008112:	d015      	beq.n	8008140 <USBD_StdEPReq+0xb4>
 8008114:	e02b      	b.n	800816e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <USBD_StdEPReq+0xaa>
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d009      	beq.n	8008136 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f896 	bl	8009258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f892 	bl	8009258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008134:	e020      	b.n	8008178 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc1e 	bl	800897a <USBD_CtlError>
              break;
 800813e:	e01b      	b.n	8008178 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10e      	bne.n	8008166 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <USBD_StdEPReq+0xda>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	; 0x80
 8008152:	d008      	beq.n	8008166 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f879 	bl	8009258 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fccf 	bl	8008b0a <USBD_CtlSendStatus>

              break;
 800816c:	e004      	b.n	8008178 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc02 	bl	800897a <USBD_CtlError>
              break;
 8008176:	bf00      	nop
          }
          break;
 8008178:	e0e0      	b.n	800833c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	2b02      	cmp	r3, #2
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0xfe>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d015      	beq.n	80081b4 <USBD_StdEPReq+0x128>
 8008188:	e026      	b.n	80081d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <USBD_StdEPReq+0x11e>
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d009      	beq.n	80081aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f85c 	bl	8009258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081a0:	2180      	movs	r1, #128	; 0x80
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f858 	bl	8009258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a8:	e01c      	b.n	80081e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fbe4 	bl	800897a <USBD_CtlError>
              break;
 80081b2:	e017      	b.n	80081e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d112      	bne.n	80081e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f863 	bl	8009296 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc9a 	bl	8008b0a <USBD_CtlSendStatus>
              }
              break;
 80081d6:	e004      	b.n	80081e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fbcd 	bl	800897a <USBD_CtlError>
              break;
 80081e0:	e000      	b.n	80081e4 <USBD_StdEPReq+0x158>
              break;
 80081e2:	bf00      	nop
          }
          break;
 80081e4:	e0aa      	b.n	800833c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d002      	beq.n	80081f6 <USBD_StdEPReq+0x16a>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d032      	beq.n	800825a <USBD_StdEPReq+0x1ce>
 80081f4:	e097      	b.n	8008326 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <USBD_StdEPReq+0x180>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d004      	beq.n	800820c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fbb8 	bl	800897a <USBD_CtlError>
                break;
 800820a:	e091      	b.n	8008330 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800820c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da0b      	bge.n	800822c <USBD_StdEPReq+0x1a0>
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	3310      	adds	r3, #16
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	3304      	adds	r3, #4
 800822a:	e00b      	b.n	8008244 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	3304      	adds	r3, #4
 8008244:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fbfb 	bl	8008a4e <USBD_CtlSendData>
              break;
 8008258:	e06a      	b.n	8008330 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800825a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	da11      	bge.n	8008286 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	3318      	adds	r3, #24
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d117      	bne.n	80082ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb7b 	bl	800897a <USBD_CtlError>
                  break;
 8008284:	e054      	b.n	8008330 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	f003 020f 	and.w	r2, r3, #15
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	440b      	add	r3, r1
 8008298:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb68 	bl	800897a <USBD_CtlError>
                  break;
 80082aa:	e041      	b.n	8008330 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_StdEPReq+0x240>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	e00b      	b.n	80082e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <USBD_StdEPReq+0x266>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d103      	bne.n	80082fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	e00e      	b.n	8008318 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 ffe8 	bl	80092d4 <USBD_LL_IsStallEP>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e002      	b.n	8008318 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2202      	movs	r2, #2
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb95 	bl	8008a4e <USBD_CtlSendData>
              break;
 8008324:	e004      	b.n	8008330 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb26 	bl	800897a <USBD_CtlError>
              break;
 800832e:	bf00      	nop
          }
          break;
 8008330:	e004      	b.n	800833c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb20 	bl	800897a <USBD_CtlError>
          break;
 800833a:	bf00      	nop
      }
      break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb1a 	bl	800897a <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }

  return ret;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	0a1b      	lsrs	r3, r3, #8
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	2b06      	cmp	r3, #6
 8008376:	f200 8128 	bhi.w	80085ca <USBD_GetDescriptor+0x276>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <USBD_GetDescriptor+0x2c>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	0800839d 	.word	0x0800839d
 8008384:	080083b5 	.word	0x080083b5
 8008388:	080083f5 	.word	0x080083f5
 800838c:	080085cb 	.word	0x080085cb
 8008390:	080085cb 	.word	0x080085cb
 8008394:	0800856b 	.word	0x0800856b
 8008398:	08008597 	.word	0x08008597
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7c12      	ldrb	r2, [r2, #16]
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
      break;
 80083b2:	e112      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7c1b      	ldrb	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10d      	bne.n	80083d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	f107 0208 	add.w	r2, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3301      	adds	r3, #1
 80083d2:	2202      	movs	r2, #2
 80083d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083d6:	e100      	b.n	80085da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	f107 0208 	add.w	r2, r7, #8
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	2202      	movs	r2, #2
 80083f0:	701a      	strb	r2, [r3, #0]
      break;
 80083f2:	e0f2      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	f200 80ac 	bhi.w	8008558 <USBD_GetDescriptor+0x204>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <USBD_GetDescriptor+0xb4>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	08008421 	.word	0x08008421
 800840c:	08008455 	.word	0x08008455
 8008410:	08008489 	.word	0x08008489
 8008414:	080084bd 	.word	0x080084bd
 8008418:	080084f1 	.word	0x080084f1
 800841c:	08008525 	.word	0x08008525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008442:	e091      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa97 	bl	800897a <USBD_CtlError>
            err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
          break;
 8008452:	e089      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008476:	e077      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa7d 	bl	800897a <USBD_CtlError>
            err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
          break;
 8008486:	e06f      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084aa:	e05d      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa63 	bl	800897a <USBD_CtlError>
            err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ba:	e055      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7c12      	ldrb	r2, [r2, #16]
 80084d4:	f107 0108 	add.w	r1, r7, #8
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084de:	e043      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa49 	bl	800897a <USBD_CtlError>
            err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
          break;
 80084ee:	e03b      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	7c12      	ldrb	r2, [r2, #16]
 8008508:	f107 0108 	add.w	r1, r7, #8
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008512:	e029      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa2f 	bl	800897a <USBD_CtlError>
            err++;
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	3301      	adds	r3, #1
 8008520:	72fb      	strb	r3, [r7, #11]
          break;
 8008522:	e021      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 0108 	add.w	r1, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008546:	e00f      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa15 	bl	800897a <USBD_CtlError>
            err++;
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	3301      	adds	r3, #1
 8008554:	72fb      	strb	r3, [r7, #11]
          break;
 8008556:	e007      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa0d 	bl	800897a <USBD_CtlError>
          err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008566:	e038      	b.n	80085da <USBD_GetDescriptor+0x286>
 8008568:	e037      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	f107 0208 	add.w	r2, r7, #8
 800857e:	4610      	mov	r0, r2
 8008580:	4798      	blx	r3
 8008582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008584:	e029      	b.n	80085da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9f6 	bl	800897a <USBD_CtlError>
        err++;
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	3301      	adds	r3, #1
 8008592:	72fb      	strb	r3, [r7, #11]
      break;
 8008594:	e021      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	7c1b      	ldrb	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10d      	bne.n	80085ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	f107 0208 	add.w	r2, r7, #8
 80085aa:	4610      	mov	r0, r2
 80085ac:	4798      	blx	r3
 80085ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	2207      	movs	r2, #7
 80085b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085b8:	e00f      	b.n	80085da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f9dc 	bl	800897a <USBD_CtlError>
        err++;
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	3301      	adds	r3, #1
 80085c6:	72fb      	strb	r3, [r7, #11]
      break;
 80085c8:	e007      	b.n	80085da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9d4 	bl	800897a <USBD_CtlError>
      err++;
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	3301      	adds	r3, #1
 80085d6:	72fb      	strb	r3, [r7, #11]
      break;
 80085d8:	bf00      	nop
  }

  if (err != 0U)
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d11c      	bne.n	800861a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80085e0:	893b      	ldrh	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <USBD_GetDescriptor+0x2b6>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	88da      	ldrh	r2, [r3, #6]
 80085f2:	893b      	ldrh	r3, [r7, #8]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bf28      	it	cs
 80085f8:	4613      	movcs	r3, r2
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	461a      	mov	r2, r3
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa22 	bl	8008a4e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	88db      	ldrh	r3, [r3, #6]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa79 	bl	8008b0a <USBD_CtlSendStatus>
 8008618:	e000      	b.n	800861c <USBD_GetDescriptor+0x2c8>
    return;
 800861a:	bf00      	nop
    }
  }
}
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop

08008624 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	889b      	ldrh	r3, [r3, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d130      	bne.n	8008698 <USBD_SetAddress+0x74>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	88db      	ldrh	r3, [r3, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12c      	bne.n	8008698 <USBD_SetAddress+0x74>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	2b7f      	cmp	r3, #127	; 0x7f
 8008644:	d828      	bhi.n	8008698 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	2b03      	cmp	r3, #3
 800865a:	d104      	bne.n	8008666 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f98b 	bl	800897a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008664:	e01d      	b.n	80086a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7bfa      	ldrb	r2, [r7, #15]
 800866a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fe5a 	bl	800932c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa46 	bl	8008b0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868c:	e009      	b.n	80086a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	e004      	b.n	80086a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f96d 	bl	800897a <USBD_CtlError>
  }
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <USBD_SetConfig+0x118>)
 80086be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086c0:	4b40      	ldr	r3, [pc, #256]	; (80087c4 <USBD_SetConfig+0x118>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d904      	bls.n	80086d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f955 	bl	800897a <USBD_CtlError>
 80086d0:	e075      	b.n	80087be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d002      	beq.n	80086e2 <USBD_SetConfig+0x36>
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d023      	beq.n	8008728 <USBD_SetConfig+0x7c>
 80086e0:	e062      	b.n	80087a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80086e2:	4b38      	ldr	r3, [pc, #224]	; (80087c4 <USBD_SetConfig+0x118>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01a      	beq.n	8008720 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80086ea:	4b36      	ldr	r3, [pc, #216]	; (80087c4 <USBD_SetConfig+0x118>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2203      	movs	r2, #3
 80086f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086fc:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <USBD_SetConfig+0x118>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff f9e7 	bl	8007ad6 <USBD_SetClassConfig>
 8008708:	4603      	mov	r3, r0
 800870a:	2b02      	cmp	r3, #2
 800870c:	d104      	bne.n	8008718 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f932 	bl	800897a <USBD_CtlError>
            return;
 8008716:	e052      	b.n	80087be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f9f6 	bl	8008b0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800871e:	e04e      	b.n	80087be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f9f2 	bl	8008b0a <USBD_CtlSendStatus>
        break;
 8008726:	e04a      	b.n	80087be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008728:	4b26      	ldr	r3, [pc, #152]	; (80087c4 <USBD_SetConfig+0x118>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d112      	bne.n	8008756 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008738:	4b22      	ldr	r3, [pc, #136]	; (80087c4 <USBD_SetConfig+0x118>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008742:	4b20      	ldr	r3, [pc, #128]	; (80087c4 <USBD_SetConfig+0x118>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff f9e3 	bl	8007b14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9db 	bl	8008b0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008754:	e033      	b.n	80087be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008756:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <USBD_SetConfig+0x118>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d01d      	beq.n	80087a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff f9d1 	bl	8007b14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008772:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <USBD_SetConfig+0x118>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <USBD_SetConfig+0x118>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff f9a7 	bl	8007ad6 <USBD_SetClassConfig>
 8008788:	4603      	mov	r3, r0
 800878a:	2b02      	cmp	r3, #2
 800878c:	d104      	bne.n	8008798 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8f2 	bl	800897a <USBD_CtlError>
            return;
 8008796:	e012      	b.n	80087be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f9b6 	bl	8008b0a <USBD_CtlSendStatus>
        break;
 800879e:	e00e      	b.n	80087be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9b2 	bl	8008b0a <USBD_CtlSendStatus>
        break;
 80087a6:	e00a      	b.n	80087be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8e5 	bl	800897a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <USBD_SetConfig+0x118>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff f9ac 	bl	8007b14 <USBD_ClrClassConfig>
        break;
 80087bc:	bf00      	nop
    }
  }
}
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	2000038c 	.word	0x2000038c

080087c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88db      	ldrh	r3, [r3, #6]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d004      	beq.n	80087e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8cc 	bl	800897a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087e2:	e022      	b.n	800882a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	dc02      	bgt.n	80087f4 <USBD_GetConfig+0x2c>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dc03      	bgt.n	80087fa <USBD_GetConfig+0x32>
 80087f2:	e015      	b.n	8008820 <USBD_GetConfig+0x58>
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d00b      	beq.n	8008810 <USBD_GetConfig+0x48>
 80087f8:	e012      	b.n	8008820 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3308      	adds	r3, #8
 8008804:	2201      	movs	r2, #1
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f920 	bl	8008a4e <USBD_CtlSendData>
        break;
 800880e:	e00c      	b.n	800882a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3304      	adds	r3, #4
 8008814:	2201      	movs	r2, #1
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f918 	bl	8008a4e <USBD_CtlSendData>
        break;
 800881e:	e004      	b.n	800882a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f8a9 	bl	800897a <USBD_CtlError>
        break;
 8008828:	bf00      	nop
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008842:	3b01      	subs	r3, #1
 8008844:	2b02      	cmp	r3, #2
 8008846:	d81e      	bhi.n	8008886 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	88db      	ldrh	r3, [r3, #6]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d004      	beq.n	800885a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f891 	bl	800897a <USBD_CtlError>
        break;
 8008858:	e01a      	b.n	8008890 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f043 0202 	orr.w	r2, r3, #2
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	330c      	adds	r3, #12
 800887a:	2202      	movs	r2, #2
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f8e5 	bl	8008a4e <USBD_CtlSendData>
      break;
 8008884:	e004      	b.n	8008890 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f876 	bl	800897a <USBD_CtlError>
      break;
 800888e:	bf00      	nop
  }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d106      	bne.n	80088b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f929 	bl	8008b0a <USBD_CtlSendStatus>
  }
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d0:	3b01      	subs	r3, #1
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d80b      	bhi.n	80088ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d10c      	bne.n	80088f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f90f 	bl	8008b0a <USBD_CtlSendStatus>
      }
      break;
 80088ec:	e004      	b.n	80088f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f842 	bl	800897a <USBD_CtlError>
      break;
 80088f6:	e000      	b.n	80088fa <USBD_ClrFeature+0x3a>
      break;
 80088f8:	bf00      	nop
  }
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781a      	ldrb	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	785a      	ldrb	r2, [r3, #1]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	3302      	adds	r3, #2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b29a      	uxth	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b29b      	uxth	r3, r3
 8008930:	4413      	add	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b29a      	uxth	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	3305      	adds	r3, #5
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	b29b      	uxth	r3, r3
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b29b      	uxth	r3, r3
 800894c:	4413      	add	r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	3306      	adds	r3, #6
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b29a      	uxth	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	3307      	adds	r3, #7
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	b29b      	uxth	r3, r3
 8008968:	4413      	add	r3, r2
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	80da      	strh	r2, [r3, #6]

}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008984:	2180      	movs	r1, #128	; 0x80
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fc66 	bl	8009258 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800898c:	2100      	movs	r1, #0
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fc62 	bl	8009258 <USBD_LL_StallEP>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d032      	beq.n	8008a18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f834 	bl	8008a20 <USBD_GetLen>
 80089b8:	4603      	mov	r3, r0
 80089ba:	3301      	adds	r3, #1
 80089bc:	b29b      	uxth	r3, r3
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	75fa      	strb	r2, [r7, #23]
 80089cc:	461a      	mov	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	4413      	add	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	75fa      	strb	r2, [r7, #23]
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	2203      	movs	r2, #3
 80089e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80089e8:	e012      	b.n	8008a10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	60fa      	str	r2, [r7, #12]
 80089f0:	7dfa      	ldrb	r2, [r7, #23]
 80089f2:	1c51      	adds	r1, r2, #1
 80089f4:	75f9      	strb	r1, [r7, #23]
 80089f6:	4611      	mov	r1, r2
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	440a      	add	r2, r1
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	75fa      	strb	r2, [r7, #23]
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e8      	bne.n	80089ea <USBD_GetString+0x4e>
    }
  }
}
 8008a18:	bf00      	nop
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a2c:	e005      	b.n	8008a3a <USBD_GetLen+0x1a>
  {
    len++;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	3301      	adds	r3, #1
 8008a32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3301      	adds	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f5      	bne.n	8008a2e <USBD_GetLen+0xe>
  }

  return len;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr

08008a4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	2100      	movs	r1, #0
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fc77 	bl	800936a <USBD_LL_Transmit>

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	4613      	mov	r3, r2
 8008a92:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fc65 	bl	800936a <USBD_LL_Transmit>

  return USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2203      	movs	r2, #3
 8008abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ac8:	88fa      	ldrh	r2, [r7, #6]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fc6a 	bl	80093b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	4613      	mov	r3, r2
 8008af2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fc58 	bl	80093b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2204      	movs	r2, #4
 8008b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fc22 	bl	800936a <USBD_LL_Transmit>

  return USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b40:	2300      	movs	r3, #0
 8008b42:	2200      	movs	r2, #0
 8008b44:	2100      	movs	r1, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fc32 	bl	80093b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4912      	ldr	r1, [pc, #72]	; (8008ba8 <MX_USB_DEVICE_Init+0x50>)
 8008b60:	4812      	ldr	r0, [pc, #72]	; (8008bac <MX_USB_DEVICE_Init+0x54>)
 8008b62:	f7fe ff5e 	bl	8007a22 <USBD_Init>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b6c:	f7f7 ff8c 	bl	8000a88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b70:	490f      	ldr	r1, [pc, #60]	; (8008bb0 <MX_USB_DEVICE_Init+0x58>)
 8008b72:	480e      	ldr	r0, [pc, #56]	; (8008bac <MX_USB_DEVICE_Init+0x54>)
 8008b74:	f7fe ff80 	bl	8007a78 <USBD_RegisterClass>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b7e:	f7f7 ff83 	bl	8000a88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b82:	490c      	ldr	r1, [pc, #48]	; (8008bb4 <MX_USB_DEVICE_Init+0x5c>)
 8008b84:	4809      	ldr	r0, [pc, #36]	; (8008bac <MX_USB_DEVICE_Init+0x54>)
 8008b86:	f7fe feb1 	bl	80078ec <USBD_CDC_RegisterInterface>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b90:	f7f7 ff7a 	bl	8000a88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b94:	4805      	ldr	r0, [pc, #20]	; (8008bac <MX_USB_DEVICE_Init+0x54>)
 8008b96:	f7fe ff88 	bl	8007aaa <USBD_Start>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ba0:	f7f7 ff72 	bl	8000a88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ba4:	bf00      	nop
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000134 	.word	0x20000134
 8008bac:	20000390 	.word	0x20000390
 8008bb0:	20000020 	.word	0x20000020
 8008bb4:	20000124 	.word	0x20000124

08008bb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4905      	ldr	r1, [pc, #20]	; (8008bd4 <CDC_Init_FS+0x1c>)
 8008bc0:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <CDC_Init_FS+0x20>)
 8008bc2:	f7fe fea9 	bl	8007918 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bc6:	4905      	ldr	r1, [pc, #20]	; (8008bdc <CDC_Init_FS+0x24>)
 8008bc8:	4803      	ldr	r0, [pc, #12]	; (8008bd8 <CDC_Init_FS+0x20>)
 8008bca:	f7fe febe 	bl	800794a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000a3c 	.word	0x20000a3c
 8008bd8:	20000390 	.word	0x20000390
 8008bdc:	20000654 	.word	0x20000654

08008be0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008be4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
	...

08008bf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b23      	cmp	r3, #35	; 0x23
 8008c04:	d84a      	bhi.n	8008c9c <CDC_Control_FS+0xac>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <CDC_Control_FS+0x1c>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c9d 	.word	0x08008c9d
 8008c10:	08008c9d 	.word	0x08008c9d
 8008c14:	08008c9d 	.word	0x08008c9d
 8008c18:	08008c9d 	.word	0x08008c9d
 8008c1c:	08008c9d 	.word	0x08008c9d
 8008c20:	08008c9d 	.word	0x08008c9d
 8008c24:	08008c9d 	.word	0x08008c9d
 8008c28:	08008c9d 	.word	0x08008c9d
 8008c2c:	08008c9d 	.word	0x08008c9d
 8008c30:	08008c9d 	.word	0x08008c9d
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c9d 	.word	0x08008c9d
 8008c3c:	08008c9d 	.word	0x08008c9d
 8008c40:	08008c9d 	.word	0x08008c9d
 8008c44:	08008c9d 	.word	0x08008c9d
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c9d 	.word	0x08008c9d
 8008c50:	08008c9d 	.word	0x08008c9d
 8008c54:	08008c9d 	.word	0x08008c9d
 8008c58:	08008c9d 	.word	0x08008c9d
 8008c5c:	08008c9d 	.word	0x08008c9d
 8008c60:	08008c9d 	.word	0x08008c9d
 8008c64:	08008c9d 	.word	0x08008c9d
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008c9d 	.word	0x08008c9d
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	08008c9d 	.word	0x08008c9d
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008c9d 	.word	0x08008c9d
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008c9d 	.word	0x08008c9d
 8008c94:	08008c9d 	.word	0x08008c9d
 8008c98:	08008c9d 	.word	0x08008c9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c9c:	bf00      	nop
  }

  return (USBD_OK);
 8008c9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bc80      	pop	{r7}
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop

08008cac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	480d      	ldr	r0, [pc, #52]	; (8008cf0 <CDC_Receive_FS+0x44>)
 8008cba:	f7fe fe46 	bl	800794a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cbe:	480c      	ldr	r0, [pc, #48]	; (8008cf0 <CDC_Receive_FS+0x44>)
 8008cc0:	f7fe fe85 	bl	80079ce <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <CDC_Receive_FS+0x48>)
 8008cd0:	f000 fc28 	bl	8009524 <memset>
  memcpy(buffer, Buf, len);
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4806      	ldr	r0, [pc, #24]	; (8008cf4 <CDC_Receive_FS+0x48>)
 8008cdc:	f000 fc14 	bl	8009508 <memcpy>
  terminal_proses(buffer);
 8008ce0:	4804      	ldr	r0, [pc, #16]	; (8008cf4 <CDC_Receive_FS+0x48>)
 8008ce2:	f7f8 f90d 	bl	8000f00 <terminal_proses>
  return (USBD_OK);
 8008ce6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000390 	.word	0x20000390
 8008cf4:	20000214 	.word	0x20000214

08008cf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <CDC_Transmit_FS+0x48>)
 8008d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e00b      	b.n	8008d36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4806      	ldr	r0, [pc, #24]	; (8008d40 <CDC_Transmit_FS+0x48>)
 8008d26:	f7fe fdf7 	bl	8007918 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d2a:	4805      	ldr	r0, [pc, #20]	; (8008d40 <CDC_Transmit_FS+0x48>)
 8008d2c:	f7fe fe20 	bl	8007970 <USBD_CDC_TransmitPacket>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000390 	.word	0x20000390

08008d44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2212      	movs	r2, #18
 8008d54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d56:	4b03      	ldr	r3, [pc, #12]	; (8008d64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000150 	.word	0x20000150

08008d68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	6039      	str	r1, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2204      	movs	r2, #4
 8008d78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d7a:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000164 	.word	0x20000164

08008d8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	4907      	ldr	r1, [pc, #28]	; (8008dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008da2:	4808      	ldr	r0, [pc, #32]	; (8008dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008da4:	f7ff fdfa 	bl	800899c <USBD_GetString>
 8008da8:	e004      	b.n	8008db4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	4904      	ldr	r1, [pc, #16]	; (8008dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dae:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008db0:	f7ff fdf4 	bl	800899c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000e24 	.word	0x20000e24
 8008dc4:	0800b3ec 	.word	0x0800b3ec

08008dc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	4904      	ldr	r1, [pc, #16]	; (8008de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dd8:	4804      	ldr	r0, [pc, #16]	; (8008dec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dda:	f7ff fddf 	bl	800899c <USBD_GetString>
  return USBD_StrDesc;
 8008dde:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000e24 	.word	0x20000e24
 8008dec:	0800b404 	.word	0x0800b404

08008df0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	221a      	movs	r2, #26
 8008e00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e02:	f000 f843 	bl	8008e8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e06:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000168 	.word	0x20000168

08008e14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d105      	bne.n	8008e32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4907      	ldr	r1, [pc, #28]	; (8008e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e2a:	4808      	ldr	r0, [pc, #32]	; (8008e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e2c:	f7ff fdb6 	bl	800899c <USBD_GetString>
 8008e30:	e004      	b.n	8008e3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	4904      	ldr	r1, [pc, #16]	; (8008e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e38:	f7ff fdb0 	bl	800899c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000e24 	.word	0x20000e24
 8008e4c:	0800b418 	.word	0x0800b418

08008e50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d105      	bne.n	8008e6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4907      	ldr	r1, [pc, #28]	; (8008e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e66:	4808      	ldr	r0, [pc, #32]	; (8008e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e68:	f7ff fd98 	bl	800899c <USBD_GetString>
 8008e6c:	e004      	b.n	8008e78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4904      	ldr	r1, [pc, #16]	; (8008e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e72:	4805      	ldr	r0, [pc, #20]	; (8008e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e74:	f7ff fd92 	bl	800899c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000e24 	.word	0x20000e24
 8008e88:	0800b424 	.word	0x0800b424

08008e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e92:	4b0f      	ldr	r3, [pc, #60]	; (8008ed0 <Get_SerialNum+0x44>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <Get_SerialNum+0x48>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <Get_SerialNum+0x4c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	4909      	ldr	r1, [pc, #36]	; (8008edc <Get_SerialNum+0x50>)
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f814 	bl	8008ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	4908      	ldr	r1, [pc, #32]	; (8008ee0 <Get_SerialNum+0x54>)
 8008ec0:	68b8      	ldr	r0, [r7, #8]
 8008ec2:	f000 f80f 	bl	8008ee4 <IntToUnicode>
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	1ffff7e8 	.word	0x1ffff7e8
 8008ed4:	1ffff7ec 	.word	0x1ffff7ec
 8008ed8:	1ffff7f0 	.word	0x1ffff7f0
 8008edc:	2000016a 	.word	0x2000016a
 8008ee0:	2000017a 	.word	0x2000017a

08008ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75fb      	strb	r3, [r7, #23]
 8008efa:	e027      	b.n	8008f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	0f1b      	lsrs	r3, r3, #28
 8008f00:	2b09      	cmp	r3, #9
 8008f02:	d80b      	bhi.n	8008f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0f1b      	lsrs	r3, r3, #28
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	440b      	add	r3, r1
 8008f14:	3230      	adds	r2, #48	; 0x30
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	e00a      	b.n	8008f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0f1b      	lsrs	r3, r3, #28
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	4619      	mov	r1, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3237      	adds	r2, #55	; 0x37
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
 8008f4c:	7dfa      	ldrb	r2, [r7, #23]
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d3d3      	bcc.n	8008efc <IntToUnicode+0x18>
  }
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr

08008f60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <HAL_PCD_MspInit+0x44>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d113      	bne.n	8008f9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <HAL_PCD_MspInit+0x48>)
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <HAL_PCD_MspInit+0x48>)
 8008f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f7c:	61d3      	str	r3, [r2, #28]
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <HAL_PCD_MspInit+0x48>)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2014      	movs	r0, #20
 8008f90:	f7f8 fa57 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f94:	2014      	movs	r0, #20
 8008f96:	f7f8 fa70 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40005c00 	.word	0x40005c00
 8008fa8:	40021000 	.word	0x40021000

08008fac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f7fe fdb9 	bl	8007b3a <USBD_LL_SetupStage>
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	440b      	add	r3, r1
 8008ff0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f7fe fdeb 	bl	8007bd4 <USBD_LL_DataOutStage>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009018:	78fa      	ldrb	r2, [r7, #3]
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	440b      	add	r3, r1
 8009026:	333c      	adds	r3, #60	; 0x3c
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	4619      	mov	r1, r3
 800902e:	f7fe fe42 	bl	8007cb6 <USBD_LL_DataInStage>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe ff52 	bl	8007ef2 <USBD_LL_SOF>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800905e:	2301      	movs	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d001      	beq.n	800906e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800906a:	f7f7 fd0d 	bl	8000a88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009074:	7bfa      	ldrb	r2, [r7, #15]
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe ff02 	bl	8007e82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe febb 	bl	8007e00 <USBD_LL_Reset>
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fefc 	bl	8007ea0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <HAL_PCD_SuspendCallback+0x30>)
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	4a03      	ldr	r2, [pc, #12]	; (80090c4 <HAL_PCD_SuspendCallback+0x30>)
 80090b6:	f043 0306 	orr.w	r3, r3, #6
 80090ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	e000ed00 	.word	0xe000ed00

080090c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fef6 	bl	8007ec8 <USBD_LL_Resume>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80090ec:	4a28      	ldr	r2, [pc, #160]	; (8009190 <USBD_LL_Init+0xac>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a26      	ldr	r2, [pc, #152]	; (8009190 <USBD_LL_Init+0xac>)
 80090f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80090fc:	4b24      	ldr	r3, [pc, #144]	; (8009190 <USBD_LL_Init+0xac>)
 80090fe:	4a25      	ldr	r2, [pc, #148]	; (8009194 <USBD_LL_Init+0xb0>)
 8009100:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009102:	4b23      	ldr	r3, [pc, #140]	; (8009190 <USBD_LL_Init+0xac>)
 8009104:	2208      	movs	r2, #8
 8009106:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009108:	4b21      	ldr	r3, [pc, #132]	; (8009190 <USBD_LL_Init+0xac>)
 800910a:	2202      	movs	r2, #2
 800910c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800910e:	4b20      	ldr	r3, [pc, #128]	; (8009190 <USBD_LL_Init+0xac>)
 8009110:	2200      	movs	r2, #0
 8009112:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009114:	4b1e      	ldr	r3, [pc, #120]	; (8009190 <USBD_LL_Init+0xac>)
 8009116:	2200      	movs	r2, #0
 8009118:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800911a:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <USBD_LL_Init+0xac>)
 800911c:	2200      	movs	r2, #0
 800911e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009120:	481b      	ldr	r0, [pc, #108]	; (8009190 <USBD_LL_Init+0xac>)
 8009122:	f7f8 fcfb 	bl	8001b1c <HAL_PCD_Init>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800912c:	f7f7 fcac 	bl	8000a88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009136:	2318      	movs	r3, #24
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	f7fa f96f 	bl	800341e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009146:	2358      	movs	r3, #88	; 0x58
 8009148:	2200      	movs	r2, #0
 800914a:	2180      	movs	r1, #128	; 0x80
 800914c:	f7fa f967 	bl	800341e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009156:	23c0      	movs	r3, #192	; 0xc0
 8009158:	2200      	movs	r2, #0
 800915a:	2181      	movs	r1, #129	; 0x81
 800915c:	f7fa f95f 	bl	800341e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009166:	f44f 7388 	mov.w	r3, #272	; 0x110
 800916a:	2200      	movs	r2, #0
 800916c:	2101      	movs	r1, #1
 800916e:	f7fa f956 	bl	800341e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800917c:	2200      	movs	r2, #0
 800917e:	2182      	movs	r1, #130	; 0x82
 8009180:	f7fa f94d 	bl	800341e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20001024 	.word	0x20001024
 8009194:	40005c00 	.word	0x40005c00

08009198 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f8 fdbf 	bl	8001d32 <HAL_PCD_Start>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f94e 	bl	800945c <USBD_Get_USB_Status>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	461a      	mov	r2, r3
 80091dc:	4603      	mov	r3, r0
 80091de:	70fb      	strb	r3, [r7, #3]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70bb      	strb	r3, [r7, #2]
 80091e4:	4613      	mov	r3, r2
 80091e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091f6:	78bb      	ldrb	r3, [r7, #2]
 80091f8:	883a      	ldrh	r2, [r7, #0]
 80091fa:	78f9      	ldrb	r1, [r7, #3]
 80091fc:	f7f8 ff37 	bl	800206e <HAL_PCD_EP_Open>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f928 	bl	800945c <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7f8 ff7e 	bl	800213a <HAL_PCD_EP_Close>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f909 	bl	800945c <USBD_Get_USB_Status>
 800924a:	4603      	mov	r3, r0
 800924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7f9 f83e 	bl	80022f8 <HAL_PCD_EP_SetStall>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f8ea 	bl	800945c <USBD_Get_USB_Status>
 8009288:	4603      	mov	r3, r0
 800928a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928c:	7bbb      	ldrb	r3, [r7, #14]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7f9 f87f 	bl	80023b8 <HAL_PCD_EP_ClrStall>
 80092ba:	4603      	mov	r3, r0
 80092bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 f8cb 	bl	800945c <USBD_Get_USB_Status>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da0c      	bge.n	800930a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	440b      	add	r3, r1
 8009304:	3302      	adds	r3, #2
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	e00b      	b.n	8009322 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	440b      	add	r3, r1
 800931c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009320:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009346:	78fa      	ldrb	r2, [r7, #3]
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f7f8 fe6a 	bl	8002024 <HAL_PCD_SetAddress>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f880 	bl	800945c <USBD_Get_USB_Status>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009360:	7bbb      	ldrb	r3, [r7, #14]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	461a      	mov	r2, r3
 8009376:	460b      	mov	r3, r1
 8009378:	72fb      	strb	r3, [r7, #11]
 800937a:	4613      	mov	r3, r2
 800937c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800938c:	893b      	ldrh	r3, [r7, #8]
 800938e:	7af9      	ldrb	r1, [r7, #11]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f7f8 ff6e 	bl	8002272 <HAL_PCD_EP_Transmit>
 8009396:	4603      	mov	r3, r0
 8009398:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f85d 	bl	800945c <USBD_Get_USB_Status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	461a      	mov	r2, r3
 80093bc:	460b      	mov	r3, r1
 80093be:	72fb      	strb	r3, [r7, #11]
 80093c0:	4613      	mov	r3, r2
 80093c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d2:	893b      	ldrh	r3, [r7, #8]
 80093d4:	7af9      	ldrb	r1, [r7, #11]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	f7f8 fef7 	bl	80021ca <HAL_PCD_EP_Receive>
 80093dc:	4603      	mov	r3, r0
 80093de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f83a 	bl	800945c <USBD_Get_USB_Status>
 80093e8:	4603      	mov	r3, r0
 80093ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7f8 ff19 	bl	8002244 <HAL_PCD_EP_GetRxCount>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <USBD_static_malloc+0x14>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr
 8009430:	20001310 	.word	0x20001310

08009434 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]

}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	bc80      	pop	{r7}
 8009444:	4770      	bx	lr

08009446 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	2b03      	cmp	r3, #3
 800946e:	d817      	bhi.n	80094a0 <USBD_Get_USB_Status+0x44>
 8009470:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <USBD_Get_USB_Status+0x1c>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	08009489 	.word	0x08009489
 800947c:	0800948f 	.word	0x0800948f
 8009480:	08009495 	.word	0x08009495
 8009484:	0800949b 	.word	0x0800949b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	e00b      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800948e:	2302      	movs	r3, #2
 8009490:	73fb      	strb	r3, [r7, #15]
    break;
 8009492:	e008      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
    break;
 8009498:	e005      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800949a:	2302      	movs	r3, #2
 800949c:	73fb      	strb	r3, [r7, #15]
    break;
 800949e:	e002      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094a0:	2302      	movs	r3, #2
 80094a2:	73fb      	strb	r3, [r7, #15]
    break;
 80094a4:	bf00      	nop
  }
  return usb_status;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop

080094b4 <__errno>:
 80094b4:	4b01      	ldr	r3, [pc, #4]	; (80094bc <__errno+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000184 	.word	0x20000184

080094c0 <__libc_init_array>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	2600      	movs	r6, #0
 80094c4:	4d0c      	ldr	r5, [pc, #48]	; (80094f8 <__libc_init_array+0x38>)
 80094c6:	4c0d      	ldr	r4, [pc, #52]	; (80094fc <__libc_init_array+0x3c>)
 80094c8:	1b64      	subs	r4, r4, r5
 80094ca:	10a4      	asrs	r4, r4, #2
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	d109      	bne.n	80094e4 <__libc_init_array+0x24>
 80094d0:	f001 ff28 	bl	800b324 <_init>
 80094d4:	2600      	movs	r6, #0
 80094d6:	4d0a      	ldr	r5, [pc, #40]	; (8009500 <__libc_init_array+0x40>)
 80094d8:	4c0a      	ldr	r4, [pc, #40]	; (8009504 <__libc_init_array+0x44>)
 80094da:	1b64      	subs	r4, r4, r5
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	42a6      	cmp	r6, r4
 80094e0:	d105      	bne.n	80094ee <__libc_init_array+0x2e>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e8:	4798      	blx	r3
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7ee      	b.n	80094cc <__libc_init_array+0xc>
 80094ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f2:	4798      	blx	r3
 80094f4:	3601      	adds	r6, #1
 80094f6:	e7f2      	b.n	80094de <__libc_init_array+0x1e>
 80094f8:	0800b6bc 	.word	0x0800b6bc
 80094fc:	0800b6bc 	.word	0x0800b6bc
 8009500:	0800b6bc 	.word	0x0800b6bc
 8009504:	0800b6c0 	.word	0x0800b6c0

08009508 <memcpy>:
 8009508:	440a      	add	r2, r1
 800950a:	4291      	cmp	r1, r2
 800950c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009510:	d100      	bne.n	8009514 <memcpy+0xc>
 8009512:	4770      	bx	lr
 8009514:	b510      	push	{r4, lr}
 8009516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951a:	4291      	cmp	r1, r2
 800951c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009520:	d1f9      	bne.n	8009516 <memcpy+0xe>
 8009522:	bd10      	pop	{r4, pc}

08009524 <memset>:
 8009524:	4603      	mov	r3, r0
 8009526:	4402      	add	r2, r0
 8009528:	4293      	cmp	r3, r2
 800952a:	d100      	bne.n	800952e <memset+0xa>
 800952c:	4770      	bx	lr
 800952e:	f803 1b01 	strb.w	r1, [r3], #1
 8009532:	e7f9      	b.n	8009528 <memset+0x4>

08009534 <siscanf>:
 8009534:	b40e      	push	{r1, r2, r3}
 8009536:	f44f 7201 	mov.w	r2, #516	; 0x204
 800953a:	b530      	push	{r4, r5, lr}
 800953c:	b09c      	sub	sp, #112	; 0x70
 800953e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009540:	f854 5b04 	ldr.w	r5, [r4], #4
 8009544:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009548:	9002      	str	r0, [sp, #8]
 800954a:	9006      	str	r0, [sp, #24]
 800954c:	f7f6 fe08 	bl	8000160 <strlen>
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <siscanf+0x4c>)
 8009552:	9003      	str	r0, [sp, #12]
 8009554:	930b      	str	r3, [sp, #44]	; 0x2c
 8009556:	2300      	movs	r3, #0
 8009558:	930f      	str	r3, [sp, #60]	; 0x3c
 800955a:	9314      	str	r3, [sp, #80]	; 0x50
 800955c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009560:	9007      	str	r0, [sp, #28]
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <siscanf+0x50>)
 8009564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009568:	462a      	mov	r2, r5
 800956a:	4623      	mov	r3, r4
 800956c:	a902      	add	r1, sp, #8
 800956e:	6800      	ldr	r0, [r0, #0]
 8009570:	9401      	str	r4, [sp, #4]
 8009572:	f000 fbe3 	bl	8009d3c <__ssvfiscanf_r>
 8009576:	b01c      	add	sp, #112	; 0x70
 8009578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800957c:	b003      	add	sp, #12
 800957e:	4770      	bx	lr
 8009580:	080095ab 	.word	0x080095ab
 8009584:	20000184 	.word	0x20000184

08009588 <__sread>:
 8009588:	b510      	push	{r4, lr}
 800958a:	460c      	mov	r4, r1
 800958c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009590:	f001 f98e 	bl	800a8b0 <_read_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	bfab      	itete	ge
 8009598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800959a:	89a3      	ldrhlt	r3, [r4, #12]
 800959c:	181b      	addge	r3, r3, r0
 800959e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095a2:	bfac      	ite	ge
 80095a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80095a6:	81a3      	strhlt	r3, [r4, #12]
 80095a8:	bd10      	pop	{r4, pc}

080095aa <__seofread>:
 80095aa:	2000      	movs	r0, #0
 80095ac:	4770      	bx	lr

080095ae <__swrite>:
 80095ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b2:	461f      	mov	r7, r3
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	4605      	mov	r5, r0
 80095b8:	05db      	lsls	r3, r3, #23
 80095ba:	460c      	mov	r4, r1
 80095bc:	4616      	mov	r6, r2
 80095be:	d505      	bpl.n	80095cc <__swrite+0x1e>
 80095c0:	2302      	movs	r3, #2
 80095c2:	2200      	movs	r2, #0
 80095c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c8:	f000 f90c 	bl	80097e4 <_lseek_r>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	4632      	mov	r2, r6
 80095d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	4628      	mov	r0, r5
 80095d8:	463b      	mov	r3, r7
 80095da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	f000 b8ad 	b.w	8009740 <_write_r>

080095e6 <__sseek>:
 80095e6:	b510      	push	{r4, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ee:	f000 f8f9 	bl	80097e4 <_lseek_r>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	bf15      	itete	ne
 80095f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80095fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009602:	81a3      	strheq	r3, [r4, #12]
 8009604:	bf18      	it	ne
 8009606:	81a3      	strhne	r3, [r4, #12]
 8009608:	bd10      	pop	{r4, pc}

0800960a <__sclose>:
 800960a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960e:	f000 b8c7 	b.w	80097a0 <_close_r>
	...

08009614 <strtok>:
 8009614:	4b16      	ldr	r3, [pc, #88]	; (8009670 <strtok+0x5c>)
 8009616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	681f      	ldr	r7, [r3, #0]
 800961c:	4605      	mov	r5, r0
 800961e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009620:	460e      	mov	r6, r1
 8009622:	b9ec      	cbnz	r4, 8009660 <strtok+0x4c>
 8009624:	2050      	movs	r0, #80	; 0x50
 8009626:	f000 f8ef 	bl	8009808 <malloc>
 800962a:	4602      	mov	r2, r0
 800962c:	65b8      	str	r0, [r7, #88]	; 0x58
 800962e:	b920      	cbnz	r0, 800963a <strtok+0x26>
 8009630:	2157      	movs	r1, #87	; 0x57
 8009632:	4b10      	ldr	r3, [pc, #64]	; (8009674 <strtok+0x60>)
 8009634:	4810      	ldr	r0, [pc, #64]	; (8009678 <strtok+0x64>)
 8009636:	f000 f895 	bl	8009764 <__assert_func>
 800963a:	e9c0 4400 	strd	r4, r4, [r0]
 800963e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009642:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009646:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800964a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800964e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009652:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009656:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800965a:	6184      	str	r4, [r0, #24]
 800965c:	7704      	strb	r4, [r0, #28]
 800965e:	6244      	str	r4, [r0, #36]	; 0x24
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009666:	2301      	movs	r3, #1
 8009668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	f000 b806 	b.w	800967c <__strtok_r>
 8009670:	20000184 	.word	0x20000184
 8009674:	0800b45c 	.word	0x0800b45c
 8009678:	0800b473 	.word	0x0800b473

0800967c <__strtok_r>:
 800967c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967e:	b908      	cbnz	r0, 8009684 <__strtok_r+0x8>
 8009680:	6810      	ldr	r0, [r2, #0]
 8009682:	b188      	cbz	r0, 80096a8 <__strtok_r+0x2c>
 8009684:	4604      	mov	r4, r0
 8009686:	460f      	mov	r7, r1
 8009688:	4620      	mov	r0, r4
 800968a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800968e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009692:	b91e      	cbnz	r6, 800969c <__strtok_r+0x20>
 8009694:	b965      	cbnz	r5, 80096b0 <__strtok_r+0x34>
 8009696:	4628      	mov	r0, r5
 8009698:	6015      	str	r5, [r2, #0]
 800969a:	e005      	b.n	80096a8 <__strtok_r+0x2c>
 800969c:	42b5      	cmp	r5, r6
 800969e:	d1f6      	bne.n	800968e <__strtok_r+0x12>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f0      	bne.n	8009686 <__strtok_r+0xa>
 80096a4:	6014      	str	r4, [r2, #0]
 80096a6:	7003      	strb	r3, [r0, #0]
 80096a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096aa:	461c      	mov	r4, r3
 80096ac:	e00c      	b.n	80096c8 <__strtok_r+0x4c>
 80096ae:	b915      	cbnz	r5, 80096b6 <__strtok_r+0x3a>
 80096b0:	460e      	mov	r6, r1
 80096b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096ba:	42ab      	cmp	r3, r5
 80096bc:	d1f7      	bne.n	80096ae <__strtok_r+0x32>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f3      	beq.n	80096aa <__strtok_r+0x2e>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80096c8:	6014      	str	r4, [r2, #0]
 80096ca:	e7ed      	b.n	80096a8 <__strtok_r+0x2c>

080096cc <_vsniprintf_r>:
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	4614      	mov	r4, r2
 80096d0:	2c00      	cmp	r4, #0
 80096d2:	4605      	mov	r5, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	b09b      	sub	sp, #108	; 0x6c
 80096d8:	da05      	bge.n	80096e6 <_vsniprintf_r+0x1a>
 80096da:	238b      	movs	r3, #139	; 0x8b
 80096dc:	6003      	str	r3, [r0, #0]
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
 80096e2:	b01b      	add	sp, #108	; 0x6c
 80096e4:	bd30      	pop	{r4, r5, pc}
 80096e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80096ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096ee:	bf0c      	ite	eq
 80096f0:	4623      	moveq	r3, r4
 80096f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096fe:	9100      	str	r1, [sp, #0]
 8009700:	9104      	str	r1, [sp, #16]
 8009702:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009706:	4669      	mov	r1, sp
 8009708:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800970a:	f000 f9bd 	bl	8009a88 <_svfiprintf_r>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	bfbc      	itt	lt
 8009712:	238b      	movlt	r3, #139	; 0x8b
 8009714:	602b      	strlt	r3, [r5, #0]
 8009716:	2c00      	cmp	r4, #0
 8009718:	d0e3      	beq.n	80096e2 <_vsniprintf_r+0x16>
 800971a:	2200      	movs	r2, #0
 800971c:	9b00      	ldr	r3, [sp, #0]
 800971e:	701a      	strb	r2, [r3, #0]
 8009720:	e7df      	b.n	80096e2 <_vsniprintf_r+0x16>
	...

08009724 <vsniprintf>:
 8009724:	b507      	push	{r0, r1, r2, lr}
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	460a      	mov	r2, r1
 800972c:	4601      	mov	r1, r0
 800972e:	4803      	ldr	r0, [pc, #12]	; (800973c <vsniprintf+0x18>)
 8009730:	6800      	ldr	r0, [r0, #0]
 8009732:	f7ff ffcb 	bl	80096cc <_vsniprintf_r>
 8009736:	b003      	add	sp, #12
 8009738:	f85d fb04 	ldr.w	pc, [sp], #4
 800973c:	20000184 	.word	0x20000184

08009740 <_write_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	2200      	movs	r2, #0
 800974a:	4d05      	ldr	r5, [pc, #20]	; (8009760 <_write_r+0x20>)
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f7 fb22 	bl	8000d98 <_write>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_write_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_write_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20001538 	.word	0x20001538

08009764 <__assert_func>:
 8009764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009766:	4614      	mov	r4, r2
 8009768:	461a      	mov	r2, r3
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <__assert_func+0x2c>)
 800976c:	4605      	mov	r5, r0
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68d8      	ldr	r0, [r3, #12]
 8009772:	b14c      	cbz	r4, 8009788 <__assert_func+0x24>
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <__assert_func+0x30>)
 8009776:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800977a:	9100      	str	r1, [sp, #0]
 800977c:	462b      	mov	r3, r5
 800977e:	4906      	ldr	r1, [pc, #24]	; (8009798 <__assert_func+0x34>)
 8009780:	f000 f81e 	bl	80097c0 <fiprintf>
 8009784:	f001 fad8 	bl	800ad38 <abort>
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <__assert_func+0x38>)
 800978a:	461c      	mov	r4, r3
 800978c:	e7f3      	b.n	8009776 <__assert_func+0x12>
 800978e:	bf00      	nop
 8009790:	20000184 	.word	0x20000184
 8009794:	0800b4d0 	.word	0x0800b4d0
 8009798:	0800b4dd 	.word	0x0800b4dd
 800979c:	0800b50b 	.word	0x0800b50b

080097a0 <_close_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	2300      	movs	r3, #0
 80097a4:	4d05      	ldr	r5, [pc, #20]	; (80097bc <_close_r+0x1c>)
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7f7 fb10 	bl	8000dd0 <_close>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_close_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_close_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20001538 	.word	0x20001538

080097c0 <fiprintf>:
 80097c0:	b40e      	push	{r1, r2, r3}
 80097c2:	b503      	push	{r0, r1, lr}
 80097c4:	4601      	mov	r1, r0
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	4805      	ldr	r0, [pc, #20]	; (80097e0 <fiprintf+0x20>)
 80097ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ce:	6800      	ldr	r0, [r0, #0]
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f000 fc55 	bl	800a080 <_vfiprintf_r>
 80097d6:	b002      	add	sp, #8
 80097d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097dc:	b003      	add	sp, #12
 80097de:	4770      	bx	lr
 80097e0:	20000184 	.word	0x20000184

080097e4 <_lseek_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	2200      	movs	r2, #0
 80097ee:	4d05      	ldr	r5, [pc, #20]	; (8009804 <_lseek_r+0x20>)
 80097f0:	602a      	str	r2, [r5, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f7f7 fb10 	bl	8000e18 <_lseek>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_lseek_r+0x1e>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_lseek_r+0x1e>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	20001538 	.word	0x20001538

08009808 <malloc>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <malloc+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f000 b86b 	b.w	80098e8 <_malloc_r>
 8009812:	bf00      	nop
 8009814:	20000184 	.word	0x20000184

08009818 <_free_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	2900      	cmp	r1, #0
 800981e:	d040      	beq.n	80098a2 <_free_r+0x8a>
 8009820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009824:	1f0c      	subs	r4, r1, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfb8      	it	lt
 800982a:	18e4      	addlt	r4, r4, r3
 800982c:	f001 fcd0 	bl	800b1d0 <__malloc_lock>
 8009830:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <_free_r+0x8c>)
 8009832:	6813      	ldr	r3, [r2, #0]
 8009834:	b933      	cbnz	r3, 8009844 <_free_r+0x2c>
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	6014      	str	r4, [r2, #0]
 800983a:	4628      	mov	r0, r5
 800983c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009840:	f001 bccc 	b.w	800b1dc <__malloc_unlock>
 8009844:	42a3      	cmp	r3, r4
 8009846:	d908      	bls.n	800985a <_free_r+0x42>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	1821      	adds	r1, r4, r0
 800984c:	428b      	cmp	r3, r1
 800984e:	bf01      	itttt	eq
 8009850:	6819      	ldreq	r1, [r3, #0]
 8009852:	685b      	ldreq	r3, [r3, #4]
 8009854:	1809      	addeq	r1, r1, r0
 8009856:	6021      	streq	r1, [r4, #0]
 8009858:	e7ed      	b.n	8009836 <_free_r+0x1e>
 800985a:	461a      	mov	r2, r3
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	b10b      	cbz	r3, 8009864 <_free_r+0x4c>
 8009860:	42a3      	cmp	r3, r4
 8009862:	d9fa      	bls.n	800985a <_free_r+0x42>
 8009864:	6811      	ldr	r1, [r2, #0]
 8009866:	1850      	adds	r0, r2, r1
 8009868:	42a0      	cmp	r0, r4
 800986a:	d10b      	bne.n	8009884 <_free_r+0x6c>
 800986c:	6820      	ldr	r0, [r4, #0]
 800986e:	4401      	add	r1, r0
 8009870:	1850      	adds	r0, r2, r1
 8009872:	4283      	cmp	r3, r0
 8009874:	6011      	str	r1, [r2, #0]
 8009876:	d1e0      	bne.n	800983a <_free_r+0x22>
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	4401      	add	r1, r0
 800987e:	6011      	str	r1, [r2, #0]
 8009880:	6053      	str	r3, [r2, #4]
 8009882:	e7da      	b.n	800983a <_free_r+0x22>
 8009884:	d902      	bls.n	800988c <_free_r+0x74>
 8009886:	230c      	movs	r3, #12
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	e7d6      	b.n	800983a <_free_r+0x22>
 800988c:	6820      	ldr	r0, [r4, #0]
 800988e:	1821      	adds	r1, r4, r0
 8009890:	428b      	cmp	r3, r1
 8009892:	bf01      	itttt	eq
 8009894:	6819      	ldreq	r1, [r3, #0]
 8009896:	685b      	ldreq	r3, [r3, #4]
 8009898:	1809      	addeq	r1, r1, r0
 800989a:	6021      	streq	r1, [r4, #0]
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	6054      	str	r4, [r2, #4]
 80098a0:	e7cb      	b.n	800983a <_free_r+0x22>
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001530 	.word	0x20001530

080098a8 <sbrk_aligned>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4e0e      	ldr	r6, [pc, #56]	; (80098e4 <sbrk_aligned+0x3c>)
 80098ac:	460c      	mov	r4, r1
 80098ae:	6831      	ldr	r1, [r6, #0]
 80098b0:	4605      	mov	r5, r0
 80098b2:	b911      	cbnz	r1, 80098ba <sbrk_aligned+0x12>
 80098b4:	f001 f80e 	bl	800a8d4 <_sbrk_r>
 80098b8:	6030      	str	r0, [r6, #0]
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f001 f809 	bl	800a8d4 <_sbrk_r>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d00a      	beq.n	80098dc <sbrk_aligned+0x34>
 80098c6:	1cc4      	adds	r4, r0, #3
 80098c8:	f024 0403 	bic.w	r4, r4, #3
 80098cc:	42a0      	cmp	r0, r4
 80098ce:	d007      	beq.n	80098e0 <sbrk_aligned+0x38>
 80098d0:	1a21      	subs	r1, r4, r0
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 fffe 	bl	800a8d4 <_sbrk_r>
 80098d8:	3001      	adds	r0, #1
 80098da:	d101      	bne.n	80098e0 <sbrk_aligned+0x38>
 80098dc:	f04f 34ff 	mov.w	r4, #4294967295
 80098e0:	4620      	mov	r0, r4
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	20001534 	.word	0x20001534

080098e8 <_malloc_r>:
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	1ccd      	adds	r5, r1, #3
 80098ee:	f025 0503 	bic.w	r5, r5, #3
 80098f2:	3508      	adds	r5, #8
 80098f4:	2d0c      	cmp	r5, #12
 80098f6:	bf38      	it	cc
 80098f8:	250c      	movcc	r5, #12
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	4607      	mov	r7, r0
 80098fe:	db01      	blt.n	8009904 <_malloc_r+0x1c>
 8009900:	42a9      	cmp	r1, r5
 8009902:	d905      	bls.n	8009910 <_malloc_r+0x28>
 8009904:	230c      	movs	r3, #12
 8009906:	2600      	movs	r6, #0
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	4630      	mov	r0, r6
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	4e2e      	ldr	r6, [pc, #184]	; (80099cc <_malloc_r+0xe4>)
 8009912:	f001 fc5d 	bl	800b1d0 <__malloc_lock>
 8009916:	6833      	ldr	r3, [r6, #0]
 8009918:	461c      	mov	r4, r3
 800991a:	bb34      	cbnz	r4, 800996a <_malloc_r+0x82>
 800991c:	4629      	mov	r1, r5
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ffc2 	bl	80098a8 <sbrk_aligned>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	4604      	mov	r4, r0
 8009928:	d14d      	bne.n	80099c6 <_malloc_r+0xde>
 800992a:	6834      	ldr	r4, [r6, #0]
 800992c:	4626      	mov	r6, r4
 800992e:	2e00      	cmp	r6, #0
 8009930:	d140      	bne.n	80099b4 <_malloc_r+0xcc>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	4631      	mov	r1, r6
 8009936:	4638      	mov	r0, r7
 8009938:	eb04 0803 	add.w	r8, r4, r3
 800993c:	f000 ffca 	bl	800a8d4 <_sbrk_r>
 8009940:	4580      	cmp	r8, r0
 8009942:	d13a      	bne.n	80099ba <_malloc_r+0xd2>
 8009944:	6821      	ldr	r1, [r4, #0]
 8009946:	3503      	adds	r5, #3
 8009948:	1a6d      	subs	r5, r5, r1
 800994a:	f025 0503 	bic.w	r5, r5, #3
 800994e:	3508      	adds	r5, #8
 8009950:	2d0c      	cmp	r5, #12
 8009952:	bf38      	it	cc
 8009954:	250c      	movcc	r5, #12
 8009956:	4638      	mov	r0, r7
 8009958:	4629      	mov	r1, r5
 800995a:	f7ff ffa5 	bl	80098a8 <sbrk_aligned>
 800995e:	3001      	adds	r0, #1
 8009960:	d02b      	beq.n	80099ba <_malloc_r+0xd2>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	442b      	add	r3, r5
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	e00e      	b.n	8009988 <_malloc_r+0xa0>
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	1b52      	subs	r2, r2, r5
 800996e:	d41e      	bmi.n	80099ae <_malloc_r+0xc6>
 8009970:	2a0b      	cmp	r2, #11
 8009972:	d916      	bls.n	80099a2 <_malloc_r+0xba>
 8009974:	1961      	adds	r1, r4, r5
 8009976:	42a3      	cmp	r3, r4
 8009978:	6025      	str	r5, [r4, #0]
 800997a:	bf18      	it	ne
 800997c:	6059      	strne	r1, [r3, #4]
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	bf08      	it	eq
 8009982:	6031      	streq	r1, [r6, #0]
 8009984:	5162      	str	r2, [r4, r5]
 8009986:	604b      	str	r3, [r1, #4]
 8009988:	4638      	mov	r0, r7
 800998a:	f104 060b 	add.w	r6, r4, #11
 800998e:	f001 fc25 	bl	800b1dc <__malloc_unlock>
 8009992:	f026 0607 	bic.w	r6, r6, #7
 8009996:	1d23      	adds	r3, r4, #4
 8009998:	1af2      	subs	r2, r6, r3
 800999a:	d0b6      	beq.n	800990a <_malloc_r+0x22>
 800999c:	1b9b      	subs	r3, r3, r6
 800999e:	50a3      	str	r3, [r4, r2]
 80099a0:	e7b3      	b.n	800990a <_malloc_r+0x22>
 80099a2:	6862      	ldr	r2, [r4, #4]
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	bf0c      	ite	eq
 80099a8:	6032      	streq	r2, [r6, #0]
 80099aa:	605a      	strne	r2, [r3, #4]
 80099ac:	e7ec      	b.n	8009988 <_malloc_r+0xa0>
 80099ae:	4623      	mov	r3, r4
 80099b0:	6864      	ldr	r4, [r4, #4]
 80099b2:	e7b2      	b.n	800991a <_malloc_r+0x32>
 80099b4:	4634      	mov	r4, r6
 80099b6:	6876      	ldr	r6, [r6, #4]
 80099b8:	e7b9      	b.n	800992e <_malloc_r+0x46>
 80099ba:	230c      	movs	r3, #12
 80099bc:	4638      	mov	r0, r7
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	f001 fc0c 	bl	800b1dc <__malloc_unlock>
 80099c4:	e7a1      	b.n	800990a <_malloc_r+0x22>
 80099c6:	6025      	str	r5, [r4, #0]
 80099c8:	e7de      	b.n	8009988 <_malloc_r+0xa0>
 80099ca:	bf00      	nop
 80099cc:	20001530 	.word	0x20001530

080099d0 <__ssputs_r>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	688e      	ldr	r6, [r1, #8]
 80099d6:	4682      	mov	sl, r0
 80099d8:	429e      	cmp	r6, r3
 80099da:	460c      	mov	r4, r1
 80099dc:	4690      	mov	r8, r2
 80099de:	461f      	mov	r7, r3
 80099e0:	d838      	bhi.n	8009a54 <__ssputs_r+0x84>
 80099e2:	898a      	ldrh	r2, [r1, #12]
 80099e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099e8:	d032      	beq.n	8009a50 <__ssputs_r+0x80>
 80099ea:	6825      	ldr	r5, [r4, #0]
 80099ec:	6909      	ldr	r1, [r1, #16]
 80099ee:	3301      	adds	r3, #1
 80099f0:	eba5 0901 	sub.w	r9, r5, r1
 80099f4:	6965      	ldr	r5, [r4, #20]
 80099f6:	444b      	add	r3, r9
 80099f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a00:	106d      	asrs	r5, r5, #1
 8009a02:	429d      	cmp	r5, r3
 8009a04:	bf38      	it	cc
 8009a06:	461d      	movcc	r5, r3
 8009a08:	0553      	lsls	r3, r2, #21
 8009a0a:	d531      	bpl.n	8009a70 <__ssputs_r+0xa0>
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7ff ff6b 	bl	80098e8 <_malloc_r>
 8009a12:	4606      	mov	r6, r0
 8009a14:	b950      	cbnz	r0, 8009a2c <__ssputs_r+0x5c>
 8009a16:	230c      	movs	r3, #12
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	f8ca 3000 	str.w	r3, [sl]
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	6921      	ldr	r1, [r4, #16]
 8009a30:	f7ff fd6a 	bl	8009508 <memcpy>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	6126      	str	r6, [r4, #16]
 8009a42:	444e      	add	r6, r9
 8009a44:	6026      	str	r6, [r4, #0]
 8009a46:	463e      	mov	r6, r7
 8009a48:	6165      	str	r5, [r4, #20]
 8009a4a:	eba5 0509 	sub.w	r5, r5, r9
 8009a4e:	60a5      	str	r5, [r4, #8]
 8009a50:	42be      	cmp	r6, r7
 8009a52:	d900      	bls.n	8009a56 <__ssputs_r+0x86>
 8009a54:	463e      	mov	r6, r7
 8009a56:	4632      	mov	r2, r6
 8009a58:	4641      	mov	r1, r8
 8009a5a:	6820      	ldr	r0, [r4, #0]
 8009a5c:	f001 fb9e 	bl	800b19c <memmove>
 8009a60:	68a3      	ldr	r3, [r4, #8]
 8009a62:	2000      	movs	r0, #0
 8009a64:	1b9b      	subs	r3, r3, r6
 8009a66:	60a3      	str	r3, [r4, #8]
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	4433      	add	r3, r6
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	e7db      	b.n	8009a28 <__ssputs_r+0x58>
 8009a70:	462a      	mov	r2, r5
 8009a72:	f001 fbb9 	bl	800b1e8 <_realloc_r>
 8009a76:	4606      	mov	r6, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d1e1      	bne.n	8009a40 <__ssputs_r+0x70>
 8009a7c:	4650      	mov	r0, sl
 8009a7e:	6921      	ldr	r1, [r4, #16]
 8009a80:	f7ff feca 	bl	8009818 <_free_r>
 8009a84:	e7c7      	b.n	8009a16 <__ssputs_r+0x46>
	...

08009a88 <_svfiprintf_r>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	4698      	mov	r8, r3
 8009a8e:	898b      	ldrh	r3, [r1, #12]
 8009a90:	4607      	mov	r7, r0
 8009a92:	061b      	lsls	r3, r3, #24
 8009a94:	460d      	mov	r5, r1
 8009a96:	4614      	mov	r4, r2
 8009a98:	b09d      	sub	sp, #116	; 0x74
 8009a9a:	d50e      	bpl.n	8009aba <_svfiprintf_r+0x32>
 8009a9c:	690b      	ldr	r3, [r1, #16]
 8009a9e:	b963      	cbnz	r3, 8009aba <_svfiprintf_r+0x32>
 8009aa0:	2140      	movs	r1, #64	; 0x40
 8009aa2:	f7ff ff21 	bl	80098e8 <_malloc_r>
 8009aa6:	6028      	str	r0, [r5, #0]
 8009aa8:	6128      	str	r0, [r5, #16]
 8009aaa:	b920      	cbnz	r0, 8009ab6 <_svfiprintf_r+0x2e>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	e0d1      	b.n	8009c5a <_svfiprintf_r+0x1d2>
 8009ab6:	2340      	movs	r3, #64	; 0x40
 8009ab8:	616b      	str	r3, [r5, #20]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9309      	str	r3, [sp, #36]	; 0x24
 8009abe:	2320      	movs	r3, #32
 8009ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ac4:	2330      	movs	r3, #48	; 0x30
 8009ac6:	f04f 0901 	mov.w	r9, #1
 8009aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ace:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c74 <_svfiprintf_r+0x1ec>
 8009ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ade:	b10a      	cbz	r2, 8009ae4 <_svfiprintf_r+0x5c>
 8009ae0:	2a25      	cmp	r2, #37	; 0x25
 8009ae2:	d1f9      	bne.n	8009ad8 <_svfiprintf_r+0x50>
 8009ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae8:	d00b      	beq.n	8009b02 <_svfiprintf_r+0x7a>
 8009aea:	465b      	mov	r3, fp
 8009aec:	4622      	mov	r2, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ff6d 	bl	80099d0 <__ssputs_r>
 8009af6:	3001      	adds	r0, #1
 8009af8:	f000 80aa 	beq.w	8009c50 <_svfiprintf_r+0x1c8>
 8009afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009afe:	445a      	add	r2, fp
 8009b00:	9209      	str	r2, [sp, #36]	; 0x24
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80a2 	beq.w	8009c50 <_svfiprintf_r+0x1c8>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b16:	f10a 0a01 	add.w	sl, sl, #1
 8009b1a:	9304      	str	r3, [sp, #16]
 8009b1c:	9307      	str	r3, [sp, #28]
 8009b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b22:	931a      	str	r3, [sp, #104]	; 0x68
 8009b24:	4654      	mov	r4, sl
 8009b26:	2205      	movs	r2, #5
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	4851      	ldr	r0, [pc, #324]	; (8009c74 <_svfiprintf_r+0x1ec>)
 8009b2e:	f001 fb27 	bl	800b180 <memchr>
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	b9d8      	cbnz	r0, 8009b6e <_svfiprintf_r+0xe6>
 8009b36:	06d0      	lsls	r0, r2, #27
 8009b38:	bf44      	itt	mi
 8009b3a:	2320      	movmi	r3, #32
 8009b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b40:	0711      	lsls	r1, r2, #28
 8009b42:	bf44      	itt	mi
 8009b44:	232b      	movmi	r3, #43	; 0x2b
 8009b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b50:	d015      	beq.n	8009b7e <_svfiprintf_r+0xf6>
 8009b52:	4654      	mov	r4, sl
 8009b54:	2000      	movs	r0, #0
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	9a07      	ldr	r2, [sp, #28]
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b62:	3b30      	subs	r3, #48	; 0x30
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	d94e      	bls.n	8009c06 <_svfiprintf_r+0x17e>
 8009b68:	b1b0      	cbz	r0, 8009b98 <_svfiprintf_r+0x110>
 8009b6a:	9207      	str	r2, [sp, #28]
 8009b6c:	e014      	b.n	8009b98 <_svfiprintf_r+0x110>
 8009b6e:	eba0 0308 	sub.w	r3, r0, r8
 8009b72:	fa09 f303 	lsl.w	r3, r9, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	46a2      	mov	sl, r4
 8009b7a:	9304      	str	r3, [sp, #16]
 8009b7c:	e7d2      	b.n	8009b24 <_svfiprintf_r+0x9c>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	1d19      	adds	r1, r3, #4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	9103      	str	r1, [sp, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfbb      	ittet	lt
 8009b8a:	425b      	neglt	r3, r3
 8009b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b90:	9307      	strge	r3, [sp, #28]
 8009b92:	9307      	strlt	r3, [sp, #28]
 8009b94:	bfb8      	it	lt
 8009b96:	9204      	strlt	r2, [sp, #16]
 8009b98:	7823      	ldrb	r3, [r4, #0]
 8009b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b9c:	d10c      	bne.n	8009bb8 <_svfiprintf_r+0x130>
 8009b9e:	7863      	ldrb	r3, [r4, #1]
 8009ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba2:	d135      	bne.n	8009c10 <_svfiprintf_r+0x188>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	3402      	adds	r4, #2
 8009ba8:	1d1a      	adds	r2, r3, #4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	9203      	str	r2, [sp, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bfb8      	it	lt
 8009bb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bb6:	9305      	str	r3, [sp, #20]
 8009bb8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009c78 <_svfiprintf_r+0x1f0>
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	7821      	ldrb	r1, [r4, #0]
 8009bc2:	f001 fadd 	bl	800b180 <memchr>
 8009bc6:	b140      	cbz	r0, 8009bda <_svfiprintf_r+0x152>
 8009bc8:	2340      	movs	r3, #64	; 0x40
 8009bca:	eba0 000a 	sub.w	r0, r0, sl
 8009bce:	fa03 f000 	lsl.w	r0, r3, r0
 8009bd2:	9b04      	ldr	r3, [sp, #16]
 8009bd4:	3401      	adds	r4, #1
 8009bd6:	4303      	orrs	r3, r0
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	2206      	movs	r2, #6
 8009be0:	4826      	ldr	r0, [pc, #152]	; (8009c7c <_svfiprintf_r+0x1f4>)
 8009be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009be6:	f001 facb 	bl	800b180 <memchr>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d038      	beq.n	8009c60 <_svfiprintf_r+0x1d8>
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <_svfiprintf_r+0x1f8>)
 8009bf0:	bb1b      	cbnz	r3, 8009c3a <_svfiprintf_r+0x1b2>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	3307      	adds	r3, #7
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c00:	4433      	add	r3, r6
 8009c02:	9309      	str	r3, [sp, #36]	; 0x24
 8009c04:	e767      	b.n	8009ad6 <_svfiprintf_r+0x4e>
 8009c06:	460c      	mov	r4, r1
 8009c08:	2001      	movs	r0, #1
 8009c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c0e:	e7a5      	b.n	8009b5c <_svfiprintf_r+0xd4>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f04f 0c0a 	mov.w	ip, #10
 8009c16:	4619      	mov	r1, r3
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c22:	3a30      	subs	r2, #48	; 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d903      	bls.n	8009c30 <_svfiprintf_r+0x1a8>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c5      	beq.n	8009bb8 <_svfiprintf_r+0x130>
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e7c3      	b.n	8009bb8 <_svfiprintf_r+0x130>
 8009c30:	4604      	mov	r4, r0
 8009c32:	2301      	movs	r3, #1
 8009c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c38:	e7f0      	b.n	8009c1c <_svfiprintf_r+0x194>
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <_svfiprintf_r+0x1fc>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	f3af 8000 	nop.w
 8009c4a:	1c42      	adds	r2, r0, #1
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	d1d6      	bne.n	8009bfe <_svfiprintf_r+0x176>
 8009c50:	89ab      	ldrh	r3, [r5, #12]
 8009c52:	065b      	lsls	r3, r3, #25
 8009c54:	f53f af2c 	bmi.w	8009ab0 <_svfiprintf_r+0x28>
 8009c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5a:	b01d      	add	sp, #116	; 0x74
 8009c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4638      	mov	r0, r7
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <_svfiprintf_r+0x1fc>)
 8009c6a:	a904      	add	r1, sp, #16
 8009c6c:	f000 fba8 	bl	800a3c0 <_printf_i>
 8009c70:	e7eb      	b.n	8009c4a <_svfiprintf_r+0x1c2>
 8009c72:	bf00      	nop
 8009c74:	0800b50c 	.word	0x0800b50c
 8009c78:	0800b512 	.word	0x0800b512
 8009c7c:	0800b516 	.word	0x0800b516
 8009c80:	00000000 	.word	0x00000000
 8009c84:	080099d1 	.word	0x080099d1

08009c88 <_sungetc_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	1c4b      	adds	r3, r1, #1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	d103      	bne.n	8009c98 <_sungetc_r+0x10>
 8009c90:	f04f 35ff 	mov.w	r5, #4294967295
 8009c94:	4628      	mov	r0, r5
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	8993      	ldrh	r3, [r2, #12]
 8009c9a:	b2cd      	uxtb	r5, r1
 8009c9c:	f023 0320 	bic.w	r3, r3, #32
 8009ca0:	8193      	strh	r3, [r2, #12]
 8009ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca4:	6852      	ldr	r2, [r2, #4]
 8009ca6:	b18b      	cbz	r3, 8009ccc <_sungetc_r+0x44>
 8009ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009caa:	4293      	cmp	r3, r2
 8009cac:	dd08      	ble.n	8009cc0 <_sungetc_r+0x38>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	1e5a      	subs	r2, r3, #1
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	6063      	str	r3, [r4, #4]
 8009cbe:	e7e9      	b.n	8009c94 <_sungetc_r+0xc>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f000 ff41 	bl	800ab48 <__submore>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d0f1      	beq.n	8009cae <_sungetc_r+0x26>
 8009cca:	e7e1      	b.n	8009c90 <_sungetc_r+0x8>
 8009ccc:	6921      	ldr	r1, [r4, #16]
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	b151      	cbz	r1, 8009ce8 <_sungetc_r+0x60>
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	d208      	bcs.n	8009ce8 <_sungetc_r+0x60>
 8009cd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009cda:	42a9      	cmp	r1, r5
 8009cdc:	d104      	bne.n	8009ce8 <_sungetc_r+0x60>
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	3201      	adds	r2, #1
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	6062      	str	r2, [r4, #4]
 8009ce6:	e7d5      	b.n	8009c94 <_sungetc_r+0xc>
 8009ce8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cf6:	4623      	mov	r3, r4
 8009cf8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e7dc      	b.n	8009cbc <_sungetc_r+0x34>

08009d02 <__ssrefill_r>:
 8009d02:	b510      	push	{r4, lr}
 8009d04:	460c      	mov	r4, r1
 8009d06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d08:	b169      	cbz	r1, 8009d26 <__ssrefill_r+0x24>
 8009d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d0e:	4299      	cmp	r1, r3
 8009d10:	d001      	beq.n	8009d16 <__ssrefill_r+0x14>
 8009d12:	f7ff fd81 	bl	8009818 <_free_r>
 8009d16:	2000      	movs	r0, #0
 8009d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d1c:	6063      	str	r3, [r4, #4]
 8009d1e:	b113      	cbz	r3, 8009d26 <__ssrefill_r+0x24>
 8009d20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd10      	pop	{r4, pc}
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f043 0320 	orr.w	r3, r3, #32
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	e7f3      	b.n	8009d24 <__ssrefill_r+0x22>

08009d3c <__ssvfiscanf_r>:
 8009d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	2100      	movs	r1, #0
 8009d44:	4606      	mov	r6, r0
 8009d46:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009d4a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009d4e:	49a7      	ldr	r1, [pc, #668]	; (8009fec <__ssvfiscanf_r+0x2b0>)
 8009d50:	f10d 0804 	add.w	r8, sp, #4
 8009d54:	91a0      	str	r1, [sp, #640]	; 0x280
 8009d56:	49a6      	ldr	r1, [pc, #664]	; (8009ff0 <__ssvfiscanf_r+0x2b4>)
 8009d58:	4fa6      	ldr	r7, [pc, #664]	; (8009ff4 <__ssvfiscanf_r+0x2b8>)
 8009d5a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009ff8 <__ssvfiscanf_r+0x2bc>
 8009d5e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009d62:	91a1      	str	r1, [sp, #644]	; 0x284
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	7813      	ldrb	r3, [r2, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 815c 	beq.w	800a026 <__ssvfiscanf_r+0x2ea>
 8009d6e:	5dd9      	ldrb	r1, [r3, r7]
 8009d70:	1c55      	adds	r5, r2, #1
 8009d72:	f011 0108 	ands.w	r1, r1, #8
 8009d76:	d019      	beq.n	8009dac <__ssvfiscanf_r+0x70>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dd0f      	ble.n	8009d9e <__ssvfiscanf_r+0x62>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	781a      	ldrb	r2, [r3, #0]
 8009d82:	5cba      	ldrb	r2, [r7, r2]
 8009d84:	0712      	lsls	r2, r2, #28
 8009d86:	d401      	bmi.n	8009d8c <__ssvfiscanf_r+0x50>
 8009d88:	462a      	mov	r2, r5
 8009d8a:	e7ec      	b.n	8009d66 <__ssvfiscanf_r+0x2a>
 8009d8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d8e:	3301      	adds	r3, #1
 8009d90:	3201      	adds	r2, #1
 8009d92:	9245      	str	r2, [sp, #276]	; 0x114
 8009d94:	6862      	ldr	r2, [r4, #4]
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	3a01      	subs	r2, #1
 8009d9a:	6062      	str	r2, [r4, #4]
 8009d9c:	e7ec      	b.n	8009d78 <__ssvfiscanf_r+0x3c>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4630      	mov	r0, r6
 8009da2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009da4:	4798      	blx	r3
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d0e9      	beq.n	8009d7e <__ssvfiscanf_r+0x42>
 8009daa:	e7ed      	b.n	8009d88 <__ssvfiscanf_r+0x4c>
 8009dac:	2b25      	cmp	r3, #37	; 0x25
 8009dae:	d012      	beq.n	8009dd6 <__ssvfiscanf_r+0x9a>
 8009db0:	469a      	mov	sl, r3
 8009db2:	6863      	ldr	r3, [r4, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f340 8094 	ble.w	8009ee2 <__ssvfiscanf_r+0x1a6>
 8009dba:	6822      	ldr	r2, [r4, #0]
 8009dbc:	7813      	ldrb	r3, [r2, #0]
 8009dbe:	4553      	cmp	r3, sl
 8009dc0:	f040 8131 	bne.w	800a026 <__ssvfiscanf_r+0x2ea>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	3201      	adds	r2, #1
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	6063      	str	r3, [r4, #4]
 8009dcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	9345      	str	r3, [sp, #276]	; 0x114
 8009dd4:	e7d8      	b.n	8009d88 <__ssvfiscanf_r+0x4c>
 8009dd6:	9141      	str	r1, [sp, #260]	; 0x104
 8009dd8:	9143      	str	r1, [sp, #268]	; 0x10c
 8009dda:	7853      	ldrb	r3, [r2, #1]
 8009ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dde:	bf04      	itt	eq
 8009de0:	2310      	moveq	r3, #16
 8009de2:	1c95      	addeq	r5, r2, #2
 8009de4:	f04f 020a 	mov.w	r2, #10
 8009de8:	bf08      	it	eq
 8009dea:	9341      	streq	r3, [sp, #260]	; 0x104
 8009dec:	46aa      	mov	sl, r5
 8009dee:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009df2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d91d      	bls.n	8009e36 <__ssvfiscanf_r+0xfa>
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	487e      	ldr	r0, [pc, #504]	; (8009ff8 <__ssvfiscanf_r+0x2bc>)
 8009dfe:	f001 f9bf 	bl	800b180 <memchr>
 8009e02:	b140      	cbz	r0, 8009e16 <__ssvfiscanf_r+0xda>
 8009e04:	2301      	movs	r3, #1
 8009e06:	4655      	mov	r5, sl
 8009e08:	eba0 0009 	sub.w	r0, r0, r9
 8009e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e12:	4318      	orrs	r0, r3
 8009e14:	9041      	str	r0, [sp, #260]	; 0x104
 8009e16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e1a:	2b78      	cmp	r3, #120	; 0x78
 8009e1c:	d806      	bhi.n	8009e2c <__ssvfiscanf_r+0xf0>
 8009e1e:	2b57      	cmp	r3, #87	; 0x57
 8009e20:	d810      	bhi.n	8009e44 <__ssvfiscanf_r+0x108>
 8009e22:	2b25      	cmp	r3, #37	; 0x25
 8009e24:	d0c4      	beq.n	8009db0 <__ssvfiscanf_r+0x74>
 8009e26:	d857      	bhi.n	8009ed8 <__ssvfiscanf_r+0x19c>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d065      	beq.n	8009ef8 <__ssvfiscanf_r+0x1bc>
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e30:	230a      	movs	r3, #10
 8009e32:	9342      	str	r3, [sp, #264]	; 0x108
 8009e34:	e072      	b.n	8009f1c <__ssvfiscanf_r+0x1e0>
 8009e36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009e38:	4655      	mov	r5, sl
 8009e3a:	fb02 1103 	mla	r1, r2, r3, r1
 8009e3e:	3930      	subs	r1, #48	; 0x30
 8009e40:	9143      	str	r1, [sp, #268]	; 0x10c
 8009e42:	e7d3      	b.n	8009dec <__ssvfiscanf_r+0xb0>
 8009e44:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009e48:	2a20      	cmp	r2, #32
 8009e4a:	d8ef      	bhi.n	8009e2c <__ssvfiscanf_r+0xf0>
 8009e4c:	a101      	add	r1, pc, #4	; (adr r1, 8009e54 <__ssvfiscanf_r+0x118>)
 8009e4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009f07 	.word	0x08009f07
 8009e58:	08009e2d 	.word	0x08009e2d
 8009e5c:	08009e2d 	.word	0x08009e2d
 8009e60:	08009f65 	.word	0x08009f65
 8009e64:	08009e2d 	.word	0x08009e2d
 8009e68:	08009e2d 	.word	0x08009e2d
 8009e6c:	08009e2d 	.word	0x08009e2d
 8009e70:	08009e2d 	.word	0x08009e2d
 8009e74:	08009e2d 	.word	0x08009e2d
 8009e78:	08009e2d 	.word	0x08009e2d
 8009e7c:	08009e2d 	.word	0x08009e2d
 8009e80:	08009f7b 	.word	0x08009f7b
 8009e84:	08009f51 	.word	0x08009f51
 8009e88:	08009edf 	.word	0x08009edf
 8009e8c:	08009edf 	.word	0x08009edf
 8009e90:	08009edf 	.word	0x08009edf
 8009e94:	08009e2d 	.word	0x08009e2d
 8009e98:	08009f55 	.word	0x08009f55
 8009e9c:	08009e2d 	.word	0x08009e2d
 8009ea0:	08009e2d 	.word	0x08009e2d
 8009ea4:	08009e2d 	.word	0x08009e2d
 8009ea8:	08009e2d 	.word	0x08009e2d
 8009eac:	08009f8b 	.word	0x08009f8b
 8009eb0:	08009f5d 	.word	0x08009f5d
 8009eb4:	08009eff 	.word	0x08009eff
 8009eb8:	08009e2d 	.word	0x08009e2d
 8009ebc:	08009e2d 	.word	0x08009e2d
 8009ec0:	08009f87 	.word	0x08009f87
 8009ec4:	08009e2d 	.word	0x08009e2d
 8009ec8:	08009f51 	.word	0x08009f51
 8009ecc:	08009e2d 	.word	0x08009e2d
 8009ed0:	08009e2d 	.word	0x08009e2d
 8009ed4:	08009f07 	.word	0x08009f07
 8009ed8:	3b45      	subs	r3, #69	; 0x45
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d8a6      	bhi.n	8009e2c <__ssvfiscanf_r+0xf0>
 8009ede:	2305      	movs	r3, #5
 8009ee0:	e01b      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ee8:	4798      	blx	r3
 8009eea:	2800      	cmp	r0, #0
 8009eec:	f43f af65 	beq.w	8009dba <__ssvfiscanf_r+0x7e>
 8009ef0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f040 808d 	bne.w	800a012 <__ssvfiscanf_r+0x2d6>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	e08f      	b.n	800a01e <__ssvfiscanf_r+0x2e2>
 8009efe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f00:	f042 0220 	orr.w	r2, r2, #32
 8009f04:	9241      	str	r2, [sp, #260]	; 0x104
 8009f06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0c:	9241      	str	r2, [sp, #260]	; 0x104
 8009f0e:	2210      	movs	r2, #16
 8009f10:	2b6f      	cmp	r3, #111	; 0x6f
 8009f12:	bf34      	ite	cc
 8009f14:	2303      	movcc	r3, #3
 8009f16:	2304      	movcs	r3, #4
 8009f18:	9242      	str	r2, [sp, #264]	; 0x108
 8009f1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd42      	ble.n	8009fa8 <__ssvfiscanf_r+0x26c>
 8009f22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f24:	0659      	lsls	r1, r3, #25
 8009f26:	d404      	bmi.n	8009f32 <__ssvfiscanf_r+0x1f6>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	5cba      	ldrb	r2, [r7, r2]
 8009f2e:	0712      	lsls	r2, r2, #28
 8009f30:	d441      	bmi.n	8009fb6 <__ssvfiscanf_r+0x27a>
 8009f32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	dc50      	bgt.n	8009fda <__ssvfiscanf_r+0x29e>
 8009f38:	466b      	mov	r3, sp
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	a941      	add	r1, sp, #260	; 0x104
 8009f40:	f000 fb64 	bl	800a60c <_scanf_chars>
 8009f44:	2801      	cmp	r0, #1
 8009f46:	d06e      	beq.n	800a026 <__ssvfiscanf_r+0x2ea>
 8009f48:	2802      	cmp	r0, #2
 8009f4a:	f47f af1d 	bne.w	8009d88 <__ssvfiscanf_r+0x4c>
 8009f4e:	e7cf      	b.n	8009ef0 <__ssvfiscanf_r+0x1b4>
 8009f50:	220a      	movs	r2, #10
 8009f52:	e7dd      	b.n	8009f10 <__ssvfiscanf_r+0x1d4>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9342      	str	r3, [sp, #264]	; 0x108
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e7de      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	9342      	str	r3, [sp, #264]	; 0x108
 8009f60:	2304      	movs	r3, #4
 8009f62:	e7da      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4640      	mov	r0, r8
 8009f68:	f000 fcc4 	bl	800a8f4 <__sccl>
 8009f6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f6e:	4605      	mov	r5, r0
 8009f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f74:	9341      	str	r3, [sp, #260]	; 0x104
 8009f76:	2301      	movs	r3, #1
 8009f78:	e7cf      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009f7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f80:	9341      	str	r3, [sp, #260]	; 0x104
 8009f82:	2300      	movs	r3, #0
 8009f84:	e7c9      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e7c7      	b.n	8009f1a <__ssvfiscanf_r+0x1de>
 8009f8a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009f8c:	06c3      	lsls	r3, r0, #27
 8009f8e:	f53f aefb 	bmi.w	8009d88 <__ssvfiscanf_r+0x4c>
 8009f92:	9b00      	ldr	r3, [sp, #0]
 8009f94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f96:	1d19      	adds	r1, r3, #4
 8009f98:	9100      	str	r1, [sp, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f010 0f01 	tst.w	r0, #1
 8009fa0:	bf14      	ite	ne
 8009fa2:	801a      	strhne	r2, [r3, #0]
 8009fa4:	601a      	streq	r2, [r3, #0]
 8009fa6:	e6ef      	b.n	8009d88 <__ssvfiscanf_r+0x4c>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4630      	mov	r0, r6
 8009fac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fae:	4798      	blx	r3
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d0b6      	beq.n	8009f22 <__ssvfiscanf_r+0x1e6>
 8009fb4:	e79c      	b.n	8009ef0 <__ssvfiscanf_r+0x1b4>
 8009fb6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009fb8:	3201      	adds	r2, #1
 8009fba:	9245      	str	r2, [sp, #276]	; 0x114
 8009fbc:	6862      	ldr	r2, [r4, #4]
 8009fbe:	3a01      	subs	r2, #1
 8009fc0:	2a00      	cmp	r2, #0
 8009fc2:	6062      	str	r2, [r4, #4]
 8009fc4:	dd02      	ble.n	8009fcc <__ssvfiscanf_r+0x290>
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	e7ad      	b.n	8009f28 <__ssvfiscanf_r+0x1ec>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4630      	mov	r0, r6
 8009fd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fd2:	4798      	blx	r3
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0a7      	beq.n	8009f28 <__ssvfiscanf_r+0x1ec>
 8009fd8:	e78a      	b.n	8009ef0 <__ssvfiscanf_r+0x1b4>
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	dc0e      	bgt.n	8009ffc <__ssvfiscanf_r+0x2c0>
 8009fde:	466b      	mov	r3, sp
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	a941      	add	r1, sp, #260	; 0x104
 8009fe6:	f000 fb6b 	bl	800a6c0 <_scanf_i>
 8009fea:	e7ab      	b.n	8009f44 <__ssvfiscanf_r+0x208>
 8009fec:	08009c89 	.word	0x08009c89
 8009ff0:	08009d03 	.word	0x08009d03
 8009ff4:	0800b55b 	.word	0x0800b55b
 8009ff8:	0800b512 	.word	0x0800b512
 8009ffc:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <__ssvfiscanf_r+0x2f0>)
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f43f aec2 	beq.w	8009d88 <__ssvfiscanf_r+0x4c>
 800a004:	466b      	mov	r3, sp
 800a006:	4622      	mov	r2, r4
 800a008:	4630      	mov	r0, r6
 800a00a:	a941      	add	r1, sp, #260	; 0x104
 800a00c:	f3af 8000 	nop.w
 800a010:	e798      	b.n	8009f44 <__ssvfiscanf_r+0x208>
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a018:	bf18      	it	ne
 800a01a:	f04f 30ff 	movne.w	r0, #4294967295
 800a01e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a026:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a028:	e7f9      	b.n	800a01e <__ssvfiscanf_r+0x2e2>
 800a02a:	bf00      	nop
 800a02c:	00000000 	.word	0x00000000

0800a030 <__sfputc_r>:
 800a030:	6893      	ldr	r3, [r2, #8]
 800a032:	b410      	push	{r4}
 800a034:	3b01      	subs	r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	6093      	str	r3, [r2, #8]
 800a03a:	da07      	bge.n	800a04c <__sfputc_r+0x1c>
 800a03c:	6994      	ldr	r4, [r2, #24]
 800a03e:	42a3      	cmp	r3, r4
 800a040:	db01      	blt.n	800a046 <__sfputc_r+0x16>
 800a042:	290a      	cmp	r1, #10
 800a044:	d102      	bne.n	800a04c <__sfputc_r+0x1c>
 800a046:	bc10      	pop	{r4}
 800a048:	f000 bdb6 	b.w	800abb8 <__swbuf_r>
 800a04c:	6813      	ldr	r3, [r2, #0]
 800a04e:	1c58      	adds	r0, r3, #1
 800a050:	6010      	str	r0, [r2, #0]
 800a052:	7019      	strb	r1, [r3, #0]
 800a054:	4608      	mov	r0, r1
 800a056:	bc10      	pop	{r4}
 800a058:	4770      	bx	lr

0800a05a <__sfputs_r>:
 800a05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05c:	4606      	mov	r6, r0
 800a05e:	460f      	mov	r7, r1
 800a060:	4614      	mov	r4, r2
 800a062:	18d5      	adds	r5, r2, r3
 800a064:	42ac      	cmp	r4, r5
 800a066:	d101      	bne.n	800a06c <__sfputs_r+0x12>
 800a068:	2000      	movs	r0, #0
 800a06a:	e007      	b.n	800a07c <__sfputs_r+0x22>
 800a06c:	463a      	mov	r2, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a074:	f7ff ffdc 	bl	800a030 <__sfputc_r>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d1f3      	bne.n	800a064 <__sfputs_r+0xa>
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a080 <_vfiprintf_r>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	460d      	mov	r5, r1
 800a086:	4614      	mov	r4, r2
 800a088:	4698      	mov	r8, r3
 800a08a:	4606      	mov	r6, r0
 800a08c:	b09d      	sub	sp, #116	; 0x74
 800a08e:	b118      	cbz	r0, 800a098 <_vfiprintf_r+0x18>
 800a090:	6983      	ldr	r3, [r0, #24]
 800a092:	b90b      	cbnz	r3, 800a098 <_vfiprintf_r+0x18>
 800a094:	f000 ff6e 	bl	800af74 <__sinit>
 800a098:	4b89      	ldr	r3, [pc, #548]	; (800a2c0 <_vfiprintf_r+0x240>)
 800a09a:	429d      	cmp	r5, r3
 800a09c:	d11b      	bne.n	800a0d6 <_vfiprintf_r+0x56>
 800a09e:	6875      	ldr	r5, [r6, #4]
 800a0a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a2:	07d9      	lsls	r1, r3, #31
 800a0a4:	d405      	bmi.n	800a0b2 <_vfiprintf_r+0x32>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	059a      	lsls	r2, r3, #22
 800a0aa:	d402      	bmi.n	800a0b2 <_vfiprintf_r+0x32>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ae:	f000 ffff 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	071b      	lsls	r3, r3, #28
 800a0b6:	d501      	bpl.n	800a0bc <_vfiprintf_r+0x3c>
 800a0b8:	692b      	ldr	r3, [r5, #16]
 800a0ba:	b9eb      	cbnz	r3, 800a0f8 <_vfiprintf_r+0x78>
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 fdcc 	bl	800ac5c <__swsetup_r>
 800a0c4:	b1c0      	cbz	r0, 800a0f8 <_vfiprintf_r+0x78>
 800a0c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c8:	07dc      	lsls	r4, r3, #31
 800a0ca:	d50e      	bpl.n	800a0ea <_vfiprintf_r+0x6a>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	b01d      	add	sp, #116	; 0x74
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	4b7b      	ldr	r3, [pc, #492]	; (800a2c4 <_vfiprintf_r+0x244>)
 800a0d8:	429d      	cmp	r5, r3
 800a0da:	d101      	bne.n	800a0e0 <_vfiprintf_r+0x60>
 800a0dc:	68b5      	ldr	r5, [r6, #8]
 800a0de:	e7df      	b.n	800a0a0 <_vfiprintf_r+0x20>
 800a0e0:	4b79      	ldr	r3, [pc, #484]	; (800a2c8 <_vfiprintf_r+0x248>)
 800a0e2:	429d      	cmp	r5, r3
 800a0e4:	bf08      	it	eq
 800a0e6:	68f5      	ldreq	r5, [r6, #12]
 800a0e8:	e7da      	b.n	800a0a0 <_vfiprintf_r+0x20>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	0598      	lsls	r0, r3, #22
 800a0ee:	d4ed      	bmi.n	800a0cc <_vfiprintf_r+0x4c>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f2:	f000 ffde 	bl	800b0b2 <__retarget_lock_release_recursive>
 800a0f6:	e7e9      	b.n	800a0cc <_vfiprintf_r+0x4c>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a102:	2330      	movs	r3, #48	; 0x30
 800a104:	f04f 0901 	mov.w	r9, #1
 800a108:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a2cc <_vfiprintf_r+0x24c>
 800a110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a114:	4623      	mov	r3, r4
 800a116:	469a      	mov	sl, r3
 800a118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a11c:	b10a      	cbz	r2, 800a122 <_vfiprintf_r+0xa2>
 800a11e:	2a25      	cmp	r2, #37	; 0x25
 800a120:	d1f9      	bne.n	800a116 <_vfiprintf_r+0x96>
 800a122:	ebba 0b04 	subs.w	fp, sl, r4
 800a126:	d00b      	beq.n	800a140 <_vfiprintf_r+0xc0>
 800a128:	465b      	mov	r3, fp
 800a12a:	4622      	mov	r2, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff ff93 	bl	800a05a <__sfputs_r>
 800a134:	3001      	adds	r0, #1
 800a136:	f000 80aa 	beq.w	800a28e <_vfiprintf_r+0x20e>
 800a13a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a13c:	445a      	add	r2, fp
 800a13e:	9209      	str	r2, [sp, #36]	; 0x24
 800a140:	f89a 3000 	ldrb.w	r3, [sl]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 80a2 	beq.w	800a28e <_vfiprintf_r+0x20e>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f04f 32ff 	mov.w	r2, #4294967295
 800a150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a154:	f10a 0a01 	add.w	sl, sl, #1
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	9307      	str	r3, [sp, #28]
 800a15c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a160:	931a      	str	r3, [sp, #104]	; 0x68
 800a162:	4654      	mov	r4, sl
 800a164:	2205      	movs	r2, #5
 800a166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16a:	4858      	ldr	r0, [pc, #352]	; (800a2cc <_vfiprintf_r+0x24c>)
 800a16c:	f001 f808 	bl	800b180 <memchr>
 800a170:	9a04      	ldr	r2, [sp, #16]
 800a172:	b9d8      	cbnz	r0, 800a1ac <_vfiprintf_r+0x12c>
 800a174:	06d1      	lsls	r1, r2, #27
 800a176:	bf44      	itt	mi
 800a178:	2320      	movmi	r3, #32
 800a17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a17e:	0713      	lsls	r3, r2, #28
 800a180:	bf44      	itt	mi
 800a182:	232b      	movmi	r3, #43	; 0x2b
 800a184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a188:	f89a 3000 	ldrb.w	r3, [sl]
 800a18c:	2b2a      	cmp	r3, #42	; 0x2a
 800a18e:	d015      	beq.n	800a1bc <_vfiprintf_r+0x13c>
 800a190:	4654      	mov	r4, sl
 800a192:	2000      	movs	r0, #0
 800a194:	f04f 0c0a 	mov.w	ip, #10
 800a198:	9a07      	ldr	r2, [sp, #28]
 800a19a:	4621      	mov	r1, r4
 800a19c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a0:	3b30      	subs	r3, #48	; 0x30
 800a1a2:	2b09      	cmp	r3, #9
 800a1a4:	d94e      	bls.n	800a244 <_vfiprintf_r+0x1c4>
 800a1a6:	b1b0      	cbz	r0, 800a1d6 <_vfiprintf_r+0x156>
 800a1a8:	9207      	str	r2, [sp, #28]
 800a1aa:	e014      	b.n	800a1d6 <_vfiprintf_r+0x156>
 800a1ac:	eba0 0308 	sub.w	r3, r0, r8
 800a1b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	46a2      	mov	sl, r4
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	e7d2      	b.n	800a162 <_vfiprintf_r+0xe2>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	1d19      	adds	r1, r3, #4
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	9103      	str	r1, [sp, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfbb      	ittet	lt
 800a1c8:	425b      	neglt	r3, r3
 800a1ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ce:	9307      	strge	r3, [sp, #28]
 800a1d0:	9307      	strlt	r3, [sp, #28]
 800a1d2:	bfb8      	it	lt
 800a1d4:	9204      	strlt	r2, [sp, #16]
 800a1d6:	7823      	ldrb	r3, [r4, #0]
 800a1d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a1da:	d10c      	bne.n	800a1f6 <_vfiprintf_r+0x176>
 800a1dc:	7863      	ldrb	r3, [r4, #1]
 800a1de:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e0:	d135      	bne.n	800a24e <_vfiprintf_r+0x1ce>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	3402      	adds	r4, #2
 800a1e6:	1d1a      	adds	r2, r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	9203      	str	r2, [sp, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfb8      	it	lt
 800a1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a2d0 <_vfiprintf_r+0x250>
 800a1fa:	2203      	movs	r2, #3
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	7821      	ldrb	r1, [r4, #0]
 800a200:	f000 ffbe 	bl	800b180 <memchr>
 800a204:	b140      	cbz	r0, 800a218 <_vfiprintf_r+0x198>
 800a206:	2340      	movs	r3, #64	; 0x40
 800a208:	eba0 000a 	sub.w	r0, r0, sl
 800a20c:	fa03 f000 	lsl.w	r0, r3, r0
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	3401      	adds	r4, #1
 800a214:	4303      	orrs	r3, r0
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21c:	2206      	movs	r2, #6
 800a21e:	482d      	ldr	r0, [pc, #180]	; (800a2d4 <_vfiprintf_r+0x254>)
 800a220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a224:	f000 ffac 	bl	800b180 <memchr>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d03f      	beq.n	800a2ac <_vfiprintf_r+0x22c>
 800a22c:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <_vfiprintf_r+0x258>)
 800a22e:	bb1b      	cbnz	r3, 800a278 <_vfiprintf_r+0x1f8>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3307      	adds	r3, #7
 800a234:	f023 0307 	bic.w	r3, r3, #7
 800a238:	3308      	adds	r3, #8
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	443b      	add	r3, r7
 800a240:	9309      	str	r3, [sp, #36]	; 0x24
 800a242:	e767      	b.n	800a114 <_vfiprintf_r+0x94>
 800a244:	460c      	mov	r4, r1
 800a246:	2001      	movs	r0, #1
 800a248:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24c:	e7a5      	b.n	800a19a <_vfiprintf_r+0x11a>
 800a24e:	2300      	movs	r3, #0
 800a250:	f04f 0c0a 	mov.w	ip, #10
 800a254:	4619      	mov	r1, r3
 800a256:	3401      	adds	r4, #1
 800a258:	9305      	str	r3, [sp, #20]
 800a25a:	4620      	mov	r0, r4
 800a25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a260:	3a30      	subs	r2, #48	; 0x30
 800a262:	2a09      	cmp	r2, #9
 800a264:	d903      	bls.n	800a26e <_vfiprintf_r+0x1ee>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0c5      	beq.n	800a1f6 <_vfiprintf_r+0x176>
 800a26a:	9105      	str	r1, [sp, #20]
 800a26c:	e7c3      	b.n	800a1f6 <_vfiprintf_r+0x176>
 800a26e:	4604      	mov	r4, r0
 800a270:	2301      	movs	r3, #1
 800a272:	fb0c 2101 	mla	r1, ip, r1, r2
 800a276:	e7f0      	b.n	800a25a <_vfiprintf_r+0x1da>
 800a278:	ab03      	add	r3, sp, #12
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	462a      	mov	r2, r5
 800a27e:	4630      	mov	r0, r6
 800a280:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <_vfiprintf_r+0x25c>)
 800a282:	a904      	add	r1, sp, #16
 800a284:	f3af 8000 	nop.w
 800a288:	4607      	mov	r7, r0
 800a28a:	1c78      	adds	r0, r7, #1
 800a28c:	d1d6      	bne.n	800a23c <_vfiprintf_r+0x1bc>
 800a28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a290:	07d9      	lsls	r1, r3, #31
 800a292:	d405      	bmi.n	800a2a0 <_vfiprintf_r+0x220>
 800a294:	89ab      	ldrh	r3, [r5, #12]
 800a296:	059a      	lsls	r2, r3, #22
 800a298:	d402      	bmi.n	800a2a0 <_vfiprintf_r+0x220>
 800a29a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29c:	f000 ff09 	bl	800b0b2 <__retarget_lock_release_recursive>
 800a2a0:	89ab      	ldrh	r3, [r5, #12]
 800a2a2:	065b      	lsls	r3, r3, #25
 800a2a4:	f53f af12 	bmi.w	800a0cc <_vfiprintf_r+0x4c>
 800a2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2aa:	e711      	b.n	800a0d0 <_vfiprintf_r+0x50>
 800a2ac:	ab03      	add	r3, sp, #12
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <_vfiprintf_r+0x25c>)
 800a2b6:	a904      	add	r1, sp, #16
 800a2b8:	f000 f882 	bl	800a3c0 <_printf_i>
 800a2bc:	e7e4      	b.n	800a288 <_vfiprintf_r+0x208>
 800a2be:	bf00      	nop
 800a2c0:	0800b67c 	.word	0x0800b67c
 800a2c4:	0800b69c 	.word	0x0800b69c
 800a2c8:	0800b65c 	.word	0x0800b65c
 800a2cc:	0800b50c 	.word	0x0800b50c
 800a2d0:	0800b512 	.word	0x0800b512
 800a2d4:	0800b516 	.word	0x0800b516
 800a2d8:	00000000 	.word	0x00000000
 800a2dc:	0800a05b 	.word	0x0800a05b

0800a2e0 <_printf_common>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	4616      	mov	r6, r2
 800a2e6:	4699      	mov	r9, r3
 800a2e8:	688a      	ldr	r2, [r1, #8]
 800a2ea:	690b      	ldr	r3, [r1, #16]
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	bfb8      	it	lt
 800a2f2:	4613      	movlt	r3, r2
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a300:	b10a      	cbz	r2, 800a306 <_printf_common+0x26>
 800a302:	3301      	adds	r3, #1
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	0699      	lsls	r1, r3, #26
 800a30a:	bf42      	ittt	mi
 800a30c:	6833      	ldrmi	r3, [r6, #0]
 800a30e:	3302      	addmi	r3, #2
 800a310:	6033      	strmi	r3, [r6, #0]
 800a312:	6825      	ldr	r5, [r4, #0]
 800a314:	f015 0506 	ands.w	r5, r5, #6
 800a318:	d106      	bne.n	800a328 <_printf_common+0x48>
 800a31a:	f104 0a19 	add.w	sl, r4, #25
 800a31e:	68e3      	ldr	r3, [r4, #12]
 800a320:	6832      	ldr	r2, [r6, #0]
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	42ab      	cmp	r3, r5
 800a326:	dc28      	bgt.n	800a37a <_printf_common+0x9a>
 800a328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a32c:	1e13      	subs	r3, r2, #0
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	bf18      	it	ne
 800a332:	2301      	movne	r3, #1
 800a334:	0692      	lsls	r2, r2, #26
 800a336:	d42d      	bmi.n	800a394 <_printf_common+0xb4>
 800a338:	4649      	mov	r1, r9
 800a33a:	4638      	mov	r0, r7
 800a33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a340:	47c0      	blx	r8
 800a342:	3001      	adds	r0, #1
 800a344:	d020      	beq.n	800a388 <_printf_common+0xa8>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	68e5      	ldr	r5, [r4, #12]
 800a34a:	f003 0306 	and.w	r3, r3, #6
 800a34e:	2b04      	cmp	r3, #4
 800a350:	bf18      	it	ne
 800a352:	2500      	movne	r5, #0
 800a354:	6832      	ldr	r2, [r6, #0]
 800a356:	f04f 0600 	mov.w	r6, #0
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	bf08      	it	eq
 800a35e:	1aad      	subeq	r5, r5, r2
 800a360:	6922      	ldr	r2, [r4, #16]
 800a362:	bf08      	it	eq
 800a364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a368:	4293      	cmp	r3, r2
 800a36a:	bfc4      	itt	gt
 800a36c:	1a9b      	subgt	r3, r3, r2
 800a36e:	18ed      	addgt	r5, r5, r3
 800a370:	341a      	adds	r4, #26
 800a372:	42b5      	cmp	r5, r6
 800a374:	d11a      	bne.n	800a3ac <_printf_common+0xcc>
 800a376:	2000      	movs	r0, #0
 800a378:	e008      	b.n	800a38c <_printf_common+0xac>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4652      	mov	r2, sl
 800a37e:	4649      	mov	r1, r9
 800a380:	4638      	mov	r0, r7
 800a382:	47c0      	blx	r8
 800a384:	3001      	adds	r0, #1
 800a386:	d103      	bne.n	800a390 <_printf_common+0xb0>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a390:	3501      	adds	r5, #1
 800a392:	e7c4      	b.n	800a31e <_printf_common+0x3e>
 800a394:	2030      	movs	r0, #48	; 0x30
 800a396:	18e1      	adds	r1, r4, r3
 800a398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3a2:	4422      	add	r2, r4
 800a3a4:	3302      	adds	r3, #2
 800a3a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3aa:	e7c5      	b.n	800a338 <_printf_common+0x58>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	47c0      	blx	r8
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0e6      	beq.n	800a388 <_printf_common+0xa8>
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7d9      	b.n	800a372 <_printf_common+0x92>
	...

0800a3c0 <_printf_i>:
 800a3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	7e0f      	ldrb	r7, [r1, #24]
 800a3c6:	4691      	mov	r9, r2
 800a3c8:	2f78      	cmp	r7, #120	; 0x78
 800a3ca:	4680      	mov	r8, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	469a      	mov	sl, r3
 800a3d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3d6:	d807      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3d8:	2f62      	cmp	r7, #98	; 0x62
 800a3da:	d80a      	bhi.n	800a3f2 <_printf_i+0x32>
 800a3dc:	2f00      	cmp	r7, #0
 800a3de:	f000 80d9 	beq.w	800a594 <_printf_i+0x1d4>
 800a3e2:	2f58      	cmp	r7, #88	; 0x58
 800a3e4:	f000 80a4 	beq.w	800a530 <_printf_i+0x170>
 800a3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3f0:	e03a      	b.n	800a468 <_printf_i+0xa8>
 800a3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3f6:	2b15      	cmp	r3, #21
 800a3f8:	d8f6      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3fa:	a101      	add	r1, pc, #4	; (adr r1, 800a400 <_printf_i+0x40>)
 800a3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a400:	0800a459 	.word	0x0800a459
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a3e9 	.word	0x0800a3e9
 800a40c:	0800a3e9 	.word	0x0800a3e9
 800a410:	0800a3e9 	.word	0x0800a3e9
 800a414:	0800a3e9 	.word	0x0800a3e9
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a3e9 	.word	0x0800a3e9
 800a420:	0800a3e9 	.word	0x0800a3e9
 800a424:	0800a3e9 	.word	0x0800a3e9
 800a428:	0800a3e9 	.word	0x0800a3e9
 800a42c:	0800a57b 	.word	0x0800a57b
 800a430:	0800a49d 	.word	0x0800a49d
 800a434:	0800a55d 	.word	0x0800a55d
 800a438:	0800a3e9 	.word	0x0800a3e9
 800a43c:	0800a3e9 	.word	0x0800a3e9
 800a440:	0800a59d 	.word	0x0800a59d
 800a444:	0800a3e9 	.word	0x0800a3e9
 800a448:	0800a49d 	.word	0x0800a49d
 800a44c:	0800a3e9 	.word	0x0800a3e9
 800a450:	0800a3e9 	.word	0x0800a3e9
 800a454:	0800a565 	.word	0x0800a565
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	1d1a      	adds	r2, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a468:	2301      	movs	r3, #1
 800a46a:	e0a4      	b.n	800a5b6 <_printf_i+0x1f6>
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	6829      	ldr	r1, [r5, #0]
 800a470:	0606      	lsls	r6, r0, #24
 800a472:	f101 0304 	add.w	r3, r1, #4
 800a476:	d50a      	bpl.n	800a48e <_printf_i+0xce>
 800a478:	680e      	ldr	r6, [r1, #0]
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	da03      	bge.n	800a488 <_printf_i+0xc8>
 800a480:	232d      	movs	r3, #45	; 0x2d
 800a482:	4276      	negs	r6, r6
 800a484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a488:	230a      	movs	r3, #10
 800a48a:	485e      	ldr	r0, [pc, #376]	; (800a604 <_printf_i+0x244>)
 800a48c:	e019      	b.n	800a4c2 <_printf_i+0x102>
 800a48e:	680e      	ldr	r6, [r1, #0]
 800a490:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	bf18      	it	ne
 800a498:	b236      	sxthne	r6, r6
 800a49a:	e7ef      	b.n	800a47c <_printf_i+0xbc>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	6029      	str	r1, [r5, #0]
 800a4a4:	0601      	lsls	r1, r0, #24
 800a4a6:	d501      	bpl.n	800a4ac <_printf_i+0xec>
 800a4a8:	681e      	ldr	r6, [r3, #0]
 800a4aa:	e002      	b.n	800a4b2 <_printf_i+0xf2>
 800a4ac:	0646      	lsls	r6, r0, #25
 800a4ae:	d5fb      	bpl.n	800a4a8 <_printf_i+0xe8>
 800a4b0:	881e      	ldrh	r6, [r3, #0]
 800a4b2:	2f6f      	cmp	r7, #111	; 0x6f
 800a4b4:	bf0c      	ite	eq
 800a4b6:	2308      	moveq	r3, #8
 800a4b8:	230a      	movne	r3, #10
 800a4ba:	4852      	ldr	r0, [pc, #328]	; (800a604 <_printf_i+0x244>)
 800a4bc:	2100      	movs	r1, #0
 800a4be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c2:	6865      	ldr	r5, [r4, #4]
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	bfa8      	it	ge
 800a4c8:	6821      	ldrge	r1, [r4, #0]
 800a4ca:	60a5      	str	r5, [r4, #8]
 800a4cc:	bfa4      	itt	ge
 800a4ce:	f021 0104 	bicge.w	r1, r1, #4
 800a4d2:	6021      	strge	r1, [r4, #0]
 800a4d4:	b90e      	cbnz	r6, 800a4da <_printf_i+0x11a>
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	d04d      	beq.n	800a576 <_printf_i+0x1b6>
 800a4da:	4615      	mov	r5, r2
 800a4dc:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4e0:	fb03 6711 	mls	r7, r3, r1, r6
 800a4e4:	5dc7      	ldrb	r7, [r0, r7]
 800a4e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4ea:	4637      	mov	r7, r6
 800a4ec:	42bb      	cmp	r3, r7
 800a4ee:	460e      	mov	r6, r1
 800a4f0:	d9f4      	bls.n	800a4dc <_printf_i+0x11c>
 800a4f2:	2b08      	cmp	r3, #8
 800a4f4:	d10b      	bne.n	800a50e <_printf_i+0x14e>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	07de      	lsls	r6, r3, #31
 800a4fa:	d508      	bpl.n	800a50e <_printf_i+0x14e>
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	6861      	ldr	r1, [r4, #4]
 800a500:	4299      	cmp	r1, r3
 800a502:	bfde      	ittt	le
 800a504:	2330      	movle	r3, #48	; 0x30
 800a506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a50a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a50e:	1b52      	subs	r2, r2, r5
 800a510:	6122      	str	r2, [r4, #16]
 800a512:	464b      	mov	r3, r9
 800a514:	4621      	mov	r1, r4
 800a516:	4640      	mov	r0, r8
 800a518:	f8cd a000 	str.w	sl, [sp]
 800a51c:	aa03      	add	r2, sp, #12
 800a51e:	f7ff fedf 	bl	800a2e0 <_printf_common>
 800a522:	3001      	adds	r0, #1
 800a524:	d14c      	bne.n	800a5c0 <_printf_i+0x200>
 800a526:	f04f 30ff 	mov.w	r0, #4294967295
 800a52a:	b004      	add	sp, #16
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	4834      	ldr	r0, [pc, #208]	; (800a604 <_printf_i+0x244>)
 800a532:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a536:	6829      	ldr	r1, [r5, #0]
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a53e:	6029      	str	r1, [r5, #0]
 800a540:	061d      	lsls	r5, r3, #24
 800a542:	d514      	bpl.n	800a56e <_printf_i+0x1ae>
 800a544:	07df      	lsls	r7, r3, #31
 800a546:	bf44      	itt	mi
 800a548:	f043 0320 	orrmi.w	r3, r3, #32
 800a54c:	6023      	strmi	r3, [r4, #0]
 800a54e:	b91e      	cbnz	r6, 800a558 <_printf_i+0x198>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	f023 0320 	bic.w	r3, r3, #32
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	2310      	movs	r3, #16
 800a55a:	e7af      	b.n	800a4bc <_printf_i+0xfc>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	f043 0320 	orr.w	r3, r3, #32
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	2378      	movs	r3, #120	; 0x78
 800a566:	4828      	ldr	r0, [pc, #160]	; (800a608 <_printf_i+0x248>)
 800a568:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a56c:	e7e3      	b.n	800a536 <_printf_i+0x176>
 800a56e:	0659      	lsls	r1, r3, #25
 800a570:	bf48      	it	mi
 800a572:	b2b6      	uxthmi	r6, r6
 800a574:	e7e6      	b.n	800a544 <_printf_i+0x184>
 800a576:	4615      	mov	r5, r2
 800a578:	e7bb      	b.n	800a4f2 <_printf_i+0x132>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	6826      	ldr	r6, [r4, #0]
 800a57e:	1d18      	adds	r0, r3, #4
 800a580:	6961      	ldr	r1, [r4, #20]
 800a582:	6028      	str	r0, [r5, #0]
 800a584:	0635      	lsls	r5, r6, #24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	d501      	bpl.n	800a58e <_printf_i+0x1ce>
 800a58a:	6019      	str	r1, [r3, #0]
 800a58c:	e002      	b.n	800a594 <_printf_i+0x1d4>
 800a58e:	0670      	lsls	r0, r6, #25
 800a590:	d5fb      	bpl.n	800a58a <_printf_i+0x1ca>
 800a592:	8019      	strh	r1, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	4615      	mov	r5, r2
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	e7ba      	b.n	800a512 <_printf_i+0x152>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	2100      	movs	r1, #0
 800a5a0:	1d1a      	adds	r2, r3, #4
 800a5a2:	602a      	str	r2, [r5, #0]
 800a5a4:	681d      	ldr	r5, [r3, #0]
 800a5a6:	6862      	ldr	r2, [r4, #4]
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f000 fde9 	bl	800b180 <memchr>
 800a5ae:	b108      	cbz	r0, 800a5b4 <_printf_i+0x1f4>
 800a5b0:	1b40      	subs	r0, r0, r5
 800a5b2:	6060      	str	r0, [r4, #4]
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5be:	e7a8      	b.n	800a512 <_printf_i+0x152>
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	47d0      	blx	sl
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d0ab      	beq.n	800a526 <_printf_i+0x166>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	079b      	lsls	r3, r3, #30
 800a5d2:	d413      	bmi.n	800a5fc <_printf_i+0x23c>
 800a5d4:	68e0      	ldr	r0, [r4, #12]
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	4298      	cmp	r0, r3
 800a5da:	bfb8      	it	lt
 800a5dc:	4618      	movlt	r0, r3
 800a5de:	e7a4      	b.n	800a52a <_printf_i+0x16a>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4632      	mov	r2, r6
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	47d0      	blx	sl
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d09b      	beq.n	800a526 <_printf_i+0x166>
 800a5ee:	3501      	adds	r5, #1
 800a5f0:	68e3      	ldr	r3, [r4, #12]
 800a5f2:	9903      	ldr	r1, [sp, #12]
 800a5f4:	1a5b      	subs	r3, r3, r1
 800a5f6:	42ab      	cmp	r3, r5
 800a5f8:	dcf2      	bgt.n	800a5e0 <_printf_i+0x220>
 800a5fa:	e7eb      	b.n	800a5d4 <_printf_i+0x214>
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	f104 0619 	add.w	r6, r4, #25
 800a602:	e7f5      	b.n	800a5f0 <_printf_i+0x230>
 800a604:	0800b51d 	.word	0x0800b51d
 800a608:	0800b52e 	.word	0x0800b52e

0800a60c <_scanf_chars>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4615      	mov	r5, r2
 800a612:	688a      	ldr	r2, [r1, #8]
 800a614:	4680      	mov	r8, r0
 800a616:	460c      	mov	r4, r1
 800a618:	b932      	cbnz	r2, 800a628 <_scanf_chars+0x1c>
 800a61a:	698a      	ldr	r2, [r1, #24]
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	bf0c      	ite	eq
 800a620:	2201      	moveq	r2, #1
 800a622:	f04f 32ff 	movne.w	r2, #4294967295
 800a626:	608a      	str	r2, [r1, #8]
 800a628:	2700      	movs	r7, #0
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a6bc <_scanf_chars+0xb0>
 800a630:	06d1      	lsls	r1, r2, #27
 800a632:	bf5f      	itttt	pl
 800a634:	681a      	ldrpl	r2, [r3, #0]
 800a636:	1d11      	addpl	r1, r2, #4
 800a638:	6019      	strpl	r1, [r3, #0]
 800a63a:	6816      	ldrpl	r6, [r2, #0]
 800a63c:	69a0      	ldr	r0, [r4, #24]
 800a63e:	b188      	cbz	r0, 800a664 <_scanf_chars+0x58>
 800a640:	2801      	cmp	r0, #1
 800a642:	d107      	bne.n	800a654 <_scanf_chars+0x48>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	6963      	ldr	r3, [r4, #20]
 800a64a:	5c9b      	ldrb	r3, [r3, r2]
 800a64c:	b953      	cbnz	r3, 800a664 <_scanf_chars+0x58>
 800a64e:	2f00      	cmp	r7, #0
 800a650:	d031      	beq.n	800a6b6 <_scanf_chars+0xaa>
 800a652:	e022      	b.n	800a69a <_scanf_chars+0x8e>
 800a654:	2802      	cmp	r0, #2
 800a656:	d120      	bne.n	800a69a <_scanf_chars+0x8e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a660:	071b      	lsls	r3, r3, #28
 800a662:	d41a      	bmi.n	800a69a <_scanf_chars+0x8e>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	3701      	adds	r7, #1
 800a668:	06da      	lsls	r2, r3, #27
 800a66a:	bf5e      	ittt	pl
 800a66c:	682b      	ldrpl	r3, [r5, #0]
 800a66e:	781b      	ldrbpl	r3, [r3, #0]
 800a670:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a674:	682a      	ldr	r2, [r5, #0]
 800a676:	686b      	ldr	r3, [r5, #4]
 800a678:	3201      	adds	r2, #1
 800a67a:	602a      	str	r2, [r5, #0]
 800a67c:	68a2      	ldr	r2, [r4, #8]
 800a67e:	3b01      	subs	r3, #1
 800a680:	3a01      	subs	r2, #1
 800a682:	606b      	str	r3, [r5, #4]
 800a684:	60a2      	str	r2, [r4, #8]
 800a686:	b142      	cbz	r2, 800a69a <_scanf_chars+0x8e>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dcd7      	bgt.n	800a63c <_scanf_chars+0x30>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4640      	mov	r0, r8
 800a690:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a694:	4798      	blx	r3
 800a696:	2800      	cmp	r0, #0
 800a698:	d0d0      	beq.n	800a63c <_scanf_chars+0x30>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	f013 0310 	ands.w	r3, r3, #16
 800a6a0:	d105      	bne.n	800a6ae <_scanf_chars+0xa2>
 800a6a2:	68e2      	ldr	r2, [r4, #12]
 800a6a4:	3201      	adds	r2, #1
 800a6a6:	60e2      	str	r2, [r4, #12]
 800a6a8:	69a2      	ldr	r2, [r4, #24]
 800a6aa:	b102      	cbz	r2, 800a6ae <_scanf_chars+0xa2>
 800a6ac:	7033      	strb	r3, [r6, #0]
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	443b      	add	r3, r7
 800a6b4:	6123      	str	r3, [r4, #16]
 800a6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800b55b 	.word	0x0800b55b

0800a6c0 <_scanf_i>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	4698      	mov	r8, r3
 800a6c8:	4b75      	ldr	r3, [pc, #468]	; (800a8a0 <_scanf_i+0x1e0>)
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6d4:	ab03      	add	r3, sp, #12
 800a6d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a6da:	4b72      	ldr	r3, [pc, #456]	; (800a8a4 <_scanf_i+0x1e4>)
 800a6dc:	69a1      	ldr	r1, [r4, #24]
 800a6de:	4a72      	ldr	r2, [pc, #456]	; (800a8a8 <_scanf_i+0x1e8>)
 800a6e0:	4627      	mov	r7, r4
 800a6e2:	2903      	cmp	r1, #3
 800a6e4:	bf18      	it	ne
 800a6e6:	461a      	movne	r2, r3
 800a6e8:	68a3      	ldr	r3, [r4, #8]
 800a6ea:	9201      	str	r2, [sp, #4]
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6f2:	bf81      	itttt	hi
 800a6f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6f8:	eb03 0905 	addhi.w	r9, r3, r5
 800a6fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a700:	60a3      	strhi	r3, [r4, #8]
 800a702:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a706:	bf98      	it	ls
 800a708:	f04f 0900 	movls.w	r9, #0
 800a70c:	463d      	mov	r5, r7
 800a70e:	f04f 0b00 	mov.w	fp, #0
 800a712:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a716:	6023      	str	r3, [r4, #0]
 800a718:	6831      	ldr	r1, [r6, #0]
 800a71a:	ab03      	add	r3, sp, #12
 800a71c:	2202      	movs	r2, #2
 800a71e:	7809      	ldrb	r1, [r1, #0]
 800a720:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a724:	f000 fd2c 	bl	800b180 <memchr>
 800a728:	b328      	cbz	r0, 800a776 <_scanf_i+0xb6>
 800a72a:	f1bb 0f01 	cmp.w	fp, #1
 800a72e:	d159      	bne.n	800a7e4 <_scanf_i+0x124>
 800a730:	6862      	ldr	r2, [r4, #4]
 800a732:	b92a      	cbnz	r2, 800a740 <_scanf_i+0x80>
 800a734:	2308      	movs	r3, #8
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	6063      	str	r3, [r4, #4]
 800a73a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	6822      	ldr	r2, [r4, #0]
 800a742:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a746:	6022      	str	r2, [r4, #0]
 800a748:	68a2      	ldr	r2, [r4, #8]
 800a74a:	1e51      	subs	r1, r2, #1
 800a74c:	60a1      	str	r1, [r4, #8]
 800a74e:	b192      	cbz	r2, 800a776 <_scanf_i+0xb6>
 800a750:	6832      	ldr	r2, [r6, #0]
 800a752:	1c51      	adds	r1, r2, #1
 800a754:	6031      	str	r1, [r6, #0]
 800a756:	7812      	ldrb	r2, [r2, #0]
 800a758:	f805 2b01 	strb.w	r2, [r5], #1
 800a75c:	6872      	ldr	r2, [r6, #4]
 800a75e:	3a01      	subs	r2, #1
 800a760:	2a00      	cmp	r2, #0
 800a762:	6072      	str	r2, [r6, #4]
 800a764:	dc07      	bgt.n	800a776 <_scanf_i+0xb6>
 800a766:	4631      	mov	r1, r6
 800a768:	4650      	mov	r0, sl
 800a76a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a76e:	4790      	blx	r2
 800a770:	2800      	cmp	r0, #0
 800a772:	f040 8085 	bne.w	800a880 <_scanf_i+0x1c0>
 800a776:	f10b 0b01 	add.w	fp, fp, #1
 800a77a:	f1bb 0f03 	cmp.w	fp, #3
 800a77e:	d1cb      	bne.n	800a718 <_scanf_i+0x58>
 800a780:	6863      	ldr	r3, [r4, #4]
 800a782:	b90b      	cbnz	r3, 800a788 <_scanf_i+0xc8>
 800a784:	230a      	movs	r3, #10
 800a786:	6063      	str	r3, [r4, #4]
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	4948      	ldr	r1, [pc, #288]	; (800a8ac <_scanf_i+0x1ec>)
 800a78c:	6960      	ldr	r0, [r4, #20]
 800a78e:	1ac9      	subs	r1, r1, r3
 800a790:	f000 f8b0 	bl	800a8f4 <__sccl>
 800a794:	f04f 0b00 	mov.w	fp, #0
 800a798:	68a3      	ldr	r3, [r4, #8]
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d03d      	beq.n	800a81c <_scanf_i+0x15c>
 800a7a0:	6831      	ldr	r1, [r6, #0]
 800a7a2:	6960      	ldr	r0, [r4, #20]
 800a7a4:	f891 c000 	ldrb.w	ip, [r1]
 800a7a8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d035      	beq.n	800a81c <_scanf_i+0x15c>
 800a7b0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a7b4:	d124      	bne.n	800a800 <_scanf_i+0x140>
 800a7b6:	0510      	lsls	r0, r2, #20
 800a7b8:	d522      	bpl.n	800a800 <_scanf_i+0x140>
 800a7ba:	f10b 0b01 	add.w	fp, fp, #1
 800a7be:	f1b9 0f00 	cmp.w	r9, #0
 800a7c2:	d003      	beq.n	800a7cc <_scanf_i+0x10c>
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7ca:	60a3      	str	r3, [r4, #8]
 800a7cc:	6873      	ldr	r3, [r6, #4]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	6073      	str	r3, [r6, #4]
 800a7d4:	dd1b      	ble.n	800a80e <_scanf_i+0x14e>
 800a7d6:	6833      	ldr	r3, [r6, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	6033      	str	r3, [r6, #0]
 800a7dc:	68a3      	ldr	r3, [r4, #8]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	60a3      	str	r3, [r4, #8]
 800a7e2:	e7d9      	b.n	800a798 <_scanf_i+0xd8>
 800a7e4:	f1bb 0f02 	cmp.w	fp, #2
 800a7e8:	d1ae      	bne.n	800a748 <_scanf_i+0x88>
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a7f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a7f4:	d1bf      	bne.n	800a776 <_scanf_i+0xb6>
 800a7f6:	2310      	movs	r3, #16
 800a7f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7fc:	6063      	str	r3, [r4, #4]
 800a7fe:	e7a2      	b.n	800a746 <_scanf_i+0x86>
 800a800:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a804:	6022      	str	r2, [r4, #0]
 800a806:	780b      	ldrb	r3, [r1, #0]
 800a808:	f805 3b01 	strb.w	r3, [r5], #1
 800a80c:	e7de      	b.n	800a7cc <_scanf_i+0x10c>
 800a80e:	4631      	mov	r1, r6
 800a810:	4650      	mov	r0, sl
 800a812:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a816:	4798      	blx	r3
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0df      	beq.n	800a7dc <_scanf_i+0x11c>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	05db      	lsls	r3, r3, #23
 800a820:	d50d      	bpl.n	800a83e <_scanf_i+0x17e>
 800a822:	42bd      	cmp	r5, r7
 800a824:	d909      	bls.n	800a83a <_scanf_i+0x17a>
 800a826:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a82a:	4632      	mov	r2, r6
 800a82c:	4650      	mov	r0, sl
 800a82e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a832:	f105 39ff 	add.w	r9, r5, #4294967295
 800a836:	4798      	blx	r3
 800a838:	464d      	mov	r5, r9
 800a83a:	42bd      	cmp	r5, r7
 800a83c:	d02d      	beq.n	800a89a <_scanf_i+0x1da>
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	f012 0210 	ands.w	r2, r2, #16
 800a844:	d113      	bne.n	800a86e <_scanf_i+0x1ae>
 800a846:	702a      	strb	r2, [r5, #0]
 800a848:	4639      	mov	r1, r7
 800a84a:	6863      	ldr	r3, [r4, #4]
 800a84c:	4650      	mov	r0, sl
 800a84e:	9e01      	ldr	r6, [sp, #4]
 800a850:	47b0      	blx	r6
 800a852:	6821      	ldr	r1, [r4, #0]
 800a854:	f8d8 3000 	ldr.w	r3, [r8]
 800a858:	f011 0f20 	tst.w	r1, #32
 800a85c:	d013      	beq.n	800a886 <_scanf_i+0x1c6>
 800a85e:	1d1a      	adds	r2, r3, #4
 800a860:	f8c8 2000 	str.w	r2, [r8]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6018      	str	r0, [r3, #0]
 800a868:	68e3      	ldr	r3, [r4, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60e3      	str	r3, [r4, #12]
 800a86e:	2000      	movs	r0, #0
 800a870:	1bed      	subs	r5, r5, r7
 800a872:	44ab      	add	fp, r5
 800a874:	6925      	ldr	r5, [r4, #16]
 800a876:	445d      	add	r5, fp
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	b007      	add	sp, #28
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	f04f 0b00 	mov.w	fp, #0
 800a884:	e7ca      	b.n	800a81c <_scanf_i+0x15c>
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	f8c8 2000 	str.w	r2, [r8]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f011 0f01 	tst.w	r1, #1
 800a892:	bf14      	ite	ne
 800a894:	8018      	strhne	r0, [r3, #0]
 800a896:	6018      	streq	r0, [r3, #0]
 800a898:	e7e6      	b.n	800a868 <_scanf_i+0x1a8>
 800a89a:	2001      	movs	r0, #1
 800a89c:	e7ed      	b.n	800a87a <_scanf_i+0x1ba>
 800a89e:	bf00      	nop
 800a8a0:	0800b434 	.word	0x0800b434
 800a8a4:	0800ab45 	.word	0x0800ab45
 800a8a8:	0800aa5d 	.word	0x0800aa5d
 800a8ac:	0800b558 	.word	0x0800b558

0800a8b0 <_read_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4d05      	ldr	r5, [pc, #20]	; (800a8d0 <_read_r+0x20>)
 800a8bc:	602a      	str	r2, [r5, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f7f6 fa4d 	bl	8000d5e <_read>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_read_r+0x1e>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_read_r+0x1e>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	20001538 	.word	0x20001538

0800a8d4 <_sbrk_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d05      	ldr	r5, [pc, #20]	; (800a8f0 <_sbrk_r+0x1c>)
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4608      	mov	r0, r1
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	f7f6 faa6 	bl	8000e30 <_sbrk>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_sbrk_r+0x1a>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_sbrk_r+0x1a>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20001538 	.word	0x20001538

0800a8f4 <__sccl>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	780b      	ldrb	r3, [r1, #0]
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2b5e      	cmp	r3, #94	; 0x5e
 800a8fc:	bf13      	iteet	ne
 800a8fe:	2200      	movne	r2, #0
 800a900:	2201      	moveq	r2, #1
 800a902:	784b      	ldrbeq	r3, [r1, #1]
 800a904:	1c48      	addne	r0, r1, #1
 800a906:	bf08      	it	eq
 800a908:	1c88      	addeq	r0, r1, #2
 800a90a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a90e:	1e61      	subs	r1, r4, #1
 800a910:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a914:	42a9      	cmp	r1, r5
 800a916:	d1fb      	bne.n	800a910 <__sccl+0x1c>
 800a918:	b90b      	cbnz	r3, 800a91e <__sccl+0x2a>
 800a91a:	3801      	subs	r0, #1
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	f082 0201 	eor.w	r2, r2, #1
 800a922:	4605      	mov	r5, r0
 800a924:	54e2      	strb	r2, [r4, r3]
 800a926:	4628      	mov	r0, r5
 800a928:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a92c:	292d      	cmp	r1, #45	; 0x2d
 800a92e:	d006      	beq.n	800a93e <__sccl+0x4a>
 800a930:	295d      	cmp	r1, #93	; 0x5d
 800a932:	d0f3      	beq.n	800a91c <__sccl+0x28>
 800a934:	b909      	cbnz	r1, 800a93a <__sccl+0x46>
 800a936:	4628      	mov	r0, r5
 800a938:	e7f0      	b.n	800a91c <__sccl+0x28>
 800a93a:	460b      	mov	r3, r1
 800a93c:	e7f1      	b.n	800a922 <__sccl+0x2e>
 800a93e:	786e      	ldrb	r6, [r5, #1]
 800a940:	2e5d      	cmp	r6, #93	; 0x5d
 800a942:	d0fa      	beq.n	800a93a <__sccl+0x46>
 800a944:	42b3      	cmp	r3, r6
 800a946:	dcf8      	bgt.n	800a93a <__sccl+0x46>
 800a948:	4619      	mov	r1, r3
 800a94a:	3502      	adds	r5, #2
 800a94c:	3101      	adds	r1, #1
 800a94e:	428e      	cmp	r6, r1
 800a950:	5462      	strb	r2, [r4, r1]
 800a952:	dcfb      	bgt.n	800a94c <__sccl+0x58>
 800a954:	1af1      	subs	r1, r6, r3
 800a956:	3901      	subs	r1, #1
 800a958:	42b3      	cmp	r3, r6
 800a95a:	bfa8      	it	ge
 800a95c:	2100      	movge	r1, #0
 800a95e:	1c58      	adds	r0, r3, #1
 800a960:	1843      	adds	r3, r0, r1
 800a962:	e7e0      	b.n	800a926 <__sccl+0x32>

0800a964 <_strtol_l.constprop.0>:
 800a964:	2b01      	cmp	r3, #1
 800a966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a96a:	4680      	mov	r8, r0
 800a96c:	d001      	beq.n	800a972 <_strtol_l.constprop.0+0xe>
 800a96e:	2b24      	cmp	r3, #36	; 0x24
 800a970:	d906      	bls.n	800a980 <_strtol_l.constprop.0+0x1c>
 800a972:	f7fe fd9f 	bl	80094b4 <__errno>
 800a976:	2316      	movs	r3, #22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	2000      	movs	r0, #0
 800a97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a980:	460d      	mov	r5, r1
 800a982:	4f35      	ldr	r7, [pc, #212]	; (800aa58 <_strtol_l.constprop.0+0xf4>)
 800a984:	4628      	mov	r0, r5
 800a986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a98a:	5de6      	ldrb	r6, [r4, r7]
 800a98c:	f016 0608 	ands.w	r6, r6, #8
 800a990:	d1f8      	bne.n	800a984 <_strtol_l.constprop.0+0x20>
 800a992:	2c2d      	cmp	r4, #45	; 0x2d
 800a994:	d12f      	bne.n	800a9f6 <_strtol_l.constprop.0+0x92>
 800a996:	2601      	movs	r6, #1
 800a998:	782c      	ldrb	r4, [r5, #0]
 800a99a:	1c85      	adds	r5, r0, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d057      	beq.n	800aa50 <_strtol_l.constprop.0+0xec>
 800a9a0:	2b10      	cmp	r3, #16
 800a9a2:	d109      	bne.n	800a9b8 <_strtol_l.constprop.0+0x54>
 800a9a4:	2c30      	cmp	r4, #48	; 0x30
 800a9a6:	d107      	bne.n	800a9b8 <_strtol_l.constprop.0+0x54>
 800a9a8:	7828      	ldrb	r0, [r5, #0]
 800a9aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9ae:	2858      	cmp	r0, #88	; 0x58
 800a9b0:	d149      	bne.n	800aa46 <_strtol_l.constprop.0+0xe2>
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	786c      	ldrb	r4, [r5, #1]
 800a9b6:	3502      	adds	r5, #2
 800a9b8:	2700      	movs	r7, #0
 800a9ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a9be:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a9c2:	fbbe f9f3 	udiv	r9, lr, r3
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a9cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9d0:	f1bc 0f09 	cmp.w	ip, #9
 800a9d4:	d814      	bhi.n	800aa00 <_strtol_l.constprop.0+0x9c>
 800a9d6:	4664      	mov	r4, ip
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	dd22      	ble.n	800aa22 <_strtol_l.constprop.0+0xbe>
 800a9dc:	2f00      	cmp	r7, #0
 800a9de:	db1d      	blt.n	800aa1c <_strtol_l.constprop.0+0xb8>
 800a9e0:	4581      	cmp	r9, r0
 800a9e2:	d31b      	bcc.n	800aa1c <_strtol_l.constprop.0+0xb8>
 800a9e4:	d101      	bne.n	800a9ea <_strtol_l.constprop.0+0x86>
 800a9e6:	45a2      	cmp	sl, r4
 800a9e8:	db18      	blt.n	800aa1c <_strtol_l.constprop.0+0xb8>
 800a9ea:	2701      	movs	r7, #1
 800a9ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9f4:	e7ea      	b.n	800a9cc <_strtol_l.constprop.0+0x68>
 800a9f6:	2c2b      	cmp	r4, #43	; 0x2b
 800a9f8:	bf04      	itt	eq
 800a9fa:	782c      	ldrbeq	r4, [r5, #0]
 800a9fc:	1c85      	addeq	r5, r0, #2
 800a9fe:	e7cd      	b.n	800a99c <_strtol_l.constprop.0+0x38>
 800aa00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa04:	f1bc 0f19 	cmp.w	ip, #25
 800aa08:	d801      	bhi.n	800aa0e <_strtol_l.constprop.0+0xaa>
 800aa0a:	3c37      	subs	r4, #55	; 0x37
 800aa0c:	e7e4      	b.n	800a9d8 <_strtol_l.constprop.0+0x74>
 800aa0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa12:	f1bc 0f19 	cmp.w	ip, #25
 800aa16:	d804      	bhi.n	800aa22 <_strtol_l.constprop.0+0xbe>
 800aa18:	3c57      	subs	r4, #87	; 0x57
 800aa1a:	e7dd      	b.n	800a9d8 <_strtol_l.constprop.0+0x74>
 800aa1c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa20:	e7e6      	b.n	800a9f0 <_strtol_l.constprop.0+0x8c>
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	da07      	bge.n	800aa36 <_strtol_l.constprop.0+0xd2>
 800aa26:	2322      	movs	r3, #34	; 0x22
 800aa28:	4670      	mov	r0, lr
 800aa2a:	f8c8 3000 	str.w	r3, [r8]
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	d0a4      	beq.n	800a97c <_strtol_l.constprop.0+0x18>
 800aa32:	1e69      	subs	r1, r5, #1
 800aa34:	e005      	b.n	800aa42 <_strtol_l.constprop.0+0xde>
 800aa36:	b106      	cbz	r6, 800aa3a <_strtol_l.constprop.0+0xd6>
 800aa38:	4240      	negs	r0, r0
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	d09e      	beq.n	800a97c <_strtol_l.constprop.0+0x18>
 800aa3e:	2f00      	cmp	r7, #0
 800aa40:	d1f7      	bne.n	800aa32 <_strtol_l.constprop.0+0xce>
 800aa42:	6011      	str	r1, [r2, #0]
 800aa44:	e79a      	b.n	800a97c <_strtol_l.constprop.0+0x18>
 800aa46:	2430      	movs	r4, #48	; 0x30
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1b5      	bne.n	800a9b8 <_strtol_l.constprop.0+0x54>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	e7b3      	b.n	800a9b8 <_strtol_l.constprop.0+0x54>
 800aa50:	2c30      	cmp	r4, #48	; 0x30
 800aa52:	d0a9      	beq.n	800a9a8 <_strtol_l.constprop.0+0x44>
 800aa54:	230a      	movs	r3, #10
 800aa56:	e7af      	b.n	800a9b8 <_strtol_l.constprop.0+0x54>
 800aa58:	0800b55b 	.word	0x0800b55b

0800aa5c <_strtol_r>:
 800aa5c:	f7ff bf82 	b.w	800a964 <_strtol_l.constprop.0>

0800aa60 <_strtoul_l.constprop.0>:
 800aa60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4686      	mov	lr, r0
 800aa66:	460d      	mov	r5, r1
 800aa68:	4f35      	ldr	r7, [pc, #212]	; (800ab40 <_strtoul_l.constprop.0+0xe0>)
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa70:	5de6      	ldrb	r6, [r4, r7]
 800aa72:	f016 0608 	ands.w	r6, r6, #8
 800aa76:	d1f8      	bne.n	800aa6a <_strtoul_l.constprop.0+0xa>
 800aa78:	2c2d      	cmp	r4, #45	; 0x2d
 800aa7a:	d12f      	bne.n	800aadc <_strtoul_l.constprop.0+0x7c>
 800aa7c:	2601      	movs	r6, #1
 800aa7e:	782c      	ldrb	r4, [r5, #0]
 800aa80:	1c85      	adds	r5, r0, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d057      	beq.n	800ab36 <_strtoul_l.constprop.0+0xd6>
 800aa86:	2b10      	cmp	r3, #16
 800aa88:	d109      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800aa8a:	2c30      	cmp	r4, #48	; 0x30
 800aa8c:	d107      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800aa8e:	7828      	ldrb	r0, [r5, #0]
 800aa90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa94:	2858      	cmp	r0, #88	; 0x58
 800aa96:	d149      	bne.n	800ab2c <_strtoul_l.constprop.0+0xcc>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	786c      	ldrb	r4, [r5, #1]
 800aa9c:	3502      	adds	r5, #2
 800aa9e:	f04f 38ff 	mov.w	r8, #4294967295
 800aaa2:	fbb8 f8f3 	udiv	r8, r8, r3
 800aaa6:	2700      	movs	r7, #0
 800aaa8:	fb03 f908 	mul.w	r9, r3, r8
 800aaac:	4638      	mov	r0, r7
 800aaae:	ea6f 0909 	mvn.w	r9, r9
 800aab2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aab6:	f1bc 0f09 	cmp.w	ip, #9
 800aaba:	d814      	bhi.n	800aae6 <_strtoul_l.constprop.0+0x86>
 800aabc:	4664      	mov	r4, ip
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	dd22      	ble.n	800ab08 <_strtoul_l.constprop.0+0xa8>
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	db1d      	blt.n	800ab02 <_strtoul_l.constprop.0+0xa2>
 800aac6:	4580      	cmp	r8, r0
 800aac8:	d31b      	bcc.n	800ab02 <_strtoul_l.constprop.0+0xa2>
 800aaca:	d101      	bne.n	800aad0 <_strtoul_l.constprop.0+0x70>
 800aacc:	45a1      	cmp	r9, r4
 800aace:	db18      	blt.n	800ab02 <_strtoul_l.constprop.0+0xa2>
 800aad0:	2701      	movs	r7, #1
 800aad2:	fb00 4003 	mla	r0, r0, r3, r4
 800aad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aada:	e7ea      	b.n	800aab2 <_strtoul_l.constprop.0+0x52>
 800aadc:	2c2b      	cmp	r4, #43	; 0x2b
 800aade:	bf04      	itt	eq
 800aae0:	782c      	ldrbeq	r4, [r5, #0]
 800aae2:	1c85      	addeq	r5, r0, #2
 800aae4:	e7cd      	b.n	800aa82 <_strtoul_l.constprop.0+0x22>
 800aae6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aaea:	f1bc 0f19 	cmp.w	ip, #25
 800aaee:	d801      	bhi.n	800aaf4 <_strtoul_l.constprop.0+0x94>
 800aaf0:	3c37      	subs	r4, #55	; 0x37
 800aaf2:	e7e4      	b.n	800aabe <_strtoul_l.constprop.0+0x5e>
 800aaf4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aaf8:	f1bc 0f19 	cmp.w	ip, #25
 800aafc:	d804      	bhi.n	800ab08 <_strtoul_l.constprop.0+0xa8>
 800aafe:	3c57      	subs	r4, #87	; 0x57
 800ab00:	e7dd      	b.n	800aabe <_strtoul_l.constprop.0+0x5e>
 800ab02:	f04f 37ff 	mov.w	r7, #4294967295
 800ab06:	e7e6      	b.n	800aad6 <_strtoul_l.constprop.0+0x76>
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	da07      	bge.n	800ab1c <_strtoul_l.constprop.0+0xbc>
 800ab0c:	2322      	movs	r3, #34	; 0x22
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab12:	f8ce 3000 	str.w	r3, [lr]
 800ab16:	b932      	cbnz	r2, 800ab26 <_strtoul_l.constprop.0+0xc6>
 800ab18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab1c:	b106      	cbz	r6, 800ab20 <_strtoul_l.constprop.0+0xc0>
 800ab1e:	4240      	negs	r0, r0
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	d0f9      	beq.n	800ab18 <_strtoul_l.constprop.0+0xb8>
 800ab24:	b107      	cbz	r7, 800ab28 <_strtoul_l.constprop.0+0xc8>
 800ab26:	1e69      	subs	r1, r5, #1
 800ab28:	6011      	str	r1, [r2, #0]
 800ab2a:	e7f5      	b.n	800ab18 <_strtoul_l.constprop.0+0xb8>
 800ab2c:	2430      	movs	r4, #48	; 0x30
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1b5      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab32:	2308      	movs	r3, #8
 800ab34:	e7b3      	b.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab36:	2c30      	cmp	r4, #48	; 0x30
 800ab38:	d0a9      	beq.n	800aa8e <_strtoul_l.constprop.0+0x2e>
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	e7af      	b.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab3e:	bf00      	nop
 800ab40:	0800b55b 	.word	0x0800b55b

0800ab44 <_strtoul_r>:
 800ab44:	f7ff bf8c 	b.w	800aa60 <_strtoul_l.constprop.0>

0800ab48 <__submore>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ab50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d11b      	bne.n	800ab90 <__submore+0x48>
 800ab58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab5c:	f7fe fec4 	bl	80098e8 <_malloc_r>
 800ab60:	b918      	cbnz	r0, 800ab6a <__submore+0x22>
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295
 800ab66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ab74:	6360      	str	r0, [r4, #52]	; 0x34
 800ab76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ab7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ab7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ab82:	7043      	strb	r3, [r0, #1]
 800ab84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ab88:	7003      	strb	r3, [r0, #0]
 800ab8a:	6020      	str	r0, [r4, #0]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e7ea      	b.n	800ab66 <__submore+0x1e>
 800ab90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ab92:	0077      	lsls	r7, r6, #1
 800ab94:	463a      	mov	r2, r7
 800ab96:	f000 fb27 	bl	800b1e8 <_realloc_r>
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0e0      	beq.n	800ab62 <__submore+0x1a>
 800aba0:	eb00 0806 	add.w	r8, r0, r6
 800aba4:	4601      	mov	r1, r0
 800aba6:	4632      	mov	r2, r6
 800aba8:	4640      	mov	r0, r8
 800abaa:	f7fe fcad 	bl	8009508 <memcpy>
 800abae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800abb2:	f8c4 8000 	str.w	r8, [r4]
 800abb6:	e7e9      	b.n	800ab8c <__submore+0x44>

0800abb8 <__swbuf_r>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	460e      	mov	r6, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	4605      	mov	r5, r0
 800abc0:	b118      	cbz	r0, 800abca <__swbuf_r+0x12>
 800abc2:	6983      	ldr	r3, [r0, #24]
 800abc4:	b90b      	cbnz	r3, 800abca <__swbuf_r+0x12>
 800abc6:	f000 f9d5 	bl	800af74 <__sinit>
 800abca:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <__swbuf_r+0x98>)
 800abcc:	429c      	cmp	r4, r3
 800abce:	d12b      	bne.n	800ac28 <__swbuf_r+0x70>
 800abd0:	686c      	ldr	r4, [r5, #4]
 800abd2:	69a3      	ldr	r3, [r4, #24]
 800abd4:	60a3      	str	r3, [r4, #8]
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	071a      	lsls	r2, r3, #28
 800abda:	d52f      	bpl.n	800ac3c <__swbuf_r+0x84>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	b36b      	cbz	r3, 800ac3c <__swbuf_r+0x84>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	6820      	ldr	r0, [r4, #0]
 800abe4:	b2f6      	uxtb	r6, r6
 800abe6:	1ac0      	subs	r0, r0, r3
 800abe8:	6963      	ldr	r3, [r4, #20]
 800abea:	4637      	mov	r7, r6
 800abec:	4283      	cmp	r3, r0
 800abee:	dc04      	bgt.n	800abfa <__swbuf_r+0x42>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 f92a 	bl	800ae4c <_fflush_r>
 800abf8:	bb30      	cbnz	r0, 800ac48 <__swbuf_r+0x90>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	3001      	adds	r0, #1
 800abfe:	3b01      	subs	r3, #1
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	6022      	str	r2, [r4, #0]
 800ac08:	701e      	strb	r6, [r3, #0]
 800ac0a:	6963      	ldr	r3, [r4, #20]
 800ac0c:	4283      	cmp	r3, r0
 800ac0e:	d004      	beq.n	800ac1a <__swbuf_r+0x62>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	07db      	lsls	r3, r3, #31
 800ac14:	d506      	bpl.n	800ac24 <__swbuf_r+0x6c>
 800ac16:	2e0a      	cmp	r6, #10
 800ac18:	d104      	bne.n	800ac24 <__swbuf_r+0x6c>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f000 f915 	bl	800ae4c <_fflush_r>
 800ac22:	b988      	cbnz	r0, 800ac48 <__swbuf_r+0x90>
 800ac24:	4638      	mov	r0, r7
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <__swbuf_r+0x9c>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d101      	bne.n	800ac32 <__swbuf_r+0x7a>
 800ac2e:	68ac      	ldr	r4, [r5, #8]
 800ac30:	e7cf      	b.n	800abd2 <__swbuf_r+0x1a>
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <__swbuf_r+0xa0>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	bf08      	it	eq
 800ac38:	68ec      	ldreq	r4, [r5, #12]
 800ac3a:	e7ca      	b.n	800abd2 <__swbuf_r+0x1a>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f80c 	bl	800ac5c <__swsetup_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d0cb      	beq.n	800abe0 <__swbuf_r+0x28>
 800ac48:	f04f 37ff 	mov.w	r7, #4294967295
 800ac4c:	e7ea      	b.n	800ac24 <__swbuf_r+0x6c>
 800ac4e:	bf00      	nop
 800ac50:	0800b67c 	.word	0x0800b67c
 800ac54:	0800b69c 	.word	0x0800b69c
 800ac58:	0800b65c 	.word	0x0800b65c

0800ac5c <__swsetup_r>:
 800ac5c:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <__swsetup_r+0xcc>)
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	4606      	mov	r6, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	b125      	cbz	r5, 800ac72 <__swsetup_r+0x16>
 800ac68:	69ab      	ldr	r3, [r5, #24]
 800ac6a:	b913      	cbnz	r3, 800ac72 <__swsetup_r+0x16>
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 f981 	bl	800af74 <__sinit>
 800ac72:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <__swsetup_r+0xd0>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d10f      	bne.n	800ac98 <__swsetup_r+0x3c>
 800ac78:	686c      	ldr	r4, [r5, #4]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac80:	0719      	lsls	r1, r3, #28
 800ac82:	d42c      	bmi.n	800acde <__swsetup_r+0x82>
 800ac84:	06dd      	lsls	r5, r3, #27
 800ac86:	d411      	bmi.n	800acac <__swsetup_r+0x50>
 800ac88:	2309      	movs	r3, #9
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	e03e      	b.n	800ad16 <__swsetup_r+0xba>
 800ac98:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <__swsetup_r+0xd4>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	d101      	bne.n	800aca2 <__swsetup_r+0x46>
 800ac9e:	68ac      	ldr	r4, [r5, #8]
 800aca0:	e7eb      	b.n	800ac7a <__swsetup_r+0x1e>
 800aca2:	4b24      	ldr	r3, [pc, #144]	; (800ad34 <__swsetup_r+0xd8>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	bf08      	it	eq
 800aca8:	68ec      	ldreq	r4, [r5, #12]
 800acaa:	e7e6      	b.n	800ac7a <__swsetup_r+0x1e>
 800acac:	0758      	lsls	r0, r3, #29
 800acae:	d512      	bpl.n	800acd6 <__swsetup_r+0x7a>
 800acb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acb2:	b141      	cbz	r1, 800acc6 <__swsetup_r+0x6a>
 800acb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <__swsetup_r+0x66>
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7fe fdab 	bl	8009818 <_free_r>
 800acc2:	2300      	movs	r3, #0
 800acc4:	6363      	str	r3, [r4, #52]	; 0x34
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	2300      	movs	r3, #0
 800acd0:	6063      	str	r3, [r4, #4]
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0308 	orr.w	r3, r3, #8
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	b94b      	cbnz	r3, 800acf6 <__swsetup_r+0x9a>
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acec:	d003      	beq.n	800acf6 <__swsetup_r+0x9a>
 800acee:	4621      	mov	r1, r4
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 fa05 	bl	800b100 <__smakebuf_r>
 800acf6:	89a0      	ldrh	r0, [r4, #12]
 800acf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acfc:	f010 0301 	ands.w	r3, r0, #1
 800ad00:	d00a      	beq.n	800ad18 <__swsetup_r+0xbc>
 800ad02:	2300      	movs	r3, #0
 800ad04:	60a3      	str	r3, [r4, #8]
 800ad06:	6963      	ldr	r3, [r4, #20]
 800ad08:	425b      	negs	r3, r3
 800ad0a:	61a3      	str	r3, [r4, #24]
 800ad0c:	6923      	ldr	r3, [r4, #16]
 800ad0e:	b943      	cbnz	r3, 800ad22 <__swsetup_r+0xc6>
 800ad10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad14:	d1ba      	bne.n	800ac8c <__swsetup_r+0x30>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	0781      	lsls	r1, r0, #30
 800ad1a:	bf58      	it	pl
 800ad1c:	6963      	ldrpl	r3, [r4, #20]
 800ad1e:	60a3      	str	r3, [r4, #8]
 800ad20:	e7f4      	b.n	800ad0c <__swsetup_r+0xb0>
 800ad22:	2000      	movs	r0, #0
 800ad24:	e7f7      	b.n	800ad16 <__swsetup_r+0xba>
 800ad26:	bf00      	nop
 800ad28:	20000184 	.word	0x20000184
 800ad2c:	0800b67c 	.word	0x0800b67c
 800ad30:	0800b69c 	.word	0x0800b69c
 800ad34:	0800b65c 	.word	0x0800b65c

0800ad38 <abort>:
 800ad38:	2006      	movs	r0, #6
 800ad3a:	b508      	push	{r3, lr}
 800ad3c:	f000 faac 	bl	800b298 <raise>
 800ad40:	2001      	movs	r0, #1
 800ad42:	f7f6 f802 	bl	8000d4a <_exit>
	...

0800ad48 <__sflush_r>:
 800ad48:	898a      	ldrh	r2, [r1, #12]
 800ad4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	0710      	lsls	r0, r2, #28
 800ad50:	460c      	mov	r4, r1
 800ad52:	d457      	bmi.n	800ae04 <__sflush_r+0xbc>
 800ad54:	684b      	ldr	r3, [r1, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dc04      	bgt.n	800ad64 <__sflush_r+0x1c>
 800ad5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc01      	bgt.n	800ad64 <__sflush_r+0x1c>
 800ad60:	2000      	movs	r0, #0
 800ad62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad66:	2e00      	cmp	r6, #0
 800ad68:	d0fa      	beq.n	800ad60 <__sflush_r+0x18>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad70:	682f      	ldr	r7, [r5, #0]
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	d032      	beq.n	800addc <__sflush_r+0x94>
 800ad76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	075a      	lsls	r2, r3, #29
 800ad7c:	d505      	bpl.n	800ad8a <__sflush_r+0x42>
 800ad7e:	6863      	ldr	r3, [r4, #4]
 800ad80:	1ac0      	subs	r0, r0, r3
 800ad82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad84:	b10b      	cbz	r3, 800ad8a <__sflush_r+0x42>
 800ad86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad88:	1ac0      	subs	r0, r0, r3
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad90:	4628      	mov	r0, r5
 800ad92:	6a21      	ldr	r1, [r4, #32]
 800ad94:	47b0      	blx	r6
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	d106      	bne.n	800adaa <__sflush_r+0x62>
 800ad9c:	6829      	ldr	r1, [r5, #0]
 800ad9e:	291d      	cmp	r1, #29
 800ada0:	d82c      	bhi.n	800adfc <__sflush_r+0xb4>
 800ada2:	4a29      	ldr	r2, [pc, #164]	; (800ae48 <__sflush_r+0x100>)
 800ada4:	40ca      	lsrs	r2, r1
 800ada6:	07d6      	lsls	r6, r2, #31
 800ada8:	d528      	bpl.n	800adfc <__sflush_r+0xb4>
 800adaa:	2200      	movs	r2, #0
 800adac:	6062      	str	r2, [r4, #4]
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	04d9      	lsls	r1, r3, #19
 800adb2:	6022      	str	r2, [r4, #0]
 800adb4:	d504      	bpl.n	800adc0 <__sflush_r+0x78>
 800adb6:	1c42      	adds	r2, r0, #1
 800adb8:	d101      	bne.n	800adbe <__sflush_r+0x76>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	b903      	cbnz	r3, 800adc0 <__sflush_r+0x78>
 800adbe:	6560      	str	r0, [r4, #84]	; 0x54
 800adc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc2:	602f      	str	r7, [r5, #0]
 800adc4:	2900      	cmp	r1, #0
 800adc6:	d0cb      	beq.n	800ad60 <__sflush_r+0x18>
 800adc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adcc:	4299      	cmp	r1, r3
 800adce:	d002      	beq.n	800add6 <__sflush_r+0x8e>
 800add0:	4628      	mov	r0, r5
 800add2:	f7fe fd21 	bl	8009818 <_free_r>
 800add6:	2000      	movs	r0, #0
 800add8:	6360      	str	r0, [r4, #52]	; 0x34
 800adda:	e7c2      	b.n	800ad62 <__sflush_r+0x1a>
 800addc:	6a21      	ldr	r1, [r4, #32]
 800adde:	2301      	movs	r3, #1
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b0      	blx	r6
 800ade4:	1c41      	adds	r1, r0, #1
 800ade6:	d1c7      	bne.n	800ad78 <__sflush_r+0x30>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0c4      	beq.n	800ad78 <__sflush_r+0x30>
 800adee:	2b1d      	cmp	r3, #29
 800adf0:	d001      	beq.n	800adf6 <__sflush_r+0xae>
 800adf2:	2b16      	cmp	r3, #22
 800adf4:	d101      	bne.n	800adfa <__sflush_r+0xb2>
 800adf6:	602f      	str	r7, [r5, #0]
 800adf8:	e7b2      	b.n	800ad60 <__sflush_r+0x18>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	e7ae      	b.n	800ad62 <__sflush_r+0x1a>
 800ae04:	690f      	ldr	r7, [r1, #16]
 800ae06:	2f00      	cmp	r7, #0
 800ae08:	d0aa      	beq.n	800ad60 <__sflush_r+0x18>
 800ae0a:	0793      	lsls	r3, r2, #30
 800ae0c:	bf18      	it	ne
 800ae0e:	2300      	movne	r3, #0
 800ae10:	680e      	ldr	r6, [r1, #0]
 800ae12:	bf08      	it	eq
 800ae14:	694b      	ldreq	r3, [r1, #20]
 800ae16:	1bf6      	subs	r6, r6, r7
 800ae18:	600f      	str	r7, [r1, #0]
 800ae1a:	608b      	str	r3, [r1, #8]
 800ae1c:	2e00      	cmp	r6, #0
 800ae1e:	dd9f      	ble.n	800ad60 <__sflush_r+0x18>
 800ae20:	4633      	mov	r3, r6
 800ae22:	463a      	mov	r2, r7
 800ae24:	4628      	mov	r0, r5
 800ae26:	6a21      	ldr	r1, [r4, #32]
 800ae28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae2c:	47e0      	blx	ip
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	dc06      	bgt.n	800ae40 <__sflush_r+0xf8>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	e790      	b.n	800ad62 <__sflush_r+0x1a>
 800ae40:	4407      	add	r7, r0
 800ae42:	1a36      	subs	r6, r6, r0
 800ae44:	e7ea      	b.n	800ae1c <__sflush_r+0xd4>
 800ae46:	bf00      	nop
 800ae48:	20400001 	.word	0x20400001

0800ae4c <_fflush_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b913      	cbnz	r3, 800ae5c <_fflush_r+0x10>
 800ae56:	2500      	movs	r5, #0
 800ae58:	4628      	mov	r0, r5
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	b118      	cbz	r0, 800ae66 <_fflush_r+0x1a>
 800ae5e:	6983      	ldr	r3, [r0, #24]
 800ae60:	b90b      	cbnz	r3, 800ae66 <_fflush_r+0x1a>
 800ae62:	f000 f887 	bl	800af74 <__sinit>
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <_fflush_r+0x6c>)
 800ae68:	429c      	cmp	r4, r3
 800ae6a:	d11b      	bne.n	800aea4 <_fflush_r+0x58>
 800ae6c:	686c      	ldr	r4, [r5, #4]
 800ae6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0ef      	beq.n	800ae56 <_fflush_r+0xa>
 800ae76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae78:	07d0      	lsls	r0, r2, #31
 800ae7a:	d404      	bmi.n	800ae86 <_fflush_r+0x3a>
 800ae7c:	0599      	lsls	r1, r3, #22
 800ae7e:	d402      	bmi.n	800ae86 <_fflush_r+0x3a>
 800ae80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae82:	f000 f915 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800ae86:	4628      	mov	r0, r5
 800ae88:	4621      	mov	r1, r4
 800ae8a:	f7ff ff5d 	bl	800ad48 <__sflush_r>
 800ae8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae90:	4605      	mov	r5, r0
 800ae92:	07da      	lsls	r2, r3, #31
 800ae94:	d4e0      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	059b      	lsls	r3, r3, #22
 800ae9a:	d4dd      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9e:	f000 f908 	bl	800b0b2 <__retarget_lock_release_recursive>
 800aea2:	e7d9      	b.n	800ae58 <_fflush_r+0xc>
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <_fflush_r+0x70>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d101      	bne.n	800aeae <_fflush_r+0x62>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	e7df      	b.n	800ae6e <_fflush_r+0x22>
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <_fflush_r+0x74>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	bf08      	it	eq
 800aeb4:	68ec      	ldreq	r4, [r5, #12]
 800aeb6:	e7da      	b.n	800ae6e <_fflush_r+0x22>
 800aeb8:	0800b67c 	.word	0x0800b67c
 800aebc:	0800b69c 	.word	0x0800b69c
 800aec0:	0800b65c 	.word	0x0800b65c

0800aec4 <std>:
 800aec4:	2300      	movs	r3, #0
 800aec6:	b510      	push	{r4, lr}
 800aec8:	4604      	mov	r4, r0
 800aeca:	e9c0 3300 	strd	r3, r3, [r0]
 800aece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aed2:	6083      	str	r3, [r0, #8]
 800aed4:	8181      	strh	r1, [r0, #12]
 800aed6:	6643      	str	r3, [r0, #100]	; 0x64
 800aed8:	81c2      	strh	r2, [r0, #14]
 800aeda:	6183      	str	r3, [r0, #24]
 800aedc:	4619      	mov	r1, r3
 800aede:	2208      	movs	r2, #8
 800aee0:	305c      	adds	r0, #92	; 0x5c
 800aee2:	f7fe fb1f 	bl	8009524 <memset>
 800aee6:	4b05      	ldr	r3, [pc, #20]	; (800aefc <std+0x38>)
 800aee8:	6224      	str	r4, [r4, #32]
 800aeea:	6263      	str	r3, [r4, #36]	; 0x24
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <std+0x3c>)
 800aeee:	62a3      	str	r3, [r4, #40]	; 0x28
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <std+0x40>)
 800aef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <std+0x44>)
 800aef6:	6323      	str	r3, [r4, #48]	; 0x30
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	bf00      	nop
 800aefc:	08009589 	.word	0x08009589
 800af00:	080095af 	.word	0x080095af
 800af04:	080095e7 	.word	0x080095e7
 800af08:	0800960b 	.word	0x0800960b

0800af0c <_cleanup_r>:
 800af0c:	4901      	ldr	r1, [pc, #4]	; (800af14 <_cleanup_r+0x8>)
 800af0e:	f000 b8af 	b.w	800b070 <_fwalk_reent>
 800af12:	bf00      	nop
 800af14:	0800ae4d 	.word	0x0800ae4d

0800af18 <__sfmoreglue>:
 800af18:	2268      	movs	r2, #104	; 0x68
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	1e4d      	subs	r5, r1, #1
 800af1e:	4355      	muls	r5, r2
 800af20:	460e      	mov	r6, r1
 800af22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af26:	f7fe fcdf 	bl	80098e8 <_malloc_r>
 800af2a:	4604      	mov	r4, r0
 800af2c:	b140      	cbz	r0, 800af40 <__sfmoreglue+0x28>
 800af2e:	2100      	movs	r1, #0
 800af30:	e9c0 1600 	strd	r1, r6, [r0]
 800af34:	300c      	adds	r0, #12
 800af36:	60a0      	str	r0, [r4, #8]
 800af38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af3c:	f7fe faf2 	bl	8009524 <memset>
 800af40:	4620      	mov	r0, r4
 800af42:	bd70      	pop	{r4, r5, r6, pc}

0800af44 <__sfp_lock_acquire>:
 800af44:	4801      	ldr	r0, [pc, #4]	; (800af4c <__sfp_lock_acquire+0x8>)
 800af46:	f000 b8b3 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800af4a:	bf00      	nop
 800af4c:	2000153d 	.word	0x2000153d

0800af50 <__sfp_lock_release>:
 800af50:	4801      	ldr	r0, [pc, #4]	; (800af58 <__sfp_lock_release+0x8>)
 800af52:	f000 b8ae 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800af56:	bf00      	nop
 800af58:	2000153d 	.word	0x2000153d

0800af5c <__sinit_lock_acquire>:
 800af5c:	4801      	ldr	r0, [pc, #4]	; (800af64 <__sinit_lock_acquire+0x8>)
 800af5e:	f000 b8a7 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800af62:	bf00      	nop
 800af64:	2000153e 	.word	0x2000153e

0800af68 <__sinit_lock_release>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__sinit_lock_release+0x8>)
 800af6a:	f000 b8a2 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800af6e:	bf00      	nop
 800af70:	2000153e 	.word	0x2000153e

0800af74 <__sinit>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4604      	mov	r4, r0
 800af78:	f7ff fff0 	bl	800af5c <__sinit_lock_acquire>
 800af7c:	69a3      	ldr	r3, [r4, #24]
 800af7e:	b11b      	cbz	r3, 800af88 <__sinit+0x14>
 800af80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af84:	f7ff bff0 	b.w	800af68 <__sinit_lock_release>
 800af88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af8c:	6523      	str	r3, [r4, #80]	; 0x50
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <__sinit+0x68>)
 800af90:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <__sinit+0x6c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	62a2      	str	r2, [r4, #40]	; 0x28
 800af96:	42a3      	cmp	r3, r4
 800af98:	bf08      	it	eq
 800af9a:	2301      	moveq	r3, #1
 800af9c:	4620      	mov	r0, r4
 800af9e:	bf08      	it	eq
 800afa0:	61a3      	streq	r3, [r4, #24]
 800afa2:	f000 f81f 	bl	800afe4 <__sfp>
 800afa6:	6060      	str	r0, [r4, #4]
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 f81b 	bl	800afe4 <__sfp>
 800afae:	60a0      	str	r0, [r4, #8]
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 f817 	bl	800afe4 <__sfp>
 800afb6:	2200      	movs	r2, #0
 800afb8:	2104      	movs	r1, #4
 800afba:	60e0      	str	r0, [r4, #12]
 800afbc:	6860      	ldr	r0, [r4, #4]
 800afbe:	f7ff ff81 	bl	800aec4 <std>
 800afc2:	2201      	movs	r2, #1
 800afc4:	2109      	movs	r1, #9
 800afc6:	68a0      	ldr	r0, [r4, #8]
 800afc8:	f7ff ff7c 	bl	800aec4 <std>
 800afcc:	2202      	movs	r2, #2
 800afce:	2112      	movs	r1, #18
 800afd0:	68e0      	ldr	r0, [r4, #12]
 800afd2:	f7ff ff77 	bl	800aec4 <std>
 800afd6:	2301      	movs	r3, #1
 800afd8:	61a3      	str	r3, [r4, #24]
 800afda:	e7d1      	b.n	800af80 <__sinit+0xc>
 800afdc:	0800b458 	.word	0x0800b458
 800afe0:	0800af0d 	.word	0x0800af0d

0800afe4 <__sfp>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	4607      	mov	r7, r0
 800afe8:	f7ff ffac 	bl	800af44 <__sfp_lock_acquire>
 800afec:	4b1e      	ldr	r3, [pc, #120]	; (800b068 <__sfp+0x84>)
 800afee:	681e      	ldr	r6, [r3, #0]
 800aff0:	69b3      	ldr	r3, [r6, #24]
 800aff2:	b913      	cbnz	r3, 800affa <__sfp+0x16>
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff ffbd 	bl	800af74 <__sinit>
 800affa:	3648      	adds	r6, #72	; 0x48
 800affc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b000:	3b01      	subs	r3, #1
 800b002:	d503      	bpl.n	800b00c <__sfp+0x28>
 800b004:	6833      	ldr	r3, [r6, #0]
 800b006:	b30b      	cbz	r3, 800b04c <__sfp+0x68>
 800b008:	6836      	ldr	r6, [r6, #0]
 800b00a:	e7f7      	b.n	800affc <__sfp+0x18>
 800b00c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b010:	b9d5      	cbnz	r5, 800b048 <__sfp+0x64>
 800b012:	4b16      	ldr	r3, [pc, #88]	; (800b06c <__sfp+0x88>)
 800b014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b018:	60e3      	str	r3, [r4, #12]
 800b01a:	6665      	str	r5, [r4, #100]	; 0x64
 800b01c:	f000 f847 	bl	800b0ae <__retarget_lock_init_recursive>
 800b020:	f7ff ff96 	bl	800af50 <__sfp_lock_release>
 800b024:	2208      	movs	r2, #8
 800b026:	4629      	mov	r1, r5
 800b028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b02c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b030:	6025      	str	r5, [r4, #0]
 800b032:	61a5      	str	r5, [r4, #24]
 800b034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b038:	f7fe fa74 	bl	8009524 <memset>
 800b03c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b044:	4620      	mov	r0, r4
 800b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b048:	3468      	adds	r4, #104	; 0x68
 800b04a:	e7d9      	b.n	800b000 <__sfp+0x1c>
 800b04c:	2104      	movs	r1, #4
 800b04e:	4638      	mov	r0, r7
 800b050:	f7ff ff62 	bl	800af18 <__sfmoreglue>
 800b054:	4604      	mov	r4, r0
 800b056:	6030      	str	r0, [r6, #0]
 800b058:	2800      	cmp	r0, #0
 800b05a:	d1d5      	bne.n	800b008 <__sfp+0x24>
 800b05c:	f7ff ff78 	bl	800af50 <__sfp_lock_release>
 800b060:	230c      	movs	r3, #12
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	e7ee      	b.n	800b044 <__sfp+0x60>
 800b066:	bf00      	nop
 800b068:	0800b458 	.word	0x0800b458
 800b06c:	ffff0001 	.word	0xffff0001

0800b070 <_fwalk_reent>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	4606      	mov	r6, r0
 800b076:	4688      	mov	r8, r1
 800b078:	2700      	movs	r7, #0
 800b07a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b07e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b082:	f1b9 0901 	subs.w	r9, r9, #1
 800b086:	d505      	bpl.n	800b094 <_fwalk_reent+0x24>
 800b088:	6824      	ldr	r4, [r4, #0]
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	d1f7      	bne.n	800b07e <_fwalk_reent+0xe>
 800b08e:	4638      	mov	r0, r7
 800b090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d907      	bls.n	800b0aa <_fwalk_reent+0x3a>
 800b09a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	d003      	beq.n	800b0aa <_fwalk_reent+0x3a>
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	47c0      	blx	r8
 800b0a8:	4307      	orrs	r7, r0
 800b0aa:	3568      	adds	r5, #104	; 0x68
 800b0ac:	e7e9      	b.n	800b082 <_fwalk_reent+0x12>

0800b0ae <__retarget_lock_init_recursive>:
 800b0ae:	4770      	bx	lr

0800b0b0 <__retarget_lock_acquire_recursive>:
 800b0b0:	4770      	bx	lr

0800b0b2 <__retarget_lock_release_recursive>:
 800b0b2:	4770      	bx	lr

0800b0b4 <__swhatbuf_r>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	460e      	mov	r6, r1
 800b0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0bc:	4614      	mov	r4, r2
 800b0be:	2900      	cmp	r1, #0
 800b0c0:	461d      	mov	r5, r3
 800b0c2:	b096      	sub	sp, #88	; 0x58
 800b0c4:	da08      	bge.n	800b0d8 <__swhatbuf_r+0x24>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	061a      	lsls	r2, r3, #24
 800b0d0:	d410      	bmi.n	800b0f4 <__swhatbuf_r+0x40>
 800b0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d6:	e00e      	b.n	800b0f6 <__swhatbuf_r+0x42>
 800b0d8:	466a      	mov	r2, sp
 800b0da:	f000 f8f9 	bl	800b2d0 <_fstat_r>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	dbf1      	blt.n	800b0c6 <__swhatbuf_r+0x12>
 800b0e2:	9a01      	ldr	r2, [sp, #4]
 800b0e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ec:	425a      	negs	r2, r3
 800b0ee:	415a      	adcs	r2, r3
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	e7ee      	b.n	800b0d2 <__swhatbuf_r+0x1e>
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	b016      	add	sp, #88	; 0x58
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b100 <__smakebuf_r>:
 800b100:	898b      	ldrh	r3, [r1, #12]
 800b102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b104:	079d      	lsls	r5, r3, #30
 800b106:	4606      	mov	r6, r0
 800b108:	460c      	mov	r4, r1
 800b10a:	d507      	bpl.n	800b11c <__smakebuf_r+0x1c>
 800b10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	2301      	movs	r3, #1
 800b116:	6163      	str	r3, [r4, #20]
 800b118:	b002      	add	sp, #8
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	466a      	mov	r2, sp
 800b11e:	ab01      	add	r3, sp, #4
 800b120:	f7ff ffc8 	bl	800b0b4 <__swhatbuf_r>
 800b124:	9900      	ldr	r1, [sp, #0]
 800b126:	4605      	mov	r5, r0
 800b128:	4630      	mov	r0, r6
 800b12a:	f7fe fbdd 	bl	80098e8 <_malloc_r>
 800b12e:	b948      	cbnz	r0, 800b144 <__smakebuf_r+0x44>
 800b130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d4ef      	bmi.n	800b118 <__smakebuf_r+0x18>
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	f043 0302 	orr.w	r3, r3, #2
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	e7e3      	b.n	800b10c <__smakebuf_r+0xc>
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <__smakebuf_r+0x7c>)
 800b146:	62b3      	str	r3, [r6, #40]	; 0x28
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	6120      	str	r0, [r4, #16]
 800b156:	6163      	str	r3, [r4, #20]
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	b15b      	cbz	r3, 800b174 <__smakebuf_r+0x74>
 800b15c:	4630      	mov	r0, r6
 800b15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b162:	f000 f8c7 	bl	800b2f4 <_isatty_r>
 800b166:	b128      	cbz	r0, 800b174 <__smakebuf_r+0x74>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f023 0303 	bic.w	r3, r3, #3
 800b16e:	f043 0301 	orr.w	r3, r3, #1
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	89a0      	ldrh	r0, [r4, #12]
 800b176:	4305      	orrs	r5, r0
 800b178:	81a5      	strh	r5, [r4, #12]
 800b17a:	e7cd      	b.n	800b118 <__smakebuf_r+0x18>
 800b17c:	0800af0d 	.word	0x0800af0d

0800b180 <memchr>:
 800b180:	4603      	mov	r3, r0
 800b182:	b510      	push	{r4, lr}
 800b184:	b2c9      	uxtb	r1, r1
 800b186:	4402      	add	r2, r0
 800b188:	4293      	cmp	r3, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	d101      	bne.n	800b192 <memchr+0x12>
 800b18e:	2000      	movs	r0, #0
 800b190:	e003      	b.n	800b19a <memchr+0x1a>
 800b192:	7804      	ldrb	r4, [r0, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	428c      	cmp	r4, r1
 800b198:	d1f6      	bne.n	800b188 <memchr+0x8>
 800b19a:	bd10      	pop	{r4, pc}

0800b19c <memmove>:
 800b19c:	4288      	cmp	r0, r1
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	eb01 0402 	add.w	r4, r1, r2
 800b1a4:	d902      	bls.n	800b1ac <memmove+0x10>
 800b1a6:	4284      	cmp	r4, r0
 800b1a8:	4623      	mov	r3, r4
 800b1aa:	d807      	bhi.n	800b1bc <memmove+0x20>
 800b1ac:	1e43      	subs	r3, r0, #1
 800b1ae:	42a1      	cmp	r1, r4
 800b1b0:	d008      	beq.n	800b1c4 <memmove+0x28>
 800b1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ba:	e7f8      	b.n	800b1ae <memmove+0x12>
 800b1bc:	4601      	mov	r1, r0
 800b1be:	4402      	add	r2, r0
 800b1c0:	428a      	cmp	r2, r1
 800b1c2:	d100      	bne.n	800b1c6 <memmove+0x2a>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ce:	e7f7      	b.n	800b1c0 <memmove+0x24>

0800b1d0 <__malloc_lock>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	; (800b1d8 <__malloc_lock+0x8>)
 800b1d2:	f7ff bf6d 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	2000153c 	.word	0x2000153c

0800b1dc <__malloc_unlock>:
 800b1dc:	4801      	ldr	r0, [pc, #4]	; (800b1e4 <__malloc_unlock+0x8>)
 800b1de:	f7ff bf68 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800b1e2:	bf00      	nop
 800b1e4:	2000153c 	.word	0x2000153c

0800b1e8 <_realloc_r>:
 800b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4614      	mov	r4, r2
 800b1f0:	460e      	mov	r6, r1
 800b1f2:	b921      	cbnz	r1, 800b1fe <_realloc_r+0x16>
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	f7fe bb75 	b.w	80098e8 <_malloc_r>
 800b1fe:	b92a      	cbnz	r2, 800b20c <_realloc_r+0x24>
 800b200:	f7fe fb0a 	bl	8009818 <_free_r>
 800b204:	4625      	mov	r5, r4
 800b206:	4628      	mov	r0, r5
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	f000 f882 	bl	800b314 <_malloc_usable_size_r>
 800b210:	4284      	cmp	r4, r0
 800b212:	4607      	mov	r7, r0
 800b214:	d802      	bhi.n	800b21c <_realloc_r+0x34>
 800b216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b21a:	d812      	bhi.n	800b242 <_realloc_r+0x5a>
 800b21c:	4621      	mov	r1, r4
 800b21e:	4640      	mov	r0, r8
 800b220:	f7fe fb62 	bl	80098e8 <_malloc_r>
 800b224:	4605      	mov	r5, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	d0ed      	beq.n	800b206 <_realloc_r+0x1e>
 800b22a:	42bc      	cmp	r4, r7
 800b22c:	4622      	mov	r2, r4
 800b22e:	4631      	mov	r1, r6
 800b230:	bf28      	it	cs
 800b232:	463a      	movcs	r2, r7
 800b234:	f7fe f968 	bl	8009508 <memcpy>
 800b238:	4631      	mov	r1, r6
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7fe faec 	bl	8009818 <_free_r>
 800b240:	e7e1      	b.n	800b206 <_realloc_r+0x1e>
 800b242:	4635      	mov	r5, r6
 800b244:	e7df      	b.n	800b206 <_realloc_r+0x1e>

0800b246 <_raise_r>:
 800b246:	291f      	cmp	r1, #31
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4604      	mov	r4, r0
 800b24c:	460d      	mov	r5, r1
 800b24e:	d904      	bls.n	800b25a <_raise_r+0x14>
 800b250:	2316      	movs	r3, #22
 800b252:	6003      	str	r3, [r0, #0]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b25c:	b112      	cbz	r2, 800b264 <_raise_r+0x1e>
 800b25e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b262:	b94b      	cbnz	r3, 800b278 <_raise_r+0x32>
 800b264:	4620      	mov	r0, r4
 800b266:	f000 f831 	bl	800b2cc <_getpid_r>
 800b26a:	462a      	mov	r2, r5
 800b26c:	4601      	mov	r1, r0
 800b26e:	4620      	mov	r0, r4
 800b270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b274:	f000 b818 	b.w	800b2a8 <_kill_r>
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d00a      	beq.n	800b292 <_raise_r+0x4c>
 800b27c:	1c59      	adds	r1, r3, #1
 800b27e:	d103      	bne.n	800b288 <_raise_r+0x42>
 800b280:	2316      	movs	r3, #22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2001      	movs	r0, #1
 800b286:	e7e7      	b.n	800b258 <_raise_r+0x12>
 800b288:	2400      	movs	r4, #0
 800b28a:	4628      	mov	r0, r5
 800b28c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b290:	4798      	blx	r3
 800b292:	2000      	movs	r0, #0
 800b294:	e7e0      	b.n	800b258 <_raise_r+0x12>
	...

0800b298 <raise>:
 800b298:	4b02      	ldr	r3, [pc, #8]	; (800b2a4 <raise+0xc>)
 800b29a:	4601      	mov	r1, r0
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f7ff bfd2 	b.w	800b246 <_raise_r>
 800b2a2:	bf00      	nop
 800b2a4:	20000184 	.word	0x20000184

0800b2a8 <_kill_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	4d06      	ldr	r5, [pc, #24]	; (800b2c8 <_kill_r+0x20>)
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	f7f5 fd38 	bl	8000d2a <_kill>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d102      	bne.n	800b2c4 <_kill_r+0x1c>
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b103      	cbz	r3, 800b2c4 <_kill_r+0x1c>
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20001538 	.word	0x20001538

0800b2cc <_getpid_r>:
 800b2cc:	f7f5 bd26 	b.w	8000d1c <_getpid>

0800b2d0 <_fstat_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4d06      	ldr	r5, [pc, #24]	; (800b2f0 <_fstat_r+0x20>)
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	4611      	mov	r1, r2
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	f7f5 fd82 	bl	8000de6 <_fstat>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	d102      	bne.n	800b2ec <_fstat_r+0x1c>
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	b103      	cbz	r3, 800b2ec <_fstat_r+0x1c>
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20001538 	.word	0x20001538

0800b2f4 <_isatty_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4d05      	ldr	r5, [pc, #20]	; (800b310 <_isatty_r+0x1c>)
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	f7f5 fd80 	bl	8000e04 <_isatty>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_isatty_r+0x1a>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_isatty_r+0x1a>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	20001538 	.word	0x20001538

0800b314 <_malloc_usable_size_r>:
 800b314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b318:	1f18      	subs	r0, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfbc      	itt	lt
 800b31e:	580b      	ldrlt	r3, [r1, r0]
 800b320:	18c0      	addlt	r0, r0, r3
 800b322:	4770      	bx	lr

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
