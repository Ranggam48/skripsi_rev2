
skripsi_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b2a4  0800b2a4  0001b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b624  0800b624  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b624  0800b624  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b624  0800b624  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200001e8  0800b814  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  0800b814  00021540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ca  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c006  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a174  00000000  00000000  0005985e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f52  00000000  00000000  000739d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  00106974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b28c 	.word	0x0800b28c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b28c 	.word	0x0800b28c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	69b9      	ldr	r1, [r7, #24]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	1a8a      	subs	r2, r1, r2
 800018a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1acb      	subs	r3, r1, r3
 8000194:	fbb2 f2f3 	udiv	r2, r2, r3
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4413      	add	r3, r2
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <delay_us>:

void delay_us(uint32_t us) {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <delay_us+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8f9      	bhi.n	80001ba <delay_us+0x12>
		;
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200002b0 	.word	0x200002b0

080001d8 <modeSoftStart>:

void modeSoftStart() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	if (sign == -1) {
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <modeSoftStart+0x7c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001e4:	d10e      	bne.n	8000204 <modeSoftStart+0x2c>

		HAL_TIM_Base_Start_IT(&htim2);
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <modeSoftStart+0x80>)
 80001e8:	f003 fe7a 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 ffbd 	bl	800116c <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f2:	2006      	movs	r0, #6
 80001f4:	f001 f8f5 	bl	80013e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f001 f8f2 	bl	80013e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80001fe:	2008      	movs	r0, #8
 8000200:	f001 f8ef 	bl	80013e2 <HAL_NVIC_EnableIRQ>

	}
	if (counter == 0) {
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <modeSoftStart+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d120      	bne.n	800024e <modeSoftStart+0x76>
		sign = 0;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <modeSoftStart+0x7c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000212:	2006      	movs	r0, #6
 8000214:	f001 f8f3 	bl	80013fe <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000218:	2007      	movs	r0, #7
 800021a:	f001 f8f0 	bl	80013fe <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800021e:	2008      	movs	r0, #8
 8000220:	f001 f8ed 	bl	80013fe <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <modeSoftStart+0x80>)
 8000226:	f003 fead 	bl	8003f84 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <modeSoftStart+0x88>)
 8000232:	f001 fa9a 	bl	800176a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <modeSoftStart+0x88>)
 800023e:	f001 fa94 	bl	800176a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <modeSoftStart+0x88>)
 800024a:	f001 fa8e 	bl	800176a <HAL_GPIO_WritePin>
	}
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	200002f8 	.word	0x200002f8
 800025c:	20000210 	.word	0x20000210
 8000260:	40010c00 	.word	0x40010c00

08000264 <modeDOL>:

void modeDOL(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <modeDOL+0x34>)
 8000270:	f001 fa7b 	bl	800176a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <modeDOL+0x34>)
 800027c:	f001 fa75 	bl	800176a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <modeDOL+0x34>)
 8000288:	f001 fa6f 	bl	800176a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f000 ff6d 	bl	800116c <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010c00 	.word	0x40010c00

0800029c <EXTI_Stop>:

void EXTI_Stop(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002a0:	2006      	movs	r0, #6
 80002a2:	f001 f8ac 	bl	80013fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f001 f8a9 	bl	80013fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f001 f8a6 	bl	80013fe <HAL_NVIC_DisableIRQ>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002bc:	f000 fef4 	bl	80010a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c0:	f000 f866 	bl	8000390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c4:	f000 f9b4 	bl	8000630 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_I2C1_Init>
	MX_TIM1_Init();
 80002cc:	f000 f8e8 	bl	80004a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80002d0:	f000 f984 	bl	80005dc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002d4:	f000 f934 	bl	8000540 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002d8:	f008 fbf2 	bl	8008ac0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	EXTI_Stop();
 80002dc:	f7ff ffde 	bl	800029c <EXTI_Stop>
	HAL_TIM_Base_Start(&htim1);
 80002e0:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0xbc>)
 80002e2:	f003 fdb3 	bl	8003e4c <HAL_TIM_Base_Start>
	counter = time * 100;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0xc0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2264      	movs	r2, #100	; 0x64
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0xc4>)
 80002f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1 && flag == 1) {
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <main+0x5a>
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0xcc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d105      	bne.n	8000312 <main+0x5a>
			modeDOL();
 8000306:	f7ff ffad 	bl	8000264 <modeDOL>
			HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 ff2e 	bl	800116c <HAL_Delay>
 8000310:	e02e      	b.n	8000370 <main+0xb8>
		}

		else if (mode == 2 && flag == 1) {
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d109      	bne.n	800032e <main+0x76>
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x76>
			modeSoftStart();
 8000322:	f7ff ff59 	bl	80001d8 <modeSoftStart>
			HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 ff20 	bl	800116c <HAL_Delay>
 800032c:	e020      	b.n	8000370 <main+0xb8>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xd0>)
 8000336:	f001 fa18 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xd0>)
 8000342:	f001 fa12 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xd0>)
 800034e:	f001 fa0c 	bl	800176a <HAL_GPIO_WritePin>
			sign = -1;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0xd4>)
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	601a      	str	r2, [r3, #0]
			counter = time * 100;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <main+0xc0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0xc4>)
 8000368:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fefe 	bl	800116c <HAL_Delay>
		if (mode == 1 && flag == 1) {
 8000370:	e7c1      	b.n	80002f6 <main+0x3e>
 8000372:	bf00      	nop
 8000374:	200002b0 	.word	0x200002b0
 8000378:	20000004 	.word	0x20000004
 800037c:	20000210 	.word	0x20000210
 8000380:	20000254 	.word	0x20000254
 8000384:	20000258 	.word	0x20000258
 8000388:	40010c00 	.word	0x40010c00
 800038c:	20000000 	.word	0x20000000

08000390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 f874 	bl	800948c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 f810 	bl	800340c <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
		Error_Handler();
 80003f2:	f000 fafd 	bl	80009f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fa7c 	bl	8003910 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
		Error_Handler();
 800041e:	f000 fae7 	bl	80009f0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fc07 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
		Error_Handler();
 8000438:	f000 fada 	bl	80009f0 <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 f9bb 	bl	80017fc <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800048c:	f000 fab0 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000025c 	.word	0x2000025c
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_TIM1_Init+0x98>)
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x98>)
 80004c4:	2247      	movs	r2, #71	; 0x47
 80004c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM1_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_TIM1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_TIM1_Init+0x98>)
 80004ea:	f003 fc5f 	bl	8003dac <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80004f4:	f000 fa7c 	bl	80009f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM1_Init+0x98>)
 8000506:	f003 fe73 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000510:	f000 fa6e 	bl	80009f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x98>)
 8000522:	f004 f845 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800052c:	f000 fa60 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002b0 	.word	0x200002b0
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 800055e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000562:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000566:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800056a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f003 fc10 	bl	8003dac <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000592:	f000 fa2d 	bl	80009f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f003 fe24 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80005ae:	f000 fa1f 	bl	80009f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f003 fff6 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005ca:	f000 fa11 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002f8 	.word	0x200002f8

080005dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f004 f83c 	bl	8004690 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 f9e7 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000340 	.word	0x20000340
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x118>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MX_GPIO_Init+0x118>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x118>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x118>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x118>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x118>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_GPIO_Init+0x118>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_GPIO_Init+0x118>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0x118>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0x118>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0x118>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0x118>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_GPIO_Init+0x11c>)
 80006ac:	f001 f85d 	bl	800176a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x120>)
 80006b8:	f001 f857 	bl	800176a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0x11c>)
 80006d6:	f000 fead 	bl	8001434 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80006da:	2307      	movs	r3, #7
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ee:	f000 fea1 	bl	8001434 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0x120>)
 800070c:	f000 fe92 	bl	8001434 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2006      	movs	r0, #6
 8000716:	f000 fe48 	bl	80013aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 fe61 	bl	80013e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2007      	movs	r0, #7
 8000726:	f000 fe40 	bl	80013aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800072a:	2007      	movs	r0, #7
 800072c:	f000 fe59 	bl	80013e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fe38 	bl	80013aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800073a:	2008      	movs	r0, #8
 800073c:	f000 fe51 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10110000 	.word	0x10110000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]
	counter = counter - 10;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b0a      	subs	r3, #10
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076c:	6013      	str	r3, [r2, #0]
	delay1 = delay2 = delay3 = MAP(counter, 0, time * 100, 200, 2800);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	23c8      	movs	r3, #200	; 0xc8
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fcf2 	bl	8000170 <MAP>
 800078c:	4603      	mov	r3, r0
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007a0:	6013      	str	r3, [r2, #0]
//	persen = MAP(counter, 0, time * 100, 0, 100);
//	sprintf(str, "%d persen\n", 100 - persen);
//	CDC_Transmit_FS(str, sizeof(str));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007a8:	f000 fff7 	bl	800179a <HAL_GPIO_TogglePin>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000210 	.word	0x20000210
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000020c 	.word	0x2000020c
 80007c0:	20000208 	.word	0x20000208
 80007c4:	20000204 	.word	0x20000204
 80007c8:	40011000 	.word	0x40011000

080007cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d150      	bne.n	800087e <HAL_GPIO_EXTI_Callback+0xb2>

		delay_us(delay1);
 80007dc:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fce1 	bl	80001a8 <delay_us>
		if (delay1 < 2800) {
 80007e6:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80007ee:	d208      	bcs.n	8000802 <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4879      	ldr	r0, [pc, #484]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80007f8:	f000 ffb7 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f7ff fcd3 	bl	80001a8 <delay_us>
		}
		if (delay2 + delay1 < 5600) {
 8000802:	4b77      	ldr	r3, [pc, #476]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 8000810:	d208      	bcs.n	8000824 <HAL_GPIO_EXTI_Callback+0x58>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	4870      	ldr	r0, [pc, #448]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 800081a:	f000 ffa6 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 800081e:	2032      	movs	r0, #50	; 0x32
 8000820:	f7ff fcc2 	bl	80001a8 <delay_us>
		}
		if (delay3 + delay1 + delay2 <= 8400) {
 8000824:	4b6f      	ldr	r3, [pc, #444]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	441a      	add	r2, r3
 800082e:	4b6c      	ldr	r3, [pc, #432]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000838:	4293      	cmp	r3, r2
 800083a:	d808      	bhi.n	800084e <HAL_GPIO_EXTI_Callback+0x82>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	4866      	ldr	r0, [pc, #408]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000844:	f000 ff91 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 8000848:	2032      	movs	r0, #50	; 0x32
 800084a:	f7ff fcad 	bl	80001a8 <delay_us>
		}
		if (counter > 0) {
 800084e:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 80bc 	beq.w	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	485f      	ldr	r0, [pc, #380]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000860:	f000 ff83 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086a:	485c      	ldr	r0, [pc, #368]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 800086c:	f000 ff7d 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000876:	4859      	ldr	r0, [pc, #356]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000878:	f000 ff77 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}
 800087c:	e0a8      	b.n	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
	else if (GPIO_Pin == GPIO_PIN_1) {
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d14f      	bne.n	8000924 <HAL_GPIO_EXTI_Callback+0x158>
		delay_us(delay2);
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fc8d 	bl	80001a8 <delay_us>
		if (delay1 + delay2 + delay3 <= 8400) {
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	441a      	add	r2, r3
 8000898:	4b52      	ldr	r3, [pc, #328]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4413      	add	r3, r2
 800089e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d808      	bhi.n	80008b8 <HAL_GPIO_EXTI_Callback+0xec>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	484b      	ldr	r0, [pc, #300]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80008ae:	f000 ff5c 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 80008b2:	2032      	movs	r0, #50	; 0x32
 80008b4:	f7ff fc78 	bl	80001a8 <delay_us>
		if (delay2 < 2800) {
 80008b8:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80008c0:	d208      	bcs.n	80008d4 <HAL_GPIO_EXTI_Callback+0x108>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c8:	4844      	ldr	r0, [pc, #272]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80008ca:	f000 ff4e 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f7ff fc6a 	bl	80001a8 <delay_us>
		if (delay3 + delay2 < 5600) {
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 80008e2:	d208      	bcs.n	80008f6 <HAL_GPIO_EXTI_Callback+0x12a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ea:	483c      	ldr	r0, [pc, #240]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80008ec:	f000 ff3d 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fc59 	bl	80001a8 <delay_us>
		if (counter > 0) {
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d068      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	4835      	ldr	r0, [pc, #212]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000906:	f000 ff30 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000910:	4832      	ldr	r0, [pc, #200]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000912:	f000 ff2a 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091c:	482f      	ldr	r0, [pc, #188]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 800091e:	f000 ff24 	bl	800176a <HAL_GPIO_WritePin>
}
 8000922:	e055      	b.n	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8000924:	2104      	movs	r1, #4
 8000926:	4831      	ldr	r0, [pc, #196]	; (80009ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000928:	f000 ff08 	bl	800173c <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d04e      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
		delay_us(delay3);
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc36 	bl	80001a8 <delay_us>
		if (delay1 + delay3 < 5600) {
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	f5b3 5faf 	cmp.w	r3, #5600	; 0x15e0
 800094a:	d208      	bcs.n	800095e <HAL_GPIO_EXTI_Callback+0x192>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000952:	4822      	ldr	r0, [pc, #136]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 8000954:	f000 ff09 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 8000958:	2032      	movs	r0, #50	; 0x32
 800095a:	f7ff fc25 	bl	80001a8 <delay_us>
		if (delay2 + delay3 + delay2 <= 8400) {
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	441a      	add	r2, r3
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x214>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4413      	add	r3, r2
 800096e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000972:	4293      	cmp	r3, r2
 8000974:	d808      	bhi.n	8000988 <HAL_GPIO_EXTI_Callback+0x1bc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	4817      	ldr	r0, [pc, #92]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 800097e:	f000 fef4 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 8000982:	2032      	movs	r0, #50	; 0x32
 8000984:	f7ff fc10 	bl	80001a8 <delay_us>
		if (delay3 < 2800) {
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x218>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000990:	d208      	bcs.n	80009a4 <HAL_GPIO_EXTI_Callback+0x1d8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 800099a:	f000 fee6 	bl	800176a <HAL_GPIO_WritePin>
			delay_us(50);
 800099e:	2032      	movs	r0, #50	; 0x32
 80009a0:	f7ff fc02 	bl	80001a8 <delay_us>
		if (counter > 0) {
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d011      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0x204>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b2:	480a      	ldr	r0, [pc, #40]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80009b4:	f000 fed9 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80009c0:	f000 fed3 	bl	800176a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <HAL_GPIO_EXTI_Callback+0x210>)
 80009cc:	f000 fecd 	bl	800176a <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000204 	.word	0x20000204
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	20000208 	.word	0x20000208
 80009e4:	2000020c 	.word	0x2000020c
 80009e8:	20000210 	.word	0x20000210
 80009ec:	40011000 	.word	0x40011000

080009f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x5c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_MspInit+0x60>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_MspInit+0x60>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010000 	.word	0x40010000

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <HAL_I2C_MspInit+0x70>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d123      	bne.n	8000ac8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a98:	23c0      	movs	r3, #192	; 0xc0
 8000a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000aac:	f000 fcc2 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aba:	61d3      	str	r3, [r2, #28]
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_TIM_Base_MspInit+0x68>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10c      	bne.n	8000b08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b06:	e018      	b.n	8000b3a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b10:	d113      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_TIM_Base_MspInit+0x6c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f000 fc3b 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f000 fc54 	bl	80013e2 <HAL_NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012c00 	.word	0x40012c00
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d131      	bne.n	8000bd0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_UART_MspInit+0x94>)
 8000bb2:	f000 fc3f 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_UART_MspInit+0x94>)
 8000bcc:	f000 fc32 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 fa83 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 fdc8 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f000 fdc1 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f000 fdba 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c62:	f001 f840 	bl	8001ce6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20001024 	.word	0x20001024

08000c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM2_IRQHandler+0x10>)
 8000c76:	f003 f9b3 	bl	8003fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200002f8 	.word	0x200002f8

08000c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <_kill>:

int _kill(int pid, int sig)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c9c:	f008 fbbe 	bl	800941c <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2216      	movs	r2, #22
 8000ca4:	601a      	str	r2, [r3, #0]
	return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_exit>:

void _exit (int status)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cba:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffe7 	bl	8000c92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cc4:	e7fe      	b.n	8000cc4 <_exit+0x12>

08000cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e00a      	b.n	8000cee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd8:	f3af 8000 	nop.w
 8000cdc:	4601      	mov	r1, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	60ba      	str	r2, [r7, #8]
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbf0      	blt.n	8000cd8 <_read+0x12>
	}

return len;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e009      	b.n	8000d26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbf1      	blt.n	8000d12 <_write+0x12>
	}
	return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_close>:

int _close(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	return -1;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <_isatty>:

int _isatty(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f008 fb28 	bl	800941c <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20005000 	.word	0x20005000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000384 	.word	0x20000384
 8000e00:	20001540 	.word	0x20001540

08000e04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <command_printf>:

extern int mode;
extern int time;
extern int flag;

void command_printf(const char *format, ...) {
 8000e10:	b40f      	push	{r0, r1, r2, r3}
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b0c2      	sub	sp, #264	; 0x108
 8000e16:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, format);
 8000e18:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int len;
	unsigned char print_buffer[255];
	//char *buf;
	len = vsnprintf(print_buffer, 254, format, arg);
 8000e20:	4638      	mov	r0, r7
 8000e22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e2a:	21fe      	movs	r1, #254	; 0xfe
 8000e2c:	f008 fc2e 	bl	800968c <vsniprintf>
 8000e30:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arg);
	if (len > 0) {
 8000e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dd0c      	ble.n	8000e56 <command_printf+0x46>
		CDC_Transmit_FS((unsigned char*) print_buffer,
				(len < 254) ? len + 1 : 255);
 8000e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e40:	2bfe      	cmp	r3, #254	; 0xfe
 8000e42:	bfa8      	it	ge
 8000e44:	23fe      	movge	r3, #254	; 0xfe
		CDC_Transmit_FS((unsigned char*) print_buffer,
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f007 ff05 	bl	8008c60 <CDC_Transmit_FS>
	}
	//memset(print_buffer, 0, len);
}
 8000e56:	bf00      	nop
 8000e58:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e62:	b004      	add	sp, #16
 8000e64:	4770      	bx	lr
	...

08000e68 <terminal_proses>:

void terminal_proses(uint8_t *str) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0c4      	sub	sp, #272	; 0x110
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e76:	6018      	str	r0, [r3, #0]
	enum {
		kMaxArgs = 64
	};
	int argc = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8000e7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e86:	4962      	ldr	r1, [pc, #392]	; (8001010 <terminal_proses+0x1a8>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f008 fb77 	bl	800957c <strtok>
 8000e8e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000e92:	e012      	b.n	8000eba <terminal_proses+0x52>
		argv[argc++] = p2;
 8000e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000e9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ea2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000ea6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 8000eae:	4958      	ldr	r1, [pc, #352]	; (8001010 <terminal_proses+0x1a8>)
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f008 fb63 	bl	800957c <strtok>
 8000eb6:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (p2 && argc < kMaxArgs) {
 8000eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <terminal_proses+0x62>
 8000ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec8:	dde4      	ble.n	8000e94 <terminal_proses+0x2c>
	}
	if (argc == 0) {
 8000eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <terminal_proses+0x72>

		command_printf("tidak ada perintah\n");
 8000ed2:	4850      	ldr	r0, [pc, #320]	; (8001014 <terminal_proses+0x1ac>)
 8000ed4:	f7ff ff9c 	bl	8000e10 <command_printf>
		if (argc == 2) {
			sscanf(argv[1], "%d", &time);
			command_printf("Waktu Softstart = %d detik\n", time);
		}
	}
}
 8000ed8:	e094      	b.n	8001004 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "param") == 0) {
 8000eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	494c      	ldr	r1, [pc, #304]	; (8001018 <terminal_proses+0x1b0>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f930 	bl	800014c <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <terminal_proses+0xa4>
		command_printf("Mode %d\n", mode);
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	; (800101c <terminal_proses+0x1b4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4849      	ldr	r0, [pc, #292]	; (8001020 <terminal_proses+0x1b8>)
 8000efa:	f7ff ff89 	bl	8000e10 <command_printf>
		command_printf("Waktu %d\n\n", time);
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <terminal_proses+0x1bc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4848      	ldr	r0, [pc, #288]	; (8001028 <terminal_proses+0x1c0>)
 8000f06:	f7ff ff83 	bl	8000e10 <command_printf>
}
 8000f0a:	e07b      	b.n	8001004 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "off") == 0) {
 8000f0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4945      	ldr	r1, [pc, #276]	; (800102c <terminal_proses+0x1c4>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f917 	bl	800014c <strcmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10c      	bne.n	8000f3e <terminal_proses+0xd6>
		flag = 0;
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <terminal_proses+0x1c8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	4840      	ldr	r0, [pc, #256]	; (8001034 <terminal_proses+0x1cc>)
 8000f32:	f000 fc1a 	bl	800176a <HAL_GPIO_WritePin>
		command_printf("OFF\n");
 8000f36:	4840      	ldr	r0, [pc, #256]	; (8001038 <terminal_proses+0x1d0>)
 8000f38:	f7ff ff6a 	bl	8000e10 <command_printf>
}
 8000f3c:	e062      	b.n	8001004 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "on") == 0) {
 8000f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	493c      	ldr	r1, [pc, #240]	; (800103c <terminal_proses+0x1d4>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f8fe 	bl	800014c <strcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <terminal_proses+0x108>
		flag = 1;
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <terminal_proses+0x1c8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	4834      	ldr	r0, [pc, #208]	; (8001034 <terminal_proses+0x1cc>)
 8000f64:	f000 fc01 	bl	800176a <HAL_GPIO_WritePin>
		command_printf("ON\n");
 8000f68:	4835      	ldr	r0, [pc, #212]	; (8001040 <terminal_proses+0x1d8>)
 8000f6a:	f7ff ff51 	bl	8000e10 <command_printf>
}
 8000f6e:	e049      	b.n	8001004 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setMode") == 0) {
 8000f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4932      	ldr	r1, [pc, #200]	; (8001044 <terminal_proses+0x1dc>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f8e5 	bl	800014c <strcmp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11d      	bne.n	8000fc4 <terminal_proses+0x15c>
		if (argc == 2) {
 8000f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d109      	bne.n	8000fa4 <terminal_proses+0x13c>
			sscanf(argv[1], "%d", &mode);
 8000f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <terminal_proses+0x1b4>)
 8000f9c:	492a      	ldr	r1, [pc, #168]	; (8001048 <terminal_proses+0x1e0>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 fa7c 	bl	800949c <siscanf>
		if (mode == 1) {
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <terminal_proses+0x1b4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d103      	bne.n	8000fb4 <terminal_proses+0x14c>
			command_printf("Mode DOL\n");
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <terminal_proses+0x1e4>)
 8000fae:	f7ff ff2f 	bl	8000e10 <command_printf>
}
 8000fb2:	e027      	b.n	8001004 <terminal_proses+0x19c>
		} else if (mode == 2) {
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <terminal_proses+0x1b4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <terminal_proses+0x19c>
			command_printf("Mode Soft Starting\n");
 8000fbc:	4824      	ldr	r0, [pc, #144]	; (8001050 <terminal_proses+0x1e8>)
 8000fbe:	f7ff ff27 	bl	8000e10 <command_printf>
}
 8000fc2:	e01f      	b.n	8001004 <terminal_proses+0x19c>
	else if (strcmp(argv[0], "setWaktu") == 0) {
 8000fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4921      	ldr	r1, [pc, #132]	; (8001054 <terminal_proses+0x1ec>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f8bb 	bl	800014c <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d113      	bne.n	8001004 <terminal_proses+0x19c>
		if (argc == 2) {
 8000fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d10f      	bne.n	8001004 <terminal_proses+0x19c>
			sscanf(argv[1], "%d", &time);
 8000fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <terminal_proses+0x1bc>)
 8000ff0:	4915      	ldr	r1, [pc, #84]	; (8001048 <terminal_proses+0x1e0>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fa52 	bl	800949c <siscanf>
			command_printf("Waktu Softstart = %d detik\n", time);
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <terminal_proses+0x1bc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4816      	ldr	r0, [pc, #88]	; (8001058 <terminal_proses+0x1f0>)
 8001000:	f7ff ff06 	bl	8000e10 <command_printf>
}
 8001004:	bf00      	nop
 8001006:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	0800b2a4 	.word	0x0800b2a4
 8001014:	0800b2a8 	.word	0x0800b2a8
 8001018:	0800b2bc 	.word	0x0800b2bc
 800101c:	20000254 	.word	0x20000254
 8001020:	0800b2c4 	.word	0x0800b2c4
 8001024:	20000004 	.word	0x20000004
 8001028:	0800b2d0 	.word	0x0800b2d0
 800102c:	0800b2dc 	.word	0x0800b2dc
 8001030:	20000258 	.word	0x20000258
 8001034:	40011000 	.word	0x40011000
 8001038:	0800b2e0 	.word	0x0800b2e0
 800103c:	0800b2e8 	.word	0x0800b2e8
 8001040:	0800b2ec 	.word	0x0800b2ec
 8001044:	0800b2f0 	.word	0x0800b2f0
 8001048:	0800b2f8 	.word	0x0800b2f8
 800104c:	0800b2fc 	.word	0x0800b2fc
 8001050:	0800b308 	.word	0x0800b308
 8001054:	0800b31c 	.word	0x0800b31c
 8001058:	0800b328 	.word	0x0800b328

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff febf 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f008 f9cf 	bl	8009428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff f915 	bl	80002b8 <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001098:	0800b62c 	.word	0x0800b62c
  ldr r2, =_sbss
 800109c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80010a0:	20001540 	.word	0x20001540

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f96b 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fc9a 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f991 	bl	800141a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f94b 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000008 	.word	0x20000008
 800112c:	20000010 	.word	0x20000010
 8001130:	2000000c 	.word	0x2000000c

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000010 	.word	0x20000010
 8001154:	20000388 	.word	0x20000388

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000388 	.word	0x20000388

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000010 	.word	0x20000010

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db12      	blt.n	8001288 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	490a      	ldr	r1, [pc, #40]	; (8001294 <__NVIC_DisableIRQ+0x44>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	3320      	adds	r3, #32
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800127c:	f3bf 8f4f 	dsb	sy
}
 8001280:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001282:	f3bf 8f6f 	isb	sy
}
 8001286:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff09 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff1e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff11 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff1f 	bl	8001250 <__NVIC_DisableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff94 	bl	8001350 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e169      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8158 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a9a      	ldr	r2, [pc, #616]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4a98      	ldr	r2, [pc, #608]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4a98      	ldr	r2, [pc, #608]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a96      	ldr	r2, [pc, #600]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a96      	ldr	r2, [pc, #600]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a94      	ldr	r2, [pc, #592]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a94      	ldr	r2, [pc, #592]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a92      	ldr	r2, [pc, #584]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a92      	ldr	r2, [pc, #584]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <HAL_GPIO_Init+0x2b4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b1 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a40      	ldr	r2, [pc, #256]	; (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e0>
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001614:	2304      	movs	r3, #4
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	492c      	ldr	r1, [pc, #176]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4928      	ldr	r1, [pc, #160]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4922      	ldr	r1, [pc, #136]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491e      	ldr	r1, [pc, #120]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4918      	ldr	r1, [pc, #96]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4914      	ldr	r1, [pc, #80]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x2e2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_GPIO_Init+0x304>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001712:	4013      	ands	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae8e 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	372c      	adds	r7, #44	; 0x2c
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	807b      	strh	r3, [r7, #2]
 8001776:	4613      	mov	r3, r2
 8001778:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177a:	787b      	ldrb	r3, [r7, #1]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001786:	e003      	b.n	8001790 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	041a      	lsls	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	611a      	str	r2, [r3, #16]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	041a      	lsls	r2, r3, #16
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	400b      	ands	r3, r1
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe ffee 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e12b      	b.n	8001a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f91c 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800185e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001860:	f002 f9a8 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a81      	ldr	r2, [pc, #516]	; (8001a70 <HAL_I2C_Init+0x274>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d807      	bhi.n	8001880 <HAL_I2C_Init+0x84>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a80      	ldr	r2, [pc, #512]	; (8001a74 <HAL_I2C_Init+0x278>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e006      	b.n	800188e <HAL_I2C_Init+0x92>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a7d      	ldr	r2, [pc, #500]	; (8001a78 <HAL_I2C_Init+0x27c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	bf94      	ite	ls
 8001888:	2301      	movls	r3, #1
 800188a:	2300      	movhi	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0e7      	b.n	8001a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a78      	ldr	r2, [pc, #480]	; (8001a7c <HAL_I2C_Init+0x280>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_I2C_Init+0x274>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d802      	bhi.n	80018d0 <HAL_I2C_Init+0xd4>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	e009      	b.n	80018e4 <HAL_I2C_Init+0xe8>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_I2C_Init+0x284>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	3301      	adds	r3, #1
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	495c      	ldr	r1, [pc, #368]	; (8001a70 <HAL_I2C_Init+0x274>)
 8001900:	428b      	cmp	r3, r1
 8001902:	d819      	bhi.n	8001938 <HAL_I2C_Init+0x13c>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e59      	subs	r1, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001912:	1c59      	adds	r1, r3, #1
 8001914:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001918:	400b      	ands	r3, r1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_I2C_Init+0x138>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1e59      	subs	r1, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fbb1 f3f3 	udiv	r3, r1, r3
 800192c:	3301      	adds	r3, #1
 800192e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001932:	e051      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001934:	2304      	movs	r3, #4
 8001936:	e04f      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <HAL_I2C_Init+0x168>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e012      	b.n	800198a <HAL_I2C_Init+0x18e>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	0099      	lsls	r1, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	fbb0 f3f3 	udiv	r3, r0, r3
 800197a:	3301      	adds	r3, #1
 800197c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x196>
 800198e:	2301      	movs	r3, #1
 8001990:	e022      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10e      	bne.n	80019b8 <HAL_I2C_Init+0x1bc>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e58      	subs	r0, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	440b      	add	r3, r1
 80019a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	e00f      	b.n	80019d8 <HAL_I2C_Init+0x1dc>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	0099      	lsls	r1, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6809      	ldr	r1, [r1, #0]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6911      	ldr	r1, [r2, #16]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68d2      	ldr	r2, [r2, #12]
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	000186a0 	.word	0x000186a0
 8001a74:	001e847f 	.word	0x001e847f
 8001a78:	003d08ff 	.word	0x003d08ff
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af06      	add	r7, sp, #24
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0fd      	b.n	8001c92 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f007 fa0c 	bl	8008ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fee9 	bl	8004894 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	687e      	ldr	r6, [r7, #4]
 8001aca:	466d      	mov	r5, sp
 8001acc:	f106 0410 	add.w	r4, r6, #16
 8001ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	602b      	str	r3, [r5, #0]
 8001ad8:	1d33      	adds	r3, r6, #4
 8001ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001adc:	6838      	ldr	r0, [r7, #0]
 8001ade:	f002 feb3 	bl	8004848 <USB_CoreInit>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0ce      	b.n	8001c92 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fee4 	bl	80048c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e04c      	b.n	8001ba0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	3301      	adds	r3, #1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	b298      	uxth	r0, r3
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3336      	adds	r3, #54	; 0x36
 8001b44:	4602      	mov	r2, r0
 8001b46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3303      	adds	r3, #3
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3338      	adds	r3, #56	; 0x38
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	333c      	adds	r3, #60	; 0x3c
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3340      	adds	r3, #64	; 0x40
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d3ad      	bcc.n	8001b06 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e044      	b.n	8001c3a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	3301      	adds	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3b5      	bcc.n	8001bb0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	687e      	ldr	r6, [r7, #4]
 8001c4c:	466d      	mov	r5, sp
 8001c4e:	f106 0410 	add.w	r4, r6, #16
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	1d33      	adds	r3, r6, #4
 8001c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5e:	6838      	ldr	r0, [r7, #0]
 8001c60:	f002 fe3e 	bl	80048e0 <USB_DevInit>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00d      	b.n	8001c92 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 faf0 	bl	8007270 <USB_DevDisconnect>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_Start+0x16>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e016      	b.n	8001cde <HAL_PCD_Start+0x44>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fdd3 	bl	8004868 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f007 fb72 	bl	80093ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 fac4 	bl	800725c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b088      	sub	sp, #32
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fac6 	bl	8007284 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d02:	d102      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fb5f 	bl	80023c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 fab8 	bl	8007284 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d112      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f007 f940 	bl	8008fbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f923 	bl	8001f8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fa9a 	bl	8007284 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5a:	d10b      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fa83 	bl	8007284 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d88:	d10b      	bne.n	8001da2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 fa6c 	bl	8007284 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d126      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0208 	bic.w	r2, r2, #8
 8001de2:	b292      	uxth	r2, r2
 8001de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f007 f921 	bl	8009030 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e00:	b292      	uxth	r2, r2
 8001e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 fa3a 	bl	8007284 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e1a:	f040 8082 	bne.w	8001f22 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	77fb      	strb	r3, [r7, #31]
 8001e22:	e010      	b.n	8001e46 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	441a      	add	r2, r3
 8001e30:	7ffb      	ldrb	r3, [r7, #31]
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	b292      	uxth	r2, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	3320      	adds	r3, #32
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	3301      	adds	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d9eb      	bls.n	8001e24 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e7c:	bf00      	nop
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f6      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	e00f      	b.n	8001ece <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	7ffa      	ldrb	r2, [r7, #31]
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	440a      	add	r2, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	3320      	adds	r3, #32
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ec6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	77fb      	strb	r3, [r7, #31]
 8001ece:	7ffb      	ldrb	r3, [r7, #31]
 8001ed0:	2b07      	cmp	r3, #7
 8001ed2:	d9ec      	bls.n	8001eae <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0204 	orr.w	r2, r2, #4
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f007 f86d 	bl	8008ffc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f9ac 	bl	8007284 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f36:	d10e      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f007 f826 	bl	8008fa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 f992 	bl	8007284 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6a:	d10b      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_SetAddress+0x1a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e013      	b.n	8001fce <HAL_PCD_SetAddress+0x42>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 f939 	bl	8007236 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	70fb      	strb	r3, [r7, #3]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	803b      	strh	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0e      	bge.n	800201a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
 8002018:	e00e      	b.n	8002038 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 0207 	and.w	r2, r3, #7
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002044:	883a      	ldrh	r2, [r7, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	78ba      	ldrb	r2, [r7, #2]
 800204e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002062:	78bb      	ldrb	r3, [r7, #2]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d102      	bne.n	800206e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_EP_Open+0xa6>
 8002078:	2302      	movs	r3, #2
 800207a:	e00e      	b.n	800209a <HAL_PCD_EP_Open+0xc4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fc48 	bl	8004920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002098:	7afb      	ldrb	r3, [r7, #11]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da0e      	bge.n	80020d4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
 80020d2:	e00e      	b.n	80020f2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0207 	and.w	r2, r3, #7
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_Close+0x6a>
 8002108:	2302      	movs	r3, #2
 800210a:	e00e      	b.n	800212a <HAL_PCD_EP_Close+0x88>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 ff6a 	bl	8004ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 0207 	and.w	r2, r3, #7
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	b2da      	uxtb	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6979      	ldr	r1, [r7, #20]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 f91c 	bl	80053cc <USB_EPStartXfer>
 8002194:	e005      	b.n	80021a2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6979      	ldr	r1, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 f915 	bl	80053cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	460b      	mov	r3, r1
 80021e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2201      	movs	r2, #1
 8002224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	b2da      	uxtb	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f8c2 	bl	80053cc <USB_EPStartXfer>
 8002248:	e005      	b.n	8002256 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 f8bb 	bl	80053cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 0207 	and.w	r2, r3, #7
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d901      	bls.n	800227e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e04c      	b.n	8002318 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800227e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002282:	2b00      	cmp	r3, #0
 8002284:	da0e      	bge.n	80022a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	705a      	strb	r2, [r3, #1]
 80022a2:	e00c      	b.n	80022be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_EP_SetStall+0x7e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e01c      	b.n	8002318 <HAL_PCD_EP_SetStall+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fea5 	bl	800703c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f004 ffca 	bl	80072a2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 020f 	and.w	r2, r3, #15
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d901      	bls.n	800233e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e040      	b.n	80023c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800233e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da0e      	bge.n	8002364 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
 8002362:	e00e      	b.n	8002382 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_PCD_EP_ClrStall+0x82>
 800239e:	2302      	movs	r3, #2
 80023a0:	e00e      	b.n	80023c0 <HAL_PCD_EP_ClrStall+0xa0>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 fe93 	bl	80070dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023d0:	e2ec      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023da:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8161 	bne.w	80026b4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d152      	bne.n	80024a2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240c:	81fb      	strh	r3, [r7, #14]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241c:	b29b      	uxth	r3, r3
 800241e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3328      	adds	r3, #40	; 0x28
 8002424:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	3302      	adds	r3, #2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	441a      	add	r2, r3
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002460:	2100      	movs	r1, #0
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f006 fd83 	bl	8008f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 829b 	beq.w	80029ac <PCD_EP_ISR_Handler+0x5e4>
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 8296 	bne.w	80029ac <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800248c:	b2da      	uxtb	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b292      	uxth	r2, r2
 8002494:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024a0:	e284      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d034      	beq.n	8002526 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	3306      	adds	r3, #6
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f004 ff21 	bl	8007342 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	f640 738f 	movw	r3, #3983	; 0xf8f
 800250c:	4013      	ands	r3, r2
 800250e:	823b      	strh	r3, [r7, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	8a3a      	ldrh	r2, [r7, #16]
 8002516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800251a:	b292      	uxth	r2, r2
 800251c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f006 fcf8 	bl	8008f14 <HAL_PCD_SetupStageCallback>
 8002524:	e242      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002526:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800252a:	2b00      	cmp	r3, #0
 800252c:	f280 823e 	bge.w	80029ac <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f640 738f 	movw	r3, #3983	; 0xf8f
 800253c:	4013      	ands	r3, r2
 800253e:	83bb      	strh	r3, [r7, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	8bba      	ldrh	r2, [r7, #28]
 8002546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254a:	b292      	uxth	r2, r2
 800254c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	3306      	adds	r3, #6
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x1ee>
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	6959      	ldr	r1, [r3, #20]
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800259a:	b29b      	uxth	r3, r3
 800259c:	f004 fed1 	bl	8007342 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	441a      	add	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 fcc1 	bl	8008f38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 81f2 	bne.w	80029ac <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d112      	bne.n	8002616 <PCD_EP_ISR_Handler+0x24e>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260e:	b29a      	uxth	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e02f      	b.n	8002676 <PCD_EP_ISR_Handler+0x2ae>
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b3e      	cmp	r3, #62	; 0x3e
 800261c:	d813      	bhi.n	8002646 <PCD_EP_ISR_Handler+0x27e>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <PCD_EP_ISR_Handler+0x270>
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	3301      	adds	r3, #1
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	b29b      	uxth	r3, r3
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	b29a      	uxth	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	e017      	b.n	8002676 <PCD_EP_ISR_Handler+0x2ae>
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <PCD_EP_ISR_Handler+0x298>
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	3b01      	subs	r3, #1
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	b29b      	uxth	r3, r3
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	b29b      	uxth	r3, r3
 8002668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002670:	b29a      	uxth	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	827b      	strh	r3, [r7, #18]
 8002688:	8a7b      	ldrh	r3, [r7, #18]
 800268a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800268e:	827b      	strh	r3, [r7, #18]
 8002690:	8a7b      	ldrh	r3, [r7, #18]
 8002692:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002696:	827b      	strh	r3, [r7, #18]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	8a7b      	ldrh	r3, [r7, #18]
 800269e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]
 80026b2:	e17b      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f280 80ea 	bge.w	80028a4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e6:	4013      	ands	r3, r2
 80026e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026fe:	b292      	uxth	r2, r2
 8002700:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002702:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	7b1b      	ldrb	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d122      	bne.n	8002766 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	3306      	adds	r3, #6
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800274a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8087 	beq.w	8002860 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	6959      	ldr	r1, [r3, #20]
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	88da      	ldrh	r2, [r3, #6]
 800275e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002760:	f004 fdef 	bl	8007342 <USB_ReadPMA>
 8002764:	e07c      	b.n	8002860 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	78db      	ldrb	r3, [r3, #3]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d108      	bne.n	8002780 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800276e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002770:	461a      	mov	r2, r3
 8002772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f927 	bl	80029c8 <HAL_PCD_EP_DB_Receive>
 800277a:	4603      	mov	r3, r0
 800277c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800277e:	e06f      	b.n	8002860 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	847b      	strh	r3, [r7, #34]	; 0x22
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027bc:	b29b      	uxth	r3, r3
 80027be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d021      	beq.n	800281e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	3302      	adds	r3, #2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002802:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02a      	beq.n	8002860 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	6959      	ldr	r1, [r3, #20]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	891a      	ldrh	r2, [r3, #8]
 8002816:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002818:	f004 fd93 	bl	8007342 <USB_ReadPMA>
 800281c:	e020      	b.n	8002860 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	3306      	adds	r3, #6
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002846:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	6959      	ldr	r1, [r3, #20]
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	895a      	ldrh	r2, [r3, #10]
 800285a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800285c:	f004 fd71 	bl	8007342 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002866:	441a      	add	r2, r3
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002872:	441a      	add	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <PCD_EP_ISR_Handler+0x4c2>
 8002880:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d206      	bcs.n	8002898 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f006 fb51 	bl	8008f38 <HAL_PCD_DataOutStageCallback>
 8002896:	e005      	b.n	80028a4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fd94 	bl	80053cc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d07e      	beq.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80028ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	843b      	strh	r3, [r7, #32]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	441a      	add	r2, r3
 80028ec:	8c3b      	ldrh	r3, [r7, #32]
 80028ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	78db      	ldrb	r3, [r3, #3]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d00c      	beq.n	800291c <PCD_EP_ISR_Handler+0x554>
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800290e:	2b02      	cmp	r3, #2
 8002910:	d146      	bne.n	80029a0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d141      	bne.n	80029a0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	3302      	adds	r3, #2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002944:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	429a      	cmp	r2, r3
 800294e:	d906      	bls.n	800295e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	8bfb      	ldrh	r3, [r7, #30]
 8002956:	1ad2      	subs	r2, r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	619a      	str	r2, [r3, #24]
 800295c:	e002      	b.n	8002964 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f006 fafb 	bl	8008f6e <HAL_PCD_DataInStageCallback>
 8002978:	e018      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	8bfb      	ldrh	r3, [r7, #30]
 8002980:	441a      	add	r2, r3
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	8bfb      	ldrh	r3, [r7, #30]
 800298c:	441a      	add	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fd17 	bl	80053cc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800299e:	e005      	b.n	80029ac <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f91b 	bl	8002be2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f6ff ad0a 	blt.w	80023d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3738      	adds	r7, #56	; 0x38
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07e      	beq.n	8002ade <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	3302      	adds	r3, #2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	8b7b      	ldrh	r3, [r7, #26]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d306      	bcc.n	8002a22 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	8b7b      	ldrh	r3, [r7, #26]
 8002a1a:	1ad2      	subs	r2, r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	619a      	str	r2, [r3, #24]
 8002a20:	e002      	b.n	8002a28 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d123      	bne.n	8002a78 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	833b      	strh	r3, [r7, #24]
 8002a4c:	8b3b      	ldrh	r3, [r7, #24]
 8002a4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a52:	833b      	strh	r3, [r7, #24]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	8b3b      	ldrh	r3, [r7, #24]
 8002a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01f      	beq.n	8002ac2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	82fb      	strh	r3, [r7, #22]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	441a      	add	r2, r3
 8002aac:	8afb      	ldrh	r3, [r7, #22]
 8002aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ac2:	8b7b      	ldrh	r3, [r7, #26]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8087 	beq.w	8002bd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6959      	ldr	r1, [r3, #20]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	891a      	ldrh	r2, [r3, #8]
 8002ad6:	8b7b      	ldrh	r3, [r7, #26]
 8002ad8:	f004 fc33 	bl	8007342 <USB_ReadPMA>
 8002adc:	e07c      	b.n	8002bd8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	3306      	adds	r3, #6
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	8b7b      	ldrh	r3, [r7, #26]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d306      	bcc.n	8002b20 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	8b7b      	ldrh	r3, [r7, #26]
 8002b18:	1ad2      	subs	r2, r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	619a      	str	r2, [r3, #24]
 8002b1e:	e002      	b.n	8002b26 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d123      	bne.n	8002b76 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	83fb      	strh	r3, [r7, #30]
 8002b4a:	8bfb      	ldrh	r3, [r7, #30]
 8002b4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b50:	83fb      	strh	r3, [r7, #30]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	441a      	add	r2, r3
 8002b60:	8bfb      	ldrh	r3, [r7, #30]
 8002b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11f      	bne.n	8002bc0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	83bb      	strh	r3, [r7, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	8bbb      	ldrh	r3, [r7, #28]
 8002bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	895a      	ldrh	r2, [r3, #10]
 8002bd2:	8b7b      	ldrh	r3, [r7, #26]
 8002bd4:	f004 fbb5 	bl	8007342 <USB_ReadPMA>
    }
  }

  return count;
 8002bd8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b0a2      	sub	sp, #136	; 0x88
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 81c7 	beq.w	8002f8a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3302      	adds	r3, #2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d907      	bls.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	1ad2      	subs	r2, r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	619a      	str	r2, [r3, #24]
 8002c42:	e002      	b.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 80b9 	bne.w	8002dc6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d126      	bne.n	8002caa <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	4413      	add	r3, r2
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	011a      	lsls	r2, r3, #4
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	e01a      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d116      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	4413      	add	r3, r2
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	011a      	lsls	r2, r3, #4
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	2200      	movs	r2, #0
 8002cde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d126      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x15a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	011a      	lsls	r2, r3, #4
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e017      	b.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d113      	bne.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	4413      	add	r3, r2
 8002d54:	623b      	str	r3, [r7, #32]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	011a      	lsls	r2, r3, #4
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f006 f8fb 	bl	8008f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 82d4 	beq.w	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	827b      	strh	r3, [r7, #18]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	8013      	strh	r3, [r2, #0]
 8002dc4:	e2b2      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 8286 	bne.w	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e28:	441a      	add	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e36:	441a      	add	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d309      	bcc.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e54:	1ad2      	subs	r2, r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	621a      	str	r2, [r3, #32]
 8002e5a:	e015      	b.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e72:	e009      	b.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d155      	bne.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x35a>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	4413      	add	r3, r2
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d112      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x302>
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	e047      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ee8:	d811      	bhi.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x32c>
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efc:	3301      	adds	r3, #1
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e032      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x342>
 8002f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f20:	3b01      	subs	r3, #1
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e01b      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d117      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	4413      	add	r3, r2
 8002f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	011a      	lsls	r2, r3, #4
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	4413      	add	r3, r2
 8002f66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6959      	ldr	r1, [r3, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	891a      	ldrh	r2, [r3, #8]
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f004 f998 	bl	80072b8 <USB_WritePMA>
 8002f88:	e1d0      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3306      	adds	r3, #6
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d307      	bcc.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	e002      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80c4 	bne.w	800316a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d126      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x456>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	4413      	add	r3, r2
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	011a      	lsls	r2, r3, #4
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	4413      	add	r3, r2
 800300c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003010:	66bb      	str	r3, [r7, #104]	; 0x68
 8003012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800301c:	b29a      	uxth	r2, r3
 800301e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003030:	b29a      	uxth	r2, r3
 8003032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e01a      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d116      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	677b      	str	r3, [r7, #116]	; 0x74
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	4413      	add	r3, r2
 8003056:	677b      	str	r3, [r7, #116]	; 0x74
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	4413      	add	r3, r2
 8003062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003066:	673b      	str	r3, [r7, #112]	; 0x70
 8003068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306a:	2200      	movs	r2, #0
 800306c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	67bb      	str	r3, [r7, #120]	; 0x78
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12f      	bne.n	80030dc <HAL_PCD_EP_DB_Transmit+0x4fa>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003094:	4413      	add	r3, r2
 8003096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	011a      	lsls	r2, r3, #4
 80030a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d8:	801a      	strh	r2, [r3, #0]
 80030da:	e017      	b.n	800310c <HAL_PCD_EP_DB_Transmit+0x52a>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d113      	bne.n	800310c <HAL_PCD_EP_DB_Transmit+0x52a>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f2:	4413      	add	r3, r2
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	011a      	lsls	r2, r3, #4
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	4413      	add	r3, r2
 8003100:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003108:	2200      	movs	r2, #0
 800310a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f005 ff2b 	bl	8008f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 8104 	bne.w	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]
 8003168:	e0e0      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d121      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 80b4 	bne.w	800332c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031cc:	441a      	add	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031da:	441a      	add	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d309      	bcc.n	8003200 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	1ad2      	subs	r2, r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	621a      	str	r2, [r3, #32]
 80031fe:	e015      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003216:	e009      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	667b      	str	r3, [r7, #100]	; 0x64
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d155      	bne.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x704>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	4413      	add	r3, r2
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	011a      	lsls	r2, r3, #4
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	4413      	add	r3, r2
 800325c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003260:	65bb      	str	r3, [r7, #88]	; 0x58
 8003262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003264:	2b00      	cmp	r3, #0
 8003266:	d112      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003272:	b29a      	uxth	r2, r3
 8003274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003286:	b29a      	uxth	r2, r3
 8003288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	e044      	b.n	8003318 <HAL_PCD_EP_DB_Transmit+0x736>
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	2b3e      	cmp	r3, #62	; 0x3e
 8003292:	d811      	bhi.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_PCD_EP_DB_Transmit+0x6c8>
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	3301      	adds	r3, #1
 80032a8:	657b      	str	r3, [r7, #84]	; 0x54
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e02f      	b.n	8003318 <HAL_PCD_EP_DB_Transmit+0x736>
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	657b      	str	r3, [r7, #84]	; 0x54
 80032be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_PCD_EP_DB_Transmit+0x6ec>
 80032c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ca:	3b01      	subs	r3, #1
 80032cc:	657b      	str	r3, [r7, #84]	; 0x54
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	029b      	lsls	r3, r3, #10
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	e018      	b.n	8003318 <HAL_PCD_EP_DB_Transmit+0x736>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d114      	bne.n	8003318 <HAL_PCD_EP_DB_Transmit+0x736>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	4413      	add	r3, r2
 80032fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	011a      	lsls	r2, r3, #4
 8003306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003308:	4413      	add	r3, r2
 800330a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800330e:	663b      	str	r3, [r7, #96]	; 0x60
 8003310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003312:	b29a      	uxth	r2, r3
 8003314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003316:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6959      	ldr	r1, [r3, #20]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	895a      	ldrh	r2, [r3, #10]
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	f003 ffc6 	bl	80072b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	823b      	strh	r3, [r7, #16]
 8003348:	8a3b      	ldrh	r3, [r7, #16]
 800334a:	f083 0310 	eor.w	r3, r3, #16
 800334e:	823b      	strh	r3, [r7, #16]
 8003350:	8a3b      	ldrh	r3, [r7, #16]
 8003352:	f083 0320 	eor.w	r3, r3, #32
 8003356:	823b      	strh	r3, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	8a3b      	ldrh	r3, [r7, #16]
 8003368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003378:	b29b      	uxth	r3, r3
 800337a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3788      	adds	r7, #136	; 0x88
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003398:	897b      	ldrh	r3, [r7, #10]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e009      	b.n	80033d0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033bc:	897a      	ldrh	r2, [r7, #10]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	80da      	strh	r2, [r3, #6]
 80033e4:	e00b      	b.n	80033fe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2201      	movs	r2, #1
 80033ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
	...

0800340c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e272      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8087 	beq.w	800353a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800342c:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b04      	cmp	r3, #4
 8003436:	d00c      	beq.n	8003452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d112      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
 8003444:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06c      	beq.n	8003538 <HAL_RCC_OscConfig+0x12c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d168      	bne.n	8003538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e24c      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x76>
 8003474:	4b80      	ldr	r3, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7f      	ldr	r2, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e02e      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0xbc>
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034c8:	4b6b      	ldr	r3, [pc, #428]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fe36 	bl	8001158 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fd fe32 	bl	8001158 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e200      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe4>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fe22 	bl	8001158 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd fe1e 	bl	8001158 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1ec      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x10c>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
 800355e:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c0      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4939      	ldr	r1, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fdd7 	bl	8001158 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd fdd3 	bl	8001158 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fdb6 	bl	8001158 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd fdb2 	bl	8001158 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e180      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03a      	beq.n	8003690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fd fd96 	bl	8001158 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fd92 	bl	8001158 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e160      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364e:	2001      	movs	r0, #1
 8003650:	f000 fad8 	bl	8003c04 <RCC_Delay>
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7fd fd7c 	bl	8001158 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003662:	e00f      	b.n	8003684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7fd fd78 	bl	8001158 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d908      	bls.n	8003684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e146      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	42420000 	.word	0x42420000
 8003680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e9      	bne.n	8003664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a6 	beq.w	80037ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a87      	ldr	r2, [pc, #540]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fd39 	bl	8001158 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fd fd35 	bl	8001158 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e103      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x312>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e02d      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x334>
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	e01c      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d10c      	bne.n	8003762 <HAL_RCC_OscConfig+0x356>
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	e00b      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd fce9 	bl	8001158 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fce5 	bl	8001158 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0b1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCC_OscConfig+0x37e>
 80037ac:	e014      	b.n	80037d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fcd3 	bl	8001158 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fccf 	bl	8001158 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e09b      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8087 	beq.w	8003902 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d061      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d146      	bne.n	8003896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fd fca3 	bl	8001158 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fd fc9f 	bl	8001158 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e06d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d108      	bne.n	8003850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a19      	ldr	r1, [r3, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	430b      	orrs	r3, r1
 8003862:	491b      	ldr	r1, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fc73 	bl	8001158 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fc6f 	bl	8001158 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x46a>
 8003894:	e035      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd fc5c 	bl	8001158 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fc58 	bl	8001158 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e026      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x498>
 80038c2:	e01e      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e019      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x500>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0d0      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4965      	ldr	r1, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800398e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d040      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e073      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4936      	ldr	r1, [pc, #216]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fbaa 	bl	8001158 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fba6 	bl	8001158 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e053      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d210      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fb08 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	0800b3a8 	.word	0x0800b3a8
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	2000000c 	.word	0x2000000c

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b490      	push	{r4, r7}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003aea:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xac>)
 8003aec:	1d3c      	adds	r4, r7, #4
 8003aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003af4:	f240 2301 	movw	r3, #513	; 0x201
 8003af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x46>
 8003b22:	e02b      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b26:	623b      	str	r3, [r7, #32]
      break;
 8003b28:	e02b      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3328      	adds	r3, #40	; 0x28
 8003b34:	443b      	add	r3, r7
 8003b36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d012      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0c5b      	lsrs	r3, r3, #17
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	3328      	adds	r3, #40	; 0x28
 8003b52:	443b      	add	r3, r7
 8003b54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b5e:	fb03 f202 	mul.w	r2, r3, r2
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e004      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	623b      	str	r3, [r7, #32]
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6a3b      	ldr	r3, [r7, #32]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc90      	pop	{r4, r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	0800b344 	.word	0x0800b344
 8003b94:	40021000 	.word	0x40021000
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	003d0900 	.word	0x003d0900

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff2 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800b3b8 	.word	0x0800b3b8

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	0adb      	lsrs	r3, r3, #11
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800b3b8 	.word	0x0800b3b8

08003c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <RCC_Delay+0x34>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <RCC_Delay+0x38>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0a5b      	lsrs	r3, r3, #9
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c20:	bf00      	nop
  }
  while (Delay --);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f9      	bne.n	8003c20 <RCC_Delay+0x1c>
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	20000008 	.word	0x20000008
 8003c3c:	10624dd3 	.word	0x10624dd3

08003c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d07d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c60:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	61d3      	str	r3, [r2, #28]
 8003c78:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d118      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c94:	4b43      	ldr	r3, [pc, #268]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a42      	ldr	r2, [pc, #264]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fa5a 	bl	8001158 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	e008      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fd fa56 	bl	8001158 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e06d      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b3a      	ldr	r3, [pc, #232]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d027      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf4:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fa25 	bl	8001158 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fa21 	bl	8001158 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e036      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ee      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	490b      	ldr	r1, [pc, #44]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
 8003da8:	42420440 	.word	0x42420440

08003dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e041      	b.n	8003e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fc fe82 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fae8 	bl	80043c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d001      	beq.n	8003e64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_TIM_Base_Start+0x88>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00e      	beq.n	8003e94 <HAL_TIM_Base_Start+0x48>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d009      	beq.n	8003e94 <HAL_TIM_Base_Start+0x48>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_TIM_Base_Start+0x8c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_TIM_Base_Start+0x48>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a13      	ldr	r2, [pc, #76]	; (8003edc <HAL_TIM_Base_Start+0x90>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d111      	bne.n	8003eb8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d010      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	e007      	b.n	8003ec8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800

08003ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e03a      	b.n	8003f6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_TIM_Base_Start_IT+0x98>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x58>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d009      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x58>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x58>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d010      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5a:	e007      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800

08003f84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <HAL_TIM_Base_Stop_IT+0x48>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a1a      	ldr	r2, [r3, #32]
 8003fb2:	f240 4344 	movw	r3, #1092	; 0x444
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_Base_Stop_IT+0x48>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0202 	mvn.w	r2, #2
 800400c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f9b1 	bl	800438a <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9a4 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9b3 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0204 	mvn.w	r2, #4
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f987 	bl	800438a <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f97a 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f989 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0208 	mvn.w	r2, #8
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2204      	movs	r2, #4
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f95d 	bl	800438a <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f950 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f95f 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0210 	mvn.w	r2, #16
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2208      	movs	r2, #8
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f933 	bl	800438a <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f926 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f935 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0201 	mvn.w	r2, #1
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fafc 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa77 	bl	800467e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8f9 	bl	80043ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0220 	mvn.w	r2, #32
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa42 	bl	800466c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIM_ConfigClockSource+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e0b3      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x180>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800422e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d03e      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004246:	f200 8087 	bhi.w	8004358 <HAL_TIM_ConfigClockSource+0x168>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	f000 8085 	beq.w	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d87f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004258:	2b70      	cmp	r3, #112	; 0x70
 800425a:	d01a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xa2>
 800425c:	2b70      	cmp	r3, #112	; 0x70
 800425e:	d87b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	d050      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x116>
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d877      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004268:	2b50      	cmp	r3, #80	; 0x50
 800426a:	d03c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xf6>
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d873      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d058      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x136>
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d86f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b30      	cmp	r3, #48	; 0x30
 800427a:	d064      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d86b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b20      	cmp	r3, #32
 8004282:	d060      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d867      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800428c:	2b10      	cmp	r3, #16
 800428e:	d05a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004290:	e062      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f000 f966 	bl	8004572 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	609a      	str	r2, [r3, #8]
      break;
 80042be:	e04e      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 f94f 	bl	8004572 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e2:	609a      	str	r2, [r3, #8]
      break;
 80042e4:	e03b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 f8c6 	bl	8004484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2150      	movs	r1, #80	; 0x50
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f91d 	bl	800453e <TIM_ITRx_SetConfig>
      break;
 8004304:	e02b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 f8e4 	bl	80044e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2160      	movs	r1, #96	; 0x60
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f90d 	bl	800453e <TIM_ITRx_SetConfig>
      break;
 8004324:	e01b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 f8a6 	bl	8004484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f8fd 	bl	800453e <TIM_ITRx_SetConfig>
      break;
 8004344:	e00b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 f8f4 	bl	800453e <TIM_ITRx_SetConfig>
        break;
 8004356:	e002      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800435c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d007      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <TIM_Base_SetConfig+0xbc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a25      	ldr	r2, [pc, #148]	; (8004480 <TIM_Base_SetConfig+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d108      	bne.n	8004402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <TIM_Base_SetConfig+0xbc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <TIM_Base_SetConfig+0xc0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800

08004484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0201 	bic.w	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 030a 	bic.w	r3, r3, #10
 80044c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f023 0210 	bic.w	r2, r3, #16
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800450a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	031b      	lsls	r3, r3, #12
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800451c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	f043 0307 	orr.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	021a      	lsls	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	431a      	orrs	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e046      	b.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d009      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10c      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4313      	orrs	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800

0800466c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e03f      	b.n	8004722 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fa48 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f829 	bl	800472c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004766:	f023 030c 	bic.w	r3, r3, #12
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	430b      	orrs	r3, r1
 8004772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <UART_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d103      	bne.n	800479c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004794:	f7ff fa22 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	e002      	b.n	80047a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7ff fa0a 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 80047a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <UART_SetConfig+0x118>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	0119      	lsls	r1, r3, #4
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <UART_SetConfig+0x118>)
 80047da:	fba3 0302 	umull	r0, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2064      	movs	r0, #100	; 0x64
 80047e2:	fb00 f303 	mul.w	r3, r0, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	; 0x32
 80047ec:	4a15      	ldr	r2, [pc, #84]	; (8004844 <UART_SetConfig+0x118>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	4419      	add	r1, r3
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009a      	lsls	r2, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <UART_SetConfig+0x118>)
 8004812:	fba3 0302 	umull	r0, r3, r3, r2
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	2064      	movs	r0, #100	; 0x64
 800481a:	fb00 f303 	mul.w	r3, r0, r3
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	3332      	adds	r3, #50	; 0x32
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <UART_SetConfig+0x118>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	440a      	add	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40013800 	.word	0x40013800
 8004844:	51eb851f 	.word	0x51eb851f

08004848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004848:	b084      	sub	sp, #16
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	f107 0014 	add.w	r0, r7, #20
 8004856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	b004      	add	sp, #16
 8004866:	4770      	bx	lr

08004868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004878:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800487c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800489c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048e0:	b084      	sub	sp, #16
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	f107 0014 	add.w	r0, r7, #20
 80048ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	b004      	add	sp, #16
 800491e:	4770      	bx	lr

08004920 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004920:	b480      	push	{r7}
 8004922:	b09b      	sub	sp, #108	; 0x6c
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d81f      	bhi.n	8004992 <USB_ActivateEndpoint+0x72>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <USB_ActivateEndpoint+0x38>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	08004985 	.word	0x08004985
 8004960:	0800499b 	.word	0x0800499b
 8004964:	08004977 	.word	0x08004977
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004968:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800496c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004970:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004974:	e012      	b.n	800499c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004976:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800497a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800497e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004982:	e00b      	b.n	800499c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004984:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004990:	e004      	b.n	800499c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004998:	e000      	b.n	800499c <USB_ActivateEndpoint+0x7c>
      break;
 800499a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	7b1b      	ldrb	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 8149 	bne.w	8004ca0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8084 	beq.w	8004b20 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	011a      	lsls	r2, r3, #4
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	88db      	ldrh	r3, [r3, #6]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	81fb      	strh	r3, [r7, #14]
 8004a5a:	89fb      	ldrh	r3, [r7, #14]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <USB_ActivateEndpoint+0x17c>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	81bb      	strh	r3, [r7, #12]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	89bb      	ldrh	r3, [r7, #12]
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d020      	beq.n	8004ae6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aba:	813b      	strh	r3, [r7, #8]
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	f083 0320 	eor.w	r3, r3, #32
 8004ac2:	813b      	strh	r3, [r7, #8]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
 8004ae4:	e27f      	b.n	8004fe6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	897b      	ldrh	r3, [r7, #10]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
 8004b1e:	e262      	b.n	8004fe6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	4413      	add	r3, r2
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	011a      	lsls	r2, r3, #4
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	88db      	ldrh	r3, [r3, #6]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	4413      	add	r3, r2
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	011a      	lsls	r2, r3, #4
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	4413      	add	r3, r2
 8004b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b76:	623b      	str	r3, [r7, #32]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d112      	bne.n	8004ba6 <USB_ActivateEndpoint+0x286>
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e02f      	b.n	8004c06 <USB_ActivateEndpoint+0x2e6>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b3e      	cmp	r3, #62	; 0x3e
 8004bac:	d813      	bhi.n	8004bd6 <USB_ActivateEndpoint+0x2b6>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <USB_ActivateEndpoint+0x2a8>
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	801a      	strh	r2, [r3, #0]
 8004bd4:	e017      	b.n	8004c06 <USB_ActivateEndpoint+0x2e6>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <USB_ActivateEndpoint+0x2d0>
 8004bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bec:	3b01      	subs	r3, #1
 8004bee:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	83fb      	strh	r3, [r7, #30]
 8004c14:	8bfb      	ldrh	r3, [r7, #30]
 8004c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01b      	beq.n	8004c56 <USB_ActivateEndpoint+0x336>
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	83bb      	strh	r3, [r7, #28]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	8bbb      	ldrh	r3, [r7, #28]
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	837b      	strh	r3, [r7, #26]
 8004c6e:	8b7b      	ldrh	r3, [r7, #26]
 8004c70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c74:	837b      	strh	r3, [r7, #26]
 8004c76:	8b7b      	ldrh	r3, [r7, #26]
 8004c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c7c:	837b      	strh	r3, [r7, #26]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	8b7b      	ldrh	r3, [r7, #26]
 8004c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
 8004c9e:	e1a2      	b.n	8004fe6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	441a      	add	r2, r3
 8004cc4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cec:	4413      	add	r3, r2
 8004cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	011a      	lsls	r2, r3, #4
 8004cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	891b      	ldrh	r3, [r3, #8]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	653b      	str	r3, [r7, #80]	; 0x50
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d20:	4413      	add	r3, r2
 8004d22:	653b      	str	r3, [r7, #80]	; 0x50
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011a      	lsls	r2, r3, #4
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	895b      	ldrh	r3, [r3, #10]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 8091 	bne.w	8004e70 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <USB_ActivateEndpoint+0x47e>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <USB_ActivateEndpoint+0x4ce>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	441a      	add	r2, r3
 8004e58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
 8004e6e:	e0ba      	b.n	8004fe6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01d      	beq.n	8004ec8 <USB_ActivateEndpoint+0x5a8>
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ed8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01d      	beq.n	8004f20 <USB_ActivateEndpoint+0x600>
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	78db      	ldrb	r3, [r3, #3]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d024      	beq.n	8004f72 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f46:	f083 0320 	eor.w	r3, r3, #32
 8004f4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]
 8004f70:	e01d      	b.n	8004fae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	441a      	add	r2, r3
 8004fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	376c      	adds	r7, #108	; 0x6c
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b08d      	sub	sp, #52	; 0x34
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	7b1b      	ldrb	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 808e 	bne.w	8005124 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d044      	beq.n	800509a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	81bb      	strh	r3, [r7, #12]
 800501e:	89bb      	ldrh	r3, [r7, #12]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01b      	beq.n	8005060 <USB_DeactivateEndpoint+0x6c>
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	817b      	strh	r3, [r7, #10]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	897b      	ldrh	r3, [r7, #10]
 800504c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505c:	b29b      	uxth	r3, r3
 800505e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	813b      	strh	r3, [r7, #8]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	893b      	ldrh	r3, [r7, #8]
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
 8005098:	e192      	b.n	80053c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	827b      	strh	r3, [r7, #18]
 80050a8:	8a7b      	ldrh	r3, [r7, #18]
 80050aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01b      	beq.n	80050ea <USB_DeactivateEndpoint+0xf6>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	823b      	strh	r3, [r7, #16]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	8a3b      	ldrh	r3, [r7, #16]
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	81fb      	strh	r3, [r7, #14]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511e:	b29b      	uxth	r3, r3
 8005120:	8013      	strh	r3, [r2, #0]
 8005122:	e14d      	b.n	80053c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 80a5 	bne.w	8005278 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	843b      	strh	r3, [r7, #32]
 800513c:	8c3b      	ldrh	r3, [r7, #32]
 800513e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <USB_DeactivateEndpoint+0x18a>
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	83fb      	strh	r3, [r7, #30]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	8bfb      	ldrh	r3, [r7, #30]
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	83bb      	strh	r3, [r7, #28]
 800518c:	8bbb      	ldrh	r3, [r7, #28]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <USB_DeactivateEndpoint+0x1da>
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ac:	837b      	strh	r3, [r7, #26]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	833b      	strh	r3, [r7, #24]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	8b3b      	ldrh	r3, [r7, #24]
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	82fb      	strh	r3, [r7, #22]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	8afb      	ldrh	r3, [r7, #22]
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005254:	82bb      	strh	r3, [r7, #20]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	441a      	add	r2, r3
 8005260:	8abb      	ldrh	r3, [r7, #20]
 8005262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005272:	b29b      	uxth	r3, r3
 8005274:	8013      	strh	r3, [r2, #0]
 8005276:	e0a3      	b.n	80053c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <USB_DeactivateEndpoint+0x2d4>
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80052d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <USB_DeactivateEndpoint+0x324>
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005310:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005314:	b29b      	uxth	r3, r3
 8005316:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005366:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	847b      	strh	r3, [r7, #34]	; 0x22
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3734      	adds	r7, #52	; 0x34
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b0cc      	sub	sp, #304	; 0x130
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053da:	6018      	str	r0, [r3, #0]
 80053dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	f041 817d 	bne.w	80066f2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d908      	bls.n	8005426 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005424:	e007      	b.n	8005436 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	7b1b      	ldrb	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d152      	bne.n	80054ec <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6959      	ldr	r1, [r3, #20]
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	88da      	ldrh	r2, [r3, #6]
 800545e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005462:	b29b      	uxth	r3, r3
 8005464:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005468:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f001 ff23 	bl	80072b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800547a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800547e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054a4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	440a      	add	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	b29a      	uxth	r2, r3
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	f001 b8b5 	b.w	8006656 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	78db      	ldrb	r3, [r3, #3]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f040 84c6 	bne.w	8005e8a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	f240 8443 	bls.w	8005da2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 823e 	beq.w	8005a3a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055ca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 809a 	bne.w	8005718 <USB_EPStartXfer+0x34c>
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055f0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005612:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005616:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	440a      	add	r2, r1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4413      	add	r3, r2
 800563a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d122      	bne.n	8005696 <USB_EPStartXfer+0x2ca>
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005662:	b29a      	uxth	r2, r3
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29a      	uxth	r2, r3
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e079      	b.n	800578a <USB_EPStartXfer+0x3be>
 8005696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569a:	2b3e      	cmp	r3, #62	; 0x3e
 800569c:	d81b      	bhi.n	80056d6 <USB_EPStartXfer+0x30a>
 800569e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <USB_EPStartXfer+0x2f2>
 80056b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056b8:	3301      	adds	r3, #1
 80056ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e059      	b.n	800578a <USB_EPStartXfer+0x3be>
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <USB_EPStartXfer+0x32a>
 80056ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005708:	b29a      	uxth	r2, r3
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e038      	b.n	800578a <USB_EPStartXfer+0x3be>
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d130      	bne.n	800578a <USB_EPStartXfer+0x3be>
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	4619      	mov	r1, r3
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005742:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005746:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	440a      	add	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4413      	add	r3, r2
 800576a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	b29a      	uxth	r2, r3
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	895b      	ldrh	r3, [r3, #10]
 8005796:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6959      	ldr	r1, [r3, #20]
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057b8:	6800      	ldr	r0, [r0, #0]
 80057ba:	f001 fd7d 	bl	80072b8 <USB_WritePMA>
            ep->xfer_buff += len;
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	441a      	add	r2, r3
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1a      	ldr	r2, [r3, #32]
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d90f      	bls.n	8005818 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a1a      	ldr	r2, [r3, #32]
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	1ad2      	subs	r2, r2, r3
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	621a      	str	r2, [r3, #32]
 8005816:	e00e      	b.n	8005836 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 809a 	bne.w	800597c <USB_EPStartXfer+0x5b0>
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005850:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005854:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	4619      	mov	r1, r3
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005876:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800587a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	440a      	add	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4413      	add	r3, r2
 800589e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d122      	bne.n	80058fa <USB_EPStartXfer+0x52e>
 80058b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e083      	b.n	8005a02 <USB_EPStartXfer+0x636>
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005900:	d81b      	bhi.n	800593a <USB_EPStartXfer+0x56e>
 8005902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <USB_EPStartXfer+0x556>
 8005918:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800591c:	3301      	adds	r3, #1
 800591e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005922:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005926:	b29b      	uxth	r3, r3
 8005928:	029b      	lsls	r3, r3, #10
 800592a:	b29a      	uxth	r2, r3
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e063      	b.n	8005a02 <USB_EPStartXfer+0x636>
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <USB_EPStartXfer+0x58e>
 8005950:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005954:	3b01      	subs	r3, #1
 8005956:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800595a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e042      	b.n	8005a02 <USB_EPStartXfer+0x636>
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d13a      	bne.n	8005a02 <USB_EPStartXfer+0x636>
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005994:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005998:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	440a      	add	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	891b      	ldrh	r3, [r3, #8]
 8005a0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6959      	ldr	r1, [r3, #20]
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a30:	6800      	ldr	r0, [r0, #0]
 8005a32:	f001 fc41 	bl	80072b8 <USB_WritePMA>
 8005a36:	f000 be0e 	b.w	8006656 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d16d      	bne.n	8005b26 <USB_EPStartXfer+0x75a>
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6a:	4413      	add	r3, r2
 8005a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	011a      	lsls	r2, r3, #4
 8005a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7e:	4413      	add	r3, r2
 8005a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d112      	bne.n	8005ab4 <USB_EPStartXfer+0x6e8>
 8005a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e063      	b.n	8005b7c <USB_EPStartXfer+0x7b0>
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aba:	d817      	bhi.n	8005aec <USB_EPStartXfer+0x720>
 8005abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <USB_EPStartXfer+0x710>
 8005ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005adc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e047      	b.n	8005b7c <USB_EPStartXfer+0x7b0>
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <USB_EPStartXfer+0x740>
 8005b02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b06:	3b01      	subs	r3, #1
 8005b08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	029b      	lsls	r3, r3, #10
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e02a      	b.n	8005b7c <USB_EPStartXfer+0x7b0>
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d122      	bne.n	8005b7c <USB_EPStartXfer+0x7b0>
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	653b      	str	r3, [r7, #80]	; 0x50
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b56:	4413      	add	r3, r2
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	011a      	lsls	r2, r3, #4
 8005b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	891b      	ldrh	r3, [r3, #8]
 8005b88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ba2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ba6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	f001 fb84 	bl	80072b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	441a      	add	r2, r3
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6a1a      	ldr	r2, [r3, #32]
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90f      	bls.n	8005c0a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	621a      	str	r2, [r3, #32]
 8005c08:	e00e      	b.n	8005c28 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
 8005c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d16d      	bne.n	8005d20 <USB_EPStartXfer+0x954>
 8005c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	4413      	add	r3, r2
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d112      	bne.n	8005cae <USB_EPStartXfer+0x8e2>
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e05d      	b.n	8005d6a <USB_EPStartXfer+0x99e>
 8005cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d817      	bhi.n	8005ce6 <USB_EPStartXfer+0x91a>
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USB_EPStartXfer+0x90a>
 8005ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e041      	b.n	8005d6a <USB_EPStartXfer+0x99e>
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <USB_EPStartXfer+0x93a>
 8005cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d00:	3b01      	subs	r3, #1
 8005d02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e024      	b.n	8005d6a <USB_EPStartXfer+0x99e>
 8005d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d11c      	bne.n	8005d6a <USB_EPStartXfer+0x99e>
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d44:	4413      	add	r3, r2
 8005d46:	643b      	str	r3, [r7, #64]	; 0x40
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	011a      	lsls	r2, r3, #4
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	895b      	ldrh	r3, [r3, #10]
 8005d76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6959      	ldr	r1, [r3, #20]
 8005d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d98:	6800      	ldr	r0, [r0, #0]
 8005d9a:	f001 fa8d 	bl	80072b8 <USB_WritePMA>
 8005d9e:	f000 bc5a 	b.w	8006656 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e2e:	4413      	add	r3, r2
 8005e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	011a      	lsls	r2, r3, #4
 8005e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	891b      	ldrh	r3, [r3, #8]
 8005e60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6959      	ldr	r1, [r3, #20]
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e7a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e7e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	f001 fa18 	bl	80072b8 <USB_WritePMA>
 8005e88:	e3e5      	b.n	8006656 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 81bc 	beq.w	80062a4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d16d      	bne.n	8006026 <USB_EPStartXfer+0xc5a>
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6a:	4413      	add	r3, r2
 8005f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f84:	677b      	str	r3, [r7, #116]	; 0x74
 8005f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d112      	bne.n	8005fb4 <USB_EPStartXfer+0xbe8>
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e060      	b.n	8006076 <USB_EPStartXfer+0xcaa>
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fba:	d817      	bhi.n	8005fec <USB_EPStartXfer+0xc20>
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <USB_EPStartXfer+0xc10>
 8005fd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e044      	b.n	8006076 <USB_EPStartXfer+0xcaa>
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <USB_EPStartXfer+0xc40>
 8006002:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006006:	3b01      	subs	r3, #1
 8006008:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800600c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e027      	b.n	8006076 <USB_EPStartXfer+0xcaa>
 8006026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d11f      	bne.n	8006076 <USB_EPStartXfer+0xcaa>
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800604c:	4413      	add	r3, r2
 800604e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	011a      	lsls	r2, r3, #4
 8006060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006064:	4413      	add	r3, r2
 8006066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800606a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800606c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006070:	b29a      	uxth	r2, r3
 8006072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006074:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	895b      	ldrh	r3, [r3, #10]
 8006082:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6959      	ldr	r1, [r3, #20]
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29b      	uxth	r3, r3
 8006098:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800609c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060a4:	6800      	ldr	r0, [r0, #0]
 80060a6:	f001 f907 	bl	80072b8 <USB_WritePMA>
          ep->xfer_buff += len;
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ba:	441a      	add	r2, r3
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d90f      	bls.n	8006104 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	621a      	str	r2, [r3, #32]
 8006102:	e00e      	b.n	8006122 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8295 	beq.w	8006656 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d16d      	bne.n	8006218 <USB_EPStartXfer+0xe4c>
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	66bb      	str	r3, [r7, #104]	; 0x68
 8006148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615c:	4413      	add	r3, r2
 800615e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	011a      	lsls	r2, r3, #4
 800616e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006170:	4413      	add	r3, r2
 8006172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d112      	bne.n	80061a6 <USB_EPStartXfer+0xdda>
 8006180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800618a:	b29a      	uxth	r2, r3
 800618c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e063      	b.n	800626e <USB_EPStartXfer+0xea2>
 80061a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061aa:	2b3e      	cmp	r3, #62	; 0x3e
 80061ac:	d817      	bhi.n	80061de <USB_EPStartXfer+0xe12>
 80061ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <USB_EPStartXfer+0xe02>
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c8:	3301      	adds	r3, #1
 80061ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e047      	b.n	800626e <USB_EPStartXfer+0xea2>
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <USB_EPStartXfer+0xe32>
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f8:	3b01      	subs	r3, #1
 80061fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e02a      	b.n	800626e <USB_EPStartXfer+0xea2>
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d122      	bne.n	800626e <USB_EPStartXfer+0xea2>
 8006228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	673b      	str	r3, [r7, #112]	; 0x70
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006248:	4413      	add	r3, r2
 800624a:	673b      	str	r3, [r7, #112]	; 0x70
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	011a      	lsls	r2, r3, #4
 800625a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800625c:	4413      	add	r3, r2
 800625e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006262:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	b29a      	uxth	r2, r3
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	891b      	ldrh	r3, [r3, #8]
 800627a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	b29b      	uxth	r3, r3
 8006290:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006294:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006298:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f001 f80b 	bl	80072b8 <USB_WritePMA>
 80062a2:	e1d8      	b.n	8006656 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d178      	bne.n	80063a6 <USB_EPStartXfer+0xfda>
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d116      	bne.n	8006330 <USB_EPStartXfer+0xf64>
 8006302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e06b      	b.n	8006408 <USB_EPStartXfer+0x103c>
 8006330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006334:	2b3e      	cmp	r3, #62	; 0x3e
 8006336:	d818      	bhi.n	800636a <USB_EPStartXfer+0xf9e>
 8006338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <USB_EPStartXfer+0xf8c>
 800634e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006352:	3301      	adds	r3, #1
 8006354:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006358:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800635c:	b29b      	uxth	r3, r3
 800635e:	029b      	lsls	r3, r3, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	e04e      	b.n	8006408 <USB_EPStartXfer+0x103c>
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <USB_EPStartXfer+0xfbe>
 8006380:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006384:	3b01      	subs	r3, #1
 8006386:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800638a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800638e:	b29b      	uxth	r3, r3
 8006390:	029b      	lsls	r3, r3, #10
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e030      	b.n	8006408 <USB_EPStartXfer+0x103c>
 80063a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d128      	bne.n	8006408 <USB_EPStartXfer+0x103c>
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063da:	4413      	add	r3, r2
 80063dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	011a      	lsls	r2, r3, #4
 80063ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063f2:	4413      	add	r3, r2
 80063f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006406:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	891b      	ldrh	r3, [r3, #8]
 8006414:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6959      	ldr	r1, [r3, #20]
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	b29b      	uxth	r3, r3
 800642a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800642e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006432:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	f000 ff3e 	bl	80072b8 <USB_WritePMA>
          ep->xfer_buff += len;
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644c:	441a      	add	r2, r3
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d90f      	bls.n	8006496 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	621a      	str	r2, [r3, #32]
 8006494:	e00e      	b.n	80064b4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80064b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80cc 	beq.w	8006656 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d178      	bne.n	80065ce <USB_EPStartXfer+0x1202>
 80064dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006500:	4413      	add	r3, r2
 8006502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	011a      	lsls	r2, r3, #4
 8006514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006518:	4413      	add	r3, r2
 800651a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800651e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d116      	bne.n	8006558 <USB_EPStartXfer+0x118c>
 800652a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e064      	b.n	8006622 <USB_EPStartXfer+0x1256>
 8006558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655c:	2b3e      	cmp	r3, #62	; 0x3e
 800655e:	d818      	bhi.n	8006592 <USB_EPStartXfer+0x11c6>
 8006560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <USB_EPStartXfer+0x11b4>
 8006576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657a:	3301      	adds	r3, #1
 800657c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006584:	b29b      	uxth	r3, r3
 8006586:	029b      	lsls	r3, r3, #10
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e047      	b.n	8006622 <USB_EPStartXfer+0x1256>
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800659c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <USB_EPStartXfer+0x11e6>
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	3b01      	subs	r3, #1
 80065ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065ca:	801a      	strh	r2, [r3, #0]
 80065cc:	e029      	b.n	8006622 <USB_EPStartXfer+0x1256>
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d121      	bne.n	8006622 <USB_EPStartXfer+0x1256>
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065f4:	4413      	add	r3, r2
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800660c:	4413      	add	r3, r2
 800660e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	895b      	ldrh	r3, [r3, #10]
 800662e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6959      	ldr	r1, [r3, #20]
 800663e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006642:	b29b      	uxth	r3, r3
 8006644:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006648:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800664c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f000 fe31 	bl	80072b8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006678:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	8013      	strh	r3, [r2, #0]
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800668e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006692:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006696:	8812      	ldrh	r2, [r2, #0]
 8006698:	f082 0210 	eor.w	r2, r2, #16
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066aa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80066ae:	8812      	ldrh	r2, [r2, #0]
 80066b0:	f082 0220 	eor.w	r2, r2, #32
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]
 80066ee:	f000 bc9f 	b.w	8007030 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f040 80ae 	bne.w	8006860 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d917      	bls.n	8006750 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006740:	1ad2      	subs	r2, r2, r3
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	619a      	str	r2, [r3, #24]
 800674e:	e00e      	b.n	800676e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800677c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006792:	4413      	add	r3, r2
 8006794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d116      	bne.n	80067ea <USB_EPStartXfer+0x141e>
 80067bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e3e8      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	2b3e      	cmp	r3, #62	; 0x3e
 80067f0:	d818      	bhi.n	8006824 <USB_EPStartXfer+0x1458>
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d004      	beq.n	8006812 <USB_EPStartXfer+0x1446>
 8006808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680c:	3301      	adds	r3, #1
 800680e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e3cb      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
 8006824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800682e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <USB_EPStartXfer+0x1478>
 800683a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800683e:	3b01      	subs	r3, #1
 8006840:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006848:	b29b      	uxth	r3, r3
 800684a:	029b      	lsls	r3, r3, #10
 800684c:	b29b      	uxth	r3, r3
 800684e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	e3ad      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	78db      	ldrb	r3, [r3, #3]
 800686c:	2b02      	cmp	r3, #2
 800686e:	f040 8200 	bne.w	8006c72 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 8091 	bne.w	80069a6 <USB_EPStartXfer+0x15da>
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068a8:	4413      	add	r3, r2
 80068aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	011a      	lsls	r2, r3, #4
 80068bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068c0:	4413      	add	r3, r2
 80068c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d116      	bne.n	8006908 <USB_EPStartXfer+0x153c>
 80068da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e083      	b.n	8006a10 <USB_EPStartXfer+0x1644>
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b3e      	cmp	r3, #62	; 0x3e
 8006916:	d820      	bhi.n	800695a <USB_EPStartXfer+0x158e>
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USB_EPStartXfer+0x157c>
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006942:	3301      	adds	r3, #1
 8006944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694c:	b29b      	uxth	r3, r3
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e05a      	b.n	8006a10 <USB_EPStartXfer+0x1644>
 800695a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800696c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <USB_EPStartXfer+0x15be>
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	3b01      	subs	r3, #1
 8006986:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	b29b      	uxth	r3, r3
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	b29b      	uxth	r3, r3
 8006994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699c:	b29a      	uxth	r2, r3
 800699e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e034      	b.n	8006a10 <USB_EPStartXfer+0x1644>
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d12c      	bne.n	8006a10 <USB_EPStartXfer+0x1644>
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069da:	4413      	add	r3, r2
 80069dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	011a      	lsls	r2, r3, #4
 80069ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 8091 	bne.w	8006b52 <USB_EPStartXfer+0x1786>
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a54:	4413      	add	r3, r2
 8006a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	011a      	lsls	r2, r3, #4
 8006a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d116      	bne.n	8006ab4 <USB_EPStartXfer+0x16e8>
 8006a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e07c      	b.n	8006bae <USB_EPStartXfer+0x17e2>
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac2:	d820      	bhi.n	8006b06 <USB_EPStartXfer+0x173a>
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <USB_EPStartXfer+0x1728>
 8006aea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aee:	3301      	adds	r3, #1
 8006af0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006af4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e053      	b.n	8006bae <USB_EPStartXfer+0x17e2>
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <USB_EPStartXfer+0x176a>
 8006b2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	029b      	lsls	r3, r3, #10
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	e02d      	b.n	8006bae <USB_EPStartXfer+0x17e2>
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d125      	bne.n	8006bae <USB_EPStartXfer+0x17e2>
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b78:	4413      	add	r3, r2
 8006b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	011a      	lsls	r2, r3, #4
 8006b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 81fe 	beq.w	8006fbc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006be0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <USB_EPStartXfer+0x182c>
 8006bec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bf8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 81db 	bne.w	8006fbc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c06:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 81d4 	bne.w	8006fbc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	441a      	add	r2, r3
 8006c58:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
 8006c70:	e1a4      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	f040 819a 	bne.w	8006fb8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d917      	bls.n	8006cd0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	619a      	str	r2, [r3, #24]
 8006cce:	e00e      	b.n	8006cee <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d178      	bne.n	8006df0 <USB_EPStartXfer+0x1a24>
 8006cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d22:	4413      	add	r3, r2
 8006d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	011a      	lsls	r2, r3, #4
 8006d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d116      	bne.n	8006d7a <USB_EPStartXfer+0x19ae>
 8006d4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	e06b      	b.n	8006e52 <USB_EPStartXfer+0x1a86>
 8006d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d80:	d818      	bhi.n	8006db4 <USB_EPStartXfer+0x19e8>
 8006d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <USB_EPStartXfer+0x19d6>
 8006d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e04e      	b.n	8006e52 <USB_EPStartXfer+0x1a86>
 8006db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <USB_EPStartXfer+0x1a08>
 8006dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	029b      	lsls	r3, r3, #10
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e030      	b.n	8006e52 <USB_EPStartXfer+0x1a86>
 8006df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d128      	bne.n	8006e52 <USB_EPStartXfer+0x1a86>
 8006e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e24:	4413      	add	r3, r2
 8006e26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d178      	bne.n	8006f62 <USB_EPStartXfer+0x1b96>
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e94:	4413      	add	r3, r2
 8006e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	011a      	lsls	r2, r3, #4
 8006ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d116      	bne.n	8006eec <USB_EPStartXfer+0x1b20>
 8006ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e067      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
 8006eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef2:	d818      	bhi.n	8006f26 <USB_EPStartXfer+0x1b5a>
 8006ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <USB_EPStartXfer+0x1b48>
 8006f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e04a      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <USB_EPStartXfer+0x1b7a>
 8006f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f40:	3b01      	subs	r3, #1
 8006f42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	e02c      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d124      	bne.n	8006fbc <USB_EPStartXfer+0x1bf0>
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	011a      	lsls	r2, r3, #4
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e001      	b.n	8006fbc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e03a      	b.n	8007032 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fe6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ff2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ff6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ffa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800701c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	b29b      	uxth	r3, r3
 800702e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d020      	beq.n	8007090 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007064:	81bb      	strh	r3, [r7, #12]
 8007066:	89bb      	ldrh	r3, [r7, #12]
 8007068:	f083 0310 	eor.w	r3, r3, #16
 800706c:	81bb      	strh	r3, [r7, #12]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	441a      	add	r2, r3
 8007078:	89bb      	ldrh	r3, [r7, #12]
 800707a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	b29b      	uxth	r3, r3
 800708c:	8013      	strh	r3, [r2, #0]
 800708e:	e01f      	b.n	80070d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	81fb      	strh	r3, [r7, #14]
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070ae:	81fb      	strh	r3, [r7, #14]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	7b1b      	ldrb	r3, [r3, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 809d 	bne.w	800722a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d04c      	beq.n	8007192 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	823b      	strh	r3, [r7, #16]
 8007106:	8a3b      	ldrh	r3, [r7, #16]
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01b      	beq.n	8007148 <USB_EPClearStall+0x6c>
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	81fb      	strh	r3, [r7, #14]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007144:	b29b      	uxth	r3, r3
 8007146:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	78db      	ldrb	r3, [r3, #3]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d06c      	beq.n	800722a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007166:	81bb      	strh	r3, [r7, #12]
 8007168:	89bb      	ldrh	r3, [r7, #12]
 800716a:	f083 0320 	eor.w	r3, r3, #32
 800716e:	81bb      	strh	r3, [r7, #12]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	441a      	add	r2, r3
 800717a:	89bb      	ldrh	r3, [r7, #12]
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]
 8007190:	e04b      	b.n	800722a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	82fb      	strh	r3, [r7, #22]
 80071a0:	8afb      	ldrh	r3, [r7, #22]
 80071a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01b      	beq.n	80071e2 <USB_EPClearStall+0x106>
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c0:	82bb      	strh	r3, [r7, #20]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	8abb      	ldrh	r3, [r7, #20]
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f8:	827b      	strh	r3, [r7, #18]
 80071fa:	8a7b      	ldrh	r3, [r7, #18]
 80071fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007200:	827b      	strh	r3, [r7, #18]
 8007202:	8a7b      	ldrh	r3, [r7, #18]
 8007204:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007208:	827b      	strh	r3, [r7, #18]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	8a7b      	ldrh	r3, [r7, #18]
 8007216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007226:	b29b      	uxth	r3, r3
 8007228:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2280      	movs	r2, #128	; 0x80
 800724c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007292:	b29b      	uxth	r3, r3
 8007294:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007296:	68fb      	ldr	r3, [r7, #12]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr

080072a2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b08d      	sub	sp, #52	; 0x34
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	4611      	mov	r1, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	460b      	mov	r3, r1
 80072c8:	80fb      	strh	r3, [r7, #6]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072ce:	88bb      	ldrh	r3, [r7, #4]
 80072d0:	3301      	adds	r3, #1
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	005a      	lsls	r2, r3, #1
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f0:	e01e      	b.n	8007330 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	3301      	adds	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	b29a      	uxth	r2, r3
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	3302      	adds	r3, #2
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	3302      	adds	r3, #2
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	3301      	adds	r3, #1
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	3b01      	subs	r3, #1
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1dd      	bne.n	80072f2 <USB_WritePMA+0x3a>
  }
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	3734      	adds	r7, #52	; 0x34
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007342:	b480      	push	{r7}
 8007344:	b08b      	sub	sp, #44	; 0x2c
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	4611      	mov	r1, r2
 800734e:	461a      	mov	r2, r3
 8007350:	460b      	mov	r3, r1
 8007352:	80fb      	strh	r3, [r7, #6]
 8007354:	4613      	mov	r3, r2
 8007356:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007358:	88bb      	ldrh	r3, [r7, #4]
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007374:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
 800737a:	e01b      	b.n	80073b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	3302      	adds	r3, #2
 8007388:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3301      	adds	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	b2da      	uxtb	r2, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	3302      	adds	r3, #2
 80073ac:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	3b01      	subs	r3, #1
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e0      	bne.n	800737c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80073ba:	88bb      	ldrh	r3, [r7, #4]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	701a      	strb	r2, [r3, #0]
  }
}
 80073d6:	bf00      	nop
 80073d8:	372c      	adds	r7, #44	; 0x2c
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7c1b      	ldrb	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d115      	bne.n	8007424 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fc:	2202      	movs	r2, #2
 80073fe:	2181      	movs	r1, #129	; 0x81
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fe98 	bl	8009136 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800740c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007410:	2202      	movs	r2, #2
 8007412:	2101      	movs	r1, #1
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fe8e 	bl	8009136 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007422:	e012      	b.n	800744a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	2202      	movs	r2, #2
 8007428:	2181      	movs	r1, #129	; 0x81
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fe83 	bl	8009136 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007436:	2340      	movs	r3, #64	; 0x40
 8007438:	2202      	movs	r2, #2
 800743a:	2101      	movs	r1, #1
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fe7a 	bl	8009136 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800744a:	2308      	movs	r3, #8
 800744c:	2203      	movs	r2, #3
 800744e:	2182      	movs	r1, #130	; 0x82
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fe70 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800745c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007460:	f001 ff90 	bl	8009384 <USBD_static_malloc>
 8007464:	4602      	mov	r2, r0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007476:	2301      	movs	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]
 800747a:	e026      	b.n	80074ca <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7c1b      	ldrb	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b0:	2101      	movs	r1, #1
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 ff30 	bl	8009318 <USBD_LL_PrepareReceive>
 80074b8:	e007      	b.n	80074ca <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c0:	2340      	movs	r3, #64	; 0x40
 80074c2:	2101      	movs	r1, #1
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 ff27 	bl	8009318 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074e4:	2181      	movs	r1, #129	; 0x81
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fe4b 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074f2:	2101      	movs	r1, #1
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 fe44 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007502:	2182      	movs	r1, #130	; 0x82
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fe3c 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00e      	beq.n	8007538 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752a:	4618      	mov	r0, r3
 800752c:	f001 ff36 	bl	800939c <USBD_static_free>
    pdev->pClassData = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007568:	2b00      	cmp	r3, #0
 800756a:	d039      	beq.n	80075e0 <USBD_CDC_Setup+0x9e>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d17f      	bne.n	8007670 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	88db      	ldrh	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d029      	beq.n	80075cc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b25b      	sxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	da11      	bge.n	80075a6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800758e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	88d2      	ldrh	r2, [r2, #6]
 8007594:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007596:	6939      	ldr	r1, [r7, #16]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	88db      	ldrh	r3, [r3, #6]
 800759c:	461a      	mov	r2, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fa09 	bl	80089b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80075a4:	e06b      	b.n	800767e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	785a      	ldrb	r2, [r3, #1]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075bc:	6939      	ldr	r1, [r7, #16]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	88db      	ldrh	r3, [r3, #6]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 fa24 	bl	8008a12 <USBD_CtlPrepareRx>
      break;
 80075ca:	e058      	b.n	800767e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	7850      	ldrb	r0, [r2, #1]
 80075d8:	2200      	movs	r2, #0
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	4798      	blx	r3
      break;
 80075de:	e04e      	b.n	800767e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b0b      	cmp	r3, #11
 80075e6:	d02e      	beq.n	8007646 <USBD_CDC_Setup+0x104>
 80075e8:	2b0b      	cmp	r3, #11
 80075ea:	dc38      	bgt.n	800765e <USBD_CDC_Setup+0x11c>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <USBD_CDC_Setup+0xb4>
 80075f0:	2b0a      	cmp	r3, #10
 80075f2:	d014      	beq.n	800761e <USBD_CDC_Setup+0xdc>
 80075f4:	e033      	b.n	800765e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d107      	bne.n	8007610 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	2202      	movs	r2, #2
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f9d4 	bl	80089b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800760e:	e02e      	b.n	800766e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f965 	bl	80088e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007618:	2302      	movs	r3, #2
 800761a:	75fb      	strb	r3, [r7, #23]
          break;
 800761c:	e027      	b.n	800766e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007624:	2b03      	cmp	r3, #3
 8007626:	d107      	bne.n	8007638 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007628:	f107 030f 	add.w	r3, r7, #15
 800762c:	2201      	movs	r2, #1
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f9c0 	bl	80089b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007636:	e01a      	b.n	800766e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f951 	bl	80088e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007640:	2302      	movs	r3, #2
 8007642:	75fb      	strb	r3, [r7, #23]
          break;
 8007644:	e013      	b.n	800766e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764c:	2b03      	cmp	r3, #3
 800764e:	d00d      	beq.n	800766c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 f945 	bl	80088e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007658:	2302      	movs	r3, #2
 800765a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800765c:	e006      	b.n	800766c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f93e 	bl	80088e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007666:	2302      	movs	r3, #2
 8007668:	75fb      	strb	r3, [r7, #23]
          break;
 800766a:	e000      	b.n	800766e <USBD_CDC_Setup+0x12c>
          break;
 800766c:	bf00      	nop
      }
      break;
 800766e:	e006      	b.n	800767e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f935 	bl	80088e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007678:	2302      	movs	r3, #2
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	bf00      	nop
  }

  return ret;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	331c      	adds	r3, #28
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d029      	beq.n	8007718 <USBD_CDC_DataIn+0x90>
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	331c      	adds	r3, #28
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	78f9      	ldrb	r1, [r7, #3]
 80076d8:	68b8      	ldr	r0, [r7, #8]
 80076da:	460b      	mov	r3, r1
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4403      	add	r3, r0
 80076e4:	3338      	adds	r3, #56	; 0x38
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	331c      	adds	r3, #28
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800770a:	78f9      	ldrb	r1, [r7, #3]
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fdde 	bl	80092d2 <USBD_LL_Transmit>
 8007716:	e003      	b.n	8007720 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fe09 	bl	800935e <USBD_LL_GetRxDataSize>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007772:	4611      	mov	r1, r2
 8007774:	4798      	blx	r3

    return USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779a:	2b00      	cmp	r3, #0
 800779c:	d015      	beq.n	80077ca <USBD_CDC_EP0_RxReady+0x46>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077a4:	2bff      	cmp	r3, #255	; 0xff
 80077a6:	d010      	beq.n	80077ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077be:	b292      	uxth	r2, r2
 80077c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2243      	movs	r2, #67	; 0x43
 80077e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000009c 	.word	0x2000009c

080077f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2243      	movs	r2, #67	; 0x43
 8007800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007802:	4b03      	ldr	r3, [pc, #12]	; (8007810 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000058 	.word	0x20000058

08007814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2243      	movs	r2, #67	; 0x43
 8007820:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007822:	4b03      	ldr	r3, [pc, #12]	; (8007830 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	200000e0 	.word	0x200000e0

08007834 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	220a      	movs	r2, #10
 8007840:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007842:	4b03      	ldr	r3, [pc, #12]	; (8007850 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000014 	.word	0x20000014

08007854 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800785e:	2302      	movs	r3, #2
 8007860:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01c      	beq.n	800792c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800791a:	b29b      	uxth	r3, r3
 800791c:	2181      	movs	r1, #129	; 0x81
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fcd7 	bl	80092d2 <USBD_LL_Transmit>

      return USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e002      	b.n	800792e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007944:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d017      	beq.n	8007980 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7c1b      	ldrb	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d109      	bne.n	800796c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800795e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007962:	2101      	movs	r1, #1
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fcd7 	bl	8009318 <USBD_LL_PrepareReceive>
 800796a:	e007      	b.n	800797c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	2101      	movs	r1, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fcce 	bl	8009318 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800799e:	2302      	movs	r3, #2
 80079a0:	e01a      	b.n	80079d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	79fa      	ldrb	r2, [r7, #7]
 80079ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 fb3b 	bl	800904c <USBD_LL_Init>

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	e001      	b.n	8007a06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a02:	2302      	movs	r3, #2
 8007a04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bc80      	pop	{r7}
 8007a10:	4770      	bx	lr

08007a12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 fb70 	bl	8009100 <USBD_LL_Start>

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00c      	beq.n	8007a72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	4611      	mov	r1, r2
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	4611      	mov	r1, r2
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fed8 	bl	800886a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ac8:	461a      	mov	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d016      	beq.n	8007b0c <USBD_LL_SetupStage+0x6a>
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d81c      	bhi.n	8007b1c <USBD_LL_SetupStage+0x7a>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <USBD_LL_SetupStage+0x4a>
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d008      	beq.n	8007afc <USBD_LL_SetupStage+0x5a>
 8007aea:	e017      	b.n	8007b1c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9cb 	bl	8007e90 <USBD_StdDevReq>
      break;
 8007afa:	e01a      	b.n	8007b32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa2d 	bl	8007f64 <USBD_StdItfReq>
      break;
 8007b0a:	e012      	b.n	8007b32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fa6d 	bl	8007ff4 <USBD_StdEPReq>
      break;
 8007b1a:	e00a      	b.n	8007b32 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fb48 	bl	80091c0 <USBD_LL_StallEP>
      break;
 8007b30:	bf00      	nop
  }

  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	460b      	mov	r3, r1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d14b      	bne.n	8007be8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d134      	bne.n	8007bcc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d919      	bls.n	8007ba2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d203      	bcs.n	8007b90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	e002      	b.n	8007b96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 ff57 	bl	8008a4e <USBD_CtlContinueRx>
 8007ba0:	e038      	b.n	8007c14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d105      	bne.n	8007bc4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 ff54 	bl	8008a72 <USBD_CtlSendStatus>
 8007bca:	e023      	b.n	8007c14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d11e      	bne.n	8007c14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007bde:	2100      	movs	r1, #0
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f001 faed 	bl	80091c0 <USBD_LL_StallEP>
 8007be6:	e015      	b.n	8007c14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00d      	beq.n	8007c10 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d108      	bne.n	8007c10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	7afa      	ldrb	r2, [r7, #11]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	4798      	blx	r3
 8007c0e:	e001      	b.n	8007c14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c10:	2302      	movs	r3, #2
 8007c12:	e000      	b.n	8007c16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	460b      	mov	r3, r1
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d17f      	bne.n	8007d32 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3314      	adds	r3, #20
 8007c36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d15c      	bne.n	8007cfc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d915      	bls.n	8007c7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fec1 	bl	80089ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f001 fb50 	bl	8009318 <USBD_LL_PrepareReceive>
 8007c78:	e04e      	b.n	8007d18 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	6912      	ldr	r2, [r2, #16]
 8007c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c86:	fb01 f202 	mul.w	r2, r1, r2
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11c      	bne.n	8007cca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d316      	bcc.n	8007cca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d20f      	bcs.n	8007cca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fe9d 	bl	80089ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f001 fb28 	bl	8009318 <USBD_LL_PrepareReceive>
 8007cc8:	e026      	b.n	8007d18 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d105      	bne.n	8007cec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 fa66 	bl	80091c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fecf 	bl	8008a98 <USBD_CtlReceiveStatus>
 8007cfa:	e00d      	b.n	8007d18 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d004      	beq.n	8007d10 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f001 fa54 	bl	80091c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d11d      	bne.n	8007d5e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fe81 	bl	8007a2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d30:	e015      	b.n	8007d5e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d108      	bne.n	8007d5a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	7afa      	ldrb	r2, [r7, #11]
 8007d52:	4611      	mov	r1, r2
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
 8007d58:	e001      	b.n	8007d5e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e000      	b.n	8007d60 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d70:	2340      	movs	r3, #64	; 0x40
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 f9dd 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2240      	movs	r2, #64	; 0x40
 8007d88:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d8c:	2340      	movs	r3, #64	; 0x40
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2180      	movs	r1, #128	; 0x80
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 f9cf 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2240      	movs	r2, #64	; 0x40
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6852      	ldr	r2, [r2, #4]
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	4611      	mov	r1, r2
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
  }

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2204      	movs	r2, #4
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d105      	bne.n	8007e4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr

08007e5a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d10b      	bne.n	8007e84 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d005      	beq.n	8007eb6 <USBD_StdDevReq+0x26>
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d84f      	bhi.n	8007f4e <USBD_StdDevReq+0xbe>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <USBD_StdDevReq+0x36>
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d14b      	bne.n	8007f4e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
      break;
 8007ec4:	e048      	b.n	8007f58 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d839      	bhi.n	8007f42 <USBD_StdDevReq+0xb2>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <USBD_StdDevReq+0x44>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f25 	.word	0x08007f25
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f43 	.word	0x08007f43
 8007ee0:	08007f2f 	.word	0x08007f2f
 8007ee4:	08007f43 	.word	0x08007f43
 8007ee8:	08007f07 	.word	0x08007f07
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f43 	.word	0x08007f43
 8007ef4:	08007f1b 	.word	0x08007f1b
 8007ef8:	08007f11 	.word	0x08007f11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9dc 	bl	80082bc <USBD_GetDescriptor>
          break;
 8007f04:	e022      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fb3f 	bl	800858c <USBD_SetAddress>
          break;
 8007f0e:	e01d      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb7e 	bl	8008614 <USBD_SetConfig>
          break;
 8007f18:	e018      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fc07 	bl	8008730 <USBD_GetConfig>
          break;
 8007f22:	e013      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fc37 	bl	800879a <USBD_GetStatus>
          break;
 8007f2c:	e00e      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fc65 	bl	8008800 <USBD_SetFeature>
          break;
 8007f36:	e009      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fc74 	bl	8008828 <USBD_ClrFeature>
          break;
 8007f40:	e004      	b.n	8007f4c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fccc 	bl	80088e2 <USBD_CtlError>
          break;
 8007f4a:	bf00      	nop
      }
      break;
 8007f4c:	e004      	b.n	8007f58 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fcc6 	bl	80088e2 <USBD_CtlError>
      break;
 8007f56:	bf00      	nop
  }

  return ret;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop

08007f64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d005      	beq.n	8007f8a <USBD_StdItfReq+0x26>
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	d82e      	bhi.n	8007fe0 <USBD_StdItfReq+0x7c>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <USBD_StdItfReq+0x26>
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d12a      	bne.n	8007fe0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d81d      	bhi.n	8007fd2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	889b      	ldrh	r3, [r3, #4]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d813      	bhi.n	8007fc8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d110      	bne.n	8007fdc <USBD_StdItfReq+0x78>
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10d      	bne.n	8007fdc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fd56 	bl	8008a72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fc6:	e009      	b.n	8007fdc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc89 	bl	80088e2 <USBD_CtlError>
          break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc84 	bl	80088e2 <USBD_CtlError>
          break;
 8007fda:	e000      	b.n	8007fde <USBD_StdItfReq+0x7a>
          break;
 8007fdc:	bf00      	nop
      }
      break;
 8007fde:	e004      	b.n	8007fea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc7d 	bl	80088e2 <USBD_CtlError>
      break;
 8007fe8:	bf00      	nop
  }

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d007      	beq.n	8008024 <USBD_StdEPReq+0x30>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	f200 8146 	bhi.w	80082a6 <USBD_StdEPReq+0x2b2>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <USBD_StdEPReq+0x40>
 800801e:	2b20      	cmp	r3, #32
 8008020:	f040 8141 	bne.w	80082a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      break;
 8008032:	e13d      	b.n	80082b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800803c:	2b20      	cmp	r3, #32
 800803e:	d10a      	bne.n	8008056 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	e12d      	b.n	80082b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	2b03      	cmp	r3, #3
 800805c:	d007      	beq.n	800806e <USBD_StdEPReq+0x7a>
 800805e:	2b03      	cmp	r3, #3
 8008060:	f300 811b 	bgt.w	800829a <USBD_StdEPReq+0x2a6>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d072      	beq.n	800814e <USBD_StdEPReq+0x15a>
 8008068:	2b01      	cmp	r3, #1
 800806a:	d03a      	beq.n	80080e2 <USBD_StdEPReq+0xee>
 800806c:	e115      	b.n	800829a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	2b02      	cmp	r3, #2
 8008076:	d002      	beq.n	800807e <USBD_StdEPReq+0x8a>
 8008078:	2b03      	cmp	r3, #3
 800807a:	d015      	beq.n	80080a8 <USBD_StdEPReq+0xb4>
 800807c:	e02b      	b.n	80080d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <USBD_StdEPReq+0xaa>
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d009      	beq.n	800809e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f896 	bl	80091c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008094:	2180      	movs	r1, #128	; 0x80
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f892 	bl	80091c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800809c:	e020      	b.n	80080e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc1e 	bl	80088e2 <USBD_CtlError>
              break;
 80080a6:	e01b      	b.n	80080e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	885b      	ldrh	r3, [r3, #2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10e      	bne.n	80080ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <USBD_StdEPReq+0xda>
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d008      	beq.n	80080ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	88db      	ldrh	r3, [r3, #6]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f879 	bl	80091c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fccf 	bl	8008a72 <USBD_CtlSendStatus>

              break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fc02 	bl	80088e2 <USBD_CtlError>
              break;
 80080de:	bf00      	nop
          }
          break;
 80080e0:	e0e0      	b.n	80082a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d002      	beq.n	80080f2 <USBD_StdEPReq+0xfe>
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d015      	beq.n	800811c <USBD_StdEPReq+0x128>
 80080f0:	e026      	b.n	8008140 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00c      	beq.n	8008112 <USBD_StdEPReq+0x11e>
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d009      	beq.n	8008112 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 f85c 	bl	80091c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f858 	bl	80091c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008110:	e01c      	b.n	800814c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fbe4 	bl	80088e2 <USBD_CtlError>
              break;
 800811a:	e017      	b.n	800814c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d112      	bne.n	800814a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f863 	bl	80091fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc9a 	bl	8008a72 <USBD_CtlSendStatus>
              }
              break;
 800813e:	e004      	b.n	800814a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fbcd 	bl	80088e2 <USBD_CtlError>
              break;
 8008148:	e000      	b.n	800814c <USBD_StdEPReq+0x158>
              break;
 800814a:	bf00      	nop
          }
          break;
 800814c:	e0aa      	b.n	80082a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	2b02      	cmp	r3, #2
 8008156:	d002      	beq.n	800815e <USBD_StdEPReq+0x16a>
 8008158:	2b03      	cmp	r3, #3
 800815a:	d032      	beq.n	80081c2 <USBD_StdEPReq+0x1ce>
 800815c:	e097      	b.n	800828e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <USBD_StdEPReq+0x180>
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b80      	cmp	r3, #128	; 0x80
 8008168:	d004      	beq.n	8008174 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fbb8 	bl	80088e2 <USBD_CtlError>
                break;
 8008172:	e091      	b.n	8008298 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	da0b      	bge.n	8008194 <USBD_StdEPReq+0x1a0>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	3310      	adds	r3, #16
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	e00b      	b.n	80081ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2202      	movs	r2, #2
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fbfb 	bl	80089b6 <USBD_CtlSendData>
              break;
 80081c0:	e06a      	b.n	8008298 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da11      	bge.n	80081ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3318      	adds	r3, #24
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d117      	bne.n	8008214 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fb7b 	bl	80088e2 <USBD_CtlError>
                  break;
 80081ec:	e054      	b.n	8008298 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	f003 020f 	and.w	r2, r3, #15
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb68 	bl	80088e2 <USBD_CtlError>
                  break;
 8008212:	e041      	b.n	8008298 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	da0b      	bge.n	8008234 <USBD_StdEPReq+0x240>
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	3310      	adds	r3, #16
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	4413      	add	r3, r2
 8008230:	3304      	adds	r3, #4
 8008232:	e00b      	b.n	800824c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	3304      	adds	r3, #4
 800824c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <USBD_StdEPReq+0x266>
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b80      	cmp	r3, #128	; 0x80
 8008258:	d103      	bne.n	8008262 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e00e      	b.n	8008280 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 ffe8 	bl	800923c <USBD_LL_IsStallEP>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2201      	movs	r2, #1
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e002      	b.n	8008280 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2202      	movs	r2, #2
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fb95 	bl	80089b6 <USBD_CtlSendData>
              break;
 800828c:	e004      	b.n	8008298 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb26 	bl	80088e2 <USBD_CtlError>
              break;
 8008296:	bf00      	nop
          }
          break;
 8008298:	e004      	b.n	80082a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb20 	bl	80088e2 <USBD_CtlError>
          break;
 80082a2:	bf00      	nop
      }
      break;
 80082a4:	e004      	b.n	80082b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fb1a 	bl	80088e2 <USBD_CtlError>
      break;
 80082ae:	bf00      	nop
  }

  return ret;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b06      	cmp	r3, #6
 80082de:	f200 8128 	bhi.w	8008532 <USBD_GetDescriptor+0x276>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <USBD_GetDescriptor+0x2c>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	08008305 	.word	0x08008305
 80082ec:	0800831d 	.word	0x0800831d
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	08008533 	.word	0x08008533
 80082f8:	08008533 	.word	0x08008533
 80082fc:	080084d3 	.word	0x080084d3
 8008300:	080084ff 	.word	0x080084ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
      break;
 800831a:	e112      	b.n	8008542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7c1b      	ldrb	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	f107 0208 	add.w	r2, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	2202      	movs	r2, #2
 800833c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800833e:	e100      	b.n	8008542 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	f107 0208 	add.w	r2, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	2202      	movs	r2, #2
 8008358:	701a      	strb	r2, [r3, #0]
      break;
 800835a:	e0f2      	b.n	8008542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b05      	cmp	r3, #5
 8008364:	f200 80ac 	bhi.w	80084c0 <USBD_GetDescriptor+0x204>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <USBD_GetDescriptor+0xb4>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008389 	.word	0x08008389
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083f1 	.word	0x080083f1
 800837c:	08008425 	.word	0x08008425
 8008380:	08008459 	.word	0x08008459
 8008384:	0800848d 	.word	0x0800848d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7c12      	ldrb	r2, [r2, #16]
 80083a0:	f107 0108 	add.w	r1, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083aa:	e091      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa97 	bl	80088e2 <USBD_CtlError>
            err++;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	3301      	adds	r3, #1
 80083b8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ba:	e089      	b.n	80084d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7c12      	ldrb	r2, [r2, #16]
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083de:	e077      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa7d 	bl	80088e2 <USBD_CtlError>
            err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
          break;
 80083ee:	e06f      	b.n	80084d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	7c12      	ldrb	r2, [r2, #16]
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008412:	e05d      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa63 	bl	80088e2 <USBD_CtlError>
            err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
          break;
 8008422:	e055      	b.n	80084d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008446:	e043      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa49 	bl	80088e2 <USBD_CtlError>
            err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
          break;
 8008456:	e03b      	b.n	80084d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	7c12      	ldrb	r2, [r2, #16]
 8008470:	f107 0108 	add.w	r1, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847a:	e029      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa2f 	bl	80088e2 <USBD_CtlError>
            err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
          break;
 800848a:	e021      	b.n	80084d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	7c12      	ldrb	r2, [r2, #16]
 80084a4:	f107 0108 	add.w	r1, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ae:	e00f      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa15 	bl	80088e2 <USBD_CtlError>
            err++;
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	3301      	adds	r3, #1
 80084bc:	72fb      	strb	r3, [r7, #11]
          break;
 80084be:	e007      	b.n	80084d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa0d 	bl	80088e2 <USBD_CtlError>
          err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084ce:	e038      	b.n	8008542 <USBD_GetDescriptor+0x286>
 80084d0:	e037      	b.n	8008542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7c1b      	ldrb	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	f107 0208 	add.w	r2, r7, #8
 80084e6:	4610      	mov	r0, r2
 80084e8:	4798      	blx	r3
 80084ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084ec:	e029      	b.n	8008542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9f6 	bl	80088e2 <USBD_CtlError>
        err++;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3301      	adds	r3, #1
 80084fa:	72fb      	strb	r3, [r7, #11]
      break;
 80084fc:	e021      	b.n	8008542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7c1b      	ldrb	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10d      	bne.n	8008522 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	f107 0208 	add.w	r2, r7, #8
 8008512:	4610      	mov	r0, r2
 8008514:	4798      	blx	r3
 8008516:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	2207      	movs	r2, #7
 800851e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008520:	e00f      	b.n	8008542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9dc 	bl	80088e2 <USBD_CtlError>
        err++;
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	3301      	adds	r3, #1
 800852e:	72fb      	strb	r3, [r7, #11]
      break;
 8008530:	e007      	b.n	8008542 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9d4 	bl	80088e2 <USBD_CtlError>
      err++;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3301      	adds	r3, #1
 800853e:	72fb      	strb	r3, [r7, #11]
      break;
 8008540:	bf00      	nop
  }

  if (err != 0U)
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11c      	bne.n	8008582 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008548:	893b      	ldrh	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d011      	beq.n	8008572 <USBD_GetDescriptor+0x2b6>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	88da      	ldrh	r2, [r3, #6]
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	4293      	cmp	r3, r2
 800855e:	bf28      	it	cs
 8008560:	4613      	movcs	r3, r2
 8008562:	b29b      	uxth	r3, r3
 8008564:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008566:	893b      	ldrh	r3, [r7, #8]
 8008568:	461a      	mov	r2, r3
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fa22 	bl	80089b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	88db      	ldrh	r3, [r3, #6]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d104      	bne.n	8008584 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa79 	bl	8008a72 <USBD_CtlSendStatus>
 8008580:	e000      	b.n	8008584 <USBD_GetDescriptor+0x2c8>
    return;
 8008582:	bf00      	nop
    }
  }
}
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop

0800858c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	889b      	ldrh	r3, [r3, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d130      	bne.n	8008600 <USBD_SetAddress+0x74>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88db      	ldrh	r3, [r3, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d12c      	bne.n	8008600 <USBD_SetAddress+0x74>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	885b      	ldrh	r3, [r3, #2]
 80085aa:	2b7f      	cmp	r3, #127	; 0x7f
 80085ac:	d828      	bhi.n	8008600 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d104      	bne.n	80085ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f98b 	bl	80088e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085cc:	e01d      	b.n	800860a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7bfa      	ldrb	r2, [r7, #15]
 80085d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fe5a 	bl	8009294 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa46 	bl	8008a72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f4:	e009      	b.n	800860a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fe:	e004      	b.n	800860a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f96d 	bl	80088e2 <USBD_CtlError>
  }
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	b2da      	uxtb	r2, r3
 8008624:	4b41      	ldr	r3, [pc, #260]	; (800872c <USBD_SetConfig+0x118>)
 8008626:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008628:	4b40      	ldr	r3, [pc, #256]	; (800872c <USBD_SetConfig+0x118>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d904      	bls.n	800863a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f955 	bl	80088e2 <USBD_CtlError>
 8008638:	e075      	b.n	8008726 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	2b02      	cmp	r3, #2
 8008642:	d002      	beq.n	800864a <USBD_SetConfig+0x36>
 8008644:	2b03      	cmp	r3, #3
 8008646:	d023      	beq.n	8008690 <USBD_SetConfig+0x7c>
 8008648:	e062      	b.n	8008710 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800864a:	4b38      	ldr	r3, [pc, #224]	; (800872c <USBD_SetConfig+0x118>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01a      	beq.n	8008688 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008652:	4b36      	ldr	r3, [pc, #216]	; (800872c <USBD_SetConfig+0x118>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2203      	movs	r2, #3
 8008660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008664:	4b31      	ldr	r3, [pc, #196]	; (800872c <USBD_SetConfig+0x118>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff f9e7 	bl	8007a3e <USBD_SetClassConfig>
 8008670:	4603      	mov	r3, r0
 8008672:	2b02      	cmp	r3, #2
 8008674:	d104      	bne.n	8008680 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f932 	bl	80088e2 <USBD_CtlError>
            return;
 800867e:	e052      	b.n	8008726 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f9f6 	bl	8008a72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008686:	e04e      	b.n	8008726 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f9f2 	bl	8008a72 <USBD_CtlSendStatus>
        break;
 800868e:	e04a      	b.n	8008726 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008690:	4b26      	ldr	r3, [pc, #152]	; (800872c <USBD_SetConfig+0x118>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d112      	bne.n	80086be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086a0:	4b22      	ldr	r3, [pc, #136]	; (800872c <USBD_SetConfig+0x118>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <USBD_SetConfig+0x118>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff f9e3 	bl	8007a7c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9db 	bl	8008a72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086bc:	e033      	b.n	8008726 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086be:	4b1b      	ldr	r3, [pc, #108]	; (800872c <USBD_SetConfig+0x118>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d01d      	beq.n	8008708 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff f9d1 	bl	8007a7c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086da:	4b14      	ldr	r3, [pc, #80]	; (800872c <USBD_SetConfig+0x118>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086e4:	4b11      	ldr	r3, [pc, #68]	; (800872c <USBD_SetConfig+0x118>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff f9a7 	bl	8007a3e <USBD_SetClassConfig>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d104      	bne.n	8008700 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f8f2 	bl	80088e2 <USBD_CtlError>
            return;
 80086fe:	e012      	b.n	8008726 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f9b6 	bl	8008a72 <USBD_CtlSendStatus>
        break;
 8008706:	e00e      	b.n	8008726 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f9b2 	bl	8008a72 <USBD_CtlSendStatus>
        break;
 800870e:	e00a      	b.n	8008726 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8e5 	bl	80088e2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <USBD_SetConfig+0x118>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff f9ac 	bl	8007a7c <USBD_ClrClassConfig>
        break;
 8008724:	bf00      	nop
    }
  }
}
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2000038c 	.word	0x2000038c

08008730 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	88db      	ldrh	r3, [r3, #6]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d004      	beq.n	800874c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f8cc 	bl	80088e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800874a:	e022      	b.n	8008792 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	2b02      	cmp	r3, #2
 8008754:	dc02      	bgt.n	800875c <USBD_GetConfig+0x2c>
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc03      	bgt.n	8008762 <USBD_GetConfig+0x32>
 800875a:	e015      	b.n	8008788 <USBD_GetConfig+0x58>
 800875c:	2b03      	cmp	r3, #3
 800875e:	d00b      	beq.n	8008778 <USBD_GetConfig+0x48>
 8008760:	e012      	b.n	8008788 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3308      	adds	r3, #8
 800876c:	2201      	movs	r2, #1
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f920 	bl	80089b6 <USBD_CtlSendData>
        break;
 8008776:	e00c      	b.n	8008792 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	2201      	movs	r2, #1
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f918 	bl	80089b6 <USBD_CtlSendData>
        break;
 8008786:	e004      	b.n	8008792 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f8a9 	bl	80088e2 <USBD_CtlError>
        break;
 8008790:	bf00      	nop
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d81e      	bhi.n	80087ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	88db      	ldrh	r3, [r3, #6]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d004      	beq.n	80087c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f891 	bl	80088e2 <USBD_CtlError>
        break;
 80087c0:	e01a      	b.n	80087f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f043 0202 	orr.w	r2, r3, #2
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	330c      	adds	r3, #12
 80087e2:	2202      	movs	r2, #2
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f8e5 	bl	80089b6 <USBD_CtlSendData>
      break;
 80087ec:	e004      	b.n	80087f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f876 	bl	80088e2 <USBD_CtlError>
      break;
 80087f6:	bf00      	nop
  }
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d106      	bne.n	8008820 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f929 	bl	8008a72 <USBD_CtlSendStatus>
  }
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008838:	3b01      	subs	r3, #1
 800883a:	2b02      	cmp	r3, #2
 800883c:	d80b      	bhi.n	8008856 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d10c      	bne.n	8008860 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f90f 	bl	8008a72 <USBD_CtlSendStatus>
      }
      break;
 8008854:	e004      	b.n	8008860 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f842 	bl	80088e2 <USBD_CtlError>
      break;
 800885e:	e000      	b.n	8008862 <USBD_ClrFeature+0x3a>
      break;
 8008860:	bf00      	nop
  }
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781a      	ldrb	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	785a      	ldrb	r2, [r3, #1]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	3302      	adds	r3, #2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	b29a      	uxth	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	3303      	adds	r3, #3
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	b29b      	uxth	r3, r3
 8008898:	4413      	add	r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	3304      	adds	r3, #4
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	3305      	adds	r3, #5
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	3306      	adds	r3, #6
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	3307      	adds	r3, #7
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	80da      	strh	r2, [r3, #6]

}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fc66 	bl	80091c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc62 	bl	80091c0 <USBD_LL_StallEP>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d032      	beq.n	8008980 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f834 	bl	8008988 <USBD_GetLen>
 8008920:	4603      	mov	r3, r0
 8008922:	3301      	adds	r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	75fa      	strb	r2, [r7, #23]
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4413      	add	r3, r2
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	75fa      	strb	r2, [r7, #23]
 8008946:	461a      	mov	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4413      	add	r3, r2
 800894c:	2203      	movs	r2, #3
 800894e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008950:	e012      	b.n	8008978 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	60fa      	str	r2, [r7, #12]
 8008958:	7dfa      	ldrb	r2, [r7, #23]
 800895a:	1c51      	adds	r1, r2, #1
 800895c:	75f9      	strb	r1, [r7, #23]
 800895e:	4611      	mov	r1, r2
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	440a      	add	r2, r1
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	75fa      	strb	r2, [r7, #23]
 800896e:	461a      	mov	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4413      	add	r3, r2
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e8      	bne.n	8008952 <USBD_GetString+0x4e>
    }
  }
}
 8008980:	bf00      	nop
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008994:	e005      	b.n	80089a2 <USBD_GetLen+0x1a>
  {
    len++;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	3301      	adds	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f5      	bne.n	8008996 <USBD_GetLen+0xe>
  }

  return len;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr

080089b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089cc:	88fa      	ldrh	r2, [r7, #6]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	2100      	movs	r1, #0
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fc77 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	4613      	mov	r3, r2
 80089fa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	2100      	movs	r1, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fc65 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2203      	movs	r2, #3
 8008a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a28:	88fa      	ldrh	r2, [r7, #6]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fc6a 	bl	8009318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a5c:	88fb      	ldrh	r3, [r7, #6]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	2100      	movs	r1, #0
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fc58 	bl	8009318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a82:	2300      	movs	r3, #0
 8008a84:	2200      	movs	r2, #0
 8008a86:	2100      	movs	r1, #0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fc22 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2205      	movs	r2, #5
 8008aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2100      	movs	r1, #0
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fc32 	bl	8009318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4912      	ldr	r1, [pc, #72]	; (8008b10 <MX_USB_DEVICE_Init+0x50>)
 8008ac8:	4812      	ldr	r0, [pc, #72]	; (8008b14 <MX_USB_DEVICE_Init+0x54>)
 8008aca:	f7fe ff5e 	bl	800798a <USBD_Init>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ad4:	f7f7 ff8c 	bl	80009f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ad8:	490f      	ldr	r1, [pc, #60]	; (8008b18 <MX_USB_DEVICE_Init+0x58>)
 8008ada:	480e      	ldr	r0, [pc, #56]	; (8008b14 <MX_USB_DEVICE_Init+0x54>)
 8008adc:	f7fe ff80 	bl	80079e0 <USBD_RegisterClass>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ae6:	f7f7 ff83 	bl	80009f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008aea:	490c      	ldr	r1, [pc, #48]	; (8008b1c <MX_USB_DEVICE_Init+0x5c>)
 8008aec:	4809      	ldr	r0, [pc, #36]	; (8008b14 <MX_USB_DEVICE_Init+0x54>)
 8008aee:	f7fe feb1 	bl	8007854 <USBD_CDC_RegisterInterface>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008af8:	f7f7 ff7a 	bl	80009f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008afc:	4805      	ldr	r0, [pc, #20]	; (8008b14 <MX_USB_DEVICE_Init+0x54>)
 8008afe:	f7fe ff88 	bl	8007a12 <USBD_Start>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b08:	f7f7 ff72 	bl	80009f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b0c:	bf00      	nop
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000134 	.word	0x20000134
 8008b14:	20000390 	.word	0x20000390
 8008b18:	20000020 	.word	0x20000020
 8008b1c:	20000124 	.word	0x20000124

08008b20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b24:	2200      	movs	r2, #0
 8008b26:	4905      	ldr	r1, [pc, #20]	; (8008b3c <CDC_Init_FS+0x1c>)
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <CDC_Init_FS+0x20>)
 8008b2a:	f7fe fea9 	bl	8007880 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b2e:	4905      	ldr	r1, [pc, #20]	; (8008b44 <CDC_Init_FS+0x24>)
 8008b30:	4803      	ldr	r0, [pc, #12]	; (8008b40 <CDC_Init_FS+0x20>)
 8008b32:	f7fe febe 	bl	80078b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000a3c 	.word	0x20000a3c
 8008b40:	20000390 	.word	0x20000390
 8008b44:	20000654 	.word	0x20000654

08008b48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
	...

08008b58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
 8008b64:	4613      	mov	r3, r2
 8008b66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b23      	cmp	r3, #35	; 0x23
 8008b6c:	d84a      	bhi.n	8008c04 <CDC_Control_FS+0xac>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <CDC_Control_FS+0x1c>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008c05 	.word	0x08008c05
 8008b78:	08008c05 	.word	0x08008c05
 8008b7c:	08008c05 	.word	0x08008c05
 8008b80:	08008c05 	.word	0x08008c05
 8008b84:	08008c05 	.word	0x08008c05
 8008b88:	08008c05 	.word	0x08008c05
 8008b8c:	08008c05 	.word	0x08008c05
 8008b90:	08008c05 	.word	0x08008c05
 8008b94:	08008c05 	.word	0x08008c05
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008c05 	.word	0x08008c05
 8008ba4:	08008c05 	.word	0x08008c05
 8008ba8:	08008c05 	.word	0x08008c05
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008c05 	.word	0x08008c05
 8008bbc:	08008c05 	.word	0x08008c05
 8008bc0:	08008c05 	.word	0x08008c05
 8008bc4:	08008c05 	.word	0x08008c05
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008c05 	.word	0x08008c05
 8008bd4:	08008c05 	.word	0x08008c05
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	08008c05 	.word	0x08008c05
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c05 	.word	0x08008c05
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c05 	.word	0x08008c05
 8008bf4:	08008c05 	.word	0x08008c05
 8008bf8:	08008c05 	.word	0x08008c05
 8008bfc:	08008c05 	.word	0x08008c05
 8008c00:	08008c05 	.word	0x08008c05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c04:	bf00      	nop
  }

  return (USBD_OK);
 8008c06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop

08008c14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	480d      	ldr	r0, [pc, #52]	; (8008c58 <CDC_Receive_FS+0x44>)
 8008c22:	f7fe fe46 	bl	80078b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c26:	480c      	ldr	r0, [pc, #48]	; (8008c58 <CDC_Receive_FS+0x44>)
 8008c28:	f7fe fe85 	bl	8007936 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	73fb      	strb	r3, [r7, #15]
  memset(buffer, 0, 64);
 8008c32:	2240      	movs	r2, #64	; 0x40
 8008c34:	2100      	movs	r1, #0
 8008c36:	4809      	ldr	r0, [pc, #36]	; (8008c5c <CDC_Receive_FS+0x48>)
 8008c38:	f000 fc28 	bl	800948c <memset>
  memcpy(buffer, Buf, len);
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4806      	ldr	r0, [pc, #24]	; (8008c5c <CDC_Receive_FS+0x48>)
 8008c44:	f000 fc14 	bl	8009470 <memcpy>
  terminal_proses(buffer);
 8008c48:	4804      	ldr	r0, [pc, #16]	; (8008c5c <CDC_Receive_FS+0x48>)
 8008c4a:	f7f8 f90d 	bl	8000e68 <terminal_proses>
  return (USBD_OK);
 8008c4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000390 	.word	0x20000390
 8008c5c:	20000214 	.word	0x20000214

08008c60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e00b      	b.n	8008c9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c8e:	f7fe fdf7 	bl	8007880 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c94:	f7fe fe20 	bl	80078d8 <USBD_CDC_TransmitPacket>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000390 	.word	0x20000390

08008cac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2212      	movs	r2, #18
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000150 	.word	0x20000150

08008cd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc80      	pop	{r7}
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000164 	.word	0x20000164

08008cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4907      	ldr	r1, [pc, #28]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d0a:	4808      	ldr	r0, [pc, #32]	; (8008d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d0c:	f7ff fdfa 	bl	8008904 <USBD_GetString>
 8008d10:	e004      	b.n	8008d1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d18:	f7ff fdf4 	bl	8008904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000e24 	.word	0x20000e24
 8008d2c:	0800b354 	.word	0x0800b354

08008d30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d40:	4804      	ldr	r0, [pc, #16]	; (8008d54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d42:	f7ff fddf 	bl	8008904 <USBD_GetString>
  return USBD_StrDesc;
 8008d46:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000e24 	.word	0x20000e24
 8008d54:	0800b36c 	.word	0x0800b36c

08008d58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	221a      	movs	r2, #26
 8008d68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d6a:	f000 f843 	bl	8008df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d6e:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000168 	.word	0x20000168

08008d7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4907      	ldr	r1, [pc, #28]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d92:	4808      	ldr	r0, [pc, #32]	; (8008db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d94:	f7ff fdb6 	bl	8008904 <USBD_GetString>
 8008d98:	e004      	b.n	8008da4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	4904      	ldr	r1, [pc, #16]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d9e:	4805      	ldr	r0, [pc, #20]	; (8008db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008da0:	f7ff fdb0 	bl	8008904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000e24 	.word	0x20000e24
 8008db4:	0800b380 	.word	0x0800b380

08008db8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4907      	ldr	r1, [pc, #28]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dce:	4808      	ldr	r0, [pc, #32]	; (8008df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dd0:	f7ff fd98 	bl	8008904 <USBD_GetString>
 8008dd4:	e004      	b.n	8008de0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	4904      	ldr	r1, [pc, #16]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dda:	4805      	ldr	r0, [pc, #20]	; (8008df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ddc:	f7ff fd92 	bl	8008904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de0:	4b02      	ldr	r3, [pc, #8]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000e24 	.word	0x20000e24
 8008df0:	0800b38c 	.word	0x0800b38c

08008df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <Get_SerialNum+0x44>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e00:	4b0e      	ldr	r3, [pc, #56]	; (8008e3c <Get_SerialNum+0x48>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e06:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <Get_SerialNum+0x4c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4909      	ldr	r1, [pc, #36]	; (8008e44 <Get_SerialNum+0x50>)
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f814 	bl	8008e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e24:	2204      	movs	r2, #4
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <Get_SerialNum+0x54>)
 8008e28:	68b8      	ldr	r0, [r7, #8]
 8008e2a:	f000 f80f 	bl	8008e4c <IntToUnicode>
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	1ffff7e8 	.word	0x1ffff7e8
 8008e3c:	1ffff7ec 	.word	0x1ffff7ec
 8008e40:	1ffff7f0 	.word	0x1ffff7f0
 8008e44:	2000016a 	.word	0x2000016a
 8008e48:	2000017a 	.word	0x2000017a

08008e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
 8008e62:	e027      	b.n	8008eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	0f1b      	lsrs	r3, r3, #28
 8008e68:	2b09      	cmp	r3, #9
 8008e6a:	d80b      	bhi.n	8008e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	4619      	mov	r1, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3230      	adds	r2, #48	; 0x30
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e00a      	b.n	8008e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	0f1b      	lsrs	r3, r3, #28
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	440b      	add	r3, r1
 8008e94:	3237      	adds	r2, #55	; 0x37
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
 8008eb4:	7dfa      	ldrb	r2, [r7, #23]
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d3d3      	bcc.n	8008e64 <IntToUnicode+0x18>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <HAL_PCD_MspInit+0x44>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d113      	bne.n	8008f02 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <HAL_PCD_MspInit+0x48>)
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4a0c      	ldr	r2, [pc, #48]	; (8008f10 <HAL_PCD_MspInit+0x48>)
 8008ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ee4:	61d3      	str	r3, [r2, #28]
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <HAL_PCD_MspInit+0x48>)
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	2014      	movs	r0, #20
 8008ef8:	f7f8 fa57 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008efc:	2014      	movs	r0, #20
 8008efe:	f7f8 fa70 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40005c00 	.word	0x40005c00
 8008f10:	40021000 	.word	0x40021000

08008f14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7fe fdb9 	bl	8007aa2 <USBD_LL_SetupStage>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	440b      	add	r3, r1
 8008f58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f7fe fdeb 	bl	8007b3c <USBD_LL_DataOutStage>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	440b      	add	r3, r1
 8008f8e:	333c      	adds	r3, #60	; 0x3c
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fe fe42 	bl	8007c1e <USBD_LL_DataInStage>
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe ff52 	bl	8007e5a <USBD_LL_SOF>
}
 8008fb6:	bf00      	nop
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d001      	beq.n	8008fd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fd2:	f7f7 fd0d 	bl	80009f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fdc:	7bfa      	ldrb	r2, [r7, #15]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe ff02 	bl	8007dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe febb 	bl	8007d68 <USBD_LL_Reset>
}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fefc 	bl	8007e08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <HAL_PCD_SuspendCallback+0x30>)
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	4a03      	ldr	r2, [pc, #12]	; (800902c <HAL_PCD_SuspendCallback+0x30>)
 800901e:	f043 0306 	orr.w	r3, r3, #6
 8009022:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	e000ed00 	.word	0xe000ed00

08009030 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fef6 	bl	8007e30 <USBD_LL_Resume>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009054:	4a28      	ldr	r2, [pc, #160]	; (80090f8 <USBD_LL_Init+0xac>)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <USBD_LL_Init+0xac>)
 8009060:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009064:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <USBD_LL_Init+0xac>)
 8009066:	4a25      	ldr	r2, [pc, #148]	; (80090fc <USBD_LL_Init+0xb0>)
 8009068:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800906a:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <USBD_LL_Init+0xac>)
 800906c:	2208      	movs	r2, #8
 800906e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009070:	4b21      	ldr	r3, [pc, #132]	; (80090f8 <USBD_LL_Init+0xac>)
 8009072:	2202      	movs	r2, #2
 8009074:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009076:	4b20      	ldr	r3, [pc, #128]	; (80090f8 <USBD_LL_Init+0xac>)
 8009078:	2200      	movs	r2, #0
 800907a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800907c:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <USBD_LL_Init+0xac>)
 800907e:	2200      	movs	r2, #0
 8009080:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009082:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <USBD_LL_Init+0xac>)
 8009084:	2200      	movs	r2, #0
 8009086:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009088:	481b      	ldr	r0, [pc, #108]	; (80090f8 <USBD_LL_Init+0xac>)
 800908a:	f7f8 fcfb 	bl	8001a84 <HAL_PCD_Init>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009094:	f7f7 fcac 	bl	80009f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800909e:	2318      	movs	r3, #24
 80090a0:	2200      	movs	r2, #0
 80090a2:	2100      	movs	r1, #0
 80090a4:	f7fa f96f 	bl	8003386 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090ae:	2358      	movs	r3, #88	; 0x58
 80090b0:	2200      	movs	r2, #0
 80090b2:	2180      	movs	r1, #128	; 0x80
 80090b4:	f7fa f967 	bl	8003386 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090be:	23c0      	movs	r3, #192	; 0xc0
 80090c0:	2200      	movs	r2, #0
 80090c2:	2181      	movs	r1, #129	; 0x81
 80090c4:	f7fa f95f 	bl	8003386 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090d2:	2200      	movs	r2, #0
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7fa f956 	bl	8003386 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e4:	2200      	movs	r2, #0
 80090e6:	2182      	movs	r1, #130	; 0x82
 80090e8:	f7fa f94d 	bl	8003386 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001024 	.word	0x20001024
 80090fc:	40005c00 	.word	0x40005c00

08009100 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f8 fdbf 	bl	8001c9a <HAL_PCD_Start>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f94e 	bl	80093c4 <USBD_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912c:	7bbb      	ldrb	r3, [r7, #14]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	4608      	mov	r0, r1
 8009140:	4611      	mov	r1, r2
 8009142:	461a      	mov	r2, r3
 8009144:	4603      	mov	r3, r0
 8009146:	70fb      	strb	r3, [r7, #3]
 8009148:	460b      	mov	r3, r1
 800914a:	70bb      	strb	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800915e:	78bb      	ldrb	r3, [r7, #2]
 8009160:	883a      	ldrh	r2, [r7, #0]
 8009162:	78f9      	ldrb	r1, [r7, #3]
 8009164:	f7f8 ff37 	bl	8001fd6 <HAL_PCD_EP_Open>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f928 	bl	80093c4 <USBD_Get_USB_Status>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f8 ff7e 	bl	80020a2 <HAL_PCD_EP_Close>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f909 	bl	80093c4 <USBD_Get_USB_Status>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 f83e 	bl	8002260 <HAL_PCD_EP_SetStall>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f8ea 	bl	80093c4 <USBD_Get_USB_Status>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 f87f 	bl	8002320 <HAL_PCD_EP_ClrStall>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f8cb 	bl	80093c4 <USBD_Get_USB_Status>
 800922e:	4603      	mov	r3, r0
 8009230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009232:	7bbb      	ldrb	r3, [r7, #14]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800924e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da0c      	bge.n	8009272 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	00db      	lsls	r3, r3, #3
 800926a:	440b      	add	r3, r1
 800926c:	3302      	adds	r3, #2
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	e00b      	b.n	800928a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009278:	68f9      	ldr	r1, [r7, #12]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	00db      	lsls	r3, r3, #3
 8009282:	440b      	add	r3, r1
 8009284:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009288:	781b      	ldrb	r3, [r3, #0]
  }
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr

08009294 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fe6a 	bl	8001f8c <HAL_PCD_SetAddress>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f880 	bl	80093c4 <USBD_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	461a      	mov	r2, r3
 80092de:	460b      	mov	r3, r1
 80092e0:	72fb      	strb	r3, [r7, #11]
 80092e2:	4613      	mov	r3, r2
 80092e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	7af9      	ldrb	r1, [r7, #11]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f7f8 ff6e 	bl	80021da <HAL_PCD_EP_Transmit>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f85d 	bl	80093c4 <USBD_Get_USB_Status>
 800930a:	4603      	mov	r3, r0
 800930c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800930e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	461a      	mov	r2, r3
 8009324:	460b      	mov	r3, r1
 8009326:	72fb      	strb	r3, [r7, #11]
 8009328:	4613      	mov	r3, r2
 800932a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800933a:	893b      	ldrh	r3, [r7, #8]
 800933c:	7af9      	ldrb	r1, [r7, #11]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	f7f8 fef7 	bl	8002132 <HAL_PCD_EP_Receive>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f83a 	bl	80093c4 <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009354:	7dbb      	ldrb	r3, [r7, #22]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009370:	78fa      	ldrb	r2, [r7, #3]
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f7f8 ff19 	bl	80021ac <HAL_PCD_EP_GetRxCount>
 800937a:	4603      	mov	r3, r0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_static_malloc+0x14>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	bc80      	pop	{r7}
 8009396:	4770      	bx	lr
 8009398:	20001310 	.word	0x20001310

0800939c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]

}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr

080093ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr

080093c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d817      	bhi.n	8009408 <USBD_Get_USB_Status+0x44>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBD_Get_USB_Status+0x1c>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	080093f7 	.word	0x080093f7
 80093e8:	080093fd 	.word	0x080093fd
 80093ec:	08009403 	.word	0x08009403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
    break;
 80093f4:	e00b      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093f6:	2302      	movs	r3, #2
 80093f8:	73fb      	strb	r3, [r7, #15]
    break;
 80093fa:	e008      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009400:	e005      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009402:	2302      	movs	r3, #2
 8009404:	73fb      	strb	r3, [r7, #15]
    break;
 8009406:	e002      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009408:	2302      	movs	r3, #2
 800940a:	73fb      	strb	r3, [r7, #15]
    break;
 800940c:	bf00      	nop
  }
  return usb_status;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <__errno>:
 800941c:	4b01      	ldr	r3, [pc, #4]	; (8009424 <__errno+0x8>)
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000184 	.word	0x20000184

08009428 <__libc_init_array>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	2600      	movs	r6, #0
 800942c:	4d0c      	ldr	r5, [pc, #48]	; (8009460 <__libc_init_array+0x38>)
 800942e:	4c0d      	ldr	r4, [pc, #52]	; (8009464 <__libc_init_array+0x3c>)
 8009430:	1b64      	subs	r4, r4, r5
 8009432:	10a4      	asrs	r4, r4, #2
 8009434:	42a6      	cmp	r6, r4
 8009436:	d109      	bne.n	800944c <__libc_init_array+0x24>
 8009438:	f001 ff28 	bl	800b28c <_init>
 800943c:	2600      	movs	r6, #0
 800943e:	4d0a      	ldr	r5, [pc, #40]	; (8009468 <__libc_init_array+0x40>)
 8009440:	4c0a      	ldr	r4, [pc, #40]	; (800946c <__libc_init_array+0x44>)
 8009442:	1b64      	subs	r4, r4, r5
 8009444:	10a4      	asrs	r4, r4, #2
 8009446:	42a6      	cmp	r6, r4
 8009448:	d105      	bne.n	8009456 <__libc_init_array+0x2e>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009450:	4798      	blx	r3
 8009452:	3601      	adds	r6, #1
 8009454:	e7ee      	b.n	8009434 <__libc_init_array+0xc>
 8009456:	f855 3b04 	ldr.w	r3, [r5], #4
 800945a:	4798      	blx	r3
 800945c:	3601      	adds	r6, #1
 800945e:	e7f2      	b.n	8009446 <__libc_init_array+0x1e>
 8009460:	0800b624 	.word	0x0800b624
 8009464:	0800b624 	.word	0x0800b624
 8009468:	0800b624 	.word	0x0800b624
 800946c:	0800b628 	.word	0x0800b628

08009470 <memcpy>:
 8009470:	440a      	add	r2, r1
 8009472:	4291      	cmp	r1, r2
 8009474:	f100 33ff 	add.w	r3, r0, #4294967295
 8009478:	d100      	bne.n	800947c <memcpy+0xc>
 800947a:	4770      	bx	lr
 800947c:	b510      	push	{r4, lr}
 800947e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009482:	4291      	cmp	r1, r2
 8009484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009488:	d1f9      	bne.n	800947e <memcpy+0xe>
 800948a:	bd10      	pop	{r4, pc}

0800948c <memset>:
 800948c:	4603      	mov	r3, r0
 800948e:	4402      	add	r2, r0
 8009490:	4293      	cmp	r3, r2
 8009492:	d100      	bne.n	8009496 <memset+0xa>
 8009494:	4770      	bx	lr
 8009496:	f803 1b01 	strb.w	r1, [r3], #1
 800949a:	e7f9      	b.n	8009490 <memset+0x4>

0800949c <siscanf>:
 800949c:	b40e      	push	{r1, r2, r3}
 800949e:	f44f 7201 	mov.w	r2, #516	; 0x204
 80094a2:	b530      	push	{r4, r5, lr}
 80094a4:	b09c      	sub	sp, #112	; 0x70
 80094a6:	ac1f      	add	r4, sp, #124	; 0x7c
 80094a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80094ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80094b0:	9002      	str	r0, [sp, #8]
 80094b2:	9006      	str	r0, [sp, #24]
 80094b4:	f7f6 fe54 	bl	8000160 <strlen>
 80094b8:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <siscanf+0x4c>)
 80094ba:	9003      	str	r0, [sp, #12]
 80094bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80094be:	2300      	movs	r3, #0
 80094c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c2:	9314      	str	r3, [sp, #80]	; 0x50
 80094c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094c8:	9007      	str	r0, [sp, #28]
 80094ca:	4808      	ldr	r0, [pc, #32]	; (80094ec <siscanf+0x50>)
 80094cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094d0:	462a      	mov	r2, r5
 80094d2:	4623      	mov	r3, r4
 80094d4:	a902      	add	r1, sp, #8
 80094d6:	6800      	ldr	r0, [r0, #0]
 80094d8:	9401      	str	r4, [sp, #4]
 80094da:	f000 fbe3 	bl	8009ca4 <__ssvfiscanf_r>
 80094de:	b01c      	add	sp, #112	; 0x70
 80094e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094e4:	b003      	add	sp, #12
 80094e6:	4770      	bx	lr
 80094e8:	08009513 	.word	0x08009513
 80094ec:	20000184 	.word	0x20000184

080094f0 <__sread>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	460c      	mov	r4, r1
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	f001 f98e 	bl	800a818 <_read_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	bfab      	itete	ge
 8009500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009502:	89a3      	ldrhlt	r3, [r4, #12]
 8009504:	181b      	addge	r3, r3, r0
 8009506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950a:	bfac      	ite	ge
 800950c:	6563      	strge	r3, [r4, #84]	; 0x54
 800950e:	81a3      	strhlt	r3, [r4, #12]
 8009510:	bd10      	pop	{r4, pc}

08009512 <__seofread>:
 8009512:	2000      	movs	r0, #0
 8009514:	4770      	bx	lr

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	4605      	mov	r5, r0
 8009520:	05db      	lsls	r3, r3, #23
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	2302      	movs	r3, #2
 800952a:	2200      	movs	r2, #0
 800952c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009530:	f000 f90c 	bl	800974c <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	4632      	mov	r2, r6
 8009538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	4628      	mov	r0, r5
 8009540:	463b      	mov	r3, r7
 8009542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b8ad 	b.w	80096a8 <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f000 f8f9 	bl	800974c <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	; 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b8c7 	b.w	8009708 <_close_r>
	...

0800957c <strtok>:
 800957c:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <strtok+0x5c>)
 800957e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	681f      	ldr	r7, [r3, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009588:	460e      	mov	r6, r1
 800958a:	b9ec      	cbnz	r4, 80095c8 <strtok+0x4c>
 800958c:	2050      	movs	r0, #80	; 0x50
 800958e:	f000 f8ef 	bl	8009770 <malloc>
 8009592:	4602      	mov	r2, r0
 8009594:	65b8      	str	r0, [r7, #88]	; 0x58
 8009596:	b920      	cbnz	r0, 80095a2 <strtok+0x26>
 8009598:	2157      	movs	r1, #87	; 0x57
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <strtok+0x60>)
 800959c:	4810      	ldr	r0, [pc, #64]	; (80095e0 <strtok+0x64>)
 800959e:	f000 f895 	bl	80096cc <__assert_func>
 80095a2:	e9c0 4400 	strd	r4, r4, [r0]
 80095a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80095aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80095ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80095b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80095b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80095ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80095be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80095c2:	6184      	str	r4, [r0, #24]
 80095c4:	7704      	strb	r4, [r0, #28]
 80095c6:	6244      	str	r4, [r0, #36]	; 0x24
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ce:	2301      	movs	r3, #1
 80095d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d4:	f000 b806 	b.w	80095e4 <__strtok_r>
 80095d8:	20000184 	.word	0x20000184
 80095dc:	0800b3c4 	.word	0x0800b3c4
 80095e0:	0800b3db 	.word	0x0800b3db

080095e4 <__strtok_r>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	b908      	cbnz	r0, 80095ec <__strtok_r+0x8>
 80095e8:	6810      	ldr	r0, [r2, #0]
 80095ea:	b188      	cbz	r0, 8009610 <__strtok_r+0x2c>
 80095ec:	4604      	mov	r4, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	4620      	mov	r0, r4
 80095f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095fa:	b91e      	cbnz	r6, 8009604 <__strtok_r+0x20>
 80095fc:	b965      	cbnz	r5, 8009618 <__strtok_r+0x34>
 80095fe:	4628      	mov	r0, r5
 8009600:	6015      	str	r5, [r2, #0]
 8009602:	e005      	b.n	8009610 <__strtok_r+0x2c>
 8009604:	42b5      	cmp	r5, r6
 8009606:	d1f6      	bne.n	80095f6 <__strtok_r+0x12>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f0      	bne.n	80095ee <__strtok_r+0xa>
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	7003      	strb	r3, [r0, #0]
 8009610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009612:	461c      	mov	r4, r3
 8009614:	e00c      	b.n	8009630 <__strtok_r+0x4c>
 8009616:	b915      	cbnz	r5, 800961e <__strtok_r+0x3a>
 8009618:	460e      	mov	r6, r1
 800961a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800961e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009622:	42ab      	cmp	r3, r5
 8009624:	d1f7      	bne.n	8009616 <__strtok_r+0x32>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f3      	beq.n	8009612 <__strtok_r+0x2e>
 800962a:	2300      	movs	r3, #0
 800962c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009630:	6014      	str	r4, [r2, #0]
 8009632:	e7ed      	b.n	8009610 <__strtok_r+0x2c>

08009634 <_vsniprintf_r>:
 8009634:	b530      	push	{r4, r5, lr}
 8009636:	4614      	mov	r4, r2
 8009638:	2c00      	cmp	r4, #0
 800963a:	4605      	mov	r5, r0
 800963c:	461a      	mov	r2, r3
 800963e:	b09b      	sub	sp, #108	; 0x6c
 8009640:	da05      	bge.n	800964e <_vsniprintf_r+0x1a>
 8009642:	238b      	movs	r3, #139	; 0x8b
 8009644:	6003      	str	r3, [r0, #0]
 8009646:	f04f 30ff 	mov.w	r0, #4294967295
 800964a:	b01b      	add	sp, #108	; 0x6c
 800964c:	bd30      	pop	{r4, r5, pc}
 800964e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009652:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009656:	bf0c      	ite	eq
 8009658:	4623      	moveq	r3, r4
 800965a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009666:	9100      	str	r1, [sp, #0]
 8009668:	9104      	str	r1, [sp, #16]
 800966a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800966e:	4669      	mov	r1, sp
 8009670:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009672:	f000 f9bd 	bl	80099f0 <_svfiprintf_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	bfbc      	itt	lt
 800967a:	238b      	movlt	r3, #139	; 0x8b
 800967c:	602b      	strlt	r3, [r5, #0]
 800967e:	2c00      	cmp	r4, #0
 8009680:	d0e3      	beq.n	800964a <_vsniprintf_r+0x16>
 8009682:	2200      	movs	r2, #0
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e7df      	b.n	800964a <_vsniprintf_r+0x16>
	...

0800968c <vsniprintf>:
 800968c:	b507      	push	{r0, r1, r2, lr}
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	4613      	mov	r3, r2
 8009692:	460a      	mov	r2, r1
 8009694:	4601      	mov	r1, r0
 8009696:	4803      	ldr	r0, [pc, #12]	; (80096a4 <vsniprintf+0x18>)
 8009698:	6800      	ldr	r0, [r0, #0]
 800969a:	f7ff ffcb 	bl	8009634 <_vsniprintf_r>
 800969e:	b003      	add	sp, #12
 80096a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80096a4:	20000184 	.word	0x20000184

080096a8 <_write_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	2200      	movs	r2, #0
 80096b2:	4d05      	ldr	r5, [pc, #20]	; (80096c8 <_write_r+0x20>)
 80096b4:	602a      	str	r2, [r5, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f7f7 fb22 	bl	8000d00 <_write>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_write_r+0x1e>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_write_r+0x1e>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	20001538 	.word	0x20001538

080096cc <__assert_func>:
 80096cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ce:	4614      	mov	r4, r2
 80096d0:	461a      	mov	r2, r3
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <__assert_func+0x2c>)
 80096d4:	4605      	mov	r5, r0
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68d8      	ldr	r0, [r3, #12]
 80096da:	b14c      	cbz	r4, 80096f0 <__assert_func+0x24>
 80096dc:	4b07      	ldr	r3, [pc, #28]	; (80096fc <__assert_func+0x30>)
 80096de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e2:	9100      	str	r1, [sp, #0]
 80096e4:	462b      	mov	r3, r5
 80096e6:	4906      	ldr	r1, [pc, #24]	; (8009700 <__assert_func+0x34>)
 80096e8:	f000 f81e 	bl	8009728 <fiprintf>
 80096ec:	f001 fad8 	bl	800aca0 <abort>
 80096f0:	4b04      	ldr	r3, [pc, #16]	; (8009704 <__assert_func+0x38>)
 80096f2:	461c      	mov	r4, r3
 80096f4:	e7f3      	b.n	80096de <__assert_func+0x12>
 80096f6:	bf00      	nop
 80096f8:	20000184 	.word	0x20000184
 80096fc:	0800b438 	.word	0x0800b438
 8009700:	0800b445 	.word	0x0800b445
 8009704:	0800b473 	.word	0x0800b473

08009708 <_close_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	2300      	movs	r3, #0
 800970c:	4d05      	ldr	r5, [pc, #20]	; (8009724 <_close_r+0x1c>)
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f7 fb10 	bl	8000d38 <_close>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_close_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_close_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20001538 	.word	0x20001538

08009728 <fiprintf>:
 8009728:	b40e      	push	{r1, r2, r3}
 800972a:	b503      	push	{r0, r1, lr}
 800972c:	4601      	mov	r1, r0
 800972e:	ab03      	add	r3, sp, #12
 8009730:	4805      	ldr	r0, [pc, #20]	; (8009748 <fiprintf+0x20>)
 8009732:	f853 2b04 	ldr.w	r2, [r3], #4
 8009736:	6800      	ldr	r0, [r0, #0]
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	f000 fc55 	bl	8009fe8 <_vfiprintf_r>
 800973e:	b002      	add	sp, #8
 8009740:	f85d eb04 	ldr.w	lr, [sp], #4
 8009744:	b003      	add	sp, #12
 8009746:	4770      	bx	lr
 8009748:	20000184 	.word	0x20000184

0800974c <_lseek_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	2200      	movs	r2, #0
 8009756:	4d05      	ldr	r5, [pc, #20]	; (800976c <_lseek_r+0x20>)
 8009758:	602a      	str	r2, [r5, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	f7f7 fb10 	bl	8000d80 <_lseek>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_lseek_r+0x1e>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_lseek_r+0x1e>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20001538 	.word	0x20001538

08009770 <malloc>:
 8009770:	4b02      	ldr	r3, [pc, #8]	; (800977c <malloc+0xc>)
 8009772:	4601      	mov	r1, r0
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	f000 b86b 	b.w	8009850 <_malloc_r>
 800977a:	bf00      	nop
 800977c:	20000184 	.word	0x20000184

08009780 <_free_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4605      	mov	r5, r0
 8009784:	2900      	cmp	r1, #0
 8009786:	d040      	beq.n	800980a <_free_r+0x8a>
 8009788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800978c:	1f0c      	subs	r4, r1, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfb8      	it	lt
 8009792:	18e4      	addlt	r4, r4, r3
 8009794:	f001 fcd0 	bl	800b138 <__malloc_lock>
 8009798:	4a1c      	ldr	r2, [pc, #112]	; (800980c <_free_r+0x8c>)
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x2c>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	4628      	mov	r0, r5
 80097a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a8:	f001 bccc 	b.w	800b144 <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x42>
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	1821      	adds	r1, r4, r0
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1809      	addeq	r1, r1, r0
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x1e>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x4c>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x42>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1850      	adds	r0, r2, r1
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x6c>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	4401      	add	r1, r0
 80097d8:	1850      	adds	r0, r2, r1
 80097da:	4283      	cmp	r3, r0
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x22>
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4401      	add	r1, r0
 80097e6:	6011      	str	r1, [r2, #0]
 80097e8:	6053      	str	r3, [r2, #4]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x22>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x74>
 80097ee:	230c      	movs	r3, #12
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x22>
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	1821      	adds	r1, r4, r0
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf01      	itttt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	1809      	addeq	r1, r1, r0
 8009802:	6021      	streq	r1, [r4, #0]
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	6054      	str	r4, [r2, #4]
 8009808:	e7cb      	b.n	80097a2 <_free_r+0x22>
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20001530 	.word	0x20001530

08009810 <sbrk_aligned>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4e0e      	ldr	r6, [pc, #56]	; (800984c <sbrk_aligned+0x3c>)
 8009814:	460c      	mov	r4, r1
 8009816:	6831      	ldr	r1, [r6, #0]
 8009818:	4605      	mov	r5, r0
 800981a:	b911      	cbnz	r1, 8009822 <sbrk_aligned+0x12>
 800981c:	f001 f80e 	bl	800a83c <_sbrk_r>
 8009820:	6030      	str	r0, [r6, #0]
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f001 f809 	bl	800a83c <_sbrk_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d00a      	beq.n	8009844 <sbrk_aligned+0x34>
 800982e:	1cc4      	adds	r4, r0, #3
 8009830:	f024 0403 	bic.w	r4, r4, #3
 8009834:	42a0      	cmp	r0, r4
 8009836:	d007      	beq.n	8009848 <sbrk_aligned+0x38>
 8009838:	1a21      	subs	r1, r4, r0
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fffe 	bl	800a83c <_sbrk_r>
 8009840:	3001      	adds	r0, #1
 8009842:	d101      	bne.n	8009848 <sbrk_aligned+0x38>
 8009844:	f04f 34ff 	mov.w	r4, #4294967295
 8009848:	4620      	mov	r0, r4
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	20001534 	.word	0x20001534

08009850 <_malloc_r>:
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	1ccd      	adds	r5, r1, #3
 8009856:	f025 0503 	bic.w	r5, r5, #3
 800985a:	3508      	adds	r5, #8
 800985c:	2d0c      	cmp	r5, #12
 800985e:	bf38      	it	cc
 8009860:	250c      	movcc	r5, #12
 8009862:	2d00      	cmp	r5, #0
 8009864:	4607      	mov	r7, r0
 8009866:	db01      	blt.n	800986c <_malloc_r+0x1c>
 8009868:	42a9      	cmp	r1, r5
 800986a:	d905      	bls.n	8009878 <_malloc_r+0x28>
 800986c:	230c      	movs	r3, #12
 800986e:	2600      	movs	r6, #0
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	4630      	mov	r0, r6
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	4e2e      	ldr	r6, [pc, #184]	; (8009934 <_malloc_r+0xe4>)
 800987a:	f001 fc5d 	bl	800b138 <__malloc_lock>
 800987e:	6833      	ldr	r3, [r6, #0]
 8009880:	461c      	mov	r4, r3
 8009882:	bb34      	cbnz	r4, 80098d2 <_malloc_r+0x82>
 8009884:	4629      	mov	r1, r5
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff ffc2 	bl	8009810 <sbrk_aligned>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	4604      	mov	r4, r0
 8009890:	d14d      	bne.n	800992e <_malloc_r+0xde>
 8009892:	6834      	ldr	r4, [r6, #0]
 8009894:	4626      	mov	r6, r4
 8009896:	2e00      	cmp	r6, #0
 8009898:	d140      	bne.n	800991c <_malloc_r+0xcc>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	4631      	mov	r1, r6
 800989e:	4638      	mov	r0, r7
 80098a0:	eb04 0803 	add.w	r8, r4, r3
 80098a4:	f000 ffca 	bl	800a83c <_sbrk_r>
 80098a8:	4580      	cmp	r8, r0
 80098aa:	d13a      	bne.n	8009922 <_malloc_r+0xd2>
 80098ac:	6821      	ldr	r1, [r4, #0]
 80098ae:	3503      	adds	r5, #3
 80098b0:	1a6d      	subs	r5, r5, r1
 80098b2:	f025 0503 	bic.w	r5, r5, #3
 80098b6:	3508      	adds	r5, #8
 80098b8:	2d0c      	cmp	r5, #12
 80098ba:	bf38      	it	cc
 80098bc:	250c      	movcc	r5, #12
 80098be:	4638      	mov	r0, r7
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7ff ffa5 	bl	8009810 <sbrk_aligned>
 80098c6:	3001      	adds	r0, #1
 80098c8:	d02b      	beq.n	8009922 <_malloc_r+0xd2>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	442b      	add	r3, r5
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	e00e      	b.n	80098f0 <_malloc_r+0xa0>
 80098d2:	6822      	ldr	r2, [r4, #0]
 80098d4:	1b52      	subs	r2, r2, r5
 80098d6:	d41e      	bmi.n	8009916 <_malloc_r+0xc6>
 80098d8:	2a0b      	cmp	r2, #11
 80098da:	d916      	bls.n	800990a <_malloc_r+0xba>
 80098dc:	1961      	adds	r1, r4, r5
 80098de:	42a3      	cmp	r3, r4
 80098e0:	6025      	str	r5, [r4, #0]
 80098e2:	bf18      	it	ne
 80098e4:	6059      	strne	r1, [r3, #4]
 80098e6:	6863      	ldr	r3, [r4, #4]
 80098e8:	bf08      	it	eq
 80098ea:	6031      	streq	r1, [r6, #0]
 80098ec:	5162      	str	r2, [r4, r5]
 80098ee:	604b      	str	r3, [r1, #4]
 80098f0:	4638      	mov	r0, r7
 80098f2:	f104 060b 	add.w	r6, r4, #11
 80098f6:	f001 fc25 	bl	800b144 <__malloc_unlock>
 80098fa:	f026 0607 	bic.w	r6, r6, #7
 80098fe:	1d23      	adds	r3, r4, #4
 8009900:	1af2      	subs	r2, r6, r3
 8009902:	d0b6      	beq.n	8009872 <_malloc_r+0x22>
 8009904:	1b9b      	subs	r3, r3, r6
 8009906:	50a3      	str	r3, [r4, r2]
 8009908:	e7b3      	b.n	8009872 <_malloc_r+0x22>
 800990a:	6862      	ldr	r2, [r4, #4]
 800990c:	42a3      	cmp	r3, r4
 800990e:	bf0c      	ite	eq
 8009910:	6032      	streq	r2, [r6, #0]
 8009912:	605a      	strne	r2, [r3, #4]
 8009914:	e7ec      	b.n	80098f0 <_malloc_r+0xa0>
 8009916:	4623      	mov	r3, r4
 8009918:	6864      	ldr	r4, [r4, #4]
 800991a:	e7b2      	b.n	8009882 <_malloc_r+0x32>
 800991c:	4634      	mov	r4, r6
 800991e:	6876      	ldr	r6, [r6, #4]
 8009920:	e7b9      	b.n	8009896 <_malloc_r+0x46>
 8009922:	230c      	movs	r3, #12
 8009924:	4638      	mov	r0, r7
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	f001 fc0c 	bl	800b144 <__malloc_unlock>
 800992c:	e7a1      	b.n	8009872 <_malloc_r+0x22>
 800992e:	6025      	str	r5, [r4, #0]
 8009930:	e7de      	b.n	80098f0 <_malloc_r+0xa0>
 8009932:	bf00      	nop
 8009934:	20001530 	.word	0x20001530

08009938 <__ssputs_r>:
 8009938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	688e      	ldr	r6, [r1, #8]
 800993e:	4682      	mov	sl, r0
 8009940:	429e      	cmp	r6, r3
 8009942:	460c      	mov	r4, r1
 8009944:	4690      	mov	r8, r2
 8009946:	461f      	mov	r7, r3
 8009948:	d838      	bhi.n	80099bc <__ssputs_r+0x84>
 800994a:	898a      	ldrh	r2, [r1, #12]
 800994c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009950:	d032      	beq.n	80099b8 <__ssputs_r+0x80>
 8009952:	6825      	ldr	r5, [r4, #0]
 8009954:	6909      	ldr	r1, [r1, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	eba5 0901 	sub.w	r9, r5, r1
 800995c:	6965      	ldr	r5, [r4, #20]
 800995e:	444b      	add	r3, r9
 8009960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009968:	106d      	asrs	r5, r5, #1
 800996a:	429d      	cmp	r5, r3
 800996c:	bf38      	it	cc
 800996e:	461d      	movcc	r5, r3
 8009970:	0553      	lsls	r3, r2, #21
 8009972:	d531      	bpl.n	80099d8 <__ssputs_r+0xa0>
 8009974:	4629      	mov	r1, r5
 8009976:	f7ff ff6b 	bl	8009850 <_malloc_r>
 800997a:	4606      	mov	r6, r0
 800997c:	b950      	cbnz	r0, 8009994 <__ssputs_r+0x5c>
 800997e:	230c      	movs	r3, #12
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	f8ca 3000 	str.w	r3, [sl]
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009994:	464a      	mov	r2, r9
 8009996:	6921      	ldr	r1, [r4, #16]
 8009998:	f7ff fd6a 	bl	8009470 <memcpy>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	6126      	str	r6, [r4, #16]
 80099aa:	444e      	add	r6, r9
 80099ac:	6026      	str	r6, [r4, #0]
 80099ae:	463e      	mov	r6, r7
 80099b0:	6165      	str	r5, [r4, #20]
 80099b2:	eba5 0509 	sub.w	r5, r5, r9
 80099b6:	60a5      	str	r5, [r4, #8]
 80099b8:	42be      	cmp	r6, r7
 80099ba:	d900      	bls.n	80099be <__ssputs_r+0x86>
 80099bc:	463e      	mov	r6, r7
 80099be:	4632      	mov	r2, r6
 80099c0:	4641      	mov	r1, r8
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	f001 fb9e 	bl	800b104 <memmove>
 80099c8:	68a3      	ldr	r3, [r4, #8]
 80099ca:	2000      	movs	r0, #0
 80099cc:	1b9b      	subs	r3, r3, r6
 80099ce:	60a3      	str	r3, [r4, #8]
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	4433      	add	r3, r6
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	e7db      	b.n	8009990 <__ssputs_r+0x58>
 80099d8:	462a      	mov	r2, r5
 80099da:	f001 fbb9 	bl	800b150 <_realloc_r>
 80099de:	4606      	mov	r6, r0
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1e1      	bne.n	80099a8 <__ssputs_r+0x70>
 80099e4:	4650      	mov	r0, sl
 80099e6:	6921      	ldr	r1, [r4, #16]
 80099e8:	f7ff feca 	bl	8009780 <_free_r>
 80099ec:	e7c7      	b.n	800997e <__ssputs_r+0x46>
	...

080099f0 <_svfiprintf_r>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	4698      	mov	r8, r3
 80099f6:	898b      	ldrh	r3, [r1, #12]
 80099f8:	4607      	mov	r7, r0
 80099fa:	061b      	lsls	r3, r3, #24
 80099fc:	460d      	mov	r5, r1
 80099fe:	4614      	mov	r4, r2
 8009a00:	b09d      	sub	sp, #116	; 0x74
 8009a02:	d50e      	bpl.n	8009a22 <_svfiprintf_r+0x32>
 8009a04:	690b      	ldr	r3, [r1, #16]
 8009a06:	b963      	cbnz	r3, 8009a22 <_svfiprintf_r+0x32>
 8009a08:	2140      	movs	r1, #64	; 0x40
 8009a0a:	f7ff ff21 	bl	8009850 <_malloc_r>
 8009a0e:	6028      	str	r0, [r5, #0]
 8009a10:	6128      	str	r0, [r5, #16]
 8009a12:	b920      	cbnz	r0, 8009a1e <_svfiprintf_r+0x2e>
 8009a14:	230c      	movs	r3, #12
 8009a16:	603b      	str	r3, [r7, #0]
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	e0d1      	b.n	8009bc2 <_svfiprintf_r+0x1d2>
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	616b      	str	r3, [r5, #20]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9309      	str	r3, [sp, #36]	; 0x24
 8009a26:	2320      	movs	r3, #32
 8009a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a2c:	2330      	movs	r3, #48	; 0x30
 8009a2e:	f04f 0901 	mov.w	r9, #1
 8009a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bdc <_svfiprintf_r+0x1ec>
 8009a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a3e:	4623      	mov	r3, r4
 8009a40:	469a      	mov	sl, r3
 8009a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a46:	b10a      	cbz	r2, 8009a4c <_svfiprintf_r+0x5c>
 8009a48:	2a25      	cmp	r2, #37	; 0x25
 8009a4a:	d1f9      	bne.n	8009a40 <_svfiprintf_r+0x50>
 8009a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a50:	d00b      	beq.n	8009a6a <_svfiprintf_r+0x7a>
 8009a52:	465b      	mov	r3, fp
 8009a54:	4622      	mov	r2, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff ff6d 	bl	8009938 <__ssputs_r>
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f000 80aa 	beq.w	8009bb8 <_svfiprintf_r+0x1c8>
 8009a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a66:	445a      	add	r2, fp
 8009a68:	9209      	str	r2, [sp, #36]	; 0x24
 8009a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80a2 	beq.w	8009bb8 <_svfiprintf_r+0x1c8>
 8009a74:	2300      	movs	r3, #0
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a7e:	f10a 0a01 	add.w	sl, sl, #1
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a8c:	4654      	mov	r4, sl
 8009a8e:	2205      	movs	r2, #5
 8009a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a94:	4851      	ldr	r0, [pc, #324]	; (8009bdc <_svfiprintf_r+0x1ec>)
 8009a96:	f001 fb27 	bl	800b0e8 <memchr>
 8009a9a:	9a04      	ldr	r2, [sp, #16]
 8009a9c:	b9d8      	cbnz	r0, 8009ad6 <_svfiprintf_r+0xe6>
 8009a9e:	06d0      	lsls	r0, r2, #27
 8009aa0:	bf44      	itt	mi
 8009aa2:	2320      	movmi	r3, #32
 8009aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa8:	0711      	lsls	r1, r2, #28
 8009aaa:	bf44      	itt	mi
 8009aac:	232b      	movmi	r3, #43	; 0x2b
 8009aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab8:	d015      	beq.n	8009ae6 <_svfiprintf_r+0xf6>
 8009aba:	4654      	mov	r4, sl
 8009abc:	2000      	movs	r0, #0
 8009abe:	f04f 0c0a 	mov.w	ip, #10
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aca:	3b30      	subs	r3, #48	; 0x30
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d94e      	bls.n	8009b6e <_svfiprintf_r+0x17e>
 8009ad0:	b1b0      	cbz	r0, 8009b00 <_svfiprintf_r+0x110>
 8009ad2:	9207      	str	r2, [sp, #28]
 8009ad4:	e014      	b.n	8009b00 <_svfiprintf_r+0x110>
 8009ad6:	eba0 0308 	sub.w	r3, r0, r8
 8009ada:	fa09 f303 	lsl.w	r3, r9, r3
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	46a2      	mov	sl, r4
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	e7d2      	b.n	8009a8c <_svfiprintf_r+0x9c>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	9103      	str	r1, [sp, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfbb      	ittet	lt
 8009af2:	425b      	neglt	r3, r3
 8009af4:	f042 0202 	orrlt.w	r2, r2, #2
 8009af8:	9307      	strge	r3, [sp, #28]
 8009afa:	9307      	strlt	r3, [sp, #28]
 8009afc:	bfb8      	it	lt
 8009afe:	9204      	strlt	r2, [sp, #16]
 8009b00:	7823      	ldrb	r3, [r4, #0]
 8009b02:	2b2e      	cmp	r3, #46	; 0x2e
 8009b04:	d10c      	bne.n	8009b20 <_svfiprintf_r+0x130>
 8009b06:	7863      	ldrb	r3, [r4, #1]
 8009b08:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0a:	d135      	bne.n	8009b78 <_svfiprintf_r+0x188>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	3402      	adds	r4, #2
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9203      	str	r2, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009be0 <_svfiprintf_r+0x1f0>
 8009b24:	2203      	movs	r2, #3
 8009b26:	4650      	mov	r0, sl
 8009b28:	7821      	ldrb	r1, [r4, #0]
 8009b2a:	f001 fadd 	bl	800b0e8 <memchr>
 8009b2e:	b140      	cbz	r0, 8009b42 <_svfiprintf_r+0x152>
 8009b30:	2340      	movs	r3, #64	; 0x40
 8009b32:	eba0 000a 	sub.w	r0, r0, sl
 8009b36:	fa03 f000 	lsl.w	r0, r3, r0
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	3401      	adds	r4, #1
 8009b3e:	4303      	orrs	r3, r0
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b46:	2206      	movs	r2, #6
 8009b48:	4826      	ldr	r0, [pc, #152]	; (8009be4 <_svfiprintf_r+0x1f4>)
 8009b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b4e:	f001 facb 	bl	800b0e8 <memchr>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d038      	beq.n	8009bc8 <_svfiprintf_r+0x1d8>
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <_svfiprintf_r+0x1f8>)
 8009b58:	bb1b      	cbnz	r3, 8009ba2 <_svfiprintf_r+0x1b2>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	3307      	adds	r3, #7
 8009b5e:	f023 0307 	bic.w	r3, r3, #7
 8009b62:	3308      	adds	r3, #8
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b68:	4433      	add	r3, r6
 8009b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6c:	e767      	b.n	8009a3e <_svfiprintf_r+0x4e>
 8009b6e:	460c      	mov	r4, r1
 8009b70:	2001      	movs	r0, #1
 8009b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b76:	e7a5      	b.n	8009ac4 <_svfiprintf_r+0xd4>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f04f 0c0a 	mov.w	ip, #10
 8009b7e:	4619      	mov	r1, r3
 8009b80:	3401      	adds	r4, #1
 8009b82:	9305      	str	r3, [sp, #20]
 8009b84:	4620      	mov	r0, r4
 8009b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8a:	3a30      	subs	r2, #48	; 0x30
 8009b8c:	2a09      	cmp	r2, #9
 8009b8e:	d903      	bls.n	8009b98 <_svfiprintf_r+0x1a8>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0c5      	beq.n	8009b20 <_svfiprintf_r+0x130>
 8009b94:	9105      	str	r1, [sp, #20]
 8009b96:	e7c3      	b.n	8009b20 <_svfiprintf_r+0x130>
 8009b98:	4604      	mov	r4, r0
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ba0:	e7f0      	b.n	8009b84 <_svfiprintf_r+0x194>
 8009ba2:	ab03      	add	r3, sp, #12
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	4638      	mov	r0, r7
 8009baa:	4b10      	ldr	r3, [pc, #64]	; (8009bec <_svfiprintf_r+0x1fc>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	f3af 8000 	nop.w
 8009bb2:	1c42      	adds	r2, r0, #1
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	d1d6      	bne.n	8009b66 <_svfiprintf_r+0x176>
 8009bb8:	89ab      	ldrh	r3, [r5, #12]
 8009bba:	065b      	lsls	r3, r3, #25
 8009bbc:	f53f af2c 	bmi.w	8009a18 <_svfiprintf_r+0x28>
 8009bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc2:	b01d      	add	sp, #116	; 0x74
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	ab03      	add	r3, sp, #12
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	462a      	mov	r2, r5
 8009bce:	4638      	mov	r0, r7
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <_svfiprintf_r+0x1fc>)
 8009bd2:	a904      	add	r1, sp, #16
 8009bd4:	f000 fba8 	bl	800a328 <_printf_i>
 8009bd8:	e7eb      	b.n	8009bb2 <_svfiprintf_r+0x1c2>
 8009bda:	bf00      	nop
 8009bdc:	0800b474 	.word	0x0800b474
 8009be0:	0800b47a 	.word	0x0800b47a
 8009be4:	0800b47e 	.word	0x0800b47e
 8009be8:	00000000 	.word	0x00000000
 8009bec:	08009939 	.word	0x08009939

08009bf0 <_sungetc_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	1c4b      	adds	r3, r1, #1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	d103      	bne.n	8009c00 <_sungetc_r+0x10>
 8009bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	8993      	ldrh	r3, [r2, #12]
 8009c02:	b2cd      	uxtb	r5, r1
 8009c04:	f023 0320 	bic.w	r3, r3, #32
 8009c08:	8193      	strh	r3, [r2, #12]
 8009c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c0c:	6852      	ldr	r2, [r2, #4]
 8009c0e:	b18b      	cbz	r3, 8009c34 <_sungetc_r+0x44>
 8009c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c12:	4293      	cmp	r3, r2
 8009c14:	dd08      	ble.n	8009c28 <_sungetc_r+0x38>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	1e5a      	subs	r2, r3, #1
 8009c1a:	6022      	str	r2, [r4, #0]
 8009c1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	3301      	adds	r3, #1
 8009c24:	6063      	str	r3, [r4, #4]
 8009c26:	e7e9      	b.n	8009bfc <_sungetc_r+0xc>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	f000 ff41 	bl	800aab0 <__submore>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d0f1      	beq.n	8009c16 <_sungetc_r+0x26>
 8009c32:	e7e1      	b.n	8009bf8 <_sungetc_r+0x8>
 8009c34:	6921      	ldr	r1, [r4, #16]
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	b151      	cbz	r1, 8009c50 <_sungetc_r+0x60>
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	d208      	bcs.n	8009c50 <_sungetc_r+0x60>
 8009c3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009c42:	42a9      	cmp	r1, r5
 8009c44:	d104      	bne.n	8009c50 <_sungetc_r+0x60>
 8009c46:	3b01      	subs	r3, #1
 8009c48:	3201      	adds	r2, #1
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	6062      	str	r2, [r4, #4]
 8009c4e:	e7d5      	b.n	8009bfc <_sungetc_r+0xc>
 8009c50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c58:	6363      	str	r3, [r4, #52]	; 0x34
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c5e:	4623      	mov	r3, r4
 8009c60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2301      	movs	r3, #1
 8009c68:	e7dc      	b.n	8009c24 <_sungetc_r+0x34>

08009c6a <__ssrefill_r>:
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c70:	b169      	cbz	r1, 8009c8e <__ssrefill_r+0x24>
 8009c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c76:	4299      	cmp	r1, r3
 8009c78:	d001      	beq.n	8009c7e <__ssrefill_r+0x14>
 8009c7a:	f7ff fd81 	bl	8009780 <_free_r>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c82:	6360      	str	r0, [r4, #52]	; 0x34
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	b113      	cbz	r3, 8009c8e <__ssrefill_r+0x24>
 8009c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	bd10      	pop	{r4, pc}
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	6063      	str	r3, [r4, #4]
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f043 0320 	orr.w	r3, r3, #32
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	e7f3      	b.n	8009c8c <__ssrefill_r+0x22>

08009ca4 <__ssvfiscanf_r>:
 8009ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca8:	460c      	mov	r4, r1
 8009caa:	2100      	movs	r1, #0
 8009cac:	4606      	mov	r6, r0
 8009cae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009cb2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009cb6:	49a7      	ldr	r1, [pc, #668]	; (8009f54 <__ssvfiscanf_r+0x2b0>)
 8009cb8:	f10d 0804 	add.w	r8, sp, #4
 8009cbc:	91a0      	str	r1, [sp, #640]	; 0x280
 8009cbe:	49a6      	ldr	r1, [pc, #664]	; (8009f58 <__ssvfiscanf_r+0x2b4>)
 8009cc0:	4fa6      	ldr	r7, [pc, #664]	; (8009f5c <__ssvfiscanf_r+0x2b8>)
 8009cc2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009f60 <__ssvfiscanf_r+0x2bc>
 8009cc6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009cca:	91a1      	str	r1, [sp, #644]	; 0x284
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	7813      	ldrb	r3, [r2, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 815c 	beq.w	8009f8e <__ssvfiscanf_r+0x2ea>
 8009cd6:	5dd9      	ldrb	r1, [r3, r7]
 8009cd8:	1c55      	adds	r5, r2, #1
 8009cda:	f011 0108 	ands.w	r1, r1, #8
 8009cde:	d019      	beq.n	8009d14 <__ssvfiscanf_r+0x70>
 8009ce0:	6863      	ldr	r3, [r4, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd0f      	ble.n	8009d06 <__ssvfiscanf_r+0x62>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	5cba      	ldrb	r2, [r7, r2]
 8009cec:	0712      	lsls	r2, r2, #28
 8009cee:	d401      	bmi.n	8009cf4 <__ssvfiscanf_r+0x50>
 8009cf0:	462a      	mov	r2, r5
 8009cf2:	e7ec      	b.n	8009cce <__ssvfiscanf_r+0x2a>
 8009cf4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	9245      	str	r2, [sp, #276]	; 0x114
 8009cfc:	6862      	ldr	r2, [r4, #4]
 8009cfe:	6023      	str	r3, [r4, #0]
 8009d00:	3a01      	subs	r2, #1
 8009d02:	6062      	str	r2, [r4, #4]
 8009d04:	e7ec      	b.n	8009ce0 <__ssvfiscanf_r+0x3c>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4630      	mov	r0, r6
 8009d0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d0c:	4798      	blx	r3
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d0e9      	beq.n	8009ce6 <__ssvfiscanf_r+0x42>
 8009d12:	e7ed      	b.n	8009cf0 <__ssvfiscanf_r+0x4c>
 8009d14:	2b25      	cmp	r3, #37	; 0x25
 8009d16:	d012      	beq.n	8009d3e <__ssvfiscanf_r+0x9a>
 8009d18:	469a      	mov	sl, r3
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f340 8094 	ble.w	8009e4a <__ssvfiscanf_r+0x1a6>
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	7813      	ldrb	r3, [r2, #0]
 8009d26:	4553      	cmp	r3, sl
 8009d28:	f040 8131 	bne.w	8009f8e <__ssvfiscanf_r+0x2ea>
 8009d2c:	6863      	ldr	r3, [r4, #4]
 8009d2e:	3201      	adds	r2, #1
 8009d30:	3b01      	subs	r3, #1
 8009d32:	6063      	str	r3, [r4, #4]
 8009d34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009d36:	6022      	str	r2, [r4, #0]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	9345      	str	r3, [sp, #276]	; 0x114
 8009d3c:	e7d8      	b.n	8009cf0 <__ssvfiscanf_r+0x4c>
 8009d3e:	9141      	str	r1, [sp, #260]	; 0x104
 8009d40:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d42:	7853      	ldrb	r3, [r2, #1]
 8009d44:	2b2a      	cmp	r3, #42	; 0x2a
 8009d46:	bf04      	itt	eq
 8009d48:	2310      	moveq	r3, #16
 8009d4a:	1c95      	addeq	r5, r2, #2
 8009d4c:	f04f 020a 	mov.w	r2, #10
 8009d50:	bf08      	it	eq
 8009d52:	9341      	streq	r3, [sp, #260]	; 0x104
 8009d54:	46aa      	mov	sl, r5
 8009d56:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009d5a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d91d      	bls.n	8009d9e <__ssvfiscanf_r+0xfa>
 8009d62:	2203      	movs	r2, #3
 8009d64:	487e      	ldr	r0, [pc, #504]	; (8009f60 <__ssvfiscanf_r+0x2bc>)
 8009d66:	f001 f9bf 	bl	800b0e8 <memchr>
 8009d6a:	b140      	cbz	r0, 8009d7e <__ssvfiscanf_r+0xda>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4655      	mov	r5, sl
 8009d70:	eba0 0009 	sub.w	r0, r0, r9
 8009d74:	fa03 f000 	lsl.w	r0, r3, r0
 8009d78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d7a:	4318      	orrs	r0, r3
 8009d7c:	9041      	str	r0, [sp, #260]	; 0x104
 8009d7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d82:	2b78      	cmp	r3, #120	; 0x78
 8009d84:	d806      	bhi.n	8009d94 <__ssvfiscanf_r+0xf0>
 8009d86:	2b57      	cmp	r3, #87	; 0x57
 8009d88:	d810      	bhi.n	8009dac <__ssvfiscanf_r+0x108>
 8009d8a:	2b25      	cmp	r3, #37	; 0x25
 8009d8c:	d0c4      	beq.n	8009d18 <__ssvfiscanf_r+0x74>
 8009d8e:	d857      	bhi.n	8009e40 <__ssvfiscanf_r+0x19c>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d065      	beq.n	8009e60 <__ssvfiscanf_r+0x1bc>
 8009d94:	2303      	movs	r3, #3
 8009d96:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d98:	230a      	movs	r3, #10
 8009d9a:	9342      	str	r3, [sp, #264]	; 0x108
 8009d9c:	e072      	b.n	8009e84 <__ssvfiscanf_r+0x1e0>
 8009d9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009da0:	4655      	mov	r5, sl
 8009da2:	fb02 1103 	mla	r1, r2, r3, r1
 8009da6:	3930      	subs	r1, #48	; 0x30
 8009da8:	9143      	str	r1, [sp, #268]	; 0x10c
 8009daa:	e7d3      	b.n	8009d54 <__ssvfiscanf_r+0xb0>
 8009dac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009db0:	2a20      	cmp	r2, #32
 8009db2:	d8ef      	bhi.n	8009d94 <__ssvfiscanf_r+0xf0>
 8009db4:	a101      	add	r1, pc, #4	; (adr r1, 8009dbc <__ssvfiscanf_r+0x118>)
 8009db6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009dba:	bf00      	nop
 8009dbc:	08009e6f 	.word	0x08009e6f
 8009dc0:	08009d95 	.word	0x08009d95
 8009dc4:	08009d95 	.word	0x08009d95
 8009dc8:	08009ecd 	.word	0x08009ecd
 8009dcc:	08009d95 	.word	0x08009d95
 8009dd0:	08009d95 	.word	0x08009d95
 8009dd4:	08009d95 	.word	0x08009d95
 8009dd8:	08009d95 	.word	0x08009d95
 8009ddc:	08009d95 	.word	0x08009d95
 8009de0:	08009d95 	.word	0x08009d95
 8009de4:	08009d95 	.word	0x08009d95
 8009de8:	08009ee3 	.word	0x08009ee3
 8009dec:	08009eb9 	.word	0x08009eb9
 8009df0:	08009e47 	.word	0x08009e47
 8009df4:	08009e47 	.word	0x08009e47
 8009df8:	08009e47 	.word	0x08009e47
 8009dfc:	08009d95 	.word	0x08009d95
 8009e00:	08009ebd 	.word	0x08009ebd
 8009e04:	08009d95 	.word	0x08009d95
 8009e08:	08009d95 	.word	0x08009d95
 8009e0c:	08009d95 	.word	0x08009d95
 8009e10:	08009d95 	.word	0x08009d95
 8009e14:	08009ef3 	.word	0x08009ef3
 8009e18:	08009ec5 	.word	0x08009ec5
 8009e1c:	08009e67 	.word	0x08009e67
 8009e20:	08009d95 	.word	0x08009d95
 8009e24:	08009d95 	.word	0x08009d95
 8009e28:	08009eef 	.word	0x08009eef
 8009e2c:	08009d95 	.word	0x08009d95
 8009e30:	08009eb9 	.word	0x08009eb9
 8009e34:	08009d95 	.word	0x08009d95
 8009e38:	08009d95 	.word	0x08009d95
 8009e3c:	08009e6f 	.word	0x08009e6f
 8009e40:	3b45      	subs	r3, #69	; 0x45
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d8a6      	bhi.n	8009d94 <__ssvfiscanf_r+0xf0>
 8009e46:	2305      	movs	r3, #5
 8009e48:	e01b      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e50:	4798      	blx	r3
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f43f af65 	beq.w	8009d22 <__ssvfiscanf_r+0x7e>
 8009e58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f040 808d 	bne.w	8009f7a <__ssvfiscanf_r+0x2d6>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	e08f      	b.n	8009f86 <__ssvfiscanf_r+0x2e2>
 8009e66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e68:	f042 0220 	orr.w	r2, r2, #32
 8009e6c:	9241      	str	r2, [sp, #260]	; 0x104
 8009e6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e74:	9241      	str	r2, [sp, #260]	; 0x104
 8009e76:	2210      	movs	r2, #16
 8009e78:	2b6f      	cmp	r3, #111	; 0x6f
 8009e7a:	bf34      	ite	cc
 8009e7c:	2303      	movcc	r3, #3
 8009e7e:	2304      	movcs	r3, #4
 8009e80:	9242      	str	r2, [sp, #264]	; 0x108
 8009e82:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd42      	ble.n	8009f10 <__ssvfiscanf_r+0x26c>
 8009e8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e8c:	0659      	lsls	r1, r3, #25
 8009e8e:	d404      	bmi.n	8009e9a <__ssvfiscanf_r+0x1f6>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	5cba      	ldrb	r2, [r7, r2]
 8009e96:	0712      	lsls	r2, r2, #28
 8009e98:	d441      	bmi.n	8009f1e <__ssvfiscanf_r+0x27a>
 8009e9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	dc50      	bgt.n	8009f42 <__ssvfiscanf_r+0x29e>
 8009ea0:	466b      	mov	r3, sp
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	a941      	add	r1, sp, #260	; 0x104
 8009ea8:	f000 fb64 	bl	800a574 <_scanf_chars>
 8009eac:	2801      	cmp	r0, #1
 8009eae:	d06e      	beq.n	8009f8e <__ssvfiscanf_r+0x2ea>
 8009eb0:	2802      	cmp	r0, #2
 8009eb2:	f47f af1d 	bne.w	8009cf0 <__ssvfiscanf_r+0x4c>
 8009eb6:	e7cf      	b.n	8009e58 <__ssvfiscanf_r+0x1b4>
 8009eb8:	220a      	movs	r2, #10
 8009eba:	e7dd      	b.n	8009e78 <__ssvfiscanf_r+0x1d4>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9342      	str	r3, [sp, #264]	; 0x108
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e7de      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	9342      	str	r3, [sp, #264]	; 0x108
 8009ec8:	2304      	movs	r3, #4
 8009eca:	e7da      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4640      	mov	r0, r8
 8009ed0:	f000 fcc4 	bl	800a85c <__sccl>
 8009ed4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009edc:	9341      	str	r3, [sp, #260]	; 0x104
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7cf      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009ee2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee8:	9341      	str	r3, [sp, #260]	; 0x104
 8009eea:	2300      	movs	r3, #0
 8009eec:	e7c9      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e7c7      	b.n	8009e82 <__ssvfiscanf_r+0x1de>
 8009ef2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009ef4:	06c3      	lsls	r3, r0, #27
 8009ef6:	f53f aefb 	bmi.w	8009cf0 <__ssvfiscanf_r+0x4c>
 8009efa:	9b00      	ldr	r3, [sp, #0]
 8009efc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009efe:	1d19      	adds	r1, r3, #4
 8009f00:	9100      	str	r1, [sp, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f010 0f01 	tst.w	r0, #1
 8009f08:	bf14      	ite	ne
 8009f0a:	801a      	strhne	r2, [r3, #0]
 8009f0c:	601a      	streq	r2, [r3, #0]
 8009f0e:	e6ef      	b.n	8009cf0 <__ssvfiscanf_r+0x4c>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f16:	4798      	blx	r3
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d0b6      	beq.n	8009e8a <__ssvfiscanf_r+0x1e6>
 8009f1c:	e79c      	b.n	8009e58 <__ssvfiscanf_r+0x1b4>
 8009f1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f20:	3201      	adds	r2, #1
 8009f22:	9245      	str	r2, [sp, #276]	; 0x114
 8009f24:	6862      	ldr	r2, [r4, #4]
 8009f26:	3a01      	subs	r2, #1
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	6062      	str	r2, [r4, #4]
 8009f2c:	dd02      	ble.n	8009f34 <__ssvfiscanf_r+0x290>
 8009f2e:	3301      	adds	r3, #1
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	e7ad      	b.n	8009e90 <__ssvfiscanf_r+0x1ec>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f3a:	4798      	blx	r3
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d0a7      	beq.n	8009e90 <__ssvfiscanf_r+0x1ec>
 8009f40:	e78a      	b.n	8009e58 <__ssvfiscanf_r+0x1b4>
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	dc0e      	bgt.n	8009f64 <__ssvfiscanf_r+0x2c0>
 8009f46:	466b      	mov	r3, sp
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	a941      	add	r1, sp, #260	; 0x104
 8009f4e:	f000 fb6b 	bl	800a628 <_scanf_i>
 8009f52:	e7ab      	b.n	8009eac <__ssvfiscanf_r+0x208>
 8009f54:	08009bf1 	.word	0x08009bf1
 8009f58:	08009c6b 	.word	0x08009c6b
 8009f5c:	0800b4c3 	.word	0x0800b4c3
 8009f60:	0800b47a 	.word	0x0800b47a
 8009f64:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <__ssvfiscanf_r+0x2f0>)
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f43f aec2 	beq.w	8009cf0 <__ssvfiscanf_r+0x4c>
 8009f6c:	466b      	mov	r3, sp
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4630      	mov	r0, r6
 8009f72:	a941      	add	r1, sp, #260	; 0x104
 8009f74:	f3af 8000 	nop.w
 8009f78:	e798      	b.n	8009eac <__ssvfiscanf_r+0x208>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f80:	bf18      	it	ne
 8009f82:	f04f 30ff 	movne.w	r0, #4294967295
 8009f86:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f90:	e7f9      	b.n	8009f86 <__ssvfiscanf_r+0x2e2>
 8009f92:	bf00      	nop
 8009f94:	00000000 	.word	0x00000000

08009f98 <__sfputc_r>:
 8009f98:	6893      	ldr	r3, [r2, #8]
 8009f9a:	b410      	push	{r4}
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	6093      	str	r3, [r2, #8]
 8009fa2:	da07      	bge.n	8009fb4 <__sfputc_r+0x1c>
 8009fa4:	6994      	ldr	r4, [r2, #24]
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	db01      	blt.n	8009fae <__sfputc_r+0x16>
 8009faa:	290a      	cmp	r1, #10
 8009fac:	d102      	bne.n	8009fb4 <__sfputc_r+0x1c>
 8009fae:	bc10      	pop	{r4}
 8009fb0:	f000 bdb6 	b.w	800ab20 <__swbuf_r>
 8009fb4:	6813      	ldr	r3, [r2, #0]
 8009fb6:	1c58      	adds	r0, r3, #1
 8009fb8:	6010      	str	r0, [r2, #0]
 8009fba:	7019      	strb	r1, [r3, #0]
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	bc10      	pop	{r4}
 8009fc0:	4770      	bx	lr

08009fc2 <__sfputs_r>:
 8009fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	18d5      	adds	r5, r2, r3
 8009fcc:	42ac      	cmp	r4, r5
 8009fce:	d101      	bne.n	8009fd4 <__sfputs_r+0x12>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e007      	b.n	8009fe4 <__sfputs_r+0x22>
 8009fd4:	463a      	mov	r2, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	f7ff ffdc 	bl	8009f98 <__sfputc_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d1f3      	bne.n	8009fcc <__sfputs_r+0xa>
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fe8 <_vfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	460d      	mov	r5, r1
 8009fee:	4614      	mov	r4, r2
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	b09d      	sub	sp, #116	; 0x74
 8009ff6:	b118      	cbz	r0, 800a000 <_vfiprintf_r+0x18>
 8009ff8:	6983      	ldr	r3, [r0, #24]
 8009ffa:	b90b      	cbnz	r3, 800a000 <_vfiprintf_r+0x18>
 8009ffc:	f000 ff6e 	bl	800aedc <__sinit>
 800a000:	4b89      	ldr	r3, [pc, #548]	; (800a228 <_vfiprintf_r+0x240>)
 800a002:	429d      	cmp	r5, r3
 800a004:	d11b      	bne.n	800a03e <_vfiprintf_r+0x56>
 800a006:	6875      	ldr	r5, [r6, #4]
 800a008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00a:	07d9      	lsls	r1, r3, #31
 800a00c:	d405      	bmi.n	800a01a <_vfiprintf_r+0x32>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	059a      	lsls	r2, r3, #22
 800a012:	d402      	bmi.n	800a01a <_vfiprintf_r+0x32>
 800a014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a016:	f000 ffff 	bl	800b018 <__retarget_lock_acquire_recursive>
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	071b      	lsls	r3, r3, #28
 800a01e:	d501      	bpl.n	800a024 <_vfiprintf_r+0x3c>
 800a020:	692b      	ldr	r3, [r5, #16]
 800a022:	b9eb      	cbnz	r3, 800a060 <_vfiprintf_r+0x78>
 800a024:	4629      	mov	r1, r5
 800a026:	4630      	mov	r0, r6
 800a028:	f000 fdcc 	bl	800abc4 <__swsetup_r>
 800a02c:	b1c0      	cbz	r0, 800a060 <_vfiprintf_r+0x78>
 800a02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a030:	07dc      	lsls	r4, r3, #31
 800a032:	d50e      	bpl.n	800a052 <_vfiprintf_r+0x6a>
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	b01d      	add	sp, #116	; 0x74
 800a03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03e:	4b7b      	ldr	r3, [pc, #492]	; (800a22c <_vfiprintf_r+0x244>)
 800a040:	429d      	cmp	r5, r3
 800a042:	d101      	bne.n	800a048 <_vfiprintf_r+0x60>
 800a044:	68b5      	ldr	r5, [r6, #8]
 800a046:	e7df      	b.n	800a008 <_vfiprintf_r+0x20>
 800a048:	4b79      	ldr	r3, [pc, #484]	; (800a230 <_vfiprintf_r+0x248>)
 800a04a:	429d      	cmp	r5, r3
 800a04c:	bf08      	it	eq
 800a04e:	68f5      	ldreq	r5, [r6, #12]
 800a050:	e7da      	b.n	800a008 <_vfiprintf_r+0x20>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	0598      	lsls	r0, r3, #22
 800a056:	d4ed      	bmi.n	800a034 <_vfiprintf_r+0x4c>
 800a058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05a:	f000 ffde 	bl	800b01a <__retarget_lock_release_recursive>
 800a05e:	e7e9      	b.n	800a034 <_vfiprintf_r+0x4c>
 800a060:	2300      	movs	r3, #0
 800a062:	9309      	str	r3, [sp, #36]	; 0x24
 800a064:	2320      	movs	r3, #32
 800a066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a06a:	2330      	movs	r3, #48	; 0x30
 800a06c:	f04f 0901 	mov.w	r9, #1
 800a070:	f8cd 800c 	str.w	r8, [sp, #12]
 800a074:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a234 <_vfiprintf_r+0x24c>
 800a078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a07c:	4623      	mov	r3, r4
 800a07e:	469a      	mov	sl, r3
 800a080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a084:	b10a      	cbz	r2, 800a08a <_vfiprintf_r+0xa2>
 800a086:	2a25      	cmp	r2, #37	; 0x25
 800a088:	d1f9      	bne.n	800a07e <_vfiprintf_r+0x96>
 800a08a:	ebba 0b04 	subs.w	fp, sl, r4
 800a08e:	d00b      	beq.n	800a0a8 <_vfiprintf_r+0xc0>
 800a090:	465b      	mov	r3, fp
 800a092:	4622      	mov	r2, r4
 800a094:	4629      	mov	r1, r5
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ff93 	bl	8009fc2 <__sfputs_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	f000 80aa 	beq.w	800a1f6 <_vfiprintf_r+0x20e>
 800a0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a4:	445a      	add	r2, fp
 800a0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 80a2 	beq.w	800a1f6 <_vfiprintf_r+0x20e>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0bc:	f10a 0a01 	add.w	sl, sl, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2205      	movs	r2, #5
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4858      	ldr	r0, [pc, #352]	; (800a234 <_vfiprintf_r+0x24c>)
 800a0d4:	f001 f808 	bl	800b0e8 <memchr>
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	b9d8      	cbnz	r0, 800a114 <_vfiprintf_r+0x12c>
 800a0dc:	06d1      	lsls	r1, r2, #27
 800a0de:	bf44      	itt	mi
 800a0e0:	2320      	movmi	r3, #32
 800a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e6:	0713      	lsls	r3, r2, #28
 800a0e8:	bf44      	itt	mi
 800a0ea:	232b      	movmi	r3, #43	; 0x2b
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f6:	d015      	beq.n	800a124 <_vfiprintf_r+0x13c>
 800a0f8:	4654      	mov	r4, sl
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f04f 0c0a 	mov.w	ip, #10
 800a100:	9a07      	ldr	r2, [sp, #28]
 800a102:	4621      	mov	r1, r4
 800a104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a108:	3b30      	subs	r3, #48	; 0x30
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	d94e      	bls.n	800a1ac <_vfiprintf_r+0x1c4>
 800a10e:	b1b0      	cbz	r0, 800a13e <_vfiprintf_r+0x156>
 800a110:	9207      	str	r2, [sp, #28]
 800a112:	e014      	b.n	800a13e <_vfiprintf_r+0x156>
 800a114:	eba0 0308 	sub.w	r3, r0, r8
 800a118:	fa09 f303 	lsl.w	r3, r9, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	46a2      	mov	sl, r4
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	e7d2      	b.n	800a0ca <_vfiprintf_r+0xe2>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	1d19      	adds	r1, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	9103      	str	r1, [sp, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbb      	ittet	lt
 800a130:	425b      	neglt	r3, r3
 800a132:	f042 0202 	orrlt.w	r2, r2, #2
 800a136:	9307      	strge	r3, [sp, #28]
 800a138:	9307      	strlt	r3, [sp, #28]
 800a13a:	bfb8      	it	lt
 800a13c:	9204      	strlt	r2, [sp, #16]
 800a13e:	7823      	ldrb	r3, [r4, #0]
 800a140:	2b2e      	cmp	r3, #46	; 0x2e
 800a142:	d10c      	bne.n	800a15e <_vfiprintf_r+0x176>
 800a144:	7863      	ldrb	r3, [r4, #1]
 800a146:	2b2a      	cmp	r3, #42	; 0x2a
 800a148:	d135      	bne.n	800a1b6 <_vfiprintf_r+0x1ce>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	3402      	adds	r4, #2
 800a14e:	1d1a      	adds	r2, r3, #4
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	9203      	str	r2, [sp, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfb8      	it	lt
 800a158:	f04f 33ff 	movlt.w	r3, #4294967295
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a238 <_vfiprintf_r+0x250>
 800a162:	2203      	movs	r2, #3
 800a164:	4650      	mov	r0, sl
 800a166:	7821      	ldrb	r1, [r4, #0]
 800a168:	f000 ffbe 	bl	800b0e8 <memchr>
 800a16c:	b140      	cbz	r0, 800a180 <_vfiprintf_r+0x198>
 800a16e:	2340      	movs	r3, #64	; 0x40
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	fa03 f000 	lsl.w	r0, r3, r0
 800a178:	9b04      	ldr	r3, [sp, #16]
 800a17a:	3401      	adds	r4, #1
 800a17c:	4303      	orrs	r3, r0
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a184:	2206      	movs	r2, #6
 800a186:	482d      	ldr	r0, [pc, #180]	; (800a23c <_vfiprintf_r+0x254>)
 800a188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18c:	f000 ffac 	bl	800b0e8 <memchr>
 800a190:	2800      	cmp	r0, #0
 800a192:	d03f      	beq.n	800a214 <_vfiprintf_r+0x22c>
 800a194:	4b2a      	ldr	r3, [pc, #168]	; (800a240 <_vfiprintf_r+0x258>)
 800a196:	bb1b      	cbnz	r3, 800a1e0 <_vfiprintf_r+0x1f8>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	3307      	adds	r3, #7
 800a19c:	f023 0307 	bic.w	r3, r3, #7
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	9303      	str	r3, [sp, #12]
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	443b      	add	r3, r7
 800a1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1aa:	e767      	b.n	800a07c <_vfiprintf_r+0x94>
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b4:	e7a5      	b.n	800a102 <_vfiprintf_r+0x11a>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f04f 0c0a 	mov.w	ip, #10
 800a1bc:	4619      	mov	r1, r3
 800a1be:	3401      	adds	r4, #1
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c8:	3a30      	subs	r2, #48	; 0x30
 800a1ca:	2a09      	cmp	r2, #9
 800a1cc:	d903      	bls.n	800a1d6 <_vfiprintf_r+0x1ee>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0c5      	beq.n	800a15e <_vfiprintf_r+0x176>
 800a1d2:	9105      	str	r1, [sp, #20]
 800a1d4:	e7c3      	b.n	800a15e <_vfiprintf_r+0x176>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	2301      	movs	r3, #1
 800a1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1de:	e7f0      	b.n	800a1c2 <_vfiprintf_r+0x1da>
 800a1e0:	ab03      	add	r3, sp, #12
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4b16      	ldr	r3, [pc, #88]	; (800a244 <_vfiprintf_r+0x25c>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	1c78      	adds	r0, r7, #1
 800a1f4:	d1d6      	bne.n	800a1a4 <_vfiprintf_r+0x1bc>
 800a1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f8:	07d9      	lsls	r1, r3, #31
 800a1fa:	d405      	bmi.n	800a208 <_vfiprintf_r+0x220>
 800a1fc:	89ab      	ldrh	r3, [r5, #12]
 800a1fe:	059a      	lsls	r2, r3, #22
 800a200:	d402      	bmi.n	800a208 <_vfiprintf_r+0x220>
 800a202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a204:	f000 ff09 	bl	800b01a <__retarget_lock_release_recursive>
 800a208:	89ab      	ldrh	r3, [r5, #12]
 800a20a:	065b      	lsls	r3, r3, #25
 800a20c:	f53f af12 	bmi.w	800a034 <_vfiprintf_r+0x4c>
 800a210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a212:	e711      	b.n	800a038 <_vfiprintf_r+0x50>
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	462a      	mov	r2, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <_vfiprintf_r+0x25c>)
 800a21e:	a904      	add	r1, sp, #16
 800a220:	f000 f882 	bl	800a328 <_printf_i>
 800a224:	e7e4      	b.n	800a1f0 <_vfiprintf_r+0x208>
 800a226:	bf00      	nop
 800a228:	0800b5e4 	.word	0x0800b5e4
 800a22c:	0800b604 	.word	0x0800b604
 800a230:	0800b5c4 	.word	0x0800b5c4
 800a234:	0800b474 	.word	0x0800b474
 800a238:	0800b47a 	.word	0x0800b47a
 800a23c:	0800b47e 	.word	0x0800b47e
 800a240:	00000000 	.word	0x00000000
 800a244:	08009fc3 	.word	0x08009fc3

0800a248 <_printf_common>:
 800a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	4616      	mov	r6, r2
 800a24e:	4699      	mov	r9, r3
 800a250:	688a      	ldr	r2, [r1, #8]
 800a252:	690b      	ldr	r3, [r1, #16]
 800a254:	4607      	mov	r7, r0
 800a256:	4293      	cmp	r3, r2
 800a258:	bfb8      	it	lt
 800a25a:	4613      	movlt	r3, r2
 800a25c:	6033      	str	r3, [r6, #0]
 800a25e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a262:	460c      	mov	r4, r1
 800a264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a268:	b10a      	cbz	r2, 800a26e <_printf_common+0x26>
 800a26a:	3301      	adds	r3, #1
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	0699      	lsls	r1, r3, #26
 800a272:	bf42      	ittt	mi
 800a274:	6833      	ldrmi	r3, [r6, #0]
 800a276:	3302      	addmi	r3, #2
 800a278:	6033      	strmi	r3, [r6, #0]
 800a27a:	6825      	ldr	r5, [r4, #0]
 800a27c:	f015 0506 	ands.w	r5, r5, #6
 800a280:	d106      	bne.n	800a290 <_printf_common+0x48>
 800a282:	f104 0a19 	add.w	sl, r4, #25
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	6832      	ldr	r2, [r6, #0]
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc28      	bgt.n	800a2e2 <_printf_common+0x9a>
 800a290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a294:	1e13      	subs	r3, r2, #0
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	bf18      	it	ne
 800a29a:	2301      	movne	r3, #1
 800a29c:	0692      	lsls	r2, r2, #26
 800a29e:	d42d      	bmi.n	800a2fc <_printf_common+0xb4>
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a8:	47c0      	blx	r8
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d020      	beq.n	800a2f0 <_printf_common+0xa8>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	68e5      	ldr	r5, [r4, #12]
 800a2b2:	f003 0306 	and.w	r3, r3, #6
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	bf18      	it	ne
 800a2ba:	2500      	movne	r5, #0
 800a2bc:	6832      	ldr	r2, [r6, #0]
 800a2be:	f04f 0600 	mov.w	r6, #0
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	bf08      	it	eq
 800a2c6:	1aad      	subeq	r5, r5, r2
 800a2c8:	6922      	ldr	r2, [r4, #16]
 800a2ca:	bf08      	it	eq
 800a2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	bfc4      	itt	gt
 800a2d4:	1a9b      	subgt	r3, r3, r2
 800a2d6:	18ed      	addgt	r5, r5, r3
 800a2d8:	341a      	adds	r4, #26
 800a2da:	42b5      	cmp	r5, r6
 800a2dc:	d11a      	bne.n	800a314 <_printf_common+0xcc>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	e008      	b.n	800a2f4 <_printf_common+0xac>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	47c0      	blx	r8
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d103      	bne.n	800a2f8 <_printf_common+0xb0>
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	e7c4      	b.n	800a286 <_printf_common+0x3e>
 800a2fc:	2030      	movs	r0, #48	; 0x30
 800a2fe:	18e1      	adds	r1, r4, r3
 800a300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a30a:	4422      	add	r2, r4
 800a30c:	3302      	adds	r3, #2
 800a30e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a312:	e7c5      	b.n	800a2a0 <_printf_common+0x58>
 800a314:	2301      	movs	r3, #1
 800a316:	4622      	mov	r2, r4
 800a318:	4649      	mov	r1, r9
 800a31a:	4638      	mov	r0, r7
 800a31c:	47c0      	blx	r8
 800a31e:	3001      	adds	r0, #1
 800a320:	d0e6      	beq.n	800a2f0 <_printf_common+0xa8>
 800a322:	3601      	adds	r6, #1
 800a324:	e7d9      	b.n	800a2da <_printf_common+0x92>
	...

0800a328 <_printf_i>:
 800a328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	7e0f      	ldrb	r7, [r1, #24]
 800a32e:	4691      	mov	r9, r2
 800a330:	2f78      	cmp	r7, #120	; 0x78
 800a332:	4680      	mov	r8, r0
 800a334:	460c      	mov	r4, r1
 800a336:	469a      	mov	sl, r3
 800a338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a33a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a33e:	d807      	bhi.n	800a350 <_printf_i+0x28>
 800a340:	2f62      	cmp	r7, #98	; 0x62
 800a342:	d80a      	bhi.n	800a35a <_printf_i+0x32>
 800a344:	2f00      	cmp	r7, #0
 800a346:	f000 80d9 	beq.w	800a4fc <_printf_i+0x1d4>
 800a34a:	2f58      	cmp	r7, #88	; 0x58
 800a34c:	f000 80a4 	beq.w	800a498 <_printf_i+0x170>
 800a350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a358:	e03a      	b.n	800a3d0 <_printf_i+0xa8>
 800a35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a35e:	2b15      	cmp	r3, #21
 800a360:	d8f6      	bhi.n	800a350 <_printf_i+0x28>
 800a362:	a101      	add	r1, pc, #4	; (adr r1, 800a368 <_printf_i+0x40>)
 800a364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a368:	0800a3c1 	.word	0x0800a3c1
 800a36c:	0800a3d5 	.word	0x0800a3d5
 800a370:	0800a351 	.word	0x0800a351
 800a374:	0800a351 	.word	0x0800a351
 800a378:	0800a351 	.word	0x0800a351
 800a37c:	0800a351 	.word	0x0800a351
 800a380:	0800a3d5 	.word	0x0800a3d5
 800a384:	0800a351 	.word	0x0800a351
 800a388:	0800a351 	.word	0x0800a351
 800a38c:	0800a351 	.word	0x0800a351
 800a390:	0800a351 	.word	0x0800a351
 800a394:	0800a4e3 	.word	0x0800a4e3
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a4c5 	.word	0x0800a4c5
 800a3a0:	0800a351 	.word	0x0800a351
 800a3a4:	0800a351 	.word	0x0800a351
 800a3a8:	0800a505 	.word	0x0800a505
 800a3ac:	0800a351 	.word	0x0800a351
 800a3b0:	0800a405 	.word	0x0800a405
 800a3b4:	0800a351 	.word	0x0800a351
 800a3b8:	0800a351 	.word	0x0800a351
 800a3bc:	0800a4cd 	.word	0x0800a4cd
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	1d1a      	adds	r2, r3, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	602a      	str	r2, [r5, #0]
 800a3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e0a4      	b.n	800a51e <_printf_i+0x1f6>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	6829      	ldr	r1, [r5, #0]
 800a3d8:	0606      	lsls	r6, r0, #24
 800a3da:	f101 0304 	add.w	r3, r1, #4
 800a3de:	d50a      	bpl.n	800a3f6 <_printf_i+0xce>
 800a3e0:	680e      	ldr	r6, [r1, #0]
 800a3e2:	602b      	str	r3, [r5, #0]
 800a3e4:	2e00      	cmp	r6, #0
 800a3e6:	da03      	bge.n	800a3f0 <_printf_i+0xc8>
 800a3e8:	232d      	movs	r3, #45	; 0x2d
 800a3ea:	4276      	negs	r6, r6
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f0:	230a      	movs	r3, #10
 800a3f2:	485e      	ldr	r0, [pc, #376]	; (800a56c <_printf_i+0x244>)
 800a3f4:	e019      	b.n	800a42a <_printf_i+0x102>
 800a3f6:	680e      	ldr	r6, [r1, #0]
 800a3f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	bf18      	it	ne
 800a400:	b236      	sxthne	r6, r6
 800a402:	e7ef      	b.n	800a3e4 <_printf_i+0xbc>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	1d19      	adds	r1, r3, #4
 800a40a:	6029      	str	r1, [r5, #0]
 800a40c:	0601      	lsls	r1, r0, #24
 800a40e:	d501      	bpl.n	800a414 <_printf_i+0xec>
 800a410:	681e      	ldr	r6, [r3, #0]
 800a412:	e002      	b.n	800a41a <_printf_i+0xf2>
 800a414:	0646      	lsls	r6, r0, #25
 800a416:	d5fb      	bpl.n	800a410 <_printf_i+0xe8>
 800a418:	881e      	ldrh	r6, [r3, #0]
 800a41a:	2f6f      	cmp	r7, #111	; 0x6f
 800a41c:	bf0c      	ite	eq
 800a41e:	2308      	moveq	r3, #8
 800a420:	230a      	movne	r3, #10
 800a422:	4852      	ldr	r0, [pc, #328]	; (800a56c <_printf_i+0x244>)
 800a424:	2100      	movs	r1, #0
 800a426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a42a:	6865      	ldr	r5, [r4, #4]
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	bfa8      	it	ge
 800a430:	6821      	ldrge	r1, [r4, #0]
 800a432:	60a5      	str	r5, [r4, #8]
 800a434:	bfa4      	itt	ge
 800a436:	f021 0104 	bicge.w	r1, r1, #4
 800a43a:	6021      	strge	r1, [r4, #0]
 800a43c:	b90e      	cbnz	r6, 800a442 <_printf_i+0x11a>
 800a43e:	2d00      	cmp	r5, #0
 800a440:	d04d      	beq.n	800a4de <_printf_i+0x1b6>
 800a442:	4615      	mov	r5, r2
 800a444:	fbb6 f1f3 	udiv	r1, r6, r3
 800a448:	fb03 6711 	mls	r7, r3, r1, r6
 800a44c:	5dc7      	ldrb	r7, [r0, r7]
 800a44e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a452:	4637      	mov	r7, r6
 800a454:	42bb      	cmp	r3, r7
 800a456:	460e      	mov	r6, r1
 800a458:	d9f4      	bls.n	800a444 <_printf_i+0x11c>
 800a45a:	2b08      	cmp	r3, #8
 800a45c:	d10b      	bne.n	800a476 <_printf_i+0x14e>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	07de      	lsls	r6, r3, #31
 800a462:	d508      	bpl.n	800a476 <_printf_i+0x14e>
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	6861      	ldr	r1, [r4, #4]
 800a468:	4299      	cmp	r1, r3
 800a46a:	bfde      	ittt	le
 800a46c:	2330      	movle	r3, #48	; 0x30
 800a46e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a472:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a476:	1b52      	subs	r2, r2, r5
 800a478:	6122      	str	r2, [r4, #16]
 800a47a:	464b      	mov	r3, r9
 800a47c:	4621      	mov	r1, r4
 800a47e:	4640      	mov	r0, r8
 800a480:	f8cd a000 	str.w	sl, [sp]
 800a484:	aa03      	add	r2, sp, #12
 800a486:	f7ff fedf 	bl	800a248 <_printf_common>
 800a48a:	3001      	adds	r0, #1
 800a48c:	d14c      	bne.n	800a528 <_printf_i+0x200>
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	b004      	add	sp, #16
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	4834      	ldr	r0, [pc, #208]	; (800a56c <_printf_i+0x244>)
 800a49a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a49e:	6829      	ldr	r1, [r5, #0]
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4a6:	6029      	str	r1, [r5, #0]
 800a4a8:	061d      	lsls	r5, r3, #24
 800a4aa:	d514      	bpl.n	800a4d6 <_printf_i+0x1ae>
 800a4ac:	07df      	lsls	r7, r3, #31
 800a4ae:	bf44      	itt	mi
 800a4b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a4b4:	6023      	strmi	r3, [r4, #0]
 800a4b6:	b91e      	cbnz	r6, 800a4c0 <_printf_i+0x198>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	f023 0320 	bic.w	r3, r3, #32
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	e7af      	b.n	800a424 <_printf_i+0xfc>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	f043 0320 	orr.w	r3, r3, #32
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	2378      	movs	r3, #120	; 0x78
 800a4ce:	4828      	ldr	r0, [pc, #160]	; (800a570 <_printf_i+0x248>)
 800a4d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4d4:	e7e3      	b.n	800a49e <_printf_i+0x176>
 800a4d6:	0659      	lsls	r1, r3, #25
 800a4d8:	bf48      	it	mi
 800a4da:	b2b6      	uxthmi	r6, r6
 800a4dc:	e7e6      	b.n	800a4ac <_printf_i+0x184>
 800a4de:	4615      	mov	r5, r2
 800a4e0:	e7bb      	b.n	800a45a <_printf_i+0x132>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	6826      	ldr	r6, [r4, #0]
 800a4e6:	1d18      	adds	r0, r3, #4
 800a4e8:	6961      	ldr	r1, [r4, #20]
 800a4ea:	6028      	str	r0, [r5, #0]
 800a4ec:	0635      	lsls	r5, r6, #24
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	d501      	bpl.n	800a4f6 <_printf_i+0x1ce>
 800a4f2:	6019      	str	r1, [r3, #0]
 800a4f4:	e002      	b.n	800a4fc <_printf_i+0x1d4>
 800a4f6:	0670      	lsls	r0, r6, #25
 800a4f8:	d5fb      	bpl.n	800a4f2 <_printf_i+0x1ca>
 800a4fa:	8019      	strh	r1, [r3, #0]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4615      	mov	r5, r2
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	e7ba      	b.n	800a47a <_printf_i+0x152>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	2100      	movs	r1, #0
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	602a      	str	r2, [r5, #0]
 800a50c:	681d      	ldr	r5, [r3, #0]
 800a50e:	6862      	ldr	r2, [r4, #4]
 800a510:	4628      	mov	r0, r5
 800a512:	f000 fde9 	bl	800b0e8 <memchr>
 800a516:	b108      	cbz	r0, 800a51c <_printf_i+0x1f4>
 800a518:	1b40      	subs	r0, r0, r5
 800a51a:	6060      	str	r0, [r4, #4]
 800a51c:	6863      	ldr	r3, [r4, #4]
 800a51e:	6123      	str	r3, [r4, #16]
 800a520:	2300      	movs	r3, #0
 800a522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a526:	e7a8      	b.n	800a47a <_printf_i+0x152>
 800a528:	462a      	mov	r2, r5
 800a52a:	4649      	mov	r1, r9
 800a52c:	4640      	mov	r0, r8
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	47d0      	blx	sl
 800a532:	3001      	adds	r0, #1
 800a534:	d0ab      	beq.n	800a48e <_printf_i+0x166>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	079b      	lsls	r3, r3, #30
 800a53a:	d413      	bmi.n	800a564 <_printf_i+0x23c>
 800a53c:	68e0      	ldr	r0, [r4, #12]
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	4298      	cmp	r0, r3
 800a542:	bfb8      	it	lt
 800a544:	4618      	movlt	r0, r3
 800a546:	e7a4      	b.n	800a492 <_printf_i+0x16a>
 800a548:	2301      	movs	r3, #1
 800a54a:	4632      	mov	r2, r6
 800a54c:	4649      	mov	r1, r9
 800a54e:	4640      	mov	r0, r8
 800a550:	47d0      	blx	sl
 800a552:	3001      	adds	r0, #1
 800a554:	d09b      	beq.n	800a48e <_printf_i+0x166>
 800a556:	3501      	adds	r5, #1
 800a558:	68e3      	ldr	r3, [r4, #12]
 800a55a:	9903      	ldr	r1, [sp, #12]
 800a55c:	1a5b      	subs	r3, r3, r1
 800a55e:	42ab      	cmp	r3, r5
 800a560:	dcf2      	bgt.n	800a548 <_printf_i+0x220>
 800a562:	e7eb      	b.n	800a53c <_printf_i+0x214>
 800a564:	2500      	movs	r5, #0
 800a566:	f104 0619 	add.w	r6, r4, #25
 800a56a:	e7f5      	b.n	800a558 <_printf_i+0x230>
 800a56c:	0800b485 	.word	0x0800b485
 800a570:	0800b496 	.word	0x0800b496

0800a574 <_scanf_chars>:
 800a574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a578:	4615      	mov	r5, r2
 800a57a:	688a      	ldr	r2, [r1, #8]
 800a57c:	4680      	mov	r8, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b932      	cbnz	r2, 800a590 <_scanf_chars+0x1c>
 800a582:	698a      	ldr	r2, [r1, #24]
 800a584:	2a00      	cmp	r2, #0
 800a586:	bf0c      	ite	eq
 800a588:	2201      	moveq	r2, #1
 800a58a:	f04f 32ff 	movne.w	r2, #4294967295
 800a58e:	608a      	str	r2, [r1, #8]
 800a590:	2700      	movs	r7, #0
 800a592:	6822      	ldr	r2, [r4, #0]
 800a594:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a624 <_scanf_chars+0xb0>
 800a598:	06d1      	lsls	r1, r2, #27
 800a59a:	bf5f      	itttt	pl
 800a59c:	681a      	ldrpl	r2, [r3, #0]
 800a59e:	1d11      	addpl	r1, r2, #4
 800a5a0:	6019      	strpl	r1, [r3, #0]
 800a5a2:	6816      	ldrpl	r6, [r2, #0]
 800a5a4:	69a0      	ldr	r0, [r4, #24]
 800a5a6:	b188      	cbz	r0, 800a5cc <_scanf_chars+0x58>
 800a5a8:	2801      	cmp	r0, #1
 800a5aa:	d107      	bne.n	800a5bc <_scanf_chars+0x48>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	6963      	ldr	r3, [r4, #20]
 800a5b2:	5c9b      	ldrb	r3, [r3, r2]
 800a5b4:	b953      	cbnz	r3, 800a5cc <_scanf_chars+0x58>
 800a5b6:	2f00      	cmp	r7, #0
 800a5b8:	d031      	beq.n	800a61e <_scanf_chars+0xaa>
 800a5ba:	e022      	b.n	800a602 <_scanf_chars+0x8e>
 800a5bc:	2802      	cmp	r0, #2
 800a5be:	d120      	bne.n	800a602 <_scanf_chars+0x8e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a5c8:	071b      	lsls	r3, r3, #28
 800a5ca:	d41a      	bmi.n	800a602 <_scanf_chars+0x8e>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	3701      	adds	r7, #1
 800a5d0:	06da      	lsls	r2, r3, #27
 800a5d2:	bf5e      	ittt	pl
 800a5d4:	682b      	ldrpl	r3, [r5, #0]
 800a5d6:	781b      	ldrbpl	r3, [r3, #0]
 800a5d8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5dc:	682a      	ldr	r2, [r5, #0]
 800a5de:	686b      	ldr	r3, [r5, #4]
 800a5e0:	3201      	adds	r2, #1
 800a5e2:	602a      	str	r2, [r5, #0]
 800a5e4:	68a2      	ldr	r2, [r4, #8]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	606b      	str	r3, [r5, #4]
 800a5ec:	60a2      	str	r2, [r4, #8]
 800a5ee:	b142      	cbz	r2, 800a602 <_scanf_chars+0x8e>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dcd7      	bgt.n	800a5a4 <_scanf_chars+0x30>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5fc:	4798      	blx	r3
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d0d0      	beq.n	800a5a4 <_scanf_chars+0x30>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f013 0310 	ands.w	r3, r3, #16
 800a608:	d105      	bne.n	800a616 <_scanf_chars+0xa2>
 800a60a:	68e2      	ldr	r2, [r4, #12]
 800a60c:	3201      	adds	r2, #1
 800a60e:	60e2      	str	r2, [r4, #12]
 800a610:	69a2      	ldr	r2, [r4, #24]
 800a612:	b102      	cbz	r2, 800a616 <_scanf_chars+0xa2>
 800a614:	7033      	strb	r3, [r6, #0]
 800a616:	2000      	movs	r0, #0
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	443b      	add	r3, r7
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a622:	bf00      	nop
 800a624:	0800b4c3 	.word	0x0800b4c3

0800a628 <_scanf_i>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	460c      	mov	r4, r1
 800a62e:	4698      	mov	r8, r3
 800a630:	4b75      	ldr	r3, [pc, #468]	; (800a808 <_scanf_i+0x1e0>)
 800a632:	b087      	sub	sp, #28
 800a634:	4682      	mov	sl, r0
 800a636:	4616      	mov	r6, r2
 800a638:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a63c:	ab03      	add	r3, sp, #12
 800a63e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a642:	4b72      	ldr	r3, [pc, #456]	; (800a80c <_scanf_i+0x1e4>)
 800a644:	69a1      	ldr	r1, [r4, #24]
 800a646:	4a72      	ldr	r2, [pc, #456]	; (800a810 <_scanf_i+0x1e8>)
 800a648:	4627      	mov	r7, r4
 800a64a:	2903      	cmp	r1, #3
 800a64c:	bf18      	it	ne
 800a64e:	461a      	movne	r2, r3
 800a650:	68a3      	ldr	r3, [r4, #8]
 800a652:	9201      	str	r2, [sp, #4]
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a65a:	bf81      	itttt	hi
 800a65c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a660:	eb03 0905 	addhi.w	r9, r3, r5
 800a664:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a668:	60a3      	strhi	r3, [r4, #8]
 800a66a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a66e:	bf98      	it	ls
 800a670:	f04f 0900 	movls.w	r9, #0
 800a674:	463d      	mov	r5, r7
 800a676:	f04f 0b00 	mov.w	fp, #0
 800a67a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	6831      	ldr	r1, [r6, #0]
 800a682:	ab03      	add	r3, sp, #12
 800a684:	2202      	movs	r2, #2
 800a686:	7809      	ldrb	r1, [r1, #0]
 800a688:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a68c:	f000 fd2c 	bl	800b0e8 <memchr>
 800a690:	b328      	cbz	r0, 800a6de <_scanf_i+0xb6>
 800a692:	f1bb 0f01 	cmp.w	fp, #1
 800a696:	d159      	bne.n	800a74c <_scanf_i+0x124>
 800a698:	6862      	ldr	r2, [r4, #4]
 800a69a:	b92a      	cbnz	r2, 800a6a8 <_scanf_i+0x80>
 800a69c:	2308      	movs	r3, #8
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	6063      	str	r3, [r4, #4]
 800a6a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6a6:	6022      	str	r2, [r4, #0]
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a6ae:	6022      	str	r2, [r4, #0]
 800a6b0:	68a2      	ldr	r2, [r4, #8]
 800a6b2:	1e51      	subs	r1, r2, #1
 800a6b4:	60a1      	str	r1, [r4, #8]
 800a6b6:	b192      	cbz	r2, 800a6de <_scanf_i+0xb6>
 800a6b8:	6832      	ldr	r2, [r6, #0]
 800a6ba:	1c51      	adds	r1, r2, #1
 800a6bc:	6031      	str	r1, [r6, #0]
 800a6be:	7812      	ldrb	r2, [r2, #0]
 800a6c0:	f805 2b01 	strb.w	r2, [r5], #1
 800a6c4:	6872      	ldr	r2, [r6, #4]
 800a6c6:	3a01      	subs	r2, #1
 800a6c8:	2a00      	cmp	r2, #0
 800a6ca:	6072      	str	r2, [r6, #4]
 800a6cc:	dc07      	bgt.n	800a6de <_scanf_i+0xb6>
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a6d6:	4790      	blx	r2
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f040 8085 	bne.w	800a7e8 <_scanf_i+0x1c0>
 800a6de:	f10b 0b01 	add.w	fp, fp, #1
 800a6e2:	f1bb 0f03 	cmp.w	fp, #3
 800a6e6:	d1cb      	bne.n	800a680 <_scanf_i+0x58>
 800a6e8:	6863      	ldr	r3, [r4, #4]
 800a6ea:	b90b      	cbnz	r3, 800a6f0 <_scanf_i+0xc8>
 800a6ec:	230a      	movs	r3, #10
 800a6ee:	6063      	str	r3, [r4, #4]
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	4948      	ldr	r1, [pc, #288]	; (800a814 <_scanf_i+0x1ec>)
 800a6f4:	6960      	ldr	r0, [r4, #20]
 800a6f6:	1ac9      	subs	r1, r1, r3
 800a6f8:	f000 f8b0 	bl	800a85c <__sccl>
 800a6fc:	f04f 0b00 	mov.w	fp, #0
 800a700:	68a3      	ldr	r3, [r4, #8]
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d03d      	beq.n	800a784 <_scanf_i+0x15c>
 800a708:	6831      	ldr	r1, [r6, #0]
 800a70a:	6960      	ldr	r0, [r4, #20]
 800a70c:	f891 c000 	ldrb.w	ip, [r1]
 800a710:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a714:	2800      	cmp	r0, #0
 800a716:	d035      	beq.n	800a784 <_scanf_i+0x15c>
 800a718:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a71c:	d124      	bne.n	800a768 <_scanf_i+0x140>
 800a71e:	0510      	lsls	r0, r2, #20
 800a720:	d522      	bpl.n	800a768 <_scanf_i+0x140>
 800a722:	f10b 0b01 	add.w	fp, fp, #1
 800a726:	f1b9 0f00 	cmp.w	r9, #0
 800a72a:	d003      	beq.n	800a734 <_scanf_i+0x10c>
 800a72c:	3301      	adds	r3, #1
 800a72e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6873      	ldr	r3, [r6, #4]
 800a736:	3b01      	subs	r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	6073      	str	r3, [r6, #4]
 800a73c:	dd1b      	ble.n	800a776 <_scanf_i+0x14e>
 800a73e:	6833      	ldr	r3, [r6, #0]
 800a740:	3301      	adds	r3, #1
 800a742:	6033      	str	r3, [r6, #0]
 800a744:	68a3      	ldr	r3, [r4, #8]
 800a746:	3b01      	subs	r3, #1
 800a748:	60a3      	str	r3, [r4, #8]
 800a74a:	e7d9      	b.n	800a700 <_scanf_i+0xd8>
 800a74c:	f1bb 0f02 	cmp.w	fp, #2
 800a750:	d1ae      	bne.n	800a6b0 <_scanf_i+0x88>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a758:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a75c:	d1bf      	bne.n	800a6de <_scanf_i+0xb6>
 800a75e:	2310      	movs	r3, #16
 800a760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a764:	6063      	str	r3, [r4, #4]
 800a766:	e7a2      	b.n	800a6ae <_scanf_i+0x86>
 800a768:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	780b      	ldrb	r3, [r1, #0]
 800a770:	f805 3b01 	strb.w	r3, [r5], #1
 800a774:	e7de      	b.n	800a734 <_scanf_i+0x10c>
 800a776:	4631      	mov	r1, r6
 800a778:	4650      	mov	r0, sl
 800a77a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a77e:	4798      	blx	r3
 800a780:	2800      	cmp	r0, #0
 800a782:	d0df      	beq.n	800a744 <_scanf_i+0x11c>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	05db      	lsls	r3, r3, #23
 800a788:	d50d      	bpl.n	800a7a6 <_scanf_i+0x17e>
 800a78a:	42bd      	cmp	r5, r7
 800a78c:	d909      	bls.n	800a7a2 <_scanf_i+0x17a>
 800a78e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a792:	4632      	mov	r2, r6
 800a794:	4650      	mov	r0, sl
 800a796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a79a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a79e:	4798      	blx	r3
 800a7a0:	464d      	mov	r5, r9
 800a7a2:	42bd      	cmp	r5, r7
 800a7a4:	d02d      	beq.n	800a802 <_scanf_i+0x1da>
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	f012 0210 	ands.w	r2, r2, #16
 800a7ac:	d113      	bne.n	800a7d6 <_scanf_i+0x1ae>
 800a7ae:	702a      	strb	r2, [r5, #0]
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	9e01      	ldr	r6, [sp, #4]
 800a7b8:	47b0      	blx	r6
 800a7ba:	6821      	ldr	r1, [r4, #0]
 800a7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c0:	f011 0f20 	tst.w	r1, #32
 800a7c4:	d013      	beq.n	800a7ee <_scanf_i+0x1c6>
 800a7c6:	1d1a      	adds	r2, r3, #4
 800a7c8:	f8c8 2000 	str.w	r2, [r8]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6018      	str	r0, [r3, #0]
 800a7d0:	68e3      	ldr	r3, [r4, #12]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	60e3      	str	r3, [r4, #12]
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	1bed      	subs	r5, r5, r7
 800a7da:	44ab      	add	fp, r5
 800a7dc:	6925      	ldr	r5, [r4, #16]
 800a7de:	445d      	add	r5, fp
 800a7e0:	6125      	str	r5, [r4, #16]
 800a7e2:	b007      	add	sp, #28
 800a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e8:	f04f 0b00 	mov.w	fp, #0
 800a7ec:	e7ca      	b.n	800a784 <_scanf_i+0x15c>
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	f8c8 2000 	str.w	r2, [r8]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f011 0f01 	tst.w	r1, #1
 800a7fa:	bf14      	ite	ne
 800a7fc:	8018      	strhne	r0, [r3, #0]
 800a7fe:	6018      	streq	r0, [r3, #0]
 800a800:	e7e6      	b.n	800a7d0 <_scanf_i+0x1a8>
 800a802:	2001      	movs	r0, #1
 800a804:	e7ed      	b.n	800a7e2 <_scanf_i+0x1ba>
 800a806:	bf00      	nop
 800a808:	0800b39c 	.word	0x0800b39c
 800a80c:	0800aaad 	.word	0x0800aaad
 800a810:	0800a9c5 	.word	0x0800a9c5
 800a814:	0800b4c0 	.word	0x0800b4c0

0800a818 <_read_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	2200      	movs	r2, #0
 800a822:	4d05      	ldr	r5, [pc, #20]	; (800a838 <_read_r+0x20>)
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f6 fa4d 	bl	8000cc6 <_read>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_read_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_read_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20001538 	.word	0x20001538

0800a83c <_sbrk_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	2300      	movs	r3, #0
 800a840:	4d05      	ldr	r5, [pc, #20]	; (800a858 <_sbrk_r+0x1c>)
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f6 faa6 	bl	8000d98 <_sbrk>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_sbrk_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_sbrk_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20001538 	.word	0x20001538

0800a85c <__sccl>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	780b      	ldrb	r3, [r1, #0]
 800a860:	4604      	mov	r4, r0
 800a862:	2b5e      	cmp	r3, #94	; 0x5e
 800a864:	bf13      	iteet	ne
 800a866:	2200      	movne	r2, #0
 800a868:	2201      	moveq	r2, #1
 800a86a:	784b      	ldrbeq	r3, [r1, #1]
 800a86c:	1c48      	addne	r0, r1, #1
 800a86e:	bf08      	it	eq
 800a870:	1c88      	addeq	r0, r1, #2
 800a872:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a876:	1e61      	subs	r1, r4, #1
 800a878:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a87c:	42a9      	cmp	r1, r5
 800a87e:	d1fb      	bne.n	800a878 <__sccl+0x1c>
 800a880:	b90b      	cbnz	r3, 800a886 <__sccl+0x2a>
 800a882:	3801      	subs	r0, #1
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	f082 0201 	eor.w	r2, r2, #1
 800a88a:	4605      	mov	r5, r0
 800a88c:	54e2      	strb	r2, [r4, r3]
 800a88e:	4628      	mov	r0, r5
 800a890:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a894:	292d      	cmp	r1, #45	; 0x2d
 800a896:	d006      	beq.n	800a8a6 <__sccl+0x4a>
 800a898:	295d      	cmp	r1, #93	; 0x5d
 800a89a:	d0f3      	beq.n	800a884 <__sccl+0x28>
 800a89c:	b909      	cbnz	r1, 800a8a2 <__sccl+0x46>
 800a89e:	4628      	mov	r0, r5
 800a8a0:	e7f0      	b.n	800a884 <__sccl+0x28>
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	e7f1      	b.n	800a88a <__sccl+0x2e>
 800a8a6:	786e      	ldrb	r6, [r5, #1]
 800a8a8:	2e5d      	cmp	r6, #93	; 0x5d
 800a8aa:	d0fa      	beq.n	800a8a2 <__sccl+0x46>
 800a8ac:	42b3      	cmp	r3, r6
 800a8ae:	dcf8      	bgt.n	800a8a2 <__sccl+0x46>
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	3502      	adds	r5, #2
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	428e      	cmp	r6, r1
 800a8b8:	5462      	strb	r2, [r4, r1]
 800a8ba:	dcfb      	bgt.n	800a8b4 <__sccl+0x58>
 800a8bc:	1af1      	subs	r1, r6, r3
 800a8be:	3901      	subs	r1, #1
 800a8c0:	42b3      	cmp	r3, r6
 800a8c2:	bfa8      	it	ge
 800a8c4:	2100      	movge	r1, #0
 800a8c6:	1c58      	adds	r0, r3, #1
 800a8c8:	1843      	adds	r3, r0, r1
 800a8ca:	e7e0      	b.n	800a88e <__sccl+0x32>

0800a8cc <_strtol_l.constprop.0>:
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d2:	4680      	mov	r8, r0
 800a8d4:	d001      	beq.n	800a8da <_strtol_l.constprop.0+0xe>
 800a8d6:	2b24      	cmp	r3, #36	; 0x24
 800a8d8:	d906      	bls.n	800a8e8 <_strtol_l.constprop.0+0x1c>
 800a8da:	f7fe fd9f 	bl	800941c <__errno>
 800a8de:	2316      	movs	r3, #22
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4f35      	ldr	r7, [pc, #212]	; (800a9c0 <_strtol_l.constprop.0+0xf4>)
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f2:	5de6      	ldrb	r6, [r4, r7]
 800a8f4:	f016 0608 	ands.w	r6, r6, #8
 800a8f8:	d1f8      	bne.n	800a8ec <_strtol_l.constprop.0+0x20>
 800a8fa:	2c2d      	cmp	r4, #45	; 0x2d
 800a8fc:	d12f      	bne.n	800a95e <_strtol_l.constprop.0+0x92>
 800a8fe:	2601      	movs	r6, #1
 800a900:	782c      	ldrb	r4, [r5, #0]
 800a902:	1c85      	adds	r5, r0, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d057      	beq.n	800a9b8 <_strtol_l.constprop.0+0xec>
 800a908:	2b10      	cmp	r3, #16
 800a90a:	d109      	bne.n	800a920 <_strtol_l.constprop.0+0x54>
 800a90c:	2c30      	cmp	r4, #48	; 0x30
 800a90e:	d107      	bne.n	800a920 <_strtol_l.constprop.0+0x54>
 800a910:	7828      	ldrb	r0, [r5, #0]
 800a912:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a916:	2858      	cmp	r0, #88	; 0x58
 800a918:	d149      	bne.n	800a9ae <_strtol_l.constprop.0+0xe2>
 800a91a:	2310      	movs	r3, #16
 800a91c:	786c      	ldrb	r4, [r5, #1]
 800a91e:	3502      	adds	r5, #2
 800a920:	2700      	movs	r7, #0
 800a922:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a926:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a92a:	fbbe f9f3 	udiv	r9, lr, r3
 800a92e:	4638      	mov	r0, r7
 800a930:	fb03 ea19 	mls	sl, r3, r9, lr
 800a934:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a938:	f1bc 0f09 	cmp.w	ip, #9
 800a93c:	d814      	bhi.n	800a968 <_strtol_l.constprop.0+0x9c>
 800a93e:	4664      	mov	r4, ip
 800a940:	42a3      	cmp	r3, r4
 800a942:	dd22      	ble.n	800a98a <_strtol_l.constprop.0+0xbe>
 800a944:	2f00      	cmp	r7, #0
 800a946:	db1d      	blt.n	800a984 <_strtol_l.constprop.0+0xb8>
 800a948:	4581      	cmp	r9, r0
 800a94a:	d31b      	bcc.n	800a984 <_strtol_l.constprop.0+0xb8>
 800a94c:	d101      	bne.n	800a952 <_strtol_l.constprop.0+0x86>
 800a94e:	45a2      	cmp	sl, r4
 800a950:	db18      	blt.n	800a984 <_strtol_l.constprop.0+0xb8>
 800a952:	2701      	movs	r7, #1
 800a954:	fb00 4003 	mla	r0, r0, r3, r4
 800a958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a95c:	e7ea      	b.n	800a934 <_strtol_l.constprop.0+0x68>
 800a95e:	2c2b      	cmp	r4, #43	; 0x2b
 800a960:	bf04      	itt	eq
 800a962:	782c      	ldrbeq	r4, [r5, #0]
 800a964:	1c85      	addeq	r5, r0, #2
 800a966:	e7cd      	b.n	800a904 <_strtol_l.constprop.0+0x38>
 800a968:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a96c:	f1bc 0f19 	cmp.w	ip, #25
 800a970:	d801      	bhi.n	800a976 <_strtol_l.constprop.0+0xaa>
 800a972:	3c37      	subs	r4, #55	; 0x37
 800a974:	e7e4      	b.n	800a940 <_strtol_l.constprop.0+0x74>
 800a976:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a97a:	f1bc 0f19 	cmp.w	ip, #25
 800a97e:	d804      	bhi.n	800a98a <_strtol_l.constprop.0+0xbe>
 800a980:	3c57      	subs	r4, #87	; 0x57
 800a982:	e7dd      	b.n	800a940 <_strtol_l.constprop.0+0x74>
 800a984:	f04f 37ff 	mov.w	r7, #4294967295
 800a988:	e7e6      	b.n	800a958 <_strtol_l.constprop.0+0x8c>
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	da07      	bge.n	800a99e <_strtol_l.constprop.0+0xd2>
 800a98e:	2322      	movs	r3, #34	; 0x22
 800a990:	4670      	mov	r0, lr
 800a992:	f8c8 3000 	str.w	r3, [r8]
 800a996:	2a00      	cmp	r2, #0
 800a998:	d0a4      	beq.n	800a8e4 <_strtol_l.constprop.0+0x18>
 800a99a:	1e69      	subs	r1, r5, #1
 800a99c:	e005      	b.n	800a9aa <_strtol_l.constprop.0+0xde>
 800a99e:	b106      	cbz	r6, 800a9a2 <_strtol_l.constprop.0+0xd6>
 800a9a0:	4240      	negs	r0, r0
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	d09e      	beq.n	800a8e4 <_strtol_l.constprop.0+0x18>
 800a9a6:	2f00      	cmp	r7, #0
 800a9a8:	d1f7      	bne.n	800a99a <_strtol_l.constprop.0+0xce>
 800a9aa:	6011      	str	r1, [r2, #0]
 800a9ac:	e79a      	b.n	800a8e4 <_strtol_l.constprop.0+0x18>
 800a9ae:	2430      	movs	r4, #48	; 0x30
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1b5      	bne.n	800a920 <_strtol_l.constprop.0+0x54>
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	e7b3      	b.n	800a920 <_strtol_l.constprop.0+0x54>
 800a9b8:	2c30      	cmp	r4, #48	; 0x30
 800a9ba:	d0a9      	beq.n	800a910 <_strtol_l.constprop.0+0x44>
 800a9bc:	230a      	movs	r3, #10
 800a9be:	e7af      	b.n	800a920 <_strtol_l.constprop.0+0x54>
 800a9c0:	0800b4c3 	.word	0x0800b4c3

0800a9c4 <_strtol_r>:
 800a9c4:	f7ff bf82 	b.w	800a8cc <_strtol_l.constprop.0>

0800a9c8 <_strtoul_l.constprop.0>:
 800a9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	4686      	mov	lr, r0
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	4f35      	ldr	r7, [pc, #212]	; (800aaa8 <_strtoul_l.constprop.0+0xe0>)
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d8:	5de6      	ldrb	r6, [r4, r7]
 800a9da:	f016 0608 	ands.w	r6, r6, #8
 800a9de:	d1f8      	bne.n	800a9d2 <_strtoul_l.constprop.0+0xa>
 800a9e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a9e2:	d12f      	bne.n	800aa44 <_strtoul_l.constprop.0+0x7c>
 800a9e4:	2601      	movs	r6, #1
 800a9e6:	782c      	ldrb	r4, [r5, #0]
 800a9e8:	1c85      	adds	r5, r0, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d057      	beq.n	800aa9e <_strtoul_l.constprop.0+0xd6>
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d109      	bne.n	800aa06 <_strtoul_l.constprop.0+0x3e>
 800a9f2:	2c30      	cmp	r4, #48	; 0x30
 800a9f4:	d107      	bne.n	800aa06 <_strtoul_l.constprop.0+0x3e>
 800a9f6:	7828      	ldrb	r0, [r5, #0]
 800a9f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9fc:	2858      	cmp	r0, #88	; 0x58
 800a9fe:	d149      	bne.n	800aa94 <_strtoul_l.constprop.0+0xcc>
 800aa00:	2310      	movs	r3, #16
 800aa02:	786c      	ldrb	r4, [r5, #1]
 800aa04:	3502      	adds	r5, #2
 800aa06:	f04f 38ff 	mov.w	r8, #4294967295
 800aa0a:	fbb8 f8f3 	udiv	r8, r8, r3
 800aa0e:	2700      	movs	r7, #0
 800aa10:	fb03 f908 	mul.w	r9, r3, r8
 800aa14:	4638      	mov	r0, r7
 800aa16:	ea6f 0909 	mvn.w	r9, r9
 800aa1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aa1e:	f1bc 0f09 	cmp.w	ip, #9
 800aa22:	d814      	bhi.n	800aa4e <_strtoul_l.constprop.0+0x86>
 800aa24:	4664      	mov	r4, ip
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	dd22      	ble.n	800aa70 <_strtoul_l.constprop.0+0xa8>
 800aa2a:	2f00      	cmp	r7, #0
 800aa2c:	db1d      	blt.n	800aa6a <_strtoul_l.constprop.0+0xa2>
 800aa2e:	4580      	cmp	r8, r0
 800aa30:	d31b      	bcc.n	800aa6a <_strtoul_l.constprop.0+0xa2>
 800aa32:	d101      	bne.n	800aa38 <_strtoul_l.constprop.0+0x70>
 800aa34:	45a1      	cmp	r9, r4
 800aa36:	db18      	blt.n	800aa6a <_strtoul_l.constprop.0+0xa2>
 800aa38:	2701      	movs	r7, #1
 800aa3a:	fb00 4003 	mla	r0, r0, r3, r4
 800aa3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa42:	e7ea      	b.n	800aa1a <_strtoul_l.constprop.0+0x52>
 800aa44:	2c2b      	cmp	r4, #43	; 0x2b
 800aa46:	bf04      	itt	eq
 800aa48:	782c      	ldrbeq	r4, [r5, #0]
 800aa4a:	1c85      	addeq	r5, r0, #2
 800aa4c:	e7cd      	b.n	800a9ea <_strtoul_l.constprop.0+0x22>
 800aa4e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa52:	f1bc 0f19 	cmp.w	ip, #25
 800aa56:	d801      	bhi.n	800aa5c <_strtoul_l.constprop.0+0x94>
 800aa58:	3c37      	subs	r4, #55	; 0x37
 800aa5a:	e7e4      	b.n	800aa26 <_strtoul_l.constprop.0+0x5e>
 800aa5c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa60:	f1bc 0f19 	cmp.w	ip, #25
 800aa64:	d804      	bhi.n	800aa70 <_strtoul_l.constprop.0+0xa8>
 800aa66:	3c57      	subs	r4, #87	; 0x57
 800aa68:	e7dd      	b.n	800aa26 <_strtoul_l.constprop.0+0x5e>
 800aa6a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa6e:	e7e6      	b.n	800aa3e <_strtoul_l.constprop.0+0x76>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	da07      	bge.n	800aa84 <_strtoul_l.constprop.0+0xbc>
 800aa74:	2322      	movs	r3, #34	; 0x22
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	f8ce 3000 	str.w	r3, [lr]
 800aa7e:	b932      	cbnz	r2, 800aa8e <_strtoul_l.constprop.0+0xc6>
 800aa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa84:	b106      	cbz	r6, 800aa88 <_strtoul_l.constprop.0+0xc0>
 800aa86:	4240      	negs	r0, r0
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	d0f9      	beq.n	800aa80 <_strtoul_l.constprop.0+0xb8>
 800aa8c:	b107      	cbz	r7, 800aa90 <_strtoul_l.constprop.0+0xc8>
 800aa8e:	1e69      	subs	r1, r5, #1
 800aa90:	6011      	str	r1, [r2, #0]
 800aa92:	e7f5      	b.n	800aa80 <_strtoul_l.constprop.0+0xb8>
 800aa94:	2430      	movs	r4, #48	; 0x30
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1b5      	bne.n	800aa06 <_strtoul_l.constprop.0+0x3e>
 800aa9a:	2308      	movs	r3, #8
 800aa9c:	e7b3      	b.n	800aa06 <_strtoul_l.constprop.0+0x3e>
 800aa9e:	2c30      	cmp	r4, #48	; 0x30
 800aaa0:	d0a9      	beq.n	800a9f6 <_strtoul_l.constprop.0+0x2e>
 800aaa2:	230a      	movs	r3, #10
 800aaa4:	e7af      	b.n	800aa06 <_strtoul_l.constprop.0+0x3e>
 800aaa6:	bf00      	nop
 800aaa8:	0800b4c3 	.word	0x0800b4c3

0800aaac <_strtoul_r>:
 800aaac:	f7ff bf8c 	b.w	800a9c8 <_strtoul_l.constprop.0>

0800aab0 <__submore>:
 800aab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab4:	460c      	mov	r4, r1
 800aab6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aabc:	4299      	cmp	r1, r3
 800aabe:	d11b      	bne.n	800aaf8 <__submore+0x48>
 800aac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aac4:	f7fe fec4 	bl	8009850 <_malloc_r>
 800aac8:	b918      	cbnz	r0, 800aad2 <__submore+0x22>
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad6:	63a3      	str	r3, [r4, #56]	; 0x38
 800aad8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aadc:	6360      	str	r0, [r4, #52]	; 0x34
 800aade:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aae2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aae6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aaea:	7043      	strb	r3, [r0, #1]
 800aaec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aaf0:	7003      	strb	r3, [r0, #0]
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7ea      	b.n	800aace <__submore+0x1e>
 800aaf8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aafa:	0077      	lsls	r7, r6, #1
 800aafc:	463a      	mov	r2, r7
 800aafe:	f000 fb27 	bl	800b150 <_realloc_r>
 800ab02:	4605      	mov	r5, r0
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d0e0      	beq.n	800aaca <__submore+0x1a>
 800ab08:	eb00 0806 	add.w	r8, r0, r6
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	4632      	mov	r2, r6
 800ab10:	4640      	mov	r0, r8
 800ab12:	f7fe fcad 	bl	8009470 <memcpy>
 800ab16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ab1a:	f8c4 8000 	str.w	r8, [r4]
 800ab1e:	e7e9      	b.n	800aaf4 <__submore+0x44>

0800ab20 <__swbuf_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	460e      	mov	r6, r1
 800ab24:	4614      	mov	r4, r2
 800ab26:	4605      	mov	r5, r0
 800ab28:	b118      	cbz	r0, 800ab32 <__swbuf_r+0x12>
 800ab2a:	6983      	ldr	r3, [r0, #24]
 800ab2c:	b90b      	cbnz	r3, 800ab32 <__swbuf_r+0x12>
 800ab2e:	f000 f9d5 	bl	800aedc <__sinit>
 800ab32:	4b21      	ldr	r3, [pc, #132]	; (800abb8 <__swbuf_r+0x98>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	d12b      	bne.n	800ab90 <__swbuf_r+0x70>
 800ab38:	686c      	ldr	r4, [r5, #4]
 800ab3a:	69a3      	ldr	r3, [r4, #24]
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	071a      	lsls	r2, r3, #28
 800ab42:	d52f      	bpl.n	800aba4 <__swbuf_r+0x84>
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b36b      	cbz	r3, 800aba4 <__swbuf_r+0x84>
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	b2f6      	uxtb	r6, r6
 800ab4e:	1ac0      	subs	r0, r0, r3
 800ab50:	6963      	ldr	r3, [r4, #20]
 800ab52:	4637      	mov	r7, r6
 800ab54:	4283      	cmp	r3, r0
 800ab56:	dc04      	bgt.n	800ab62 <__swbuf_r+0x42>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 f92a 	bl	800adb4 <_fflush_r>
 800ab60:	bb30      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	3001      	adds	r0, #1
 800ab66:	3b01      	subs	r3, #1
 800ab68:	60a3      	str	r3, [r4, #8]
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	6022      	str	r2, [r4, #0]
 800ab70:	701e      	strb	r6, [r3, #0]
 800ab72:	6963      	ldr	r3, [r4, #20]
 800ab74:	4283      	cmp	r3, r0
 800ab76:	d004      	beq.n	800ab82 <__swbuf_r+0x62>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	07db      	lsls	r3, r3, #31
 800ab7c:	d506      	bpl.n	800ab8c <__swbuf_r+0x6c>
 800ab7e:	2e0a      	cmp	r6, #10
 800ab80:	d104      	bne.n	800ab8c <__swbuf_r+0x6c>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f915 	bl	800adb4 <_fflush_r>
 800ab8a:	b988      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <__swbuf_r+0x9c>)
 800ab92:	429c      	cmp	r4, r3
 800ab94:	d101      	bne.n	800ab9a <__swbuf_r+0x7a>
 800ab96:	68ac      	ldr	r4, [r5, #8]
 800ab98:	e7cf      	b.n	800ab3a <__swbuf_r+0x1a>
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <__swbuf_r+0xa0>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	bf08      	it	eq
 800aba0:	68ec      	ldreq	r4, [r5, #12]
 800aba2:	e7ca      	b.n	800ab3a <__swbuf_r+0x1a>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f80c 	bl	800abc4 <__swsetup_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0cb      	beq.n	800ab48 <__swbuf_r+0x28>
 800abb0:	f04f 37ff 	mov.w	r7, #4294967295
 800abb4:	e7ea      	b.n	800ab8c <__swbuf_r+0x6c>
 800abb6:	bf00      	nop
 800abb8:	0800b5e4 	.word	0x0800b5e4
 800abbc:	0800b604 	.word	0x0800b604
 800abc0:	0800b5c4 	.word	0x0800b5c4

0800abc4 <__swsetup_r>:
 800abc4:	4b32      	ldr	r3, [pc, #200]	; (800ac90 <__swsetup_r+0xcc>)
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	681d      	ldr	r5, [r3, #0]
 800abca:	4606      	mov	r6, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	b125      	cbz	r5, 800abda <__swsetup_r+0x16>
 800abd0:	69ab      	ldr	r3, [r5, #24]
 800abd2:	b913      	cbnz	r3, 800abda <__swsetup_r+0x16>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f981 	bl	800aedc <__sinit>
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <__swsetup_r+0xd0>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d10f      	bne.n	800ac00 <__swsetup_r+0x3c>
 800abe0:	686c      	ldr	r4, [r5, #4]
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe8:	0719      	lsls	r1, r3, #28
 800abea:	d42c      	bmi.n	800ac46 <__swsetup_r+0x82>
 800abec:	06dd      	lsls	r5, r3, #27
 800abee:	d411      	bmi.n	800ac14 <__swsetup_r+0x50>
 800abf0:	2309      	movs	r3, #9
 800abf2:	6033      	str	r3, [r6, #0]
 800abf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e03e      	b.n	800ac7e <__swsetup_r+0xba>
 800ac00:	4b25      	ldr	r3, [pc, #148]	; (800ac98 <__swsetup_r+0xd4>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <__swsetup_r+0x46>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7eb      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac0a:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <__swsetup_r+0xd8>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7e6      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x7a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x6a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x66>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7fe fdab 	bl	8009780 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x9a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x9a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 fa05 	bl	800b068 <__smakebuf_r>
 800ac5e:	89a0      	ldrh	r0, [r4, #12]
 800ac60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac64:	f010 0301 	ands.w	r3, r0, #1
 800ac68:	d00a      	beq.n	800ac80 <__swsetup_r+0xbc>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	6963      	ldr	r3, [r4, #20]
 800ac70:	425b      	negs	r3, r3
 800ac72:	61a3      	str	r3, [r4, #24]
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b943      	cbnz	r3, 800ac8a <__swsetup_r+0xc6>
 800ac78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac7c:	d1ba      	bne.n	800abf4 <__swsetup_r+0x30>
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	0781      	lsls	r1, r0, #30
 800ac82:	bf58      	it	pl
 800ac84:	6963      	ldrpl	r3, [r4, #20]
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	e7f4      	b.n	800ac74 <__swsetup_r+0xb0>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e7f7      	b.n	800ac7e <__swsetup_r+0xba>
 800ac8e:	bf00      	nop
 800ac90:	20000184 	.word	0x20000184
 800ac94:	0800b5e4 	.word	0x0800b5e4
 800ac98:	0800b604 	.word	0x0800b604
 800ac9c:	0800b5c4 	.word	0x0800b5c4

0800aca0 <abort>:
 800aca0:	2006      	movs	r0, #6
 800aca2:	b508      	push	{r3, lr}
 800aca4:	f000 faac 	bl	800b200 <raise>
 800aca8:	2001      	movs	r0, #1
 800acaa:	f7f6 f802 	bl	8000cb2 <_exit>
	...

0800acb0 <__sflush_r>:
 800acb0:	898a      	ldrh	r2, [r1, #12]
 800acb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb4:	4605      	mov	r5, r0
 800acb6:	0710      	lsls	r0, r2, #28
 800acb8:	460c      	mov	r4, r1
 800acba:	d457      	bmi.n	800ad6c <__sflush_r+0xbc>
 800acbc:	684b      	ldr	r3, [r1, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc04      	bgt.n	800accc <__sflush_r+0x1c>
 800acc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dc01      	bgt.n	800accc <__sflush_r+0x1c>
 800acc8:	2000      	movs	r0, #0
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d0fa      	beq.n	800acc8 <__sflush_r+0x18>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd8:	682f      	ldr	r7, [r5, #0]
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	d032      	beq.n	800ad44 <__sflush_r+0x94>
 800acde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	075a      	lsls	r2, r3, #29
 800ace4:	d505      	bpl.n	800acf2 <__sflush_r+0x42>
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acec:	b10b      	cbz	r3, 800acf2 <__sflush_r+0x42>
 800acee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	4602      	mov	r2, r0
 800acf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf8:	4628      	mov	r0, r5
 800acfa:	6a21      	ldr	r1, [r4, #32]
 800acfc:	47b0      	blx	r6
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	d106      	bne.n	800ad12 <__sflush_r+0x62>
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	291d      	cmp	r1, #29
 800ad08:	d82c      	bhi.n	800ad64 <__sflush_r+0xb4>
 800ad0a:	4a29      	ldr	r2, [pc, #164]	; (800adb0 <__sflush_r+0x100>)
 800ad0c:	40ca      	lsrs	r2, r1
 800ad0e:	07d6      	lsls	r6, r2, #31
 800ad10:	d528      	bpl.n	800ad64 <__sflush_r+0xb4>
 800ad12:	2200      	movs	r2, #0
 800ad14:	6062      	str	r2, [r4, #4]
 800ad16:	6922      	ldr	r2, [r4, #16]
 800ad18:	04d9      	lsls	r1, r3, #19
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	d504      	bpl.n	800ad28 <__sflush_r+0x78>
 800ad1e:	1c42      	adds	r2, r0, #1
 800ad20:	d101      	bne.n	800ad26 <__sflush_r+0x76>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b903      	cbnz	r3, 800ad28 <__sflush_r+0x78>
 800ad26:	6560      	str	r0, [r4, #84]	; 0x54
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d0cb      	beq.n	800acc8 <__sflush_r+0x18>
 800ad30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad34:	4299      	cmp	r1, r3
 800ad36:	d002      	beq.n	800ad3e <__sflush_r+0x8e>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7fe fd21 	bl	8009780 <_free_r>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	6360      	str	r0, [r4, #52]	; 0x34
 800ad42:	e7c2      	b.n	800acca <__sflush_r+0x1a>
 800ad44:	6a21      	ldr	r1, [r4, #32]
 800ad46:	2301      	movs	r3, #1
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b0      	blx	r6
 800ad4c:	1c41      	adds	r1, r0, #1
 800ad4e:	d1c7      	bne.n	800ace0 <__sflush_r+0x30>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c4      	beq.n	800ace0 <__sflush_r+0x30>
 800ad56:	2b1d      	cmp	r3, #29
 800ad58:	d001      	beq.n	800ad5e <__sflush_r+0xae>
 800ad5a:	2b16      	cmp	r3, #22
 800ad5c:	d101      	bne.n	800ad62 <__sflush_r+0xb2>
 800ad5e:	602f      	str	r7, [r5, #0]
 800ad60:	e7b2      	b.n	800acc8 <__sflush_r+0x18>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	e7ae      	b.n	800acca <__sflush_r+0x1a>
 800ad6c:	690f      	ldr	r7, [r1, #16]
 800ad6e:	2f00      	cmp	r7, #0
 800ad70:	d0aa      	beq.n	800acc8 <__sflush_r+0x18>
 800ad72:	0793      	lsls	r3, r2, #30
 800ad74:	bf18      	it	ne
 800ad76:	2300      	movne	r3, #0
 800ad78:	680e      	ldr	r6, [r1, #0]
 800ad7a:	bf08      	it	eq
 800ad7c:	694b      	ldreq	r3, [r1, #20]
 800ad7e:	1bf6      	subs	r6, r6, r7
 800ad80:	600f      	str	r7, [r1, #0]
 800ad82:	608b      	str	r3, [r1, #8]
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	dd9f      	ble.n	800acc8 <__sflush_r+0x18>
 800ad88:	4633      	mov	r3, r6
 800ad8a:	463a      	mov	r2, r7
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	6a21      	ldr	r1, [r4, #32]
 800ad90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad94:	47e0      	blx	ip
 800ad96:	2800      	cmp	r0, #0
 800ad98:	dc06      	bgt.n	800ada8 <__sflush_r+0xf8>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	e790      	b.n	800acca <__sflush_r+0x1a>
 800ada8:	4407      	add	r7, r0
 800adaa:	1a36      	subs	r6, r6, r0
 800adac:	e7ea      	b.n	800ad84 <__sflush_r+0xd4>
 800adae:	bf00      	nop
 800adb0:	20400001 	.word	0x20400001

0800adb4 <_fflush_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	4605      	mov	r5, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	b913      	cbnz	r3, 800adc4 <_fflush_r+0x10>
 800adbe:	2500      	movs	r5, #0
 800adc0:	4628      	mov	r0, r5
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	b118      	cbz	r0, 800adce <_fflush_r+0x1a>
 800adc6:	6983      	ldr	r3, [r0, #24]
 800adc8:	b90b      	cbnz	r3, 800adce <_fflush_r+0x1a>
 800adca:	f000 f887 	bl	800aedc <__sinit>
 800adce:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <_fflush_r+0x6c>)
 800add0:	429c      	cmp	r4, r3
 800add2:	d11b      	bne.n	800ae0c <_fflush_r+0x58>
 800add4:	686c      	ldr	r4, [r5, #4]
 800add6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0ef      	beq.n	800adbe <_fflush_r+0xa>
 800adde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade0:	07d0      	lsls	r0, r2, #31
 800ade2:	d404      	bmi.n	800adee <_fflush_r+0x3a>
 800ade4:	0599      	lsls	r1, r3, #22
 800ade6:	d402      	bmi.n	800adee <_fflush_r+0x3a>
 800ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adea:	f000 f915 	bl	800b018 <__retarget_lock_acquire_recursive>
 800adee:	4628      	mov	r0, r5
 800adf0:	4621      	mov	r1, r4
 800adf2:	f7ff ff5d 	bl	800acb0 <__sflush_r>
 800adf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adf8:	4605      	mov	r5, r0
 800adfa:	07da      	lsls	r2, r3, #31
 800adfc:	d4e0      	bmi.n	800adc0 <_fflush_r+0xc>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	059b      	lsls	r3, r3, #22
 800ae02:	d4dd      	bmi.n	800adc0 <_fflush_r+0xc>
 800ae04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae06:	f000 f908 	bl	800b01a <__retarget_lock_release_recursive>
 800ae0a:	e7d9      	b.n	800adc0 <_fflush_r+0xc>
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <_fflush_r+0x70>)
 800ae0e:	429c      	cmp	r4, r3
 800ae10:	d101      	bne.n	800ae16 <_fflush_r+0x62>
 800ae12:	68ac      	ldr	r4, [r5, #8]
 800ae14:	e7df      	b.n	800add6 <_fflush_r+0x22>
 800ae16:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <_fflush_r+0x74>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	68ec      	ldreq	r4, [r5, #12]
 800ae1e:	e7da      	b.n	800add6 <_fflush_r+0x22>
 800ae20:	0800b5e4 	.word	0x0800b5e4
 800ae24:	0800b604 	.word	0x0800b604
 800ae28:	0800b5c4 	.word	0x0800b5c4

0800ae2c <std>:
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	4604      	mov	r4, r0
 800ae32:	e9c0 3300 	strd	r3, r3, [r0]
 800ae36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3a:	6083      	str	r3, [r0, #8]
 800ae3c:	8181      	strh	r1, [r0, #12]
 800ae3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae40:	81c2      	strh	r2, [r0, #14]
 800ae42:	6183      	str	r3, [r0, #24]
 800ae44:	4619      	mov	r1, r3
 800ae46:	2208      	movs	r2, #8
 800ae48:	305c      	adds	r0, #92	; 0x5c
 800ae4a:	f7fe fb1f 	bl	800948c <memset>
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <std+0x38>)
 800ae50:	6224      	str	r4, [r4, #32]
 800ae52:	6263      	str	r3, [r4, #36]	; 0x24
 800ae54:	4b04      	ldr	r3, [pc, #16]	; (800ae68 <std+0x3c>)
 800ae56:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <std+0x40>)
 800ae5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5c:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <std+0x44>)
 800ae5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	080094f1 	.word	0x080094f1
 800ae68:	08009517 	.word	0x08009517
 800ae6c:	0800954f 	.word	0x0800954f
 800ae70:	08009573 	.word	0x08009573

0800ae74 <_cleanup_r>:
 800ae74:	4901      	ldr	r1, [pc, #4]	; (800ae7c <_cleanup_r+0x8>)
 800ae76:	f000 b8af 	b.w	800afd8 <_fwalk_reent>
 800ae7a:	bf00      	nop
 800ae7c:	0800adb5 	.word	0x0800adb5

0800ae80 <__sfmoreglue>:
 800ae80:	2268      	movs	r2, #104	; 0x68
 800ae82:	b570      	push	{r4, r5, r6, lr}
 800ae84:	1e4d      	subs	r5, r1, #1
 800ae86:	4355      	muls	r5, r2
 800ae88:	460e      	mov	r6, r1
 800ae8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae8e:	f7fe fcdf 	bl	8009850 <_malloc_r>
 800ae92:	4604      	mov	r4, r0
 800ae94:	b140      	cbz	r0, 800aea8 <__sfmoreglue+0x28>
 800ae96:	2100      	movs	r1, #0
 800ae98:	e9c0 1600 	strd	r1, r6, [r0]
 800ae9c:	300c      	adds	r0, #12
 800ae9e:	60a0      	str	r0, [r4, #8]
 800aea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea4:	f7fe faf2 	bl	800948c <memset>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}

0800aeac <__sfp_lock_acquire>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__sfp_lock_acquire+0x8>)
 800aeae:	f000 b8b3 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	2000153d 	.word	0x2000153d

0800aeb8 <__sfp_lock_release>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__sfp_lock_release+0x8>)
 800aeba:	f000 b8ae 	b.w	800b01a <__retarget_lock_release_recursive>
 800aebe:	bf00      	nop
 800aec0:	2000153d 	.word	0x2000153d

0800aec4 <__sinit_lock_acquire>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__sinit_lock_acquire+0x8>)
 800aec6:	f000 b8a7 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	2000153e 	.word	0x2000153e

0800aed0 <__sinit_lock_release>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sinit_lock_release+0x8>)
 800aed2:	f000 b8a2 	b.w	800b01a <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	2000153e 	.word	0x2000153e

0800aedc <__sinit>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	f7ff fff0 	bl	800aec4 <__sinit_lock_acquire>
 800aee4:	69a3      	ldr	r3, [r4, #24]
 800aee6:	b11b      	cbz	r3, 800aef0 <__sinit+0x14>
 800aee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeec:	f7ff bff0 	b.w	800aed0 <__sinit_lock_release>
 800aef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef4:	6523      	str	r3, [r4, #80]	; 0x50
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <__sinit+0x68>)
 800aef8:	4a13      	ldr	r2, [pc, #76]	; (800af48 <__sinit+0x6c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aefe:	42a3      	cmp	r3, r4
 800af00:	bf08      	it	eq
 800af02:	2301      	moveq	r3, #1
 800af04:	4620      	mov	r0, r4
 800af06:	bf08      	it	eq
 800af08:	61a3      	streq	r3, [r4, #24]
 800af0a:	f000 f81f 	bl	800af4c <__sfp>
 800af0e:	6060      	str	r0, [r4, #4]
 800af10:	4620      	mov	r0, r4
 800af12:	f000 f81b 	bl	800af4c <__sfp>
 800af16:	60a0      	str	r0, [r4, #8]
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 f817 	bl	800af4c <__sfp>
 800af1e:	2200      	movs	r2, #0
 800af20:	2104      	movs	r1, #4
 800af22:	60e0      	str	r0, [r4, #12]
 800af24:	6860      	ldr	r0, [r4, #4]
 800af26:	f7ff ff81 	bl	800ae2c <std>
 800af2a:	2201      	movs	r2, #1
 800af2c:	2109      	movs	r1, #9
 800af2e:	68a0      	ldr	r0, [r4, #8]
 800af30:	f7ff ff7c 	bl	800ae2c <std>
 800af34:	2202      	movs	r2, #2
 800af36:	2112      	movs	r1, #18
 800af38:	68e0      	ldr	r0, [r4, #12]
 800af3a:	f7ff ff77 	bl	800ae2c <std>
 800af3e:	2301      	movs	r3, #1
 800af40:	61a3      	str	r3, [r4, #24]
 800af42:	e7d1      	b.n	800aee8 <__sinit+0xc>
 800af44:	0800b3c0 	.word	0x0800b3c0
 800af48:	0800ae75 	.word	0x0800ae75

0800af4c <__sfp>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	4607      	mov	r7, r0
 800af50:	f7ff ffac 	bl	800aeac <__sfp_lock_acquire>
 800af54:	4b1e      	ldr	r3, [pc, #120]	; (800afd0 <__sfp+0x84>)
 800af56:	681e      	ldr	r6, [r3, #0]
 800af58:	69b3      	ldr	r3, [r6, #24]
 800af5a:	b913      	cbnz	r3, 800af62 <__sfp+0x16>
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff ffbd 	bl	800aedc <__sinit>
 800af62:	3648      	adds	r6, #72	; 0x48
 800af64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af68:	3b01      	subs	r3, #1
 800af6a:	d503      	bpl.n	800af74 <__sfp+0x28>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	b30b      	cbz	r3, 800afb4 <__sfp+0x68>
 800af70:	6836      	ldr	r6, [r6, #0]
 800af72:	e7f7      	b.n	800af64 <__sfp+0x18>
 800af74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af78:	b9d5      	cbnz	r5, 800afb0 <__sfp+0x64>
 800af7a:	4b16      	ldr	r3, [pc, #88]	; (800afd4 <__sfp+0x88>)
 800af7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af80:	60e3      	str	r3, [r4, #12]
 800af82:	6665      	str	r5, [r4, #100]	; 0x64
 800af84:	f000 f847 	bl	800b016 <__retarget_lock_init_recursive>
 800af88:	f7ff ff96 	bl	800aeb8 <__sfp_lock_release>
 800af8c:	2208      	movs	r2, #8
 800af8e:	4629      	mov	r1, r5
 800af90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af98:	6025      	str	r5, [r4, #0]
 800af9a:	61a5      	str	r5, [r4, #24]
 800af9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa0:	f7fe fa74 	bl	800948c <memset>
 800afa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afac:	4620      	mov	r0, r4
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb0:	3468      	adds	r4, #104	; 0x68
 800afb2:	e7d9      	b.n	800af68 <__sfp+0x1c>
 800afb4:	2104      	movs	r1, #4
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff ff62 	bl	800ae80 <__sfmoreglue>
 800afbc:	4604      	mov	r4, r0
 800afbe:	6030      	str	r0, [r6, #0]
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1d5      	bne.n	800af70 <__sfp+0x24>
 800afc4:	f7ff ff78 	bl	800aeb8 <__sfp_lock_release>
 800afc8:	230c      	movs	r3, #12
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	e7ee      	b.n	800afac <__sfp+0x60>
 800afce:	bf00      	nop
 800afd0:	0800b3c0 	.word	0x0800b3c0
 800afd4:	ffff0001 	.word	0xffff0001

0800afd8 <_fwalk_reent>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4606      	mov	r6, r0
 800afde:	4688      	mov	r8, r1
 800afe0:	2700      	movs	r7, #0
 800afe2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afea:	f1b9 0901 	subs.w	r9, r9, #1
 800afee:	d505      	bpl.n	800affc <_fwalk_reent+0x24>
 800aff0:	6824      	ldr	r4, [r4, #0]
 800aff2:	2c00      	cmp	r4, #0
 800aff4:	d1f7      	bne.n	800afe6 <_fwalk_reent+0xe>
 800aff6:	4638      	mov	r0, r7
 800aff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d907      	bls.n	800b012 <_fwalk_reent+0x3a>
 800b002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b006:	3301      	adds	r3, #1
 800b008:	d003      	beq.n	800b012 <_fwalk_reent+0x3a>
 800b00a:	4629      	mov	r1, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	47c0      	blx	r8
 800b010:	4307      	orrs	r7, r0
 800b012:	3568      	adds	r5, #104	; 0x68
 800b014:	e7e9      	b.n	800afea <_fwalk_reent+0x12>

0800b016 <__retarget_lock_init_recursive>:
 800b016:	4770      	bx	lr

0800b018 <__retarget_lock_acquire_recursive>:
 800b018:	4770      	bx	lr

0800b01a <__retarget_lock_release_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <__swhatbuf_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	4614      	mov	r4, r2
 800b026:	2900      	cmp	r1, #0
 800b028:	461d      	mov	r5, r3
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	da08      	bge.n	800b040 <__swhatbuf_r+0x24>
 800b02e:	2200      	movs	r2, #0
 800b030:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	061a      	lsls	r2, r3, #24
 800b038:	d410      	bmi.n	800b05c <__swhatbuf_r+0x40>
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	e00e      	b.n	800b05e <__swhatbuf_r+0x42>
 800b040:	466a      	mov	r2, sp
 800b042:	f000 f8f9 	bl	800b238 <_fstat_r>
 800b046:	2800      	cmp	r0, #0
 800b048:	dbf1      	blt.n	800b02e <__swhatbuf_r+0x12>
 800b04a:	9a01      	ldr	r2, [sp, #4]
 800b04c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b054:	425a      	negs	r2, r3
 800b056:	415a      	adcs	r2, r3
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	e7ee      	b.n	800b03a <__swhatbuf_r+0x1e>
 800b05c:	2340      	movs	r3, #64	; 0x40
 800b05e:	2000      	movs	r0, #0
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	b016      	add	sp, #88	; 0x58
 800b064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b068 <__smakebuf_r>:
 800b068:	898b      	ldrh	r3, [r1, #12]
 800b06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b06c:	079d      	lsls	r5, r3, #30
 800b06e:	4606      	mov	r6, r0
 800b070:	460c      	mov	r4, r1
 800b072:	d507      	bpl.n	800b084 <__smakebuf_r+0x1c>
 800b074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	2301      	movs	r3, #1
 800b07e:	6163      	str	r3, [r4, #20]
 800b080:	b002      	add	sp, #8
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	466a      	mov	r2, sp
 800b086:	ab01      	add	r3, sp, #4
 800b088:	f7ff ffc8 	bl	800b01c <__swhatbuf_r>
 800b08c:	9900      	ldr	r1, [sp, #0]
 800b08e:	4605      	mov	r5, r0
 800b090:	4630      	mov	r0, r6
 800b092:	f7fe fbdd 	bl	8009850 <_malloc_r>
 800b096:	b948      	cbnz	r0, 800b0ac <__smakebuf_r+0x44>
 800b098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09c:	059a      	lsls	r2, r3, #22
 800b09e:	d4ef      	bmi.n	800b080 <__smakebuf_r+0x18>
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	f043 0302 	orr.w	r3, r3, #2
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e7e3      	b.n	800b074 <__smakebuf_r+0xc>
 800b0ac:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <__smakebuf_r+0x7c>)
 800b0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	6020      	str	r0, [r4, #0]
 800b0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	9b00      	ldr	r3, [sp, #0]
 800b0bc:	6120      	str	r0, [r4, #16]
 800b0be:	6163      	str	r3, [r4, #20]
 800b0c0:	9b01      	ldr	r3, [sp, #4]
 800b0c2:	b15b      	cbz	r3, 800b0dc <__smakebuf_r+0x74>
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ca:	f000 f8c7 	bl	800b25c <_isatty_r>
 800b0ce:	b128      	cbz	r0, 800b0dc <__smakebuf_r+0x74>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	f043 0301 	orr.w	r3, r3, #1
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	89a0      	ldrh	r0, [r4, #12]
 800b0de:	4305      	orrs	r5, r0
 800b0e0:	81a5      	strh	r5, [r4, #12]
 800b0e2:	e7cd      	b.n	800b080 <__smakebuf_r+0x18>
 800b0e4:	0800ae75 	.word	0x0800ae75

0800b0e8 <memchr>:
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	b2c9      	uxtb	r1, r1
 800b0ee:	4402      	add	r2, r0
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	d101      	bne.n	800b0fa <memchr+0x12>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e003      	b.n	800b102 <memchr+0x1a>
 800b0fa:	7804      	ldrb	r4, [r0, #0]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	428c      	cmp	r4, r1
 800b100:	d1f6      	bne.n	800b0f0 <memchr+0x8>
 800b102:	bd10      	pop	{r4, pc}

0800b104 <memmove>:
 800b104:	4288      	cmp	r0, r1
 800b106:	b510      	push	{r4, lr}
 800b108:	eb01 0402 	add.w	r4, r1, r2
 800b10c:	d902      	bls.n	800b114 <memmove+0x10>
 800b10e:	4284      	cmp	r4, r0
 800b110:	4623      	mov	r3, r4
 800b112:	d807      	bhi.n	800b124 <memmove+0x20>
 800b114:	1e43      	subs	r3, r0, #1
 800b116:	42a1      	cmp	r1, r4
 800b118:	d008      	beq.n	800b12c <memmove+0x28>
 800b11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b122:	e7f8      	b.n	800b116 <memmove+0x12>
 800b124:	4601      	mov	r1, r0
 800b126:	4402      	add	r2, r0
 800b128:	428a      	cmp	r2, r1
 800b12a:	d100      	bne.n	800b12e <memmove+0x2a>
 800b12c:	bd10      	pop	{r4, pc}
 800b12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b136:	e7f7      	b.n	800b128 <memmove+0x24>

0800b138 <__malloc_lock>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__malloc_lock+0x8>)
 800b13a:	f7ff bf6d 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800b13e:	bf00      	nop
 800b140:	2000153c 	.word	0x2000153c

0800b144 <__malloc_unlock>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__malloc_unlock+0x8>)
 800b146:	f7ff bf68 	b.w	800b01a <__retarget_lock_release_recursive>
 800b14a:	bf00      	nop
 800b14c:	2000153c 	.word	0x2000153c

0800b150 <_realloc_r>:
 800b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b154:	4680      	mov	r8, r0
 800b156:	4614      	mov	r4, r2
 800b158:	460e      	mov	r6, r1
 800b15a:	b921      	cbnz	r1, 800b166 <_realloc_r+0x16>
 800b15c:	4611      	mov	r1, r2
 800b15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	f7fe bb75 	b.w	8009850 <_malloc_r>
 800b166:	b92a      	cbnz	r2, 800b174 <_realloc_r+0x24>
 800b168:	f7fe fb0a 	bl	8009780 <_free_r>
 800b16c:	4625      	mov	r5, r4
 800b16e:	4628      	mov	r0, r5
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	f000 f882 	bl	800b27c <_malloc_usable_size_r>
 800b178:	4284      	cmp	r4, r0
 800b17a:	4607      	mov	r7, r0
 800b17c:	d802      	bhi.n	800b184 <_realloc_r+0x34>
 800b17e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b182:	d812      	bhi.n	800b1aa <_realloc_r+0x5a>
 800b184:	4621      	mov	r1, r4
 800b186:	4640      	mov	r0, r8
 800b188:	f7fe fb62 	bl	8009850 <_malloc_r>
 800b18c:	4605      	mov	r5, r0
 800b18e:	2800      	cmp	r0, #0
 800b190:	d0ed      	beq.n	800b16e <_realloc_r+0x1e>
 800b192:	42bc      	cmp	r4, r7
 800b194:	4622      	mov	r2, r4
 800b196:	4631      	mov	r1, r6
 800b198:	bf28      	it	cs
 800b19a:	463a      	movcs	r2, r7
 800b19c:	f7fe f968 	bl	8009470 <memcpy>
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f7fe faec 	bl	8009780 <_free_r>
 800b1a8:	e7e1      	b.n	800b16e <_realloc_r+0x1e>
 800b1aa:	4635      	mov	r5, r6
 800b1ac:	e7df      	b.n	800b16e <_realloc_r+0x1e>

0800b1ae <_raise_r>:
 800b1ae:	291f      	cmp	r1, #31
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	d904      	bls.n	800b1c2 <_raise_r+0x14>
 800b1b8:	2316      	movs	r3, #22
 800b1ba:	6003      	str	r3, [r0, #0]
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1c4:	b112      	cbz	r2, 800b1cc <_raise_r+0x1e>
 800b1c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1ca:	b94b      	cbnz	r3, 800b1e0 <_raise_r+0x32>
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 f831 	bl	800b234 <_getpid_r>
 800b1d2:	462a      	mov	r2, r5
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1dc:	f000 b818 	b.w	800b210 <_kill_r>
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d00a      	beq.n	800b1fa <_raise_r+0x4c>
 800b1e4:	1c59      	adds	r1, r3, #1
 800b1e6:	d103      	bne.n	800b1f0 <_raise_r+0x42>
 800b1e8:	2316      	movs	r3, #22
 800b1ea:	6003      	str	r3, [r0, #0]
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	e7e7      	b.n	800b1c0 <_raise_r+0x12>
 800b1f0:	2400      	movs	r4, #0
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1f8:	4798      	blx	r3
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	e7e0      	b.n	800b1c0 <_raise_r+0x12>
	...

0800b200 <raise>:
 800b200:	4b02      	ldr	r3, [pc, #8]	; (800b20c <raise+0xc>)
 800b202:	4601      	mov	r1, r0
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	f7ff bfd2 	b.w	800b1ae <_raise_r>
 800b20a:	bf00      	nop
 800b20c:	20000184 	.word	0x20000184

0800b210 <_kill_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	2300      	movs	r3, #0
 800b214:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_kill_r+0x20>)
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	4611      	mov	r1, r2
 800b21c:	602b      	str	r3, [r5, #0]
 800b21e:	f7f5 fd38 	bl	8000c92 <_kill>
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	d102      	bne.n	800b22c <_kill_r+0x1c>
 800b226:	682b      	ldr	r3, [r5, #0]
 800b228:	b103      	cbz	r3, 800b22c <_kill_r+0x1c>
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	bd38      	pop	{r3, r4, r5, pc}
 800b22e:	bf00      	nop
 800b230:	20001538 	.word	0x20001538

0800b234 <_getpid_r>:
 800b234:	f7f5 bd26 	b.w	8000c84 <_getpid>

0800b238 <_fstat_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	2300      	movs	r3, #0
 800b23c:	4d06      	ldr	r5, [pc, #24]	; (800b258 <_fstat_r+0x20>)
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	4611      	mov	r1, r2
 800b244:	602b      	str	r3, [r5, #0]
 800b246:	f7f5 fd82 	bl	8000d4e <_fstat>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d102      	bne.n	800b254 <_fstat_r+0x1c>
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	b103      	cbz	r3, 800b254 <_fstat_r+0x1c>
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	bf00      	nop
 800b258:	20001538 	.word	0x20001538

0800b25c <_isatty_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	2300      	movs	r3, #0
 800b260:	4d05      	ldr	r5, [pc, #20]	; (800b278 <_isatty_r+0x1c>)
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f5 fd80 	bl	8000d6c <_isatty>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_isatty_r+0x1a>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_isatty_r+0x1a>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20001538 	.word	0x20001538

0800b27c <_malloc_usable_size_r>:
 800b27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b280:	1f18      	subs	r0, r3, #4
 800b282:	2b00      	cmp	r3, #0
 800b284:	bfbc      	itt	lt
 800b286:	580b      	ldrlt	r3, [r1, r0]
 800b288:	18c0      	addlt	r0, r0, r3
 800b28a:	4770      	bx	lr

0800b28c <_init>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	bf00      	nop
 800b290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b292:	bc08      	pop	{r3}
 800b294:	469e      	mov	lr, r3
 800b296:	4770      	bx	lr

0800b298 <_fini>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr
